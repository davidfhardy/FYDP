
osc_spi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f64  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  08004024  08004024  00014024  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040f4  080040f4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080040f4  080040f4  000140f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080040fc  080040fc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080040fc  080040fc  000140fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004100  08004100  00014100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004104  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  20000070  08004174  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000180  08004174  00020180  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a1fb  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001725  00000000  00000000  0002a293  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008a0  00000000  00000000  0002b9b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000808  00000000  00000000  0002c258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014976  00000000  00000000  0002ca60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ac41  00000000  00000000  000413d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007f08b  00000000  00000000  0004c017  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cb0a2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002208  00000000  00000000  000cb0f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800400c 	.word	0x0800400c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	0800400c 	.word	0x0800400c

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uldivmod>:
 8000234:	2b00      	cmp	r3, #0
 8000236:	d111      	bne.n	800025c <__aeabi_uldivmod+0x28>
 8000238:	2a00      	cmp	r2, #0
 800023a:	d10f      	bne.n	800025c <__aeabi_uldivmod+0x28>
 800023c:	2900      	cmp	r1, #0
 800023e:	d100      	bne.n	8000242 <__aeabi_uldivmod+0xe>
 8000240:	2800      	cmp	r0, #0
 8000242:	d002      	beq.n	800024a <__aeabi_uldivmod+0x16>
 8000244:	2100      	movs	r1, #0
 8000246:	43c9      	mvns	r1, r1
 8000248:	0008      	movs	r0, r1
 800024a:	b407      	push	{r0, r1, r2}
 800024c:	4802      	ldr	r0, [pc, #8]	; (8000258 <__aeabi_uldivmod+0x24>)
 800024e:	a102      	add	r1, pc, #8	; (adr r1, 8000258 <__aeabi_uldivmod+0x24>)
 8000250:	1840      	adds	r0, r0, r1
 8000252:	9002      	str	r0, [sp, #8]
 8000254:	bd03      	pop	{r0, r1, pc}
 8000256:	46c0      	nop			; (mov r8, r8)
 8000258:	ffffffd9 	.word	0xffffffd9
 800025c:	b403      	push	{r0, r1}
 800025e:	4668      	mov	r0, sp
 8000260:	b501      	push	{r0, lr}
 8000262:	9802      	ldr	r0, [sp, #8]
 8000264:	f000 f834 	bl	80002d0 <__udivmoddi4>
 8000268:	9b01      	ldr	r3, [sp, #4]
 800026a:	469e      	mov	lr, r3
 800026c:	b002      	add	sp, #8
 800026e:	bc0c      	pop	{r2, r3}
 8000270:	4770      	bx	lr
 8000272:	46c0      	nop			; (mov r8, r8)

08000274 <__aeabi_lmul>:
 8000274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000276:	46ce      	mov	lr, r9
 8000278:	4647      	mov	r7, r8
 800027a:	b580      	push	{r7, lr}
 800027c:	0007      	movs	r7, r0
 800027e:	4699      	mov	r9, r3
 8000280:	0c3b      	lsrs	r3, r7, #16
 8000282:	469c      	mov	ip, r3
 8000284:	0413      	lsls	r3, r2, #16
 8000286:	0c1b      	lsrs	r3, r3, #16
 8000288:	001d      	movs	r5, r3
 800028a:	000e      	movs	r6, r1
 800028c:	4661      	mov	r1, ip
 800028e:	0400      	lsls	r0, r0, #16
 8000290:	0c14      	lsrs	r4, r2, #16
 8000292:	0c00      	lsrs	r0, r0, #16
 8000294:	4345      	muls	r5, r0
 8000296:	434b      	muls	r3, r1
 8000298:	4360      	muls	r0, r4
 800029a:	4361      	muls	r1, r4
 800029c:	18c0      	adds	r0, r0, r3
 800029e:	0c2c      	lsrs	r4, r5, #16
 80002a0:	1820      	adds	r0, r4, r0
 80002a2:	468c      	mov	ip, r1
 80002a4:	4283      	cmp	r3, r0
 80002a6:	d903      	bls.n	80002b0 <__aeabi_lmul+0x3c>
 80002a8:	2380      	movs	r3, #128	; 0x80
 80002aa:	025b      	lsls	r3, r3, #9
 80002ac:	4698      	mov	r8, r3
 80002ae:	44c4      	add	ip, r8
 80002b0:	4649      	mov	r1, r9
 80002b2:	4379      	muls	r1, r7
 80002b4:	4372      	muls	r2, r6
 80002b6:	0c03      	lsrs	r3, r0, #16
 80002b8:	4463      	add	r3, ip
 80002ba:	042d      	lsls	r5, r5, #16
 80002bc:	0c2d      	lsrs	r5, r5, #16
 80002be:	18c9      	adds	r1, r1, r3
 80002c0:	0400      	lsls	r0, r0, #16
 80002c2:	1940      	adds	r0, r0, r5
 80002c4:	1889      	adds	r1, r1, r2
 80002c6:	bcc0      	pop	{r6, r7}
 80002c8:	46b9      	mov	r9, r7
 80002ca:	46b0      	mov	r8, r6
 80002cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ce:	46c0      	nop			; (mov r8, r8)

080002d0 <__udivmoddi4>:
 80002d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002d2:	4657      	mov	r7, sl
 80002d4:	464e      	mov	r6, r9
 80002d6:	4645      	mov	r5, r8
 80002d8:	46de      	mov	lr, fp
 80002da:	b5e0      	push	{r5, r6, r7, lr}
 80002dc:	0004      	movs	r4, r0
 80002de:	000d      	movs	r5, r1
 80002e0:	4692      	mov	sl, r2
 80002e2:	4699      	mov	r9, r3
 80002e4:	b083      	sub	sp, #12
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d830      	bhi.n	800034c <__udivmoddi4+0x7c>
 80002ea:	d02d      	beq.n	8000348 <__udivmoddi4+0x78>
 80002ec:	4649      	mov	r1, r9
 80002ee:	4650      	mov	r0, sl
 80002f0:	f000 f8ba 	bl	8000468 <__clzdi2>
 80002f4:	0029      	movs	r1, r5
 80002f6:	0006      	movs	r6, r0
 80002f8:	0020      	movs	r0, r4
 80002fa:	f000 f8b5 	bl	8000468 <__clzdi2>
 80002fe:	1a33      	subs	r3, r6, r0
 8000300:	4698      	mov	r8, r3
 8000302:	3b20      	subs	r3, #32
 8000304:	469b      	mov	fp, r3
 8000306:	d433      	bmi.n	8000370 <__udivmoddi4+0xa0>
 8000308:	465a      	mov	r2, fp
 800030a:	4653      	mov	r3, sl
 800030c:	4093      	lsls	r3, r2
 800030e:	4642      	mov	r2, r8
 8000310:	001f      	movs	r7, r3
 8000312:	4653      	mov	r3, sl
 8000314:	4093      	lsls	r3, r2
 8000316:	001e      	movs	r6, r3
 8000318:	42af      	cmp	r7, r5
 800031a:	d83a      	bhi.n	8000392 <__udivmoddi4+0xc2>
 800031c:	42af      	cmp	r7, r5
 800031e:	d100      	bne.n	8000322 <__udivmoddi4+0x52>
 8000320:	e078      	b.n	8000414 <__udivmoddi4+0x144>
 8000322:	465b      	mov	r3, fp
 8000324:	1ba4      	subs	r4, r4, r6
 8000326:	41bd      	sbcs	r5, r7
 8000328:	2b00      	cmp	r3, #0
 800032a:	da00      	bge.n	800032e <__udivmoddi4+0x5e>
 800032c:	e075      	b.n	800041a <__udivmoddi4+0x14a>
 800032e:	2200      	movs	r2, #0
 8000330:	2300      	movs	r3, #0
 8000332:	9200      	str	r2, [sp, #0]
 8000334:	9301      	str	r3, [sp, #4]
 8000336:	2301      	movs	r3, #1
 8000338:	465a      	mov	r2, fp
 800033a:	4093      	lsls	r3, r2
 800033c:	9301      	str	r3, [sp, #4]
 800033e:	2301      	movs	r3, #1
 8000340:	4642      	mov	r2, r8
 8000342:	4093      	lsls	r3, r2
 8000344:	9300      	str	r3, [sp, #0]
 8000346:	e028      	b.n	800039a <__udivmoddi4+0xca>
 8000348:	4282      	cmp	r2, r0
 800034a:	d9cf      	bls.n	80002ec <__udivmoddi4+0x1c>
 800034c:	2200      	movs	r2, #0
 800034e:	2300      	movs	r3, #0
 8000350:	9200      	str	r2, [sp, #0]
 8000352:	9301      	str	r3, [sp, #4]
 8000354:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <__udivmoddi4+0x8e>
 800035a:	601c      	str	r4, [r3, #0]
 800035c:	605d      	str	r5, [r3, #4]
 800035e:	9800      	ldr	r0, [sp, #0]
 8000360:	9901      	ldr	r1, [sp, #4]
 8000362:	b003      	add	sp, #12
 8000364:	bcf0      	pop	{r4, r5, r6, r7}
 8000366:	46bb      	mov	fp, r7
 8000368:	46b2      	mov	sl, r6
 800036a:	46a9      	mov	r9, r5
 800036c:	46a0      	mov	r8, r4
 800036e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000370:	4642      	mov	r2, r8
 8000372:	2320      	movs	r3, #32
 8000374:	1a9b      	subs	r3, r3, r2
 8000376:	4652      	mov	r2, sl
 8000378:	40da      	lsrs	r2, r3
 800037a:	4641      	mov	r1, r8
 800037c:	0013      	movs	r3, r2
 800037e:	464a      	mov	r2, r9
 8000380:	408a      	lsls	r2, r1
 8000382:	0017      	movs	r7, r2
 8000384:	4642      	mov	r2, r8
 8000386:	431f      	orrs	r7, r3
 8000388:	4653      	mov	r3, sl
 800038a:	4093      	lsls	r3, r2
 800038c:	001e      	movs	r6, r3
 800038e:	42af      	cmp	r7, r5
 8000390:	d9c4      	bls.n	800031c <__udivmoddi4+0x4c>
 8000392:	2200      	movs	r2, #0
 8000394:	2300      	movs	r3, #0
 8000396:	9200      	str	r2, [sp, #0]
 8000398:	9301      	str	r3, [sp, #4]
 800039a:	4643      	mov	r3, r8
 800039c:	2b00      	cmp	r3, #0
 800039e:	d0d9      	beq.n	8000354 <__udivmoddi4+0x84>
 80003a0:	07fb      	lsls	r3, r7, #31
 80003a2:	0872      	lsrs	r2, r6, #1
 80003a4:	431a      	orrs	r2, r3
 80003a6:	4646      	mov	r6, r8
 80003a8:	087b      	lsrs	r3, r7, #1
 80003aa:	e00e      	b.n	80003ca <__udivmoddi4+0xfa>
 80003ac:	42ab      	cmp	r3, r5
 80003ae:	d101      	bne.n	80003b4 <__udivmoddi4+0xe4>
 80003b0:	42a2      	cmp	r2, r4
 80003b2:	d80c      	bhi.n	80003ce <__udivmoddi4+0xfe>
 80003b4:	1aa4      	subs	r4, r4, r2
 80003b6:	419d      	sbcs	r5, r3
 80003b8:	2001      	movs	r0, #1
 80003ba:	1924      	adds	r4, r4, r4
 80003bc:	416d      	adcs	r5, r5
 80003be:	2100      	movs	r1, #0
 80003c0:	3e01      	subs	r6, #1
 80003c2:	1824      	adds	r4, r4, r0
 80003c4:	414d      	adcs	r5, r1
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	d006      	beq.n	80003d8 <__udivmoddi4+0x108>
 80003ca:	42ab      	cmp	r3, r5
 80003cc:	d9ee      	bls.n	80003ac <__udivmoddi4+0xdc>
 80003ce:	3e01      	subs	r6, #1
 80003d0:	1924      	adds	r4, r4, r4
 80003d2:	416d      	adcs	r5, r5
 80003d4:	2e00      	cmp	r6, #0
 80003d6:	d1f8      	bne.n	80003ca <__udivmoddi4+0xfa>
 80003d8:	9800      	ldr	r0, [sp, #0]
 80003da:	9901      	ldr	r1, [sp, #4]
 80003dc:	465b      	mov	r3, fp
 80003de:	1900      	adds	r0, r0, r4
 80003e0:	4169      	adcs	r1, r5
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	db24      	blt.n	8000430 <__udivmoddi4+0x160>
 80003e6:	002b      	movs	r3, r5
 80003e8:	465a      	mov	r2, fp
 80003ea:	4644      	mov	r4, r8
 80003ec:	40d3      	lsrs	r3, r2
 80003ee:	002a      	movs	r2, r5
 80003f0:	40e2      	lsrs	r2, r4
 80003f2:	001c      	movs	r4, r3
 80003f4:	465b      	mov	r3, fp
 80003f6:	0015      	movs	r5, r2
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	db2a      	blt.n	8000452 <__udivmoddi4+0x182>
 80003fc:	0026      	movs	r6, r4
 80003fe:	409e      	lsls	r6, r3
 8000400:	0033      	movs	r3, r6
 8000402:	0026      	movs	r6, r4
 8000404:	4647      	mov	r7, r8
 8000406:	40be      	lsls	r6, r7
 8000408:	0032      	movs	r2, r6
 800040a:	1a80      	subs	r0, r0, r2
 800040c:	4199      	sbcs	r1, r3
 800040e:	9000      	str	r0, [sp, #0]
 8000410:	9101      	str	r1, [sp, #4]
 8000412:	e79f      	b.n	8000354 <__udivmoddi4+0x84>
 8000414:	42a3      	cmp	r3, r4
 8000416:	d8bc      	bhi.n	8000392 <__udivmoddi4+0xc2>
 8000418:	e783      	b.n	8000322 <__udivmoddi4+0x52>
 800041a:	4642      	mov	r2, r8
 800041c:	2320      	movs	r3, #32
 800041e:	2100      	movs	r1, #0
 8000420:	1a9b      	subs	r3, r3, r2
 8000422:	2200      	movs	r2, #0
 8000424:	9100      	str	r1, [sp, #0]
 8000426:	9201      	str	r2, [sp, #4]
 8000428:	2201      	movs	r2, #1
 800042a:	40da      	lsrs	r2, r3
 800042c:	9201      	str	r2, [sp, #4]
 800042e:	e786      	b.n	800033e <__udivmoddi4+0x6e>
 8000430:	4642      	mov	r2, r8
 8000432:	2320      	movs	r3, #32
 8000434:	1a9b      	subs	r3, r3, r2
 8000436:	002a      	movs	r2, r5
 8000438:	4646      	mov	r6, r8
 800043a:	409a      	lsls	r2, r3
 800043c:	0023      	movs	r3, r4
 800043e:	40f3      	lsrs	r3, r6
 8000440:	4644      	mov	r4, r8
 8000442:	4313      	orrs	r3, r2
 8000444:	002a      	movs	r2, r5
 8000446:	40e2      	lsrs	r2, r4
 8000448:	001c      	movs	r4, r3
 800044a:	465b      	mov	r3, fp
 800044c:	0015      	movs	r5, r2
 800044e:	2b00      	cmp	r3, #0
 8000450:	dad4      	bge.n	80003fc <__udivmoddi4+0x12c>
 8000452:	4642      	mov	r2, r8
 8000454:	002f      	movs	r7, r5
 8000456:	2320      	movs	r3, #32
 8000458:	0026      	movs	r6, r4
 800045a:	4097      	lsls	r7, r2
 800045c:	1a9b      	subs	r3, r3, r2
 800045e:	40de      	lsrs	r6, r3
 8000460:	003b      	movs	r3, r7
 8000462:	4333      	orrs	r3, r6
 8000464:	e7cd      	b.n	8000402 <__udivmoddi4+0x132>
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__clzdi2>:
 8000468:	b510      	push	{r4, lr}
 800046a:	2900      	cmp	r1, #0
 800046c:	d103      	bne.n	8000476 <__clzdi2+0xe>
 800046e:	f000 f807 	bl	8000480 <__clzsi2>
 8000472:	3020      	adds	r0, #32
 8000474:	e002      	b.n	800047c <__clzdi2+0x14>
 8000476:	0008      	movs	r0, r1
 8000478:	f000 f802 	bl	8000480 <__clzsi2>
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__clzsi2>:
 8000480:	211c      	movs	r1, #28
 8000482:	2301      	movs	r3, #1
 8000484:	041b      	lsls	r3, r3, #16
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0xe>
 800048a:	0c00      	lsrs	r0, r0, #16
 800048c:	3910      	subs	r1, #16
 800048e:	0a1b      	lsrs	r3, r3, #8
 8000490:	4298      	cmp	r0, r3
 8000492:	d301      	bcc.n	8000498 <__clzsi2+0x18>
 8000494:	0a00      	lsrs	r0, r0, #8
 8000496:	3908      	subs	r1, #8
 8000498:	091b      	lsrs	r3, r3, #4
 800049a:	4298      	cmp	r0, r3
 800049c:	d301      	bcc.n	80004a2 <__clzsi2+0x22>
 800049e:	0900      	lsrs	r0, r0, #4
 80004a0:	3904      	subs	r1, #4
 80004a2:	a202      	add	r2, pc, #8	; (adr r2, 80004ac <__clzsi2+0x2c>)
 80004a4:	5c10      	ldrb	r0, [r2, r0]
 80004a6:	1840      	adds	r0, r0, r1
 80004a8:	4770      	bx	lr
 80004aa:	46c0      	nop			; (mov r8, r8)
 80004ac:	02020304 	.word	0x02020304
 80004b0:	01010101 	.word	0x01010101
	...

080004bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004bc:	b590      	push	{r4, r7, lr}
 80004be:	b095      	sub	sp, #84	; 0x54
 80004c0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c2:	f000 fb37 	bl	8000b34 <HAL_Init>

  /* USER CODE BEGIN Init */
  char uart_buf[50];
  int uart_buf_len;
  char spi_buf[20];
  for(int i=0; i<20; i++)
 80004c6:	2300      	movs	r3, #0
 80004c8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80004ca:	e007      	b.n	80004dc <main+0x20>
  {
	  spi_buf[i] = 'a';
 80004cc:	003a      	movs	r2, r7
 80004ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80004d0:	18d3      	adds	r3, r2, r3
 80004d2:	2261      	movs	r2, #97	; 0x61
 80004d4:	701a      	strb	r2, [r3, #0]
  for(int i=0; i<20; i++)
 80004d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80004d8:	3301      	adds	r3, #1
 80004da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80004dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80004de:	2b13      	cmp	r3, #19
 80004e0:	ddf4      	ble.n	80004cc <main+0x10>
  }
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e2:	f000 f8c3 	bl	800066c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e6:	f000 f995 	bl	8000814 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004ea:	f000 f963 	bl	80007b4 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80004ee:	f000 f929 	bl	8000744 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80004f2:	4b55      	ldr	r3, [pc, #340]	; (8000648 <main+0x18c>)
 80004f4:	2201      	movs	r2, #1
 80004f6:	2140      	movs	r1, #64	; 0x40
 80004f8:	0018      	movs	r0, r3
 80004fa:	f000 fde1 	bl	80010c0 <HAL_GPIO_WritePin>
  uart_buf_len = sprintf(uart_buf, "SPI Test\r\n");
 80004fe:	4a53      	ldr	r2, [pc, #332]	; (800064c <main+0x190>)
 8000500:	2414      	movs	r4, #20
 8000502:	193b      	adds	r3, r7, r4
 8000504:	0011      	movs	r1, r2
 8000506:	0018      	movs	r0, r3
 8000508:	f003 f916 	bl	8003738 <siprintf>
 800050c:	0003      	movs	r3, r0
 800050e:	64bb      	str	r3, [r7, #72]	; 0x48
  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
 8000510:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000512:	b29a      	uxth	r2, r3
 8000514:	1939      	adds	r1, r7, r4
 8000516:	484e      	ldr	r0, [pc, #312]	; (8000650 <main+0x194>)
 8000518:	2364      	movs	r3, #100	; 0x64
 800051a:	f002 fbd3 	bl	8002cc4 <HAL_UART_Transmit>

// read initial value
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800051e:	4b4a      	ldr	r3, [pc, #296]	; (8000648 <main+0x18c>)
 8000520:	2200      	movs	r2, #0
 8000522:	2140      	movs	r1, #64	; 0x40
 8000524:	0018      	movs	r0, r3
 8000526:	f000 fdcb 	bl	80010c0 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, (uint8_t *)&R_REG7, 1, 100);
 800052a:	494a      	ldr	r1, [pc, #296]	; (8000654 <main+0x198>)
 800052c:	484a      	ldr	r0, [pc, #296]	; (8000658 <main+0x19c>)
 800052e:	2364      	movs	r3, #100	; 0x64
 8000530:	2201      	movs	r2, #1
 8000532:	f001 fdfd 	bl	8002130 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi1, (uint8_t *)spi_buf, 1, 100);
 8000536:	0039      	movs	r1, r7
 8000538:	4847      	ldr	r0, [pc, #284]	; (8000658 <main+0x19c>)
 800053a:	2364      	movs	r3, #100	; 0x64
 800053c:	2201      	movs	r2, #1
 800053e:	f001 ff4d 	bl	80023dc <HAL_SPI_Receive>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000542:	4b41      	ldr	r3, [pc, #260]	; (8000648 <main+0x18c>)
 8000544:	2201      	movs	r2, #1
 8000546:	2140      	movs	r1, #64	; 0x40
 8000548:	0018      	movs	r0, r3
 800054a:	f000 fdb9 	bl	80010c0 <HAL_GPIO_WritePin>

  uart_buf_len = sprintf(uart_buf, "Value: 0x%02x\r\n", (unsigned int)spi_buf[0]);
 800054e:	003b      	movs	r3, r7
 8000550:	781b      	ldrb	r3, [r3, #0]
 8000552:	001a      	movs	r2, r3
 8000554:	4941      	ldr	r1, [pc, #260]	; (800065c <main+0x1a0>)
 8000556:	193b      	adds	r3, r7, r4
 8000558:	0018      	movs	r0, r3
 800055a:	f003 f8ed 	bl	8003738 <siprintf>
 800055e:	0003      	movs	r3, r0
 8000560:	64bb      	str	r3, [r7, #72]	; 0x48
  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
 8000562:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000564:	b29a      	uxth	r2, r3
 8000566:	1939      	adds	r1, r7, r4
 8000568:	4839      	ldr	r0, [pc, #228]	; (8000650 <main+0x194>)
 800056a:	2364      	movs	r3, #100	; 0x64
 800056c:	f002 fbaa 	bl	8002cc4 <HAL_UART_Transmit>
  uart_buf_len = sprintf(uart_buf, "SPI Test end\r\n");
 8000570:	4a3b      	ldr	r2, [pc, #236]	; (8000660 <main+0x1a4>)
 8000572:	193b      	adds	r3, r7, r4
 8000574:	0011      	movs	r1, r2
 8000576:	0018      	movs	r0, r3
 8000578:	f003 f8de 	bl	8003738 <siprintf>
 800057c:	0003      	movs	r3, r0
 800057e:	64bb      	str	r3, [r7, #72]	; 0x48
  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
 8000580:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000582:	b29a      	uxth	r2, r3
 8000584:	1939      	adds	r1, r7, r4
 8000586:	4832      	ldr	r0, [pc, #200]	; (8000650 <main+0x194>)
 8000588:	2364      	movs	r3, #100	; 0x64
 800058a:	f002 fb9b 	bl	8002cc4 <HAL_UART_Transmit>

  //write
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800058e:	4b2e      	ldr	r3, [pc, #184]	; (8000648 <main+0x18c>)
 8000590:	2200      	movs	r2, #0
 8000592:	2140      	movs	r1, #64	; 0x40
 8000594:	0018      	movs	r0, r3
 8000596:	f000 fd93 	bl	80010c0 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, (uint8_t *)&W_REG7, 1, 100);
 800059a:	4932      	ldr	r1, [pc, #200]	; (8000664 <main+0x1a8>)
 800059c:	482e      	ldr	r0, [pc, #184]	; (8000658 <main+0x19c>)
 800059e:	2364      	movs	r3, #100	; 0x64
 80005a0:	2201      	movs	r2, #1
 80005a2:	f001 fdc5 	bl	8002130 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi1, (uint8_t *)&VAL, 1, 100);
 80005a6:	4930      	ldr	r1, [pc, #192]	; (8000668 <main+0x1ac>)
 80005a8:	482b      	ldr	r0, [pc, #172]	; (8000658 <main+0x19c>)
 80005aa:	2364      	movs	r3, #100	; 0x64
 80005ac:	2201      	movs	r2, #1
 80005ae:	f001 ff15 	bl	80023dc <HAL_SPI_Receive>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80005b2:	4b25      	ldr	r3, [pc, #148]	; (8000648 <main+0x18c>)
 80005b4:	2201      	movs	r2, #1
 80005b6:	2140      	movs	r1, #64	; 0x40
 80005b8:	0018      	movs	r0, r3
 80005ba:	f000 fd81 	bl	80010c0 <HAL_GPIO_WritePin>


  //read changed value
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80005be:	4b22      	ldr	r3, [pc, #136]	; (8000648 <main+0x18c>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	2140      	movs	r1, #64	; 0x40
 80005c4:	0018      	movs	r0, r3
 80005c6:	f000 fd7b 	bl	80010c0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, (uint8_t *)&R_REG7, 1, 100);
 80005ca:	4922      	ldr	r1, [pc, #136]	; (8000654 <main+0x198>)
 80005cc:	4822      	ldr	r0, [pc, #136]	; (8000658 <main+0x19c>)
 80005ce:	2364      	movs	r3, #100	; 0x64
 80005d0:	2201      	movs	r2, #1
 80005d2:	f001 fdad 	bl	8002130 <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi1, (uint8_t *)spi_buf, 1, 100);
 80005d6:	0039      	movs	r1, r7
 80005d8:	481f      	ldr	r0, [pc, #124]	; (8000658 <main+0x19c>)
 80005da:	2364      	movs	r3, #100	; 0x64
 80005dc:	2201      	movs	r2, #1
 80005de:	f001 fefd 	bl	80023dc <HAL_SPI_Receive>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80005e2:	4b19      	ldr	r3, [pc, #100]	; (8000648 <main+0x18c>)
 80005e4:	2201      	movs	r2, #1
 80005e6:	2140      	movs	r1, #64	; 0x40
 80005e8:	0018      	movs	r0, r3
 80005ea:	f000 fd69 	bl	80010c0 <HAL_GPIO_WritePin>

    uart_buf_len = sprintf(uart_buf, "Value: 0x%02x\r\n", (unsigned int)spi_buf[0]);
 80005ee:	003b      	movs	r3, r7
 80005f0:	781b      	ldrb	r3, [r3, #0]
 80005f2:	001a      	movs	r2, r3
 80005f4:	4919      	ldr	r1, [pc, #100]	; (800065c <main+0x1a0>)
 80005f6:	193b      	adds	r3, r7, r4
 80005f8:	0018      	movs	r0, r3
 80005fa:	f003 f89d 	bl	8003738 <siprintf>
 80005fe:	0003      	movs	r3, r0
 8000600:	64bb      	str	r3, [r7, #72]	; 0x48
    HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
 8000602:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000604:	b29a      	uxth	r2, r3
 8000606:	1939      	adds	r1, r7, r4
 8000608:	4811      	ldr	r0, [pc, #68]	; (8000650 <main+0x194>)
 800060a:	2364      	movs	r3, #100	; 0x64
 800060c:	f002 fb5a 	bl	8002cc4 <HAL_UART_Transmit>
    uart_buf_len = sprintf(uart_buf, "SPI Test end\r\n");
 8000610:	4a13      	ldr	r2, [pc, #76]	; (8000660 <main+0x1a4>)
 8000612:	193b      	adds	r3, r7, r4
 8000614:	0011      	movs	r1, r2
 8000616:	0018      	movs	r0, r3
 8000618:	f003 f88e 	bl	8003738 <siprintf>
 800061c:	0003      	movs	r3, r0
 800061e:	64bb      	str	r3, [r7, #72]	; 0x48
    HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
 8000620:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000622:	b29a      	uxth	r2, r3
 8000624:	1939      	adds	r1, r7, r4
 8000626:	480a      	ldr	r0, [pc, #40]	; (8000650 <main+0x194>)
 8000628:	2364      	movs	r3, #100	; 0x64
 800062a:	f002 fb4b 	bl	8002cc4 <HAL_UART_Transmit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);
 800062e:	23a0      	movs	r3, #160	; 0xa0
 8000630:	05db      	lsls	r3, r3, #23
 8000632:	2120      	movs	r1, #32
 8000634:	0018      	movs	r0, r3
 8000636:	f000 fd60 	bl	80010fa <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 800063a:	23fa      	movs	r3, #250	; 0xfa
 800063c:	009b      	lsls	r3, r3, #2
 800063e:	0018      	movs	r0, r3
 8000640:	f000 fae8 	bl	8000c14 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);
 8000644:	e7f3      	b.n	800062e <main+0x172>
 8000646:	46c0      	nop			; (mov r8, r8)
 8000648:	50000400 	.word	0x50000400
 800064c:	08004024 	.word	0x08004024
 8000650:	200000e4 	.word	0x200000e4
 8000654:	0800404f 	.word	0x0800404f
 8000658:	2000008c 	.word	0x2000008c
 800065c:	08004030 	.word	0x08004030
 8000660:	08004040 	.word	0x08004040
 8000664:	08004050 	.word	0x08004050
 8000668:	08004051 	.word	0x08004051

0800066c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800066c:	b590      	push	{r4, r7, lr}
 800066e:	b09f      	sub	sp, #124	; 0x7c
 8000670:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000672:	2440      	movs	r4, #64	; 0x40
 8000674:	193b      	adds	r3, r7, r4
 8000676:	0018      	movs	r0, r3
 8000678:	2338      	movs	r3, #56	; 0x38
 800067a:	001a      	movs	r2, r3
 800067c:	2100      	movs	r1, #0
 800067e:	f003 f853 	bl	8003728 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000682:	232c      	movs	r3, #44	; 0x2c
 8000684:	18fb      	adds	r3, r7, r3
 8000686:	0018      	movs	r0, r3
 8000688:	2314      	movs	r3, #20
 800068a:	001a      	movs	r2, r3
 800068c:	2100      	movs	r1, #0
 800068e:	f003 f84b 	bl	8003728 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000692:	1d3b      	adds	r3, r7, #4
 8000694:	0018      	movs	r0, r3
 8000696:	2328      	movs	r3, #40	; 0x28
 8000698:	001a      	movs	r2, r3
 800069a:	2100      	movs	r1, #0
 800069c:	f003 f844 	bl	8003728 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006a0:	4b26      	ldr	r3, [pc, #152]	; (800073c <SystemClock_Config+0xd0>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a26      	ldr	r2, [pc, #152]	; (8000740 <SystemClock_Config+0xd4>)
 80006a6:	401a      	ands	r2, r3
 80006a8:	4b24      	ldr	r3, [pc, #144]	; (800073c <SystemClock_Config+0xd0>)
 80006aa:	2180      	movs	r1, #128	; 0x80
 80006ac:	0109      	lsls	r1, r1, #4
 80006ae:	430a      	orrs	r2, r1
 80006b0:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80006b2:	0021      	movs	r1, r4
 80006b4:	187b      	adds	r3, r7, r1
 80006b6:	2210      	movs	r2, #16
 80006b8:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006ba:	187b      	adds	r3, r7, r1
 80006bc:	2201      	movs	r2, #1
 80006be:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80006c0:	187b      	adds	r3, r7, r1
 80006c2:	2200      	movs	r2, #0
 80006c4:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 80006c6:	187b      	adds	r3, r7, r1
 80006c8:	22a0      	movs	r2, #160	; 0xa0
 80006ca:	0212      	lsls	r2, r2, #8
 80006cc:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006ce:	187b      	adds	r3, r7, r1
 80006d0:	2200      	movs	r2, #0
 80006d2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d4:	187b      	adds	r3, r7, r1
 80006d6:	0018      	movs	r0, r3
 80006d8:	f000 fd2a 	bl	8001130 <HAL_RCC_OscConfig>
 80006dc:	1e03      	subs	r3, r0, #0
 80006de:	d001      	beq.n	80006e4 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80006e0:	f000 f908 	bl	80008f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e4:	212c      	movs	r1, #44	; 0x2c
 80006e6:	187b      	adds	r3, r7, r1
 80006e8:	220f      	movs	r2, #15
 80006ea:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80006ec:	187b      	adds	r3, r7, r1
 80006ee:	2200      	movs	r2, #0
 80006f0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f2:	187b      	adds	r3, r7, r1
 80006f4:	2200      	movs	r2, #0
 80006f6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006f8:	187b      	adds	r3, r7, r1
 80006fa:	2200      	movs	r2, #0
 80006fc:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006fe:	187b      	adds	r3, r7, r1
 8000700:	2200      	movs	r2, #0
 8000702:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000704:	187b      	adds	r3, r7, r1
 8000706:	2100      	movs	r1, #0
 8000708:	0018      	movs	r0, r3
 800070a:	f001 f8e5 	bl	80018d8 <HAL_RCC_ClockConfig>
 800070e:	1e03      	subs	r3, r0, #0
 8000710:	d001      	beq.n	8000716 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000712:	f000 f8ef 	bl	80008f4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000716:	1d3b      	adds	r3, r7, #4
 8000718:	2202      	movs	r2, #2
 800071a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800071c:	1d3b      	adds	r3, r7, #4
 800071e:	2200      	movs	r2, #0
 8000720:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000722:	1d3b      	adds	r3, r7, #4
 8000724:	0018      	movs	r0, r3
 8000726:	f001 fafb 	bl	8001d20 <HAL_RCCEx_PeriphCLKConfig>
 800072a:	1e03      	subs	r3, r0, #0
 800072c:	d001      	beq.n	8000732 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800072e:	f000 f8e1 	bl	80008f4 <Error_Handler>
  }
}
 8000732:	46c0      	nop			; (mov r8, r8)
 8000734:	46bd      	mov	sp, r7
 8000736:	b01f      	add	sp, #124	; 0x7c
 8000738:	bd90      	pop	{r4, r7, pc}
 800073a:	46c0      	nop			; (mov r8, r8)
 800073c:	40007000 	.word	0x40007000
 8000740:	ffffe7ff 	.word	0xffffe7ff

08000744 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000748:	4b18      	ldr	r3, [pc, #96]	; (80007ac <MX_SPI1_Init+0x68>)
 800074a:	4a19      	ldr	r2, [pc, #100]	; (80007b0 <MX_SPI1_Init+0x6c>)
 800074c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800074e:	4b17      	ldr	r3, [pc, #92]	; (80007ac <MX_SPI1_Init+0x68>)
 8000750:	2282      	movs	r2, #130	; 0x82
 8000752:	0052      	lsls	r2, r2, #1
 8000754:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000756:	4b15      	ldr	r3, [pc, #84]	; (80007ac <MX_SPI1_Init+0x68>)
 8000758:	2200      	movs	r2, #0
 800075a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800075c:	4b13      	ldr	r3, [pc, #76]	; (80007ac <MX_SPI1_Init+0x68>)
 800075e:	2200      	movs	r2, #0
 8000760:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000762:	4b12      	ldr	r3, [pc, #72]	; (80007ac <MX_SPI1_Init+0x68>)
 8000764:	2200      	movs	r2, #0
 8000766:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000768:	4b10      	ldr	r3, [pc, #64]	; (80007ac <MX_SPI1_Init+0x68>)
 800076a:	2200      	movs	r2, #0
 800076c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800076e:	4b0f      	ldr	r3, [pc, #60]	; (80007ac <MX_SPI1_Init+0x68>)
 8000770:	2280      	movs	r2, #128	; 0x80
 8000772:	0092      	lsls	r2, r2, #2
 8000774:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000776:	4b0d      	ldr	r3, [pc, #52]	; (80007ac <MX_SPI1_Init+0x68>)
 8000778:	2200      	movs	r2, #0
 800077a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800077c:	4b0b      	ldr	r3, [pc, #44]	; (80007ac <MX_SPI1_Init+0x68>)
 800077e:	2200      	movs	r2, #0
 8000780:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000782:	4b0a      	ldr	r3, [pc, #40]	; (80007ac <MX_SPI1_Init+0x68>)
 8000784:	2200      	movs	r2, #0
 8000786:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000788:	4b08      	ldr	r3, [pc, #32]	; (80007ac <MX_SPI1_Init+0x68>)
 800078a:	2200      	movs	r2, #0
 800078c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800078e:	4b07      	ldr	r3, [pc, #28]	; (80007ac <MX_SPI1_Init+0x68>)
 8000790:	2207      	movs	r2, #7
 8000792:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000794:	4b05      	ldr	r3, [pc, #20]	; (80007ac <MX_SPI1_Init+0x68>)
 8000796:	0018      	movs	r0, r3
 8000798:	f001 fc36 	bl	8002008 <HAL_SPI_Init>
 800079c:	1e03      	subs	r3, r0, #0
 800079e:	d001      	beq.n	80007a4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80007a0:	f000 f8a8 	bl	80008f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007a4:	46c0      	nop			; (mov r8, r8)
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	46c0      	nop			; (mov r8, r8)
 80007ac:	2000008c 	.word	0x2000008c
 80007b0:	40013000 	.word	0x40013000

080007b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007b8:	4b14      	ldr	r3, [pc, #80]	; (800080c <MX_USART2_UART_Init+0x58>)
 80007ba:	4a15      	ldr	r2, [pc, #84]	; (8000810 <MX_USART2_UART_Init+0x5c>)
 80007bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007be:	4b13      	ldr	r3, [pc, #76]	; (800080c <MX_USART2_UART_Init+0x58>)
 80007c0:	22e1      	movs	r2, #225	; 0xe1
 80007c2:	0252      	lsls	r2, r2, #9
 80007c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007c6:	4b11      	ldr	r3, [pc, #68]	; (800080c <MX_USART2_UART_Init+0x58>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007cc:	4b0f      	ldr	r3, [pc, #60]	; (800080c <MX_USART2_UART_Init+0x58>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007d2:	4b0e      	ldr	r3, [pc, #56]	; (800080c <MX_USART2_UART_Init+0x58>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007d8:	4b0c      	ldr	r3, [pc, #48]	; (800080c <MX_USART2_UART_Init+0x58>)
 80007da:	220c      	movs	r2, #12
 80007dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007de:	4b0b      	ldr	r3, [pc, #44]	; (800080c <MX_USART2_UART_Init+0x58>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007e4:	4b09      	ldr	r3, [pc, #36]	; (800080c <MX_USART2_UART_Init+0x58>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007ea:	4b08      	ldr	r3, [pc, #32]	; (800080c <MX_USART2_UART_Init+0x58>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007f0:	4b06      	ldr	r3, [pc, #24]	; (800080c <MX_USART2_UART_Init+0x58>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007f6:	4b05      	ldr	r3, [pc, #20]	; (800080c <MX_USART2_UART_Init+0x58>)
 80007f8:	0018      	movs	r0, r3
 80007fa:	f002 fa0f 	bl	8002c1c <HAL_UART_Init>
 80007fe:	1e03      	subs	r3, r0, #0
 8000800:	d001      	beq.n	8000806 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000802:	f000 f877 	bl	80008f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000806:	46c0      	nop			; (mov r8, r8)
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	200000e4 	.word	0x200000e4
 8000810:	40004400 	.word	0x40004400

08000814 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000814:	b590      	push	{r4, r7, lr}
 8000816:	b08b      	sub	sp, #44	; 0x2c
 8000818:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081a:	2414      	movs	r4, #20
 800081c:	193b      	adds	r3, r7, r4
 800081e:	0018      	movs	r0, r3
 8000820:	2314      	movs	r3, #20
 8000822:	001a      	movs	r2, r3
 8000824:	2100      	movs	r1, #0
 8000826:	f002 ff7f 	bl	8003728 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800082a:	4b2f      	ldr	r3, [pc, #188]	; (80008e8 <MX_GPIO_Init+0xd4>)
 800082c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800082e:	4b2e      	ldr	r3, [pc, #184]	; (80008e8 <MX_GPIO_Init+0xd4>)
 8000830:	2104      	movs	r1, #4
 8000832:	430a      	orrs	r2, r1
 8000834:	62da      	str	r2, [r3, #44]	; 0x2c
 8000836:	4b2c      	ldr	r3, [pc, #176]	; (80008e8 <MX_GPIO_Init+0xd4>)
 8000838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800083a:	2204      	movs	r2, #4
 800083c:	4013      	ands	r3, r2
 800083e:	613b      	str	r3, [r7, #16]
 8000840:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000842:	4b29      	ldr	r3, [pc, #164]	; (80008e8 <MX_GPIO_Init+0xd4>)
 8000844:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000846:	4b28      	ldr	r3, [pc, #160]	; (80008e8 <MX_GPIO_Init+0xd4>)
 8000848:	2180      	movs	r1, #128	; 0x80
 800084a:	430a      	orrs	r2, r1
 800084c:	62da      	str	r2, [r3, #44]	; 0x2c
 800084e:	4b26      	ldr	r3, [pc, #152]	; (80008e8 <MX_GPIO_Init+0xd4>)
 8000850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000852:	2280      	movs	r2, #128	; 0x80
 8000854:	4013      	ands	r3, r2
 8000856:	60fb      	str	r3, [r7, #12]
 8000858:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800085a:	4b23      	ldr	r3, [pc, #140]	; (80008e8 <MX_GPIO_Init+0xd4>)
 800085c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800085e:	4b22      	ldr	r3, [pc, #136]	; (80008e8 <MX_GPIO_Init+0xd4>)
 8000860:	2101      	movs	r1, #1
 8000862:	430a      	orrs	r2, r1
 8000864:	62da      	str	r2, [r3, #44]	; 0x2c
 8000866:	4b20      	ldr	r3, [pc, #128]	; (80008e8 <MX_GPIO_Init+0xd4>)
 8000868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800086a:	2201      	movs	r2, #1
 800086c:	4013      	ands	r3, r2
 800086e:	60bb      	str	r3, [r7, #8]
 8000870:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000872:	4b1d      	ldr	r3, [pc, #116]	; (80008e8 <MX_GPIO_Init+0xd4>)
 8000874:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000876:	4b1c      	ldr	r3, [pc, #112]	; (80008e8 <MX_GPIO_Init+0xd4>)
 8000878:	2102      	movs	r1, #2
 800087a:	430a      	orrs	r2, r1
 800087c:	62da      	str	r2, [r3, #44]	; 0x2c
 800087e:	4b1a      	ldr	r3, [pc, #104]	; (80008e8 <MX_GPIO_Init+0xd4>)
 8000880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000882:	2202      	movs	r2, #2
 8000884:	4013      	ands	r3, r2
 8000886:	607b      	str	r3, [r7, #4]
 8000888:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800088a:	4b18      	ldr	r3, [pc, #96]	; (80008ec <MX_GPIO_Init+0xd8>)
 800088c:	2200      	movs	r2, #0
 800088e:	2140      	movs	r1, #64	; 0x40
 8000890:	0018      	movs	r0, r3
 8000892:	f000 fc15 	bl	80010c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000896:	193b      	adds	r3, r7, r4
 8000898:	2280      	movs	r2, #128	; 0x80
 800089a:	0192      	lsls	r2, r2, #6
 800089c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800089e:	193b      	adds	r3, r7, r4
 80008a0:	2284      	movs	r2, #132	; 0x84
 80008a2:	0392      	lsls	r2, r2, #14
 80008a4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a6:	193b      	adds	r3, r7, r4
 80008a8:	2200      	movs	r2, #0
 80008aa:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008ac:	193b      	adds	r3, r7, r4
 80008ae:	4a10      	ldr	r2, [pc, #64]	; (80008f0 <MX_GPIO_Init+0xdc>)
 80008b0:	0019      	movs	r1, r3
 80008b2:	0010      	movs	r0, r2
 80008b4:	f000 fa86 	bl	8000dc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80008b8:	0021      	movs	r1, r4
 80008ba:	187b      	adds	r3, r7, r1
 80008bc:	2240      	movs	r2, #64	; 0x40
 80008be:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c0:	187b      	adds	r3, r7, r1
 80008c2:	2201      	movs	r2, #1
 80008c4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c6:	187b      	adds	r3, r7, r1
 80008c8:	2200      	movs	r2, #0
 80008ca:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008cc:	187b      	adds	r3, r7, r1
 80008ce:	2200      	movs	r2, #0
 80008d0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008d2:	187b      	adds	r3, r7, r1
 80008d4:	4a05      	ldr	r2, [pc, #20]	; (80008ec <MX_GPIO_Init+0xd8>)
 80008d6:	0019      	movs	r1, r3
 80008d8:	0010      	movs	r0, r2
 80008da:	f000 fa73 	bl	8000dc4 <HAL_GPIO_Init>

}
 80008de:	46c0      	nop			; (mov r8, r8)
 80008e0:	46bd      	mov	sp, r7
 80008e2:	b00b      	add	sp, #44	; 0x2c
 80008e4:	bd90      	pop	{r4, r7, pc}
 80008e6:	46c0      	nop			; (mov r8, r8)
 80008e8:	40021000 	.word	0x40021000
 80008ec:	50000400 	.word	0x50000400
 80008f0:	50000800 	.word	0x50000800

080008f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008f8:	b672      	cpsid	i
}
 80008fa:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008fc:	e7fe      	b.n	80008fc <Error_Handler+0x8>
	...

08000900 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000904:	4b07      	ldr	r3, [pc, #28]	; (8000924 <HAL_MspInit+0x24>)
 8000906:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000908:	4b06      	ldr	r3, [pc, #24]	; (8000924 <HAL_MspInit+0x24>)
 800090a:	2101      	movs	r1, #1
 800090c:	430a      	orrs	r2, r1
 800090e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000910:	4b04      	ldr	r3, [pc, #16]	; (8000924 <HAL_MspInit+0x24>)
 8000912:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000914:	4b03      	ldr	r3, [pc, #12]	; (8000924 <HAL_MspInit+0x24>)
 8000916:	2180      	movs	r1, #128	; 0x80
 8000918:	0549      	lsls	r1, r1, #21
 800091a:	430a      	orrs	r2, r1
 800091c:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800091e:	46c0      	nop			; (mov r8, r8)
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	40021000 	.word	0x40021000

08000928 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000928:	b590      	push	{r4, r7, lr}
 800092a:	b089      	sub	sp, #36	; 0x24
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000930:	240c      	movs	r4, #12
 8000932:	193b      	adds	r3, r7, r4
 8000934:	0018      	movs	r0, r3
 8000936:	2314      	movs	r3, #20
 8000938:	001a      	movs	r2, r3
 800093a:	2100      	movs	r1, #0
 800093c:	f002 fef4 	bl	8003728 <memset>
  if(hspi->Instance==SPI1)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a18      	ldr	r2, [pc, #96]	; (80009a8 <HAL_SPI_MspInit+0x80>)
 8000946:	4293      	cmp	r3, r2
 8000948:	d129      	bne.n	800099e <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800094a:	4b18      	ldr	r3, [pc, #96]	; (80009ac <HAL_SPI_MspInit+0x84>)
 800094c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800094e:	4b17      	ldr	r3, [pc, #92]	; (80009ac <HAL_SPI_MspInit+0x84>)
 8000950:	2180      	movs	r1, #128	; 0x80
 8000952:	0149      	lsls	r1, r1, #5
 8000954:	430a      	orrs	r2, r1
 8000956:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000958:	4b14      	ldr	r3, [pc, #80]	; (80009ac <HAL_SPI_MspInit+0x84>)
 800095a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800095c:	4b13      	ldr	r3, [pc, #76]	; (80009ac <HAL_SPI_MspInit+0x84>)
 800095e:	2101      	movs	r1, #1
 8000960:	430a      	orrs	r2, r1
 8000962:	62da      	str	r2, [r3, #44]	; 0x2c
 8000964:	4b11      	ldr	r3, [pc, #68]	; (80009ac <HAL_SPI_MspInit+0x84>)
 8000966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000968:	2201      	movs	r2, #1
 800096a:	4013      	ands	r3, r2
 800096c:	60bb      	str	r3, [r7, #8]
 800096e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000970:	0021      	movs	r1, r4
 8000972:	187b      	adds	r3, r7, r1
 8000974:	22e0      	movs	r2, #224	; 0xe0
 8000976:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000978:	187b      	adds	r3, r7, r1
 800097a:	2202      	movs	r2, #2
 800097c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	187b      	adds	r3, r7, r1
 8000980:	2200      	movs	r2, #0
 8000982:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000984:	187b      	adds	r3, r7, r1
 8000986:	2203      	movs	r2, #3
 8000988:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800098a:	187b      	adds	r3, r7, r1
 800098c:	2200      	movs	r2, #0
 800098e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000990:	187a      	adds	r2, r7, r1
 8000992:	23a0      	movs	r3, #160	; 0xa0
 8000994:	05db      	lsls	r3, r3, #23
 8000996:	0011      	movs	r1, r2
 8000998:	0018      	movs	r0, r3
 800099a:	f000 fa13 	bl	8000dc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800099e:	46c0      	nop			; (mov r8, r8)
 80009a0:	46bd      	mov	sp, r7
 80009a2:	b009      	add	sp, #36	; 0x24
 80009a4:	bd90      	pop	{r4, r7, pc}
 80009a6:	46c0      	nop			; (mov r8, r8)
 80009a8:	40013000 	.word	0x40013000
 80009ac:	40021000 	.word	0x40021000

080009b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009b0:	b590      	push	{r4, r7, lr}
 80009b2:	b089      	sub	sp, #36	; 0x24
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b8:	240c      	movs	r4, #12
 80009ba:	193b      	adds	r3, r7, r4
 80009bc:	0018      	movs	r0, r3
 80009be:	2314      	movs	r3, #20
 80009c0:	001a      	movs	r2, r3
 80009c2:	2100      	movs	r1, #0
 80009c4:	f002 feb0 	bl	8003728 <memset>
  if(huart->Instance==USART2)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a18      	ldr	r2, [pc, #96]	; (8000a30 <HAL_UART_MspInit+0x80>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d129      	bne.n	8000a26 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009d2:	4b18      	ldr	r3, [pc, #96]	; (8000a34 <HAL_UART_MspInit+0x84>)
 80009d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80009d6:	4b17      	ldr	r3, [pc, #92]	; (8000a34 <HAL_UART_MspInit+0x84>)
 80009d8:	2180      	movs	r1, #128	; 0x80
 80009da:	0289      	lsls	r1, r1, #10
 80009dc:	430a      	orrs	r2, r1
 80009de:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e0:	4b14      	ldr	r3, [pc, #80]	; (8000a34 <HAL_UART_MspInit+0x84>)
 80009e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80009e4:	4b13      	ldr	r3, [pc, #76]	; (8000a34 <HAL_UART_MspInit+0x84>)
 80009e6:	2101      	movs	r1, #1
 80009e8:	430a      	orrs	r2, r1
 80009ea:	62da      	str	r2, [r3, #44]	; 0x2c
 80009ec:	4b11      	ldr	r3, [pc, #68]	; (8000a34 <HAL_UART_MspInit+0x84>)
 80009ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009f0:	2201      	movs	r2, #1
 80009f2:	4013      	ands	r3, r2
 80009f4:	60bb      	str	r3, [r7, #8]
 80009f6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80009f8:	0021      	movs	r1, r4
 80009fa:	187b      	adds	r3, r7, r1
 80009fc:	220c      	movs	r2, #12
 80009fe:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a00:	187b      	adds	r3, r7, r1
 8000a02:	2202      	movs	r2, #2
 8000a04:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a06:	187b      	adds	r3, r7, r1
 8000a08:	2200      	movs	r2, #0
 8000a0a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a0c:	187b      	adds	r3, r7, r1
 8000a0e:	2203      	movs	r2, #3
 8000a10:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000a12:	187b      	adds	r3, r7, r1
 8000a14:	2204      	movs	r2, #4
 8000a16:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a18:	187a      	adds	r2, r7, r1
 8000a1a:	23a0      	movs	r3, #160	; 0xa0
 8000a1c:	05db      	lsls	r3, r3, #23
 8000a1e:	0011      	movs	r1, r2
 8000a20:	0018      	movs	r0, r3
 8000a22:	f000 f9cf 	bl	8000dc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a26:	46c0      	nop			; (mov r8, r8)
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	b009      	add	sp, #36	; 0x24
 8000a2c:	bd90      	pop	{r4, r7, pc}
 8000a2e:	46c0      	nop			; (mov r8, r8)
 8000a30:	40004400 	.word	0x40004400
 8000a34:	40021000 	.word	0x40021000

08000a38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a3c:	e7fe      	b.n	8000a3c <NMI_Handler+0x4>

08000a3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a3e:	b580      	push	{r7, lr}
 8000a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a42:	e7fe      	b.n	8000a42 <HardFault_Handler+0x4>

08000a44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a48:	46c0      	nop			; (mov r8, r8)
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}

08000a4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a4e:	b580      	push	{r7, lr}
 8000a50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a52:	46c0      	nop			; (mov r8, r8)
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}

08000a58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a5c:	f000 f8be 	bl	8000bdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a60:	46c0      	nop			; (mov r8, r8)
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
	...

08000a68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b086      	sub	sp, #24
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a70:	4a14      	ldr	r2, [pc, #80]	; (8000ac4 <_sbrk+0x5c>)
 8000a72:	4b15      	ldr	r3, [pc, #84]	; (8000ac8 <_sbrk+0x60>)
 8000a74:	1ad3      	subs	r3, r2, r3
 8000a76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a78:	697b      	ldr	r3, [r7, #20]
 8000a7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a7c:	4b13      	ldr	r3, [pc, #76]	; (8000acc <_sbrk+0x64>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d102      	bne.n	8000a8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a84:	4b11      	ldr	r3, [pc, #68]	; (8000acc <_sbrk+0x64>)
 8000a86:	4a12      	ldr	r2, [pc, #72]	; (8000ad0 <_sbrk+0x68>)
 8000a88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a8a:	4b10      	ldr	r3, [pc, #64]	; (8000acc <_sbrk+0x64>)
 8000a8c:	681a      	ldr	r2, [r3, #0]
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	18d3      	adds	r3, r2, r3
 8000a92:	693a      	ldr	r2, [r7, #16]
 8000a94:	429a      	cmp	r2, r3
 8000a96:	d207      	bcs.n	8000aa8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a98:	f002 fe1c 	bl	80036d4 <__errno>
 8000a9c:	0003      	movs	r3, r0
 8000a9e:	220c      	movs	r2, #12
 8000aa0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	425b      	negs	r3, r3
 8000aa6:	e009      	b.n	8000abc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000aa8:	4b08      	ldr	r3, [pc, #32]	; (8000acc <_sbrk+0x64>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000aae:	4b07      	ldr	r3, [pc, #28]	; (8000acc <_sbrk+0x64>)
 8000ab0:	681a      	ldr	r2, [r3, #0]
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	18d2      	adds	r2, r2, r3
 8000ab6:	4b05      	ldr	r3, [pc, #20]	; (8000acc <_sbrk+0x64>)
 8000ab8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000aba:	68fb      	ldr	r3, [r7, #12]
}
 8000abc:	0018      	movs	r0, r3
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	b006      	add	sp, #24
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	20005000 	.word	0x20005000
 8000ac8:	00000400 	.word	0x00000400
 8000acc:	20000168 	.word	0x20000168
 8000ad0:	20000180 	.word	0x20000180

08000ad4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ad8:	46c0      	nop			; (mov r8, r8)
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
	...

08000ae0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000ae0:	480d      	ldr	r0, [pc, #52]	; (8000b18 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000ae2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ae4:	480d      	ldr	r0, [pc, #52]	; (8000b1c <LoopForever+0x6>)
  ldr r1, =_edata
 8000ae6:	490e      	ldr	r1, [pc, #56]	; (8000b20 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ae8:	4a0e      	ldr	r2, [pc, #56]	; (8000b24 <LoopForever+0xe>)
  movs r3, #0
 8000aea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000aec:	e002      	b.n	8000af4 <LoopCopyDataInit>

08000aee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000af0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000af2:	3304      	adds	r3, #4

08000af4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000af4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000af6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000af8:	d3f9      	bcc.n	8000aee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000afa:	4a0b      	ldr	r2, [pc, #44]	; (8000b28 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000afc:	4c0b      	ldr	r4, [pc, #44]	; (8000b2c <LoopForever+0x16>)
  movs r3, #0
 8000afe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b00:	e001      	b.n	8000b06 <LoopFillZerobss>

08000b02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b04:	3204      	adds	r2, #4

08000b06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b08:	d3fb      	bcc.n	8000b02 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000b0a:	f7ff ffe3 	bl	8000ad4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b0e:	f002 fde7 	bl	80036e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b12:	f7ff fcd3 	bl	80004bc <main>

08000b16 <LoopForever>:

LoopForever:
    b LoopForever
 8000b16:	e7fe      	b.n	8000b16 <LoopForever>
   ldr   r0, =_estack
 8000b18:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000b1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b20:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000b24:	08004104 	.word	0x08004104
  ldr r2, =_sbss
 8000b28:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000b2c:	20000180 	.word	0x20000180

08000b30 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b30:	e7fe      	b.n	8000b30 <ADC1_COMP_IRQHandler>
	...

08000b34 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b3a:	1dfb      	adds	r3, r7, #7
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000b40:	4b0b      	ldr	r3, [pc, #44]	; (8000b70 <HAL_Init+0x3c>)
 8000b42:	681a      	ldr	r2, [r3, #0]
 8000b44:	4b0a      	ldr	r3, [pc, #40]	; (8000b70 <HAL_Init+0x3c>)
 8000b46:	2140      	movs	r1, #64	; 0x40
 8000b48:	430a      	orrs	r2, r1
 8000b4a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b4c:	2000      	movs	r0, #0
 8000b4e:	f000 f811 	bl	8000b74 <HAL_InitTick>
 8000b52:	1e03      	subs	r3, r0, #0
 8000b54:	d003      	beq.n	8000b5e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000b56:	1dfb      	adds	r3, r7, #7
 8000b58:	2201      	movs	r2, #1
 8000b5a:	701a      	strb	r2, [r3, #0]
 8000b5c:	e001      	b.n	8000b62 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b5e:	f7ff fecf 	bl	8000900 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b62:	1dfb      	adds	r3, r7, #7
 8000b64:	781b      	ldrb	r3, [r3, #0]
}
 8000b66:	0018      	movs	r0, r3
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	b002      	add	sp, #8
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	46c0      	nop			; (mov r8, r8)
 8000b70:	40022000 	.word	0x40022000

08000b74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b74:	b590      	push	{r4, r7, lr}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b7c:	4b14      	ldr	r3, [pc, #80]	; (8000bd0 <HAL_InitTick+0x5c>)
 8000b7e:	681c      	ldr	r4, [r3, #0]
 8000b80:	4b14      	ldr	r3, [pc, #80]	; (8000bd4 <HAL_InitTick+0x60>)
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	0019      	movs	r1, r3
 8000b86:	23fa      	movs	r3, #250	; 0xfa
 8000b88:	0098      	lsls	r0, r3, #2
 8000b8a:	f7ff fac7 	bl	800011c <__udivsi3>
 8000b8e:	0003      	movs	r3, r0
 8000b90:	0019      	movs	r1, r3
 8000b92:	0020      	movs	r0, r4
 8000b94:	f7ff fac2 	bl	800011c <__udivsi3>
 8000b98:	0003      	movs	r3, r0
 8000b9a:	0018      	movs	r0, r3
 8000b9c:	f000 f905 	bl	8000daa <HAL_SYSTICK_Config>
 8000ba0:	1e03      	subs	r3, r0, #0
 8000ba2:	d001      	beq.n	8000ba8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	e00f      	b.n	8000bc8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	2b03      	cmp	r3, #3
 8000bac:	d80b      	bhi.n	8000bc6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bae:	6879      	ldr	r1, [r7, #4]
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	425b      	negs	r3, r3
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	0018      	movs	r0, r3
 8000bb8:	f000 f8e2 	bl	8000d80 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bbc:	4b06      	ldr	r3, [pc, #24]	; (8000bd8 <HAL_InitTick+0x64>)
 8000bbe:	687a      	ldr	r2, [r7, #4]
 8000bc0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	e000      	b.n	8000bc8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000bc6:	2301      	movs	r3, #1
}
 8000bc8:	0018      	movs	r0, r3
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	b003      	add	sp, #12
 8000bce:	bd90      	pop	{r4, r7, pc}
 8000bd0:	20000000 	.word	0x20000000
 8000bd4:	20000008 	.word	0x20000008
 8000bd8:	20000004 	.word	0x20000004

08000bdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000be0:	4b05      	ldr	r3, [pc, #20]	; (8000bf8 <HAL_IncTick+0x1c>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	001a      	movs	r2, r3
 8000be6:	4b05      	ldr	r3, [pc, #20]	; (8000bfc <HAL_IncTick+0x20>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	18d2      	adds	r2, r2, r3
 8000bec:	4b03      	ldr	r3, [pc, #12]	; (8000bfc <HAL_IncTick+0x20>)
 8000bee:	601a      	str	r2, [r3, #0]
}
 8000bf0:	46c0      	nop			; (mov r8, r8)
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	46c0      	nop			; (mov r8, r8)
 8000bf8:	20000008 	.word	0x20000008
 8000bfc:	2000016c 	.word	0x2000016c

08000c00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  return uwTick;
 8000c04:	4b02      	ldr	r3, [pc, #8]	; (8000c10 <HAL_GetTick+0x10>)
 8000c06:	681b      	ldr	r3, [r3, #0]
}
 8000c08:	0018      	movs	r0, r3
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	46c0      	nop			; (mov r8, r8)
 8000c10:	2000016c 	.word	0x2000016c

08000c14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b084      	sub	sp, #16
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c1c:	f7ff fff0 	bl	8000c00 <HAL_GetTick>
 8000c20:	0003      	movs	r3, r0
 8000c22:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	3301      	adds	r3, #1
 8000c2c:	d005      	beq.n	8000c3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c2e:	4b0a      	ldr	r3, [pc, #40]	; (8000c58 <HAL_Delay+0x44>)
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	001a      	movs	r2, r3
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	189b      	adds	r3, r3, r2
 8000c38:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c3a:	46c0      	nop			; (mov r8, r8)
 8000c3c:	f7ff ffe0 	bl	8000c00 <HAL_GetTick>
 8000c40:	0002      	movs	r2, r0
 8000c42:	68bb      	ldr	r3, [r7, #8]
 8000c44:	1ad3      	subs	r3, r2, r3
 8000c46:	68fa      	ldr	r2, [r7, #12]
 8000c48:	429a      	cmp	r2, r3
 8000c4a:	d8f7      	bhi.n	8000c3c <HAL_Delay+0x28>
  {
  }
}
 8000c4c:	46c0      	nop			; (mov r8, r8)
 8000c4e:	46c0      	nop			; (mov r8, r8)
 8000c50:	46bd      	mov	sp, r7
 8000c52:	b004      	add	sp, #16
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	46c0      	nop			; (mov r8, r8)
 8000c58:	20000008 	.word	0x20000008

08000c5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c5c:	b590      	push	{r4, r7, lr}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	0002      	movs	r2, r0
 8000c64:	6039      	str	r1, [r7, #0]
 8000c66:	1dfb      	adds	r3, r7, #7
 8000c68:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000c6a:	1dfb      	adds	r3, r7, #7
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	2b7f      	cmp	r3, #127	; 0x7f
 8000c70:	d828      	bhi.n	8000cc4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c72:	4a2f      	ldr	r2, [pc, #188]	; (8000d30 <__NVIC_SetPriority+0xd4>)
 8000c74:	1dfb      	adds	r3, r7, #7
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	b25b      	sxtb	r3, r3
 8000c7a:	089b      	lsrs	r3, r3, #2
 8000c7c:	33c0      	adds	r3, #192	; 0xc0
 8000c7e:	009b      	lsls	r3, r3, #2
 8000c80:	589b      	ldr	r3, [r3, r2]
 8000c82:	1dfa      	adds	r2, r7, #7
 8000c84:	7812      	ldrb	r2, [r2, #0]
 8000c86:	0011      	movs	r1, r2
 8000c88:	2203      	movs	r2, #3
 8000c8a:	400a      	ands	r2, r1
 8000c8c:	00d2      	lsls	r2, r2, #3
 8000c8e:	21ff      	movs	r1, #255	; 0xff
 8000c90:	4091      	lsls	r1, r2
 8000c92:	000a      	movs	r2, r1
 8000c94:	43d2      	mvns	r2, r2
 8000c96:	401a      	ands	r2, r3
 8000c98:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	019b      	lsls	r3, r3, #6
 8000c9e:	22ff      	movs	r2, #255	; 0xff
 8000ca0:	401a      	ands	r2, r3
 8000ca2:	1dfb      	adds	r3, r7, #7
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	0018      	movs	r0, r3
 8000ca8:	2303      	movs	r3, #3
 8000caa:	4003      	ands	r3, r0
 8000cac:	00db      	lsls	r3, r3, #3
 8000cae:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cb0:	481f      	ldr	r0, [pc, #124]	; (8000d30 <__NVIC_SetPriority+0xd4>)
 8000cb2:	1dfb      	adds	r3, r7, #7
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	b25b      	sxtb	r3, r3
 8000cb8:	089b      	lsrs	r3, r3, #2
 8000cba:	430a      	orrs	r2, r1
 8000cbc:	33c0      	adds	r3, #192	; 0xc0
 8000cbe:	009b      	lsls	r3, r3, #2
 8000cc0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000cc2:	e031      	b.n	8000d28 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cc4:	4a1b      	ldr	r2, [pc, #108]	; (8000d34 <__NVIC_SetPriority+0xd8>)
 8000cc6:	1dfb      	adds	r3, r7, #7
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	0019      	movs	r1, r3
 8000ccc:	230f      	movs	r3, #15
 8000cce:	400b      	ands	r3, r1
 8000cd0:	3b08      	subs	r3, #8
 8000cd2:	089b      	lsrs	r3, r3, #2
 8000cd4:	3306      	adds	r3, #6
 8000cd6:	009b      	lsls	r3, r3, #2
 8000cd8:	18d3      	adds	r3, r2, r3
 8000cda:	3304      	adds	r3, #4
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	1dfa      	adds	r2, r7, #7
 8000ce0:	7812      	ldrb	r2, [r2, #0]
 8000ce2:	0011      	movs	r1, r2
 8000ce4:	2203      	movs	r2, #3
 8000ce6:	400a      	ands	r2, r1
 8000ce8:	00d2      	lsls	r2, r2, #3
 8000cea:	21ff      	movs	r1, #255	; 0xff
 8000cec:	4091      	lsls	r1, r2
 8000cee:	000a      	movs	r2, r1
 8000cf0:	43d2      	mvns	r2, r2
 8000cf2:	401a      	ands	r2, r3
 8000cf4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	019b      	lsls	r3, r3, #6
 8000cfa:	22ff      	movs	r2, #255	; 0xff
 8000cfc:	401a      	ands	r2, r3
 8000cfe:	1dfb      	adds	r3, r7, #7
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	0018      	movs	r0, r3
 8000d04:	2303      	movs	r3, #3
 8000d06:	4003      	ands	r3, r0
 8000d08:	00db      	lsls	r3, r3, #3
 8000d0a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d0c:	4809      	ldr	r0, [pc, #36]	; (8000d34 <__NVIC_SetPriority+0xd8>)
 8000d0e:	1dfb      	adds	r3, r7, #7
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	001c      	movs	r4, r3
 8000d14:	230f      	movs	r3, #15
 8000d16:	4023      	ands	r3, r4
 8000d18:	3b08      	subs	r3, #8
 8000d1a:	089b      	lsrs	r3, r3, #2
 8000d1c:	430a      	orrs	r2, r1
 8000d1e:	3306      	adds	r3, #6
 8000d20:	009b      	lsls	r3, r3, #2
 8000d22:	18c3      	adds	r3, r0, r3
 8000d24:	3304      	adds	r3, #4
 8000d26:	601a      	str	r2, [r3, #0]
}
 8000d28:	46c0      	nop			; (mov r8, r8)
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	b003      	add	sp, #12
 8000d2e:	bd90      	pop	{r4, r7, pc}
 8000d30:	e000e100 	.word	0xe000e100
 8000d34:	e000ed00 	.word	0xe000ed00

08000d38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	1e5a      	subs	r2, r3, #1
 8000d44:	2380      	movs	r3, #128	; 0x80
 8000d46:	045b      	lsls	r3, r3, #17
 8000d48:	429a      	cmp	r2, r3
 8000d4a:	d301      	bcc.n	8000d50 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	e010      	b.n	8000d72 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d50:	4b0a      	ldr	r3, [pc, #40]	; (8000d7c <SysTick_Config+0x44>)
 8000d52:	687a      	ldr	r2, [r7, #4]
 8000d54:	3a01      	subs	r2, #1
 8000d56:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d58:	2301      	movs	r3, #1
 8000d5a:	425b      	negs	r3, r3
 8000d5c:	2103      	movs	r1, #3
 8000d5e:	0018      	movs	r0, r3
 8000d60:	f7ff ff7c 	bl	8000c5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d64:	4b05      	ldr	r3, [pc, #20]	; (8000d7c <SysTick_Config+0x44>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d6a:	4b04      	ldr	r3, [pc, #16]	; (8000d7c <SysTick_Config+0x44>)
 8000d6c:	2207      	movs	r2, #7
 8000d6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d70:	2300      	movs	r3, #0
}
 8000d72:	0018      	movs	r0, r3
 8000d74:	46bd      	mov	sp, r7
 8000d76:	b002      	add	sp, #8
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	46c0      	nop			; (mov r8, r8)
 8000d7c:	e000e010 	.word	0xe000e010

08000d80 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b084      	sub	sp, #16
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	60b9      	str	r1, [r7, #8]
 8000d88:	607a      	str	r2, [r7, #4]
 8000d8a:	210f      	movs	r1, #15
 8000d8c:	187b      	adds	r3, r7, r1
 8000d8e:	1c02      	adds	r2, r0, #0
 8000d90:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000d92:	68ba      	ldr	r2, [r7, #8]
 8000d94:	187b      	adds	r3, r7, r1
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	b25b      	sxtb	r3, r3
 8000d9a:	0011      	movs	r1, r2
 8000d9c:	0018      	movs	r0, r3
 8000d9e:	f7ff ff5d 	bl	8000c5c <__NVIC_SetPriority>
}
 8000da2:	46c0      	nop			; (mov r8, r8)
 8000da4:	46bd      	mov	sp, r7
 8000da6:	b004      	add	sp, #16
 8000da8:	bd80      	pop	{r7, pc}

08000daa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000daa:	b580      	push	{r7, lr}
 8000dac:	b082      	sub	sp, #8
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	0018      	movs	r0, r3
 8000db6:	f7ff ffbf 	bl	8000d38 <SysTick_Config>
 8000dba:	0003      	movs	r3, r0
}
 8000dbc:	0018      	movs	r0, r3
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	b002      	add	sp, #8
 8000dc2:	bd80      	pop	{r7, pc}

08000dc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b086      	sub	sp, #24
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
 8000dcc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000dda:	e155      	b.n	8001088 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	2101      	movs	r1, #1
 8000de2:	697a      	ldr	r2, [r7, #20]
 8000de4:	4091      	lsls	r1, r2
 8000de6:	000a      	movs	r2, r1
 8000de8:	4013      	ands	r3, r2
 8000dea:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d100      	bne.n	8000df4 <HAL_GPIO_Init+0x30>
 8000df2:	e146      	b.n	8001082 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	2203      	movs	r2, #3
 8000dfa:	4013      	ands	r3, r2
 8000dfc:	2b01      	cmp	r3, #1
 8000dfe:	d005      	beq.n	8000e0c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	2203      	movs	r2, #3
 8000e06:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e08:	2b02      	cmp	r3, #2
 8000e0a:	d130      	bne.n	8000e6e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	689b      	ldr	r3, [r3, #8]
 8000e10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	005b      	lsls	r3, r3, #1
 8000e16:	2203      	movs	r2, #3
 8000e18:	409a      	lsls	r2, r3
 8000e1a:	0013      	movs	r3, r2
 8000e1c:	43da      	mvns	r2, r3
 8000e1e:	693b      	ldr	r3, [r7, #16]
 8000e20:	4013      	ands	r3, r2
 8000e22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	68da      	ldr	r2, [r3, #12]
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	005b      	lsls	r3, r3, #1
 8000e2c:	409a      	lsls	r2, r3
 8000e2e:	0013      	movs	r3, r2
 8000e30:	693a      	ldr	r2, [r7, #16]
 8000e32:	4313      	orrs	r3, r2
 8000e34:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	693a      	ldr	r2, [r7, #16]
 8000e3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e42:	2201      	movs	r2, #1
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	409a      	lsls	r2, r3
 8000e48:	0013      	movs	r3, r2
 8000e4a:	43da      	mvns	r2, r3
 8000e4c:	693b      	ldr	r3, [r7, #16]
 8000e4e:	4013      	ands	r3, r2
 8000e50:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	091b      	lsrs	r3, r3, #4
 8000e58:	2201      	movs	r2, #1
 8000e5a:	401a      	ands	r2, r3
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	409a      	lsls	r2, r3
 8000e60:	0013      	movs	r3, r2
 8000e62:	693a      	ldr	r2, [r7, #16]
 8000e64:	4313      	orrs	r3, r2
 8000e66:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	693a      	ldr	r2, [r7, #16]
 8000e6c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	2203      	movs	r2, #3
 8000e74:	4013      	ands	r3, r2
 8000e76:	2b03      	cmp	r3, #3
 8000e78:	d017      	beq.n	8000eaa <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	68db      	ldr	r3, [r3, #12]
 8000e7e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	005b      	lsls	r3, r3, #1
 8000e84:	2203      	movs	r2, #3
 8000e86:	409a      	lsls	r2, r3
 8000e88:	0013      	movs	r3, r2
 8000e8a:	43da      	mvns	r2, r3
 8000e8c:	693b      	ldr	r3, [r7, #16]
 8000e8e:	4013      	ands	r3, r2
 8000e90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	689a      	ldr	r2, [r3, #8]
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	005b      	lsls	r3, r3, #1
 8000e9a:	409a      	lsls	r2, r3
 8000e9c:	0013      	movs	r3, r2
 8000e9e:	693a      	ldr	r2, [r7, #16]
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	693a      	ldr	r2, [r7, #16]
 8000ea8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	2203      	movs	r2, #3
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	2b02      	cmp	r3, #2
 8000eb4:	d123      	bne.n	8000efe <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	08da      	lsrs	r2, r3, #3
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	3208      	adds	r2, #8
 8000ebe:	0092      	lsls	r2, r2, #2
 8000ec0:	58d3      	ldr	r3, [r2, r3]
 8000ec2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	2207      	movs	r2, #7
 8000ec8:	4013      	ands	r3, r2
 8000eca:	009b      	lsls	r3, r3, #2
 8000ecc:	220f      	movs	r2, #15
 8000ece:	409a      	lsls	r2, r3
 8000ed0:	0013      	movs	r3, r2
 8000ed2:	43da      	mvns	r2, r3
 8000ed4:	693b      	ldr	r3, [r7, #16]
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	691a      	ldr	r2, [r3, #16]
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	2107      	movs	r1, #7
 8000ee2:	400b      	ands	r3, r1
 8000ee4:	009b      	lsls	r3, r3, #2
 8000ee6:	409a      	lsls	r2, r3
 8000ee8:	0013      	movs	r3, r2
 8000eea:	693a      	ldr	r2, [r7, #16]
 8000eec:	4313      	orrs	r3, r2
 8000eee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	08da      	lsrs	r2, r3, #3
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	3208      	adds	r2, #8
 8000ef8:	0092      	lsls	r2, r2, #2
 8000efa:	6939      	ldr	r1, [r7, #16]
 8000efc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	005b      	lsls	r3, r3, #1
 8000f08:	2203      	movs	r2, #3
 8000f0a:	409a      	lsls	r2, r3
 8000f0c:	0013      	movs	r3, r2
 8000f0e:	43da      	mvns	r2, r3
 8000f10:	693b      	ldr	r3, [r7, #16]
 8000f12:	4013      	ands	r3, r2
 8000f14:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	2203      	movs	r2, #3
 8000f1c:	401a      	ands	r2, r3
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	005b      	lsls	r3, r3, #1
 8000f22:	409a      	lsls	r2, r3
 8000f24:	0013      	movs	r3, r2
 8000f26:	693a      	ldr	r2, [r7, #16]
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	693a      	ldr	r2, [r7, #16]
 8000f30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	685a      	ldr	r2, [r3, #4]
 8000f36:	23c0      	movs	r3, #192	; 0xc0
 8000f38:	029b      	lsls	r3, r3, #10
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	d100      	bne.n	8000f40 <HAL_GPIO_Init+0x17c>
 8000f3e:	e0a0      	b.n	8001082 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f40:	4b57      	ldr	r3, [pc, #348]	; (80010a0 <HAL_GPIO_Init+0x2dc>)
 8000f42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f44:	4b56      	ldr	r3, [pc, #344]	; (80010a0 <HAL_GPIO_Init+0x2dc>)
 8000f46:	2101      	movs	r1, #1
 8000f48:	430a      	orrs	r2, r1
 8000f4a:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f4c:	4a55      	ldr	r2, [pc, #340]	; (80010a4 <HAL_GPIO_Init+0x2e0>)
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	089b      	lsrs	r3, r3, #2
 8000f52:	3302      	adds	r3, #2
 8000f54:	009b      	lsls	r3, r3, #2
 8000f56:	589b      	ldr	r3, [r3, r2]
 8000f58:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	2203      	movs	r2, #3
 8000f5e:	4013      	ands	r3, r2
 8000f60:	009b      	lsls	r3, r3, #2
 8000f62:	220f      	movs	r2, #15
 8000f64:	409a      	lsls	r2, r3
 8000f66:	0013      	movs	r3, r2
 8000f68:	43da      	mvns	r2, r3
 8000f6a:	693b      	ldr	r3, [r7, #16]
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000f70:	687a      	ldr	r2, [r7, #4]
 8000f72:	23a0      	movs	r3, #160	; 0xa0
 8000f74:	05db      	lsls	r3, r3, #23
 8000f76:	429a      	cmp	r2, r3
 8000f78:	d01f      	beq.n	8000fba <HAL_GPIO_Init+0x1f6>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4a4a      	ldr	r2, [pc, #296]	; (80010a8 <HAL_GPIO_Init+0x2e4>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d019      	beq.n	8000fb6 <HAL_GPIO_Init+0x1f2>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4a49      	ldr	r2, [pc, #292]	; (80010ac <HAL_GPIO_Init+0x2e8>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d013      	beq.n	8000fb2 <HAL_GPIO_Init+0x1ee>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4a48      	ldr	r2, [pc, #288]	; (80010b0 <HAL_GPIO_Init+0x2ec>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d00d      	beq.n	8000fae <HAL_GPIO_Init+0x1ea>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4a47      	ldr	r2, [pc, #284]	; (80010b4 <HAL_GPIO_Init+0x2f0>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d007      	beq.n	8000faa <HAL_GPIO_Init+0x1e6>
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4a46      	ldr	r2, [pc, #280]	; (80010b8 <HAL_GPIO_Init+0x2f4>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d101      	bne.n	8000fa6 <HAL_GPIO_Init+0x1e2>
 8000fa2:	2305      	movs	r3, #5
 8000fa4:	e00a      	b.n	8000fbc <HAL_GPIO_Init+0x1f8>
 8000fa6:	2306      	movs	r3, #6
 8000fa8:	e008      	b.n	8000fbc <HAL_GPIO_Init+0x1f8>
 8000faa:	2304      	movs	r3, #4
 8000fac:	e006      	b.n	8000fbc <HAL_GPIO_Init+0x1f8>
 8000fae:	2303      	movs	r3, #3
 8000fb0:	e004      	b.n	8000fbc <HAL_GPIO_Init+0x1f8>
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	e002      	b.n	8000fbc <HAL_GPIO_Init+0x1f8>
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	e000      	b.n	8000fbc <HAL_GPIO_Init+0x1f8>
 8000fba:	2300      	movs	r3, #0
 8000fbc:	697a      	ldr	r2, [r7, #20]
 8000fbe:	2103      	movs	r1, #3
 8000fc0:	400a      	ands	r2, r1
 8000fc2:	0092      	lsls	r2, r2, #2
 8000fc4:	4093      	lsls	r3, r2
 8000fc6:	693a      	ldr	r2, [r7, #16]
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fcc:	4935      	ldr	r1, [pc, #212]	; (80010a4 <HAL_GPIO_Init+0x2e0>)
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	089b      	lsrs	r3, r3, #2
 8000fd2:	3302      	adds	r3, #2
 8000fd4:	009b      	lsls	r3, r3, #2
 8000fd6:	693a      	ldr	r2, [r7, #16]
 8000fd8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fda:	4b38      	ldr	r3, [pc, #224]	; (80010bc <HAL_GPIO_Init+0x2f8>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	43da      	mvns	r2, r3
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	685a      	ldr	r2, [r3, #4]
 8000fee:	2380      	movs	r3, #128	; 0x80
 8000ff0:	025b      	lsls	r3, r3, #9
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	d003      	beq.n	8000ffe <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8000ff6:	693a      	ldr	r2, [r7, #16]
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000ffe:	4b2f      	ldr	r3, [pc, #188]	; (80010bc <HAL_GPIO_Init+0x2f8>)
 8001000:	693a      	ldr	r2, [r7, #16]
 8001002:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001004:	4b2d      	ldr	r3, [pc, #180]	; (80010bc <HAL_GPIO_Init+0x2f8>)
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	43da      	mvns	r2, r3
 800100e:	693b      	ldr	r3, [r7, #16]
 8001010:	4013      	ands	r3, r2
 8001012:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	685a      	ldr	r2, [r3, #4]
 8001018:	2380      	movs	r3, #128	; 0x80
 800101a:	029b      	lsls	r3, r3, #10
 800101c:	4013      	ands	r3, r2
 800101e:	d003      	beq.n	8001028 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001020:	693a      	ldr	r2, [r7, #16]
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	4313      	orrs	r3, r2
 8001026:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001028:	4b24      	ldr	r3, [pc, #144]	; (80010bc <HAL_GPIO_Init+0x2f8>)
 800102a:	693a      	ldr	r2, [r7, #16]
 800102c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800102e:	4b23      	ldr	r3, [pc, #140]	; (80010bc <HAL_GPIO_Init+0x2f8>)
 8001030:	689b      	ldr	r3, [r3, #8]
 8001032:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	43da      	mvns	r2, r3
 8001038:	693b      	ldr	r3, [r7, #16]
 800103a:	4013      	ands	r3, r2
 800103c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685a      	ldr	r2, [r3, #4]
 8001042:	2380      	movs	r3, #128	; 0x80
 8001044:	035b      	lsls	r3, r3, #13
 8001046:	4013      	ands	r3, r2
 8001048:	d003      	beq.n	8001052 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800104a:	693a      	ldr	r2, [r7, #16]
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	4313      	orrs	r3, r2
 8001050:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001052:	4b1a      	ldr	r3, [pc, #104]	; (80010bc <HAL_GPIO_Init+0x2f8>)
 8001054:	693a      	ldr	r2, [r7, #16]
 8001056:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001058:	4b18      	ldr	r3, [pc, #96]	; (80010bc <HAL_GPIO_Init+0x2f8>)
 800105a:	68db      	ldr	r3, [r3, #12]
 800105c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	43da      	mvns	r2, r3
 8001062:	693b      	ldr	r3, [r7, #16]
 8001064:	4013      	ands	r3, r2
 8001066:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685a      	ldr	r2, [r3, #4]
 800106c:	2380      	movs	r3, #128	; 0x80
 800106e:	039b      	lsls	r3, r3, #14
 8001070:	4013      	ands	r3, r2
 8001072:	d003      	beq.n	800107c <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8001074:	693a      	ldr	r2, [r7, #16]
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	4313      	orrs	r3, r2
 800107a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800107c:	4b0f      	ldr	r3, [pc, #60]	; (80010bc <HAL_GPIO_Init+0x2f8>)
 800107e:	693a      	ldr	r2, [r7, #16]
 8001080:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	3301      	adds	r3, #1
 8001086:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	40da      	lsrs	r2, r3
 8001090:	1e13      	subs	r3, r2, #0
 8001092:	d000      	beq.n	8001096 <HAL_GPIO_Init+0x2d2>
 8001094:	e6a2      	b.n	8000ddc <HAL_GPIO_Init+0x18>
  }
}
 8001096:	46c0      	nop			; (mov r8, r8)
 8001098:	46c0      	nop			; (mov r8, r8)
 800109a:	46bd      	mov	sp, r7
 800109c:	b006      	add	sp, #24
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	40021000 	.word	0x40021000
 80010a4:	40010000 	.word	0x40010000
 80010a8:	50000400 	.word	0x50000400
 80010ac:	50000800 	.word	0x50000800
 80010b0:	50000c00 	.word	0x50000c00
 80010b4:	50001000 	.word	0x50001000
 80010b8:	50001c00 	.word	0x50001c00
 80010bc:	40010400 	.word	0x40010400

080010c0 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	0008      	movs	r0, r1
 80010ca:	0011      	movs	r1, r2
 80010cc:	1cbb      	adds	r3, r7, #2
 80010ce:	1c02      	adds	r2, r0, #0
 80010d0:	801a      	strh	r2, [r3, #0]
 80010d2:	1c7b      	adds	r3, r7, #1
 80010d4:	1c0a      	adds	r2, r1, #0
 80010d6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010d8:	1c7b      	adds	r3, r7, #1
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d004      	beq.n	80010ea <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010e0:	1cbb      	adds	r3, r7, #2
 80010e2:	881a      	ldrh	r2, [r3, #0]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80010e8:	e003      	b.n	80010f2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80010ea:	1cbb      	adds	r3, r7, #2
 80010ec:	881a      	ldrh	r2, [r3, #0]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80010f2:	46c0      	nop			; (mov r8, r8)
 80010f4:	46bd      	mov	sp, r7
 80010f6:	b002      	add	sp, #8
 80010f8:	bd80      	pop	{r7, pc}

080010fa <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80010fa:	b580      	push	{r7, lr}
 80010fc:	b084      	sub	sp, #16
 80010fe:	af00      	add	r7, sp, #0
 8001100:	6078      	str	r0, [r7, #4]
 8001102:	000a      	movs	r2, r1
 8001104:	1cbb      	adds	r3, r7, #2
 8001106:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	695b      	ldr	r3, [r3, #20]
 800110c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800110e:	1cbb      	adds	r3, r7, #2
 8001110:	881b      	ldrh	r3, [r3, #0]
 8001112:	68fa      	ldr	r2, [r7, #12]
 8001114:	4013      	ands	r3, r2
 8001116:	041a      	lsls	r2, r3, #16
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	43db      	mvns	r3, r3
 800111c:	1cb9      	adds	r1, r7, #2
 800111e:	8809      	ldrh	r1, [r1, #0]
 8001120:	400b      	ands	r3, r1
 8001122:	431a      	orrs	r2, r3
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	619a      	str	r2, [r3, #24]
}
 8001128:	46c0      	nop			; (mov r8, r8)
 800112a:	46bd      	mov	sp, r7
 800112c:	b004      	add	sp, #16
 800112e:	bd80      	pop	{r7, pc}

08001130 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001130:	b5b0      	push	{r4, r5, r7, lr}
 8001132:	b08a      	sub	sp, #40	; 0x28
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d102      	bne.n	8001144 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800113e:	2301      	movs	r3, #1
 8001140:	f000 fbbf 	bl	80018c2 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001144:	4bc9      	ldr	r3, [pc, #804]	; (800146c <HAL_RCC_OscConfig+0x33c>)
 8001146:	68db      	ldr	r3, [r3, #12]
 8001148:	220c      	movs	r2, #12
 800114a:	4013      	ands	r3, r2
 800114c:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800114e:	4bc7      	ldr	r3, [pc, #796]	; (800146c <HAL_RCC_OscConfig+0x33c>)
 8001150:	68da      	ldr	r2, [r3, #12]
 8001152:	2380      	movs	r3, #128	; 0x80
 8001154:	025b      	lsls	r3, r3, #9
 8001156:	4013      	ands	r3, r2
 8001158:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	2201      	movs	r2, #1
 8001160:	4013      	ands	r3, r2
 8001162:	d100      	bne.n	8001166 <HAL_RCC_OscConfig+0x36>
 8001164:	e07e      	b.n	8001264 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	2b08      	cmp	r3, #8
 800116a:	d007      	beq.n	800117c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800116c:	69fb      	ldr	r3, [r7, #28]
 800116e:	2b0c      	cmp	r3, #12
 8001170:	d112      	bne.n	8001198 <HAL_RCC_OscConfig+0x68>
 8001172:	69ba      	ldr	r2, [r7, #24]
 8001174:	2380      	movs	r3, #128	; 0x80
 8001176:	025b      	lsls	r3, r3, #9
 8001178:	429a      	cmp	r2, r3
 800117a:	d10d      	bne.n	8001198 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800117c:	4bbb      	ldr	r3, [pc, #748]	; (800146c <HAL_RCC_OscConfig+0x33c>)
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	2380      	movs	r3, #128	; 0x80
 8001182:	029b      	lsls	r3, r3, #10
 8001184:	4013      	ands	r3, r2
 8001186:	d100      	bne.n	800118a <HAL_RCC_OscConfig+0x5a>
 8001188:	e06b      	b.n	8001262 <HAL_RCC_OscConfig+0x132>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d167      	bne.n	8001262 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001192:	2301      	movs	r3, #1
 8001194:	f000 fb95 	bl	80018c2 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	685a      	ldr	r2, [r3, #4]
 800119c:	2380      	movs	r3, #128	; 0x80
 800119e:	025b      	lsls	r3, r3, #9
 80011a0:	429a      	cmp	r2, r3
 80011a2:	d107      	bne.n	80011b4 <HAL_RCC_OscConfig+0x84>
 80011a4:	4bb1      	ldr	r3, [pc, #708]	; (800146c <HAL_RCC_OscConfig+0x33c>)
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	4bb0      	ldr	r3, [pc, #704]	; (800146c <HAL_RCC_OscConfig+0x33c>)
 80011aa:	2180      	movs	r1, #128	; 0x80
 80011ac:	0249      	lsls	r1, r1, #9
 80011ae:	430a      	orrs	r2, r1
 80011b0:	601a      	str	r2, [r3, #0]
 80011b2:	e027      	b.n	8001204 <HAL_RCC_OscConfig+0xd4>
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	685a      	ldr	r2, [r3, #4]
 80011b8:	23a0      	movs	r3, #160	; 0xa0
 80011ba:	02db      	lsls	r3, r3, #11
 80011bc:	429a      	cmp	r2, r3
 80011be:	d10e      	bne.n	80011de <HAL_RCC_OscConfig+0xae>
 80011c0:	4baa      	ldr	r3, [pc, #680]	; (800146c <HAL_RCC_OscConfig+0x33c>)
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	4ba9      	ldr	r3, [pc, #676]	; (800146c <HAL_RCC_OscConfig+0x33c>)
 80011c6:	2180      	movs	r1, #128	; 0x80
 80011c8:	02c9      	lsls	r1, r1, #11
 80011ca:	430a      	orrs	r2, r1
 80011cc:	601a      	str	r2, [r3, #0]
 80011ce:	4ba7      	ldr	r3, [pc, #668]	; (800146c <HAL_RCC_OscConfig+0x33c>)
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	4ba6      	ldr	r3, [pc, #664]	; (800146c <HAL_RCC_OscConfig+0x33c>)
 80011d4:	2180      	movs	r1, #128	; 0x80
 80011d6:	0249      	lsls	r1, r1, #9
 80011d8:	430a      	orrs	r2, r1
 80011da:	601a      	str	r2, [r3, #0]
 80011dc:	e012      	b.n	8001204 <HAL_RCC_OscConfig+0xd4>
 80011de:	4ba3      	ldr	r3, [pc, #652]	; (800146c <HAL_RCC_OscConfig+0x33c>)
 80011e0:	681a      	ldr	r2, [r3, #0]
 80011e2:	4ba2      	ldr	r3, [pc, #648]	; (800146c <HAL_RCC_OscConfig+0x33c>)
 80011e4:	49a2      	ldr	r1, [pc, #648]	; (8001470 <HAL_RCC_OscConfig+0x340>)
 80011e6:	400a      	ands	r2, r1
 80011e8:	601a      	str	r2, [r3, #0]
 80011ea:	4ba0      	ldr	r3, [pc, #640]	; (800146c <HAL_RCC_OscConfig+0x33c>)
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	2380      	movs	r3, #128	; 0x80
 80011f0:	025b      	lsls	r3, r3, #9
 80011f2:	4013      	ands	r3, r2
 80011f4:	60fb      	str	r3, [r7, #12]
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	4b9c      	ldr	r3, [pc, #624]	; (800146c <HAL_RCC_OscConfig+0x33c>)
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	4b9b      	ldr	r3, [pc, #620]	; (800146c <HAL_RCC_OscConfig+0x33c>)
 80011fe:	499d      	ldr	r1, [pc, #628]	; (8001474 <HAL_RCC_OscConfig+0x344>)
 8001200:	400a      	ands	r2, r1
 8001202:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d015      	beq.n	8001238 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800120c:	f7ff fcf8 	bl	8000c00 <HAL_GetTick>
 8001210:	0003      	movs	r3, r0
 8001212:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001214:	e009      	b.n	800122a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001216:	f7ff fcf3 	bl	8000c00 <HAL_GetTick>
 800121a:	0002      	movs	r2, r0
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	1ad3      	subs	r3, r2, r3
 8001220:	2b64      	cmp	r3, #100	; 0x64
 8001222:	d902      	bls.n	800122a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001224:	2303      	movs	r3, #3
 8001226:	f000 fb4c 	bl	80018c2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800122a:	4b90      	ldr	r3, [pc, #576]	; (800146c <HAL_RCC_OscConfig+0x33c>)
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	2380      	movs	r3, #128	; 0x80
 8001230:	029b      	lsls	r3, r3, #10
 8001232:	4013      	ands	r3, r2
 8001234:	d0ef      	beq.n	8001216 <HAL_RCC_OscConfig+0xe6>
 8001236:	e015      	b.n	8001264 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001238:	f7ff fce2 	bl	8000c00 <HAL_GetTick>
 800123c:	0003      	movs	r3, r0
 800123e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001240:	e008      	b.n	8001254 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001242:	f7ff fcdd 	bl	8000c00 <HAL_GetTick>
 8001246:	0002      	movs	r2, r0
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	1ad3      	subs	r3, r2, r3
 800124c:	2b64      	cmp	r3, #100	; 0x64
 800124e:	d901      	bls.n	8001254 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001250:	2303      	movs	r3, #3
 8001252:	e336      	b.n	80018c2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001254:	4b85      	ldr	r3, [pc, #532]	; (800146c <HAL_RCC_OscConfig+0x33c>)
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	2380      	movs	r3, #128	; 0x80
 800125a:	029b      	lsls	r3, r3, #10
 800125c:	4013      	ands	r3, r2
 800125e:	d1f0      	bne.n	8001242 <HAL_RCC_OscConfig+0x112>
 8001260:	e000      	b.n	8001264 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001262:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	2202      	movs	r2, #2
 800126a:	4013      	ands	r3, r2
 800126c:	d100      	bne.n	8001270 <HAL_RCC_OscConfig+0x140>
 800126e:	e099      	b.n	80013a4 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	68db      	ldr	r3, [r3, #12]
 8001274:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001278:	2220      	movs	r2, #32
 800127a:	4013      	ands	r3, r2
 800127c:	d009      	beq.n	8001292 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800127e:	4b7b      	ldr	r3, [pc, #492]	; (800146c <HAL_RCC_OscConfig+0x33c>)
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	4b7a      	ldr	r3, [pc, #488]	; (800146c <HAL_RCC_OscConfig+0x33c>)
 8001284:	2120      	movs	r1, #32
 8001286:	430a      	orrs	r2, r1
 8001288:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 800128a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800128c:	2220      	movs	r2, #32
 800128e:	4393      	bics	r3, r2
 8001290:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	2b04      	cmp	r3, #4
 8001296:	d005      	beq.n	80012a4 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	2b0c      	cmp	r3, #12
 800129c:	d13e      	bne.n	800131c <HAL_RCC_OscConfig+0x1ec>
 800129e:	69bb      	ldr	r3, [r7, #24]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d13b      	bne.n	800131c <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80012a4:	4b71      	ldr	r3, [pc, #452]	; (800146c <HAL_RCC_OscConfig+0x33c>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	2204      	movs	r2, #4
 80012aa:	4013      	ands	r3, r2
 80012ac:	d004      	beq.n	80012b8 <HAL_RCC_OscConfig+0x188>
 80012ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d101      	bne.n	80012b8 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80012b4:	2301      	movs	r3, #1
 80012b6:	e304      	b.n	80018c2 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012b8:	4b6c      	ldr	r3, [pc, #432]	; (800146c <HAL_RCC_OscConfig+0x33c>)
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	4a6e      	ldr	r2, [pc, #440]	; (8001478 <HAL_RCC_OscConfig+0x348>)
 80012be:	4013      	ands	r3, r2
 80012c0:	0019      	movs	r1, r3
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	691b      	ldr	r3, [r3, #16]
 80012c6:	021a      	lsls	r2, r3, #8
 80012c8:	4b68      	ldr	r3, [pc, #416]	; (800146c <HAL_RCC_OscConfig+0x33c>)
 80012ca:	430a      	orrs	r2, r1
 80012cc:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80012ce:	4b67      	ldr	r3, [pc, #412]	; (800146c <HAL_RCC_OscConfig+0x33c>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	2209      	movs	r2, #9
 80012d4:	4393      	bics	r3, r2
 80012d6:	0019      	movs	r1, r3
 80012d8:	4b64      	ldr	r3, [pc, #400]	; (800146c <HAL_RCC_OscConfig+0x33c>)
 80012da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012dc:	430a      	orrs	r2, r1
 80012de:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80012e0:	f000 fc42 	bl	8001b68 <HAL_RCC_GetSysClockFreq>
 80012e4:	0001      	movs	r1, r0
 80012e6:	4b61      	ldr	r3, [pc, #388]	; (800146c <HAL_RCC_OscConfig+0x33c>)
 80012e8:	68db      	ldr	r3, [r3, #12]
 80012ea:	091b      	lsrs	r3, r3, #4
 80012ec:	220f      	movs	r2, #15
 80012ee:	4013      	ands	r3, r2
 80012f0:	4a62      	ldr	r2, [pc, #392]	; (800147c <HAL_RCC_OscConfig+0x34c>)
 80012f2:	5cd3      	ldrb	r3, [r2, r3]
 80012f4:	000a      	movs	r2, r1
 80012f6:	40da      	lsrs	r2, r3
 80012f8:	4b61      	ldr	r3, [pc, #388]	; (8001480 <HAL_RCC_OscConfig+0x350>)
 80012fa:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80012fc:	4b61      	ldr	r3, [pc, #388]	; (8001484 <HAL_RCC_OscConfig+0x354>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	2513      	movs	r5, #19
 8001302:	197c      	adds	r4, r7, r5
 8001304:	0018      	movs	r0, r3
 8001306:	f7ff fc35 	bl	8000b74 <HAL_InitTick>
 800130a:	0003      	movs	r3, r0
 800130c:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800130e:	197b      	adds	r3, r7, r5
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d046      	beq.n	80013a4 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8001316:	197b      	adds	r3, r7, r5
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	e2d2      	b.n	80018c2 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800131c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800131e:	2b00      	cmp	r3, #0
 8001320:	d027      	beq.n	8001372 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001322:	4b52      	ldr	r3, [pc, #328]	; (800146c <HAL_RCC_OscConfig+0x33c>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	2209      	movs	r2, #9
 8001328:	4393      	bics	r3, r2
 800132a:	0019      	movs	r1, r3
 800132c:	4b4f      	ldr	r3, [pc, #316]	; (800146c <HAL_RCC_OscConfig+0x33c>)
 800132e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001330:	430a      	orrs	r2, r1
 8001332:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001334:	f7ff fc64 	bl	8000c00 <HAL_GetTick>
 8001338:	0003      	movs	r3, r0
 800133a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800133c:	e008      	b.n	8001350 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800133e:	f7ff fc5f 	bl	8000c00 <HAL_GetTick>
 8001342:	0002      	movs	r2, r0
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	1ad3      	subs	r3, r2, r3
 8001348:	2b02      	cmp	r3, #2
 800134a:	d901      	bls.n	8001350 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 800134c:	2303      	movs	r3, #3
 800134e:	e2b8      	b.n	80018c2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001350:	4b46      	ldr	r3, [pc, #280]	; (800146c <HAL_RCC_OscConfig+0x33c>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	2204      	movs	r2, #4
 8001356:	4013      	ands	r3, r2
 8001358:	d0f1      	beq.n	800133e <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800135a:	4b44      	ldr	r3, [pc, #272]	; (800146c <HAL_RCC_OscConfig+0x33c>)
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	4a46      	ldr	r2, [pc, #280]	; (8001478 <HAL_RCC_OscConfig+0x348>)
 8001360:	4013      	ands	r3, r2
 8001362:	0019      	movs	r1, r3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	691b      	ldr	r3, [r3, #16]
 8001368:	021a      	lsls	r2, r3, #8
 800136a:	4b40      	ldr	r3, [pc, #256]	; (800146c <HAL_RCC_OscConfig+0x33c>)
 800136c:	430a      	orrs	r2, r1
 800136e:	605a      	str	r2, [r3, #4]
 8001370:	e018      	b.n	80013a4 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001372:	4b3e      	ldr	r3, [pc, #248]	; (800146c <HAL_RCC_OscConfig+0x33c>)
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	4b3d      	ldr	r3, [pc, #244]	; (800146c <HAL_RCC_OscConfig+0x33c>)
 8001378:	2101      	movs	r1, #1
 800137a:	438a      	bics	r2, r1
 800137c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800137e:	f7ff fc3f 	bl	8000c00 <HAL_GetTick>
 8001382:	0003      	movs	r3, r0
 8001384:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001386:	e008      	b.n	800139a <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001388:	f7ff fc3a 	bl	8000c00 <HAL_GetTick>
 800138c:	0002      	movs	r2, r0
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	2b02      	cmp	r3, #2
 8001394:	d901      	bls.n	800139a <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8001396:	2303      	movs	r3, #3
 8001398:	e293      	b.n	80018c2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800139a:	4b34      	ldr	r3, [pc, #208]	; (800146c <HAL_RCC_OscConfig+0x33c>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	2204      	movs	r2, #4
 80013a0:	4013      	ands	r3, r2
 80013a2:	d1f1      	bne.n	8001388 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	2210      	movs	r2, #16
 80013aa:	4013      	ands	r3, r2
 80013ac:	d100      	bne.n	80013b0 <HAL_RCC_OscConfig+0x280>
 80013ae:	e0a2      	b.n	80014f6 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80013b0:	69fb      	ldr	r3, [r7, #28]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d140      	bne.n	8001438 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80013b6:	4b2d      	ldr	r3, [pc, #180]	; (800146c <HAL_RCC_OscConfig+0x33c>)
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	2380      	movs	r3, #128	; 0x80
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	4013      	ands	r3, r2
 80013c0:	d005      	beq.n	80013ce <HAL_RCC_OscConfig+0x29e>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	69db      	ldr	r3, [r3, #28]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d101      	bne.n	80013ce <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
 80013cc:	e279      	b.n	80018c2 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013ce:	4b27      	ldr	r3, [pc, #156]	; (800146c <HAL_RCC_OscConfig+0x33c>)
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	4a2d      	ldr	r2, [pc, #180]	; (8001488 <HAL_RCC_OscConfig+0x358>)
 80013d4:	4013      	ands	r3, r2
 80013d6:	0019      	movs	r1, r3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013dc:	4b23      	ldr	r3, [pc, #140]	; (800146c <HAL_RCC_OscConfig+0x33c>)
 80013de:	430a      	orrs	r2, r1
 80013e0:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013e2:	4b22      	ldr	r3, [pc, #136]	; (800146c <HAL_RCC_OscConfig+0x33c>)
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	021b      	lsls	r3, r3, #8
 80013e8:	0a19      	lsrs	r1, r3, #8
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6a1b      	ldr	r3, [r3, #32]
 80013ee:	061a      	lsls	r2, r3, #24
 80013f0:	4b1e      	ldr	r3, [pc, #120]	; (800146c <HAL_RCC_OscConfig+0x33c>)
 80013f2:	430a      	orrs	r2, r1
 80013f4:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013fa:	0b5b      	lsrs	r3, r3, #13
 80013fc:	3301      	adds	r3, #1
 80013fe:	2280      	movs	r2, #128	; 0x80
 8001400:	0212      	lsls	r2, r2, #8
 8001402:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001404:	4b19      	ldr	r3, [pc, #100]	; (800146c <HAL_RCC_OscConfig+0x33c>)
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	091b      	lsrs	r3, r3, #4
 800140a:	210f      	movs	r1, #15
 800140c:	400b      	ands	r3, r1
 800140e:	491b      	ldr	r1, [pc, #108]	; (800147c <HAL_RCC_OscConfig+0x34c>)
 8001410:	5ccb      	ldrb	r3, [r1, r3]
 8001412:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001414:	4b1a      	ldr	r3, [pc, #104]	; (8001480 <HAL_RCC_OscConfig+0x350>)
 8001416:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001418:	4b1a      	ldr	r3, [pc, #104]	; (8001484 <HAL_RCC_OscConfig+0x354>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	2513      	movs	r5, #19
 800141e:	197c      	adds	r4, r7, r5
 8001420:	0018      	movs	r0, r3
 8001422:	f7ff fba7 	bl	8000b74 <HAL_InitTick>
 8001426:	0003      	movs	r3, r0
 8001428:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800142a:	197b      	adds	r3, r7, r5
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d061      	beq.n	80014f6 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8001432:	197b      	adds	r3, r7, r5
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	e244      	b.n	80018c2 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	69db      	ldr	r3, [r3, #28]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d040      	beq.n	80014c2 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001440:	4b0a      	ldr	r3, [pc, #40]	; (800146c <HAL_RCC_OscConfig+0x33c>)
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	4b09      	ldr	r3, [pc, #36]	; (800146c <HAL_RCC_OscConfig+0x33c>)
 8001446:	2180      	movs	r1, #128	; 0x80
 8001448:	0049      	lsls	r1, r1, #1
 800144a:	430a      	orrs	r2, r1
 800144c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800144e:	f7ff fbd7 	bl	8000c00 <HAL_GetTick>
 8001452:	0003      	movs	r3, r0
 8001454:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001456:	e019      	b.n	800148c <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001458:	f7ff fbd2 	bl	8000c00 <HAL_GetTick>
 800145c:	0002      	movs	r2, r0
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	2b02      	cmp	r3, #2
 8001464:	d912      	bls.n	800148c <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8001466:	2303      	movs	r3, #3
 8001468:	e22b      	b.n	80018c2 <HAL_RCC_OscConfig+0x792>
 800146a:	46c0      	nop			; (mov r8, r8)
 800146c:	40021000 	.word	0x40021000
 8001470:	fffeffff 	.word	0xfffeffff
 8001474:	fffbffff 	.word	0xfffbffff
 8001478:	ffffe0ff 	.word	0xffffe0ff
 800147c:	08004054 	.word	0x08004054
 8001480:	20000000 	.word	0x20000000
 8001484:	20000004 	.word	0x20000004
 8001488:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800148c:	4bca      	ldr	r3, [pc, #808]	; (80017b8 <HAL_RCC_OscConfig+0x688>)
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	2380      	movs	r3, #128	; 0x80
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	4013      	ands	r3, r2
 8001496:	d0df      	beq.n	8001458 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001498:	4bc7      	ldr	r3, [pc, #796]	; (80017b8 <HAL_RCC_OscConfig+0x688>)
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	4ac7      	ldr	r2, [pc, #796]	; (80017bc <HAL_RCC_OscConfig+0x68c>)
 800149e:	4013      	ands	r3, r2
 80014a0:	0019      	movs	r1, r3
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014a6:	4bc4      	ldr	r3, [pc, #784]	; (80017b8 <HAL_RCC_OscConfig+0x688>)
 80014a8:	430a      	orrs	r2, r1
 80014aa:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014ac:	4bc2      	ldr	r3, [pc, #776]	; (80017b8 <HAL_RCC_OscConfig+0x688>)
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	021b      	lsls	r3, r3, #8
 80014b2:	0a19      	lsrs	r1, r3, #8
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6a1b      	ldr	r3, [r3, #32]
 80014b8:	061a      	lsls	r2, r3, #24
 80014ba:	4bbf      	ldr	r3, [pc, #764]	; (80017b8 <HAL_RCC_OscConfig+0x688>)
 80014bc:	430a      	orrs	r2, r1
 80014be:	605a      	str	r2, [r3, #4]
 80014c0:	e019      	b.n	80014f6 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80014c2:	4bbd      	ldr	r3, [pc, #756]	; (80017b8 <HAL_RCC_OscConfig+0x688>)
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	4bbc      	ldr	r3, [pc, #752]	; (80017b8 <HAL_RCC_OscConfig+0x688>)
 80014c8:	49bd      	ldr	r1, [pc, #756]	; (80017c0 <HAL_RCC_OscConfig+0x690>)
 80014ca:	400a      	ands	r2, r1
 80014cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ce:	f7ff fb97 	bl	8000c00 <HAL_GetTick>
 80014d2:	0003      	movs	r3, r0
 80014d4:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80014d6:	e008      	b.n	80014ea <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80014d8:	f7ff fb92 	bl	8000c00 <HAL_GetTick>
 80014dc:	0002      	movs	r2, r0
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	2b02      	cmp	r3, #2
 80014e4:	d901      	bls.n	80014ea <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 80014e6:	2303      	movs	r3, #3
 80014e8:	e1eb      	b.n	80018c2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80014ea:	4bb3      	ldr	r3, [pc, #716]	; (80017b8 <HAL_RCC_OscConfig+0x688>)
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	2380      	movs	r3, #128	; 0x80
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	4013      	ands	r3, r2
 80014f4:	d1f0      	bne.n	80014d8 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	2208      	movs	r2, #8
 80014fc:	4013      	ands	r3, r2
 80014fe:	d036      	beq.n	800156e <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	695b      	ldr	r3, [r3, #20]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d019      	beq.n	800153c <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001508:	4bab      	ldr	r3, [pc, #684]	; (80017b8 <HAL_RCC_OscConfig+0x688>)
 800150a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800150c:	4baa      	ldr	r3, [pc, #680]	; (80017b8 <HAL_RCC_OscConfig+0x688>)
 800150e:	2101      	movs	r1, #1
 8001510:	430a      	orrs	r2, r1
 8001512:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001514:	f7ff fb74 	bl	8000c00 <HAL_GetTick>
 8001518:	0003      	movs	r3, r0
 800151a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800151c:	e008      	b.n	8001530 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800151e:	f7ff fb6f 	bl	8000c00 <HAL_GetTick>
 8001522:	0002      	movs	r2, r0
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	1ad3      	subs	r3, r2, r3
 8001528:	2b02      	cmp	r3, #2
 800152a:	d901      	bls.n	8001530 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 800152c:	2303      	movs	r3, #3
 800152e:	e1c8      	b.n	80018c2 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001530:	4ba1      	ldr	r3, [pc, #644]	; (80017b8 <HAL_RCC_OscConfig+0x688>)
 8001532:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001534:	2202      	movs	r2, #2
 8001536:	4013      	ands	r3, r2
 8001538:	d0f1      	beq.n	800151e <HAL_RCC_OscConfig+0x3ee>
 800153a:	e018      	b.n	800156e <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800153c:	4b9e      	ldr	r3, [pc, #632]	; (80017b8 <HAL_RCC_OscConfig+0x688>)
 800153e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001540:	4b9d      	ldr	r3, [pc, #628]	; (80017b8 <HAL_RCC_OscConfig+0x688>)
 8001542:	2101      	movs	r1, #1
 8001544:	438a      	bics	r2, r1
 8001546:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001548:	f7ff fb5a 	bl	8000c00 <HAL_GetTick>
 800154c:	0003      	movs	r3, r0
 800154e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001550:	e008      	b.n	8001564 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001552:	f7ff fb55 	bl	8000c00 <HAL_GetTick>
 8001556:	0002      	movs	r2, r0
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	1ad3      	subs	r3, r2, r3
 800155c:	2b02      	cmp	r3, #2
 800155e:	d901      	bls.n	8001564 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8001560:	2303      	movs	r3, #3
 8001562:	e1ae      	b.n	80018c2 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001564:	4b94      	ldr	r3, [pc, #592]	; (80017b8 <HAL_RCC_OscConfig+0x688>)
 8001566:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001568:	2202      	movs	r2, #2
 800156a:	4013      	ands	r3, r2
 800156c:	d1f1      	bne.n	8001552 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	2204      	movs	r2, #4
 8001574:	4013      	ands	r3, r2
 8001576:	d100      	bne.n	800157a <HAL_RCC_OscConfig+0x44a>
 8001578:	e0ae      	b.n	80016d8 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800157a:	2023      	movs	r0, #35	; 0x23
 800157c:	183b      	adds	r3, r7, r0
 800157e:	2200      	movs	r2, #0
 8001580:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001582:	4b8d      	ldr	r3, [pc, #564]	; (80017b8 <HAL_RCC_OscConfig+0x688>)
 8001584:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001586:	2380      	movs	r3, #128	; 0x80
 8001588:	055b      	lsls	r3, r3, #21
 800158a:	4013      	ands	r3, r2
 800158c:	d109      	bne.n	80015a2 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800158e:	4b8a      	ldr	r3, [pc, #552]	; (80017b8 <HAL_RCC_OscConfig+0x688>)
 8001590:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001592:	4b89      	ldr	r3, [pc, #548]	; (80017b8 <HAL_RCC_OscConfig+0x688>)
 8001594:	2180      	movs	r1, #128	; 0x80
 8001596:	0549      	lsls	r1, r1, #21
 8001598:	430a      	orrs	r2, r1
 800159a:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800159c:	183b      	adds	r3, r7, r0
 800159e:	2201      	movs	r2, #1
 80015a0:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015a2:	4b88      	ldr	r3, [pc, #544]	; (80017c4 <HAL_RCC_OscConfig+0x694>)
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	2380      	movs	r3, #128	; 0x80
 80015a8:	005b      	lsls	r3, r3, #1
 80015aa:	4013      	ands	r3, r2
 80015ac:	d11a      	bne.n	80015e4 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015ae:	4b85      	ldr	r3, [pc, #532]	; (80017c4 <HAL_RCC_OscConfig+0x694>)
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	4b84      	ldr	r3, [pc, #528]	; (80017c4 <HAL_RCC_OscConfig+0x694>)
 80015b4:	2180      	movs	r1, #128	; 0x80
 80015b6:	0049      	lsls	r1, r1, #1
 80015b8:	430a      	orrs	r2, r1
 80015ba:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015bc:	f7ff fb20 	bl	8000c00 <HAL_GetTick>
 80015c0:	0003      	movs	r3, r0
 80015c2:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015c4:	e008      	b.n	80015d8 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015c6:	f7ff fb1b 	bl	8000c00 <HAL_GetTick>
 80015ca:	0002      	movs	r2, r0
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	1ad3      	subs	r3, r2, r3
 80015d0:	2b64      	cmp	r3, #100	; 0x64
 80015d2:	d901      	bls.n	80015d8 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 80015d4:	2303      	movs	r3, #3
 80015d6:	e174      	b.n	80018c2 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015d8:	4b7a      	ldr	r3, [pc, #488]	; (80017c4 <HAL_RCC_OscConfig+0x694>)
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	2380      	movs	r3, #128	; 0x80
 80015de:	005b      	lsls	r3, r3, #1
 80015e0:	4013      	ands	r3, r2
 80015e2:	d0f0      	beq.n	80015c6 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	689a      	ldr	r2, [r3, #8]
 80015e8:	2380      	movs	r3, #128	; 0x80
 80015ea:	005b      	lsls	r3, r3, #1
 80015ec:	429a      	cmp	r2, r3
 80015ee:	d107      	bne.n	8001600 <HAL_RCC_OscConfig+0x4d0>
 80015f0:	4b71      	ldr	r3, [pc, #452]	; (80017b8 <HAL_RCC_OscConfig+0x688>)
 80015f2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80015f4:	4b70      	ldr	r3, [pc, #448]	; (80017b8 <HAL_RCC_OscConfig+0x688>)
 80015f6:	2180      	movs	r1, #128	; 0x80
 80015f8:	0049      	lsls	r1, r1, #1
 80015fa:	430a      	orrs	r2, r1
 80015fc:	651a      	str	r2, [r3, #80]	; 0x50
 80015fe:	e031      	b.n	8001664 <HAL_RCC_OscConfig+0x534>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d10c      	bne.n	8001622 <HAL_RCC_OscConfig+0x4f2>
 8001608:	4b6b      	ldr	r3, [pc, #428]	; (80017b8 <HAL_RCC_OscConfig+0x688>)
 800160a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800160c:	4b6a      	ldr	r3, [pc, #424]	; (80017b8 <HAL_RCC_OscConfig+0x688>)
 800160e:	496c      	ldr	r1, [pc, #432]	; (80017c0 <HAL_RCC_OscConfig+0x690>)
 8001610:	400a      	ands	r2, r1
 8001612:	651a      	str	r2, [r3, #80]	; 0x50
 8001614:	4b68      	ldr	r3, [pc, #416]	; (80017b8 <HAL_RCC_OscConfig+0x688>)
 8001616:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001618:	4b67      	ldr	r3, [pc, #412]	; (80017b8 <HAL_RCC_OscConfig+0x688>)
 800161a:	496b      	ldr	r1, [pc, #428]	; (80017c8 <HAL_RCC_OscConfig+0x698>)
 800161c:	400a      	ands	r2, r1
 800161e:	651a      	str	r2, [r3, #80]	; 0x50
 8001620:	e020      	b.n	8001664 <HAL_RCC_OscConfig+0x534>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	689a      	ldr	r2, [r3, #8]
 8001626:	23a0      	movs	r3, #160	; 0xa0
 8001628:	00db      	lsls	r3, r3, #3
 800162a:	429a      	cmp	r2, r3
 800162c:	d10e      	bne.n	800164c <HAL_RCC_OscConfig+0x51c>
 800162e:	4b62      	ldr	r3, [pc, #392]	; (80017b8 <HAL_RCC_OscConfig+0x688>)
 8001630:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001632:	4b61      	ldr	r3, [pc, #388]	; (80017b8 <HAL_RCC_OscConfig+0x688>)
 8001634:	2180      	movs	r1, #128	; 0x80
 8001636:	00c9      	lsls	r1, r1, #3
 8001638:	430a      	orrs	r2, r1
 800163a:	651a      	str	r2, [r3, #80]	; 0x50
 800163c:	4b5e      	ldr	r3, [pc, #376]	; (80017b8 <HAL_RCC_OscConfig+0x688>)
 800163e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001640:	4b5d      	ldr	r3, [pc, #372]	; (80017b8 <HAL_RCC_OscConfig+0x688>)
 8001642:	2180      	movs	r1, #128	; 0x80
 8001644:	0049      	lsls	r1, r1, #1
 8001646:	430a      	orrs	r2, r1
 8001648:	651a      	str	r2, [r3, #80]	; 0x50
 800164a:	e00b      	b.n	8001664 <HAL_RCC_OscConfig+0x534>
 800164c:	4b5a      	ldr	r3, [pc, #360]	; (80017b8 <HAL_RCC_OscConfig+0x688>)
 800164e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001650:	4b59      	ldr	r3, [pc, #356]	; (80017b8 <HAL_RCC_OscConfig+0x688>)
 8001652:	495b      	ldr	r1, [pc, #364]	; (80017c0 <HAL_RCC_OscConfig+0x690>)
 8001654:	400a      	ands	r2, r1
 8001656:	651a      	str	r2, [r3, #80]	; 0x50
 8001658:	4b57      	ldr	r3, [pc, #348]	; (80017b8 <HAL_RCC_OscConfig+0x688>)
 800165a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800165c:	4b56      	ldr	r3, [pc, #344]	; (80017b8 <HAL_RCC_OscConfig+0x688>)
 800165e:	495a      	ldr	r1, [pc, #360]	; (80017c8 <HAL_RCC_OscConfig+0x698>)
 8001660:	400a      	ands	r2, r1
 8001662:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d015      	beq.n	8001698 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800166c:	f7ff fac8 	bl	8000c00 <HAL_GetTick>
 8001670:	0003      	movs	r3, r0
 8001672:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001674:	e009      	b.n	800168a <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001676:	f7ff fac3 	bl	8000c00 <HAL_GetTick>
 800167a:	0002      	movs	r2, r0
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	1ad3      	subs	r3, r2, r3
 8001680:	4a52      	ldr	r2, [pc, #328]	; (80017cc <HAL_RCC_OscConfig+0x69c>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d901      	bls.n	800168a <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8001686:	2303      	movs	r3, #3
 8001688:	e11b      	b.n	80018c2 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800168a:	4b4b      	ldr	r3, [pc, #300]	; (80017b8 <HAL_RCC_OscConfig+0x688>)
 800168c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800168e:	2380      	movs	r3, #128	; 0x80
 8001690:	009b      	lsls	r3, r3, #2
 8001692:	4013      	ands	r3, r2
 8001694:	d0ef      	beq.n	8001676 <HAL_RCC_OscConfig+0x546>
 8001696:	e014      	b.n	80016c2 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001698:	f7ff fab2 	bl	8000c00 <HAL_GetTick>
 800169c:	0003      	movs	r3, r0
 800169e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80016a0:	e009      	b.n	80016b6 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016a2:	f7ff faad 	bl	8000c00 <HAL_GetTick>
 80016a6:	0002      	movs	r2, r0
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	1ad3      	subs	r3, r2, r3
 80016ac:	4a47      	ldr	r2, [pc, #284]	; (80017cc <HAL_RCC_OscConfig+0x69c>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d901      	bls.n	80016b6 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 80016b2:	2303      	movs	r3, #3
 80016b4:	e105      	b.n	80018c2 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80016b6:	4b40      	ldr	r3, [pc, #256]	; (80017b8 <HAL_RCC_OscConfig+0x688>)
 80016b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016ba:	2380      	movs	r3, #128	; 0x80
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	4013      	ands	r3, r2
 80016c0:	d1ef      	bne.n	80016a2 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80016c2:	2323      	movs	r3, #35	; 0x23
 80016c4:	18fb      	adds	r3, r7, r3
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d105      	bne.n	80016d8 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016cc:	4b3a      	ldr	r3, [pc, #232]	; (80017b8 <HAL_RCC_OscConfig+0x688>)
 80016ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80016d0:	4b39      	ldr	r3, [pc, #228]	; (80017b8 <HAL_RCC_OscConfig+0x688>)
 80016d2:	493f      	ldr	r1, [pc, #252]	; (80017d0 <HAL_RCC_OscConfig+0x6a0>)
 80016d4:	400a      	ands	r2, r1
 80016d6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	2220      	movs	r2, #32
 80016de:	4013      	ands	r3, r2
 80016e0:	d049      	beq.n	8001776 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	699b      	ldr	r3, [r3, #24]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d026      	beq.n	8001738 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80016ea:	4b33      	ldr	r3, [pc, #204]	; (80017b8 <HAL_RCC_OscConfig+0x688>)
 80016ec:	689a      	ldr	r2, [r3, #8]
 80016ee:	4b32      	ldr	r3, [pc, #200]	; (80017b8 <HAL_RCC_OscConfig+0x688>)
 80016f0:	2101      	movs	r1, #1
 80016f2:	430a      	orrs	r2, r1
 80016f4:	609a      	str	r2, [r3, #8]
 80016f6:	4b30      	ldr	r3, [pc, #192]	; (80017b8 <HAL_RCC_OscConfig+0x688>)
 80016f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016fa:	4b2f      	ldr	r3, [pc, #188]	; (80017b8 <HAL_RCC_OscConfig+0x688>)
 80016fc:	2101      	movs	r1, #1
 80016fe:	430a      	orrs	r2, r1
 8001700:	635a      	str	r2, [r3, #52]	; 0x34
 8001702:	4b34      	ldr	r3, [pc, #208]	; (80017d4 <HAL_RCC_OscConfig+0x6a4>)
 8001704:	6a1a      	ldr	r2, [r3, #32]
 8001706:	4b33      	ldr	r3, [pc, #204]	; (80017d4 <HAL_RCC_OscConfig+0x6a4>)
 8001708:	2180      	movs	r1, #128	; 0x80
 800170a:	0189      	lsls	r1, r1, #6
 800170c:	430a      	orrs	r2, r1
 800170e:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001710:	f7ff fa76 	bl	8000c00 <HAL_GetTick>
 8001714:	0003      	movs	r3, r0
 8001716:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001718:	e008      	b.n	800172c <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800171a:	f7ff fa71 	bl	8000c00 <HAL_GetTick>
 800171e:	0002      	movs	r2, r0
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	1ad3      	subs	r3, r2, r3
 8001724:	2b02      	cmp	r3, #2
 8001726:	d901      	bls.n	800172c <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8001728:	2303      	movs	r3, #3
 800172a:	e0ca      	b.n	80018c2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800172c:	4b22      	ldr	r3, [pc, #136]	; (80017b8 <HAL_RCC_OscConfig+0x688>)
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	2202      	movs	r2, #2
 8001732:	4013      	ands	r3, r2
 8001734:	d0f1      	beq.n	800171a <HAL_RCC_OscConfig+0x5ea>
 8001736:	e01e      	b.n	8001776 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001738:	4b1f      	ldr	r3, [pc, #124]	; (80017b8 <HAL_RCC_OscConfig+0x688>)
 800173a:	689a      	ldr	r2, [r3, #8]
 800173c:	4b1e      	ldr	r3, [pc, #120]	; (80017b8 <HAL_RCC_OscConfig+0x688>)
 800173e:	2101      	movs	r1, #1
 8001740:	438a      	bics	r2, r1
 8001742:	609a      	str	r2, [r3, #8]
 8001744:	4b23      	ldr	r3, [pc, #140]	; (80017d4 <HAL_RCC_OscConfig+0x6a4>)
 8001746:	6a1a      	ldr	r2, [r3, #32]
 8001748:	4b22      	ldr	r3, [pc, #136]	; (80017d4 <HAL_RCC_OscConfig+0x6a4>)
 800174a:	4923      	ldr	r1, [pc, #140]	; (80017d8 <HAL_RCC_OscConfig+0x6a8>)
 800174c:	400a      	ands	r2, r1
 800174e:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001750:	f7ff fa56 	bl	8000c00 <HAL_GetTick>
 8001754:	0003      	movs	r3, r0
 8001756:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001758:	e008      	b.n	800176c <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800175a:	f7ff fa51 	bl	8000c00 <HAL_GetTick>
 800175e:	0002      	movs	r2, r0
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	1ad3      	subs	r3, r2, r3
 8001764:	2b02      	cmp	r3, #2
 8001766:	d901      	bls.n	800176c <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8001768:	2303      	movs	r3, #3
 800176a:	e0aa      	b.n	80018c2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800176c:	4b12      	ldr	r3, [pc, #72]	; (80017b8 <HAL_RCC_OscConfig+0x688>)
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	2202      	movs	r2, #2
 8001772:	4013      	ands	r3, r2
 8001774:	d1f1      	bne.n	800175a <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800177a:	2b00      	cmp	r3, #0
 800177c:	d100      	bne.n	8001780 <HAL_RCC_OscConfig+0x650>
 800177e:	e09f      	b.n	80018c0 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001780:	69fb      	ldr	r3, [r7, #28]
 8001782:	2b0c      	cmp	r3, #12
 8001784:	d100      	bne.n	8001788 <HAL_RCC_OscConfig+0x658>
 8001786:	e078      	b.n	800187a <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800178c:	2b02      	cmp	r3, #2
 800178e:	d159      	bne.n	8001844 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001790:	4b09      	ldr	r3, [pc, #36]	; (80017b8 <HAL_RCC_OscConfig+0x688>)
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	4b08      	ldr	r3, [pc, #32]	; (80017b8 <HAL_RCC_OscConfig+0x688>)
 8001796:	4911      	ldr	r1, [pc, #68]	; (80017dc <HAL_RCC_OscConfig+0x6ac>)
 8001798:	400a      	ands	r2, r1
 800179a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800179c:	f7ff fa30 	bl	8000c00 <HAL_GetTick>
 80017a0:	0003      	movs	r3, r0
 80017a2:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80017a4:	e01c      	b.n	80017e0 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017a6:	f7ff fa2b 	bl	8000c00 <HAL_GetTick>
 80017aa:	0002      	movs	r2, r0
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	2b02      	cmp	r3, #2
 80017b2:	d915      	bls.n	80017e0 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 80017b4:	2303      	movs	r3, #3
 80017b6:	e084      	b.n	80018c2 <HAL_RCC_OscConfig+0x792>
 80017b8:	40021000 	.word	0x40021000
 80017bc:	ffff1fff 	.word	0xffff1fff
 80017c0:	fffffeff 	.word	0xfffffeff
 80017c4:	40007000 	.word	0x40007000
 80017c8:	fffffbff 	.word	0xfffffbff
 80017cc:	00001388 	.word	0x00001388
 80017d0:	efffffff 	.word	0xefffffff
 80017d4:	40010000 	.word	0x40010000
 80017d8:	ffffdfff 	.word	0xffffdfff
 80017dc:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80017e0:	4b3a      	ldr	r3, [pc, #232]	; (80018cc <HAL_RCC_OscConfig+0x79c>)
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	2380      	movs	r3, #128	; 0x80
 80017e6:	049b      	lsls	r3, r3, #18
 80017e8:	4013      	ands	r3, r2
 80017ea:	d1dc      	bne.n	80017a6 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017ec:	4b37      	ldr	r3, [pc, #220]	; (80018cc <HAL_RCC_OscConfig+0x79c>)
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	4a37      	ldr	r2, [pc, #220]	; (80018d0 <HAL_RCC_OscConfig+0x7a0>)
 80017f2:	4013      	ands	r3, r2
 80017f4:	0019      	movs	r1, r3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fe:	431a      	orrs	r2, r3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001804:	431a      	orrs	r2, r3
 8001806:	4b31      	ldr	r3, [pc, #196]	; (80018cc <HAL_RCC_OscConfig+0x79c>)
 8001808:	430a      	orrs	r2, r1
 800180a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800180c:	4b2f      	ldr	r3, [pc, #188]	; (80018cc <HAL_RCC_OscConfig+0x79c>)
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	4b2e      	ldr	r3, [pc, #184]	; (80018cc <HAL_RCC_OscConfig+0x79c>)
 8001812:	2180      	movs	r1, #128	; 0x80
 8001814:	0449      	lsls	r1, r1, #17
 8001816:	430a      	orrs	r2, r1
 8001818:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800181a:	f7ff f9f1 	bl	8000c00 <HAL_GetTick>
 800181e:	0003      	movs	r3, r0
 8001820:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001822:	e008      	b.n	8001836 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001824:	f7ff f9ec 	bl	8000c00 <HAL_GetTick>
 8001828:	0002      	movs	r2, r0
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	2b02      	cmp	r3, #2
 8001830:	d901      	bls.n	8001836 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8001832:	2303      	movs	r3, #3
 8001834:	e045      	b.n	80018c2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001836:	4b25      	ldr	r3, [pc, #148]	; (80018cc <HAL_RCC_OscConfig+0x79c>)
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	2380      	movs	r3, #128	; 0x80
 800183c:	049b      	lsls	r3, r3, #18
 800183e:	4013      	ands	r3, r2
 8001840:	d0f0      	beq.n	8001824 <HAL_RCC_OscConfig+0x6f4>
 8001842:	e03d      	b.n	80018c0 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001844:	4b21      	ldr	r3, [pc, #132]	; (80018cc <HAL_RCC_OscConfig+0x79c>)
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	4b20      	ldr	r3, [pc, #128]	; (80018cc <HAL_RCC_OscConfig+0x79c>)
 800184a:	4922      	ldr	r1, [pc, #136]	; (80018d4 <HAL_RCC_OscConfig+0x7a4>)
 800184c:	400a      	ands	r2, r1
 800184e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001850:	f7ff f9d6 	bl	8000c00 <HAL_GetTick>
 8001854:	0003      	movs	r3, r0
 8001856:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001858:	e008      	b.n	800186c <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800185a:	f7ff f9d1 	bl	8000c00 <HAL_GetTick>
 800185e:	0002      	movs	r2, r0
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	2b02      	cmp	r3, #2
 8001866:	d901      	bls.n	800186c <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8001868:	2303      	movs	r3, #3
 800186a:	e02a      	b.n	80018c2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800186c:	4b17      	ldr	r3, [pc, #92]	; (80018cc <HAL_RCC_OscConfig+0x79c>)
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	2380      	movs	r3, #128	; 0x80
 8001872:	049b      	lsls	r3, r3, #18
 8001874:	4013      	ands	r3, r2
 8001876:	d1f0      	bne.n	800185a <HAL_RCC_OscConfig+0x72a>
 8001878:	e022      	b.n	80018c0 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800187e:	2b01      	cmp	r3, #1
 8001880:	d101      	bne.n	8001886 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e01d      	b.n	80018c2 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001886:	4b11      	ldr	r3, [pc, #68]	; (80018cc <HAL_RCC_OscConfig+0x79c>)
 8001888:	68db      	ldr	r3, [r3, #12]
 800188a:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800188c:	69ba      	ldr	r2, [r7, #24]
 800188e:	2380      	movs	r3, #128	; 0x80
 8001890:	025b      	lsls	r3, r3, #9
 8001892:	401a      	ands	r2, r3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001898:	429a      	cmp	r2, r3
 800189a:	d10f      	bne.n	80018bc <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800189c:	69ba      	ldr	r2, [r7, #24]
 800189e:	23f0      	movs	r3, #240	; 0xf0
 80018a0:	039b      	lsls	r3, r3, #14
 80018a2:	401a      	ands	r2, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d107      	bne.n	80018bc <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80018ac:	69ba      	ldr	r2, [r7, #24]
 80018ae:	23c0      	movs	r3, #192	; 0xc0
 80018b0:	041b      	lsls	r3, r3, #16
 80018b2:	401a      	ands	r2, r3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d001      	beq.n	80018c0 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	e000      	b.n	80018c2 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 80018c0:	2300      	movs	r3, #0
}
 80018c2:	0018      	movs	r0, r3
 80018c4:	46bd      	mov	sp, r7
 80018c6:	b00a      	add	sp, #40	; 0x28
 80018c8:	bdb0      	pop	{r4, r5, r7, pc}
 80018ca:	46c0      	nop			; (mov r8, r8)
 80018cc:	40021000 	.word	0x40021000
 80018d0:	ff02ffff 	.word	0xff02ffff
 80018d4:	feffffff 	.word	0xfeffffff

080018d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018d8:	b5b0      	push	{r4, r5, r7, lr}
 80018da:	b084      	sub	sp, #16
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d101      	bne.n	80018ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018e8:	2301      	movs	r3, #1
 80018ea:	e128      	b.n	8001b3e <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018ec:	4b96      	ldr	r3, [pc, #600]	; (8001b48 <HAL_RCC_ClockConfig+0x270>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	2201      	movs	r2, #1
 80018f2:	4013      	ands	r3, r2
 80018f4:	683a      	ldr	r2, [r7, #0]
 80018f6:	429a      	cmp	r2, r3
 80018f8:	d91e      	bls.n	8001938 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018fa:	4b93      	ldr	r3, [pc, #588]	; (8001b48 <HAL_RCC_ClockConfig+0x270>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	2201      	movs	r2, #1
 8001900:	4393      	bics	r3, r2
 8001902:	0019      	movs	r1, r3
 8001904:	4b90      	ldr	r3, [pc, #576]	; (8001b48 <HAL_RCC_ClockConfig+0x270>)
 8001906:	683a      	ldr	r2, [r7, #0]
 8001908:	430a      	orrs	r2, r1
 800190a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800190c:	f7ff f978 	bl	8000c00 <HAL_GetTick>
 8001910:	0003      	movs	r3, r0
 8001912:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001914:	e009      	b.n	800192a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001916:	f7ff f973 	bl	8000c00 <HAL_GetTick>
 800191a:	0002      	movs	r2, r0
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	4a8a      	ldr	r2, [pc, #552]	; (8001b4c <HAL_RCC_ClockConfig+0x274>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d901      	bls.n	800192a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001926:	2303      	movs	r3, #3
 8001928:	e109      	b.n	8001b3e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800192a:	4b87      	ldr	r3, [pc, #540]	; (8001b48 <HAL_RCC_ClockConfig+0x270>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	2201      	movs	r2, #1
 8001930:	4013      	ands	r3, r2
 8001932:	683a      	ldr	r2, [r7, #0]
 8001934:	429a      	cmp	r2, r3
 8001936:	d1ee      	bne.n	8001916 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	2202      	movs	r2, #2
 800193e:	4013      	ands	r3, r2
 8001940:	d009      	beq.n	8001956 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001942:	4b83      	ldr	r3, [pc, #524]	; (8001b50 <HAL_RCC_ClockConfig+0x278>)
 8001944:	68db      	ldr	r3, [r3, #12]
 8001946:	22f0      	movs	r2, #240	; 0xf0
 8001948:	4393      	bics	r3, r2
 800194a:	0019      	movs	r1, r3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	689a      	ldr	r2, [r3, #8]
 8001950:	4b7f      	ldr	r3, [pc, #508]	; (8001b50 <HAL_RCC_ClockConfig+0x278>)
 8001952:	430a      	orrs	r2, r1
 8001954:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	2201      	movs	r2, #1
 800195c:	4013      	ands	r3, r2
 800195e:	d100      	bne.n	8001962 <HAL_RCC_ClockConfig+0x8a>
 8001960:	e089      	b.n	8001a76 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	2b02      	cmp	r3, #2
 8001968:	d107      	bne.n	800197a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800196a:	4b79      	ldr	r3, [pc, #484]	; (8001b50 <HAL_RCC_ClockConfig+0x278>)
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	2380      	movs	r3, #128	; 0x80
 8001970:	029b      	lsls	r3, r3, #10
 8001972:	4013      	ands	r3, r2
 8001974:	d120      	bne.n	80019b8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e0e1      	b.n	8001b3e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	2b03      	cmp	r3, #3
 8001980:	d107      	bne.n	8001992 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001982:	4b73      	ldr	r3, [pc, #460]	; (8001b50 <HAL_RCC_ClockConfig+0x278>)
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	2380      	movs	r3, #128	; 0x80
 8001988:	049b      	lsls	r3, r3, #18
 800198a:	4013      	ands	r3, r2
 800198c:	d114      	bne.n	80019b8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e0d5      	b.n	8001b3e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	2b01      	cmp	r3, #1
 8001998:	d106      	bne.n	80019a8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800199a:	4b6d      	ldr	r3, [pc, #436]	; (8001b50 <HAL_RCC_ClockConfig+0x278>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	2204      	movs	r2, #4
 80019a0:	4013      	ands	r3, r2
 80019a2:	d109      	bne.n	80019b8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e0ca      	b.n	8001b3e <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80019a8:	4b69      	ldr	r3, [pc, #420]	; (8001b50 <HAL_RCC_ClockConfig+0x278>)
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	2380      	movs	r3, #128	; 0x80
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	4013      	ands	r3, r2
 80019b2:	d101      	bne.n	80019b8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	e0c2      	b.n	8001b3e <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019b8:	4b65      	ldr	r3, [pc, #404]	; (8001b50 <HAL_RCC_ClockConfig+0x278>)
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	2203      	movs	r2, #3
 80019be:	4393      	bics	r3, r2
 80019c0:	0019      	movs	r1, r3
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	685a      	ldr	r2, [r3, #4]
 80019c6:	4b62      	ldr	r3, [pc, #392]	; (8001b50 <HAL_RCC_ClockConfig+0x278>)
 80019c8:	430a      	orrs	r2, r1
 80019ca:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019cc:	f7ff f918 	bl	8000c00 <HAL_GetTick>
 80019d0:	0003      	movs	r3, r0
 80019d2:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	2b02      	cmp	r3, #2
 80019da:	d111      	bne.n	8001a00 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80019dc:	e009      	b.n	80019f2 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019de:	f7ff f90f 	bl	8000c00 <HAL_GetTick>
 80019e2:	0002      	movs	r2, r0
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	1ad3      	subs	r3, r2, r3
 80019e8:	4a58      	ldr	r2, [pc, #352]	; (8001b4c <HAL_RCC_ClockConfig+0x274>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d901      	bls.n	80019f2 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80019ee:	2303      	movs	r3, #3
 80019f0:	e0a5      	b.n	8001b3e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80019f2:	4b57      	ldr	r3, [pc, #348]	; (8001b50 <HAL_RCC_ClockConfig+0x278>)
 80019f4:	68db      	ldr	r3, [r3, #12]
 80019f6:	220c      	movs	r2, #12
 80019f8:	4013      	ands	r3, r2
 80019fa:	2b08      	cmp	r3, #8
 80019fc:	d1ef      	bne.n	80019de <HAL_RCC_ClockConfig+0x106>
 80019fe:	e03a      	b.n	8001a76 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	2b03      	cmp	r3, #3
 8001a06:	d111      	bne.n	8001a2c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a08:	e009      	b.n	8001a1e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a0a:	f7ff f8f9 	bl	8000c00 <HAL_GetTick>
 8001a0e:	0002      	movs	r2, r0
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	1ad3      	subs	r3, r2, r3
 8001a14:	4a4d      	ldr	r2, [pc, #308]	; (8001b4c <HAL_RCC_ClockConfig+0x274>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d901      	bls.n	8001a1e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e08f      	b.n	8001b3e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a1e:	4b4c      	ldr	r3, [pc, #304]	; (8001b50 <HAL_RCC_ClockConfig+0x278>)
 8001a20:	68db      	ldr	r3, [r3, #12]
 8001a22:	220c      	movs	r2, #12
 8001a24:	4013      	ands	r3, r2
 8001a26:	2b0c      	cmp	r3, #12
 8001a28:	d1ef      	bne.n	8001a0a <HAL_RCC_ClockConfig+0x132>
 8001a2a:	e024      	b.n	8001a76 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d11b      	bne.n	8001a6c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a34:	e009      	b.n	8001a4a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a36:	f7ff f8e3 	bl	8000c00 <HAL_GetTick>
 8001a3a:	0002      	movs	r2, r0
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	1ad3      	subs	r3, r2, r3
 8001a40:	4a42      	ldr	r2, [pc, #264]	; (8001b4c <HAL_RCC_ClockConfig+0x274>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d901      	bls.n	8001a4a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001a46:	2303      	movs	r3, #3
 8001a48:	e079      	b.n	8001b3e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a4a:	4b41      	ldr	r3, [pc, #260]	; (8001b50 <HAL_RCC_ClockConfig+0x278>)
 8001a4c:	68db      	ldr	r3, [r3, #12]
 8001a4e:	220c      	movs	r2, #12
 8001a50:	4013      	ands	r3, r2
 8001a52:	2b04      	cmp	r3, #4
 8001a54:	d1ef      	bne.n	8001a36 <HAL_RCC_ClockConfig+0x15e>
 8001a56:	e00e      	b.n	8001a76 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a58:	f7ff f8d2 	bl	8000c00 <HAL_GetTick>
 8001a5c:	0002      	movs	r2, r0
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	4a3a      	ldr	r2, [pc, #232]	; (8001b4c <HAL_RCC_ClockConfig+0x274>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d901      	bls.n	8001a6c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001a68:	2303      	movs	r3, #3
 8001a6a:	e068      	b.n	8001b3e <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001a6c:	4b38      	ldr	r3, [pc, #224]	; (8001b50 <HAL_RCC_ClockConfig+0x278>)
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	220c      	movs	r2, #12
 8001a72:	4013      	ands	r3, r2
 8001a74:	d1f0      	bne.n	8001a58 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a76:	4b34      	ldr	r3, [pc, #208]	; (8001b48 <HAL_RCC_ClockConfig+0x270>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	683a      	ldr	r2, [r7, #0]
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d21e      	bcs.n	8001ac2 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a84:	4b30      	ldr	r3, [pc, #192]	; (8001b48 <HAL_RCC_ClockConfig+0x270>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	2201      	movs	r2, #1
 8001a8a:	4393      	bics	r3, r2
 8001a8c:	0019      	movs	r1, r3
 8001a8e:	4b2e      	ldr	r3, [pc, #184]	; (8001b48 <HAL_RCC_ClockConfig+0x270>)
 8001a90:	683a      	ldr	r2, [r7, #0]
 8001a92:	430a      	orrs	r2, r1
 8001a94:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001a96:	f7ff f8b3 	bl	8000c00 <HAL_GetTick>
 8001a9a:	0003      	movs	r3, r0
 8001a9c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a9e:	e009      	b.n	8001ab4 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aa0:	f7ff f8ae 	bl	8000c00 <HAL_GetTick>
 8001aa4:	0002      	movs	r2, r0
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	4a28      	ldr	r2, [pc, #160]	; (8001b4c <HAL_RCC_ClockConfig+0x274>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d901      	bls.n	8001ab4 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	e044      	b.n	8001b3e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ab4:	4b24      	ldr	r3, [pc, #144]	; (8001b48 <HAL_RCC_ClockConfig+0x270>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	2201      	movs	r2, #1
 8001aba:	4013      	ands	r3, r2
 8001abc:	683a      	ldr	r2, [r7, #0]
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d1ee      	bne.n	8001aa0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	2204      	movs	r2, #4
 8001ac8:	4013      	ands	r3, r2
 8001aca:	d009      	beq.n	8001ae0 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001acc:	4b20      	ldr	r3, [pc, #128]	; (8001b50 <HAL_RCC_ClockConfig+0x278>)
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	4a20      	ldr	r2, [pc, #128]	; (8001b54 <HAL_RCC_ClockConfig+0x27c>)
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	0019      	movs	r1, r3
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	68da      	ldr	r2, [r3, #12]
 8001ada:	4b1d      	ldr	r3, [pc, #116]	; (8001b50 <HAL_RCC_ClockConfig+0x278>)
 8001adc:	430a      	orrs	r2, r1
 8001ade:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	2208      	movs	r2, #8
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	d00a      	beq.n	8001b00 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001aea:	4b19      	ldr	r3, [pc, #100]	; (8001b50 <HAL_RCC_ClockConfig+0x278>)
 8001aec:	68db      	ldr	r3, [r3, #12]
 8001aee:	4a1a      	ldr	r2, [pc, #104]	; (8001b58 <HAL_RCC_ClockConfig+0x280>)
 8001af0:	4013      	ands	r3, r2
 8001af2:	0019      	movs	r1, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	691b      	ldr	r3, [r3, #16]
 8001af8:	00da      	lsls	r2, r3, #3
 8001afa:	4b15      	ldr	r3, [pc, #84]	; (8001b50 <HAL_RCC_ClockConfig+0x278>)
 8001afc:	430a      	orrs	r2, r1
 8001afe:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b00:	f000 f832 	bl	8001b68 <HAL_RCC_GetSysClockFreq>
 8001b04:	0001      	movs	r1, r0
 8001b06:	4b12      	ldr	r3, [pc, #72]	; (8001b50 <HAL_RCC_ClockConfig+0x278>)
 8001b08:	68db      	ldr	r3, [r3, #12]
 8001b0a:	091b      	lsrs	r3, r3, #4
 8001b0c:	220f      	movs	r2, #15
 8001b0e:	4013      	ands	r3, r2
 8001b10:	4a12      	ldr	r2, [pc, #72]	; (8001b5c <HAL_RCC_ClockConfig+0x284>)
 8001b12:	5cd3      	ldrb	r3, [r2, r3]
 8001b14:	000a      	movs	r2, r1
 8001b16:	40da      	lsrs	r2, r3
 8001b18:	4b11      	ldr	r3, [pc, #68]	; (8001b60 <HAL_RCC_ClockConfig+0x288>)
 8001b1a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001b1c:	4b11      	ldr	r3, [pc, #68]	; (8001b64 <HAL_RCC_ClockConfig+0x28c>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	250b      	movs	r5, #11
 8001b22:	197c      	adds	r4, r7, r5
 8001b24:	0018      	movs	r0, r3
 8001b26:	f7ff f825 	bl	8000b74 <HAL_InitTick>
 8001b2a:	0003      	movs	r3, r0
 8001b2c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001b2e:	197b      	adds	r3, r7, r5
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d002      	beq.n	8001b3c <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001b36:	197b      	adds	r3, r7, r5
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	e000      	b.n	8001b3e <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001b3c:	2300      	movs	r3, #0
}
 8001b3e:	0018      	movs	r0, r3
 8001b40:	46bd      	mov	sp, r7
 8001b42:	b004      	add	sp, #16
 8001b44:	bdb0      	pop	{r4, r5, r7, pc}
 8001b46:	46c0      	nop			; (mov r8, r8)
 8001b48:	40022000 	.word	0x40022000
 8001b4c:	00001388 	.word	0x00001388
 8001b50:	40021000 	.word	0x40021000
 8001b54:	fffff8ff 	.word	0xfffff8ff
 8001b58:	ffffc7ff 	.word	0xffffc7ff
 8001b5c:	08004054 	.word	0x08004054
 8001b60:	20000000 	.word	0x20000000
 8001b64:	20000004 	.word	0x20000004

08001b68 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b68:	b5b0      	push	{r4, r5, r7, lr}
 8001b6a:	b08e      	sub	sp, #56	; 0x38
 8001b6c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001b6e:	4b4c      	ldr	r3, [pc, #304]	; (8001ca0 <HAL_RCC_GetSysClockFreq+0x138>)
 8001b70:	68db      	ldr	r3, [r3, #12]
 8001b72:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b76:	230c      	movs	r3, #12
 8001b78:	4013      	ands	r3, r2
 8001b7a:	2b0c      	cmp	r3, #12
 8001b7c:	d014      	beq.n	8001ba8 <HAL_RCC_GetSysClockFreq+0x40>
 8001b7e:	d900      	bls.n	8001b82 <HAL_RCC_GetSysClockFreq+0x1a>
 8001b80:	e07b      	b.n	8001c7a <HAL_RCC_GetSysClockFreq+0x112>
 8001b82:	2b04      	cmp	r3, #4
 8001b84:	d002      	beq.n	8001b8c <HAL_RCC_GetSysClockFreq+0x24>
 8001b86:	2b08      	cmp	r3, #8
 8001b88:	d00b      	beq.n	8001ba2 <HAL_RCC_GetSysClockFreq+0x3a>
 8001b8a:	e076      	b.n	8001c7a <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001b8c:	4b44      	ldr	r3, [pc, #272]	; (8001ca0 <HAL_RCC_GetSysClockFreq+0x138>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	2210      	movs	r2, #16
 8001b92:	4013      	ands	r3, r2
 8001b94:	d002      	beq.n	8001b9c <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001b96:	4b43      	ldr	r3, [pc, #268]	; (8001ca4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001b98:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001b9a:	e07c      	b.n	8001c96 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001b9c:	4b42      	ldr	r3, [pc, #264]	; (8001ca8 <HAL_RCC_GetSysClockFreq+0x140>)
 8001b9e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001ba0:	e079      	b.n	8001c96 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ba2:	4b42      	ldr	r3, [pc, #264]	; (8001cac <HAL_RCC_GetSysClockFreq+0x144>)
 8001ba4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001ba6:	e076      	b.n	8001c96 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001baa:	0c9a      	lsrs	r2, r3, #18
 8001bac:	230f      	movs	r3, #15
 8001bae:	401a      	ands	r2, r3
 8001bb0:	4b3f      	ldr	r3, [pc, #252]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0x148>)
 8001bb2:	5c9b      	ldrb	r3, [r3, r2]
 8001bb4:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bb8:	0d9a      	lsrs	r2, r3, #22
 8001bba:	2303      	movs	r3, #3
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	3301      	adds	r3, #1
 8001bc0:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001bc2:	4b37      	ldr	r3, [pc, #220]	; (8001ca0 <HAL_RCC_GetSysClockFreq+0x138>)
 8001bc4:	68da      	ldr	r2, [r3, #12]
 8001bc6:	2380      	movs	r3, #128	; 0x80
 8001bc8:	025b      	lsls	r3, r3, #9
 8001bca:	4013      	ands	r3, r2
 8001bcc:	d01a      	beq.n	8001c04 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bd0:	61bb      	str	r3, [r7, #24]
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	61fb      	str	r3, [r7, #28]
 8001bd6:	4a35      	ldr	r2, [pc, #212]	; (8001cac <HAL_RCC_GetSysClockFreq+0x144>)
 8001bd8:	2300      	movs	r3, #0
 8001bda:	69b8      	ldr	r0, [r7, #24]
 8001bdc:	69f9      	ldr	r1, [r7, #28]
 8001bde:	f7fe fb49 	bl	8000274 <__aeabi_lmul>
 8001be2:	0002      	movs	r2, r0
 8001be4:	000b      	movs	r3, r1
 8001be6:	0010      	movs	r0, r2
 8001be8:	0019      	movs	r1, r3
 8001bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bec:	613b      	str	r3, [r7, #16]
 8001bee:	2300      	movs	r3, #0
 8001bf0:	617b      	str	r3, [r7, #20]
 8001bf2:	693a      	ldr	r2, [r7, #16]
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	f7fe fb1d 	bl	8000234 <__aeabi_uldivmod>
 8001bfa:	0002      	movs	r2, r0
 8001bfc:	000b      	movs	r3, r1
 8001bfe:	0013      	movs	r3, r2
 8001c00:	637b      	str	r3, [r7, #52]	; 0x34
 8001c02:	e037      	b.n	8001c74 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001c04:	4b26      	ldr	r3, [pc, #152]	; (8001ca0 <HAL_RCC_GetSysClockFreq+0x138>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	2210      	movs	r2, #16
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	d01a      	beq.n	8001c44 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c10:	60bb      	str	r3, [r7, #8]
 8001c12:	2300      	movs	r3, #0
 8001c14:	60fb      	str	r3, [r7, #12]
 8001c16:	4a23      	ldr	r2, [pc, #140]	; (8001ca4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001c18:	2300      	movs	r3, #0
 8001c1a:	68b8      	ldr	r0, [r7, #8]
 8001c1c:	68f9      	ldr	r1, [r7, #12]
 8001c1e:	f7fe fb29 	bl	8000274 <__aeabi_lmul>
 8001c22:	0002      	movs	r2, r0
 8001c24:	000b      	movs	r3, r1
 8001c26:	0010      	movs	r0, r2
 8001c28:	0019      	movs	r1, r3
 8001c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c2c:	603b      	str	r3, [r7, #0]
 8001c2e:	2300      	movs	r3, #0
 8001c30:	607b      	str	r3, [r7, #4]
 8001c32:	683a      	ldr	r2, [r7, #0]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	f7fe fafd 	bl	8000234 <__aeabi_uldivmod>
 8001c3a:	0002      	movs	r2, r0
 8001c3c:	000b      	movs	r3, r1
 8001c3e:	0013      	movs	r3, r2
 8001c40:	637b      	str	r3, [r7, #52]	; 0x34
 8001c42:	e017      	b.n	8001c74 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c46:	0018      	movs	r0, r3
 8001c48:	2300      	movs	r3, #0
 8001c4a:	0019      	movs	r1, r3
 8001c4c:	4a16      	ldr	r2, [pc, #88]	; (8001ca8 <HAL_RCC_GetSysClockFreq+0x140>)
 8001c4e:	2300      	movs	r3, #0
 8001c50:	f7fe fb10 	bl	8000274 <__aeabi_lmul>
 8001c54:	0002      	movs	r2, r0
 8001c56:	000b      	movs	r3, r1
 8001c58:	0010      	movs	r0, r2
 8001c5a:	0019      	movs	r1, r3
 8001c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5e:	001c      	movs	r4, r3
 8001c60:	2300      	movs	r3, #0
 8001c62:	001d      	movs	r5, r3
 8001c64:	0022      	movs	r2, r4
 8001c66:	002b      	movs	r3, r5
 8001c68:	f7fe fae4 	bl	8000234 <__aeabi_uldivmod>
 8001c6c:	0002      	movs	r2, r0
 8001c6e:	000b      	movs	r3, r1
 8001c70:	0013      	movs	r3, r2
 8001c72:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8001c74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c76:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001c78:	e00d      	b.n	8001c96 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001c7a:	4b09      	ldr	r3, [pc, #36]	; (8001ca0 <HAL_RCC_GetSysClockFreq+0x138>)
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	0b5b      	lsrs	r3, r3, #13
 8001c80:	2207      	movs	r2, #7
 8001c82:	4013      	ands	r3, r2
 8001c84:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001c86:	6a3b      	ldr	r3, [r7, #32]
 8001c88:	3301      	adds	r3, #1
 8001c8a:	2280      	movs	r2, #128	; 0x80
 8001c8c:	0212      	lsls	r2, r2, #8
 8001c8e:	409a      	lsls	r2, r3
 8001c90:	0013      	movs	r3, r2
 8001c92:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001c94:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001c98:	0018      	movs	r0, r3
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	b00e      	add	sp, #56	; 0x38
 8001c9e:	bdb0      	pop	{r4, r5, r7, pc}
 8001ca0:	40021000 	.word	0x40021000
 8001ca4:	003d0900 	.word	0x003d0900
 8001ca8:	00f42400 	.word	0x00f42400
 8001cac:	007a1200 	.word	0x007a1200
 8001cb0:	0800406c 	.word	0x0800406c

08001cb4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cb8:	4b02      	ldr	r3, [pc, #8]	; (8001cc4 <HAL_RCC_GetHCLKFreq+0x10>)
 8001cba:	681b      	ldr	r3, [r3, #0]
}
 8001cbc:	0018      	movs	r0, r3
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	46c0      	nop			; (mov r8, r8)
 8001cc4:	20000000 	.word	0x20000000

08001cc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ccc:	f7ff fff2 	bl	8001cb4 <HAL_RCC_GetHCLKFreq>
 8001cd0:	0001      	movs	r1, r0
 8001cd2:	4b06      	ldr	r3, [pc, #24]	; (8001cec <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cd4:	68db      	ldr	r3, [r3, #12]
 8001cd6:	0a1b      	lsrs	r3, r3, #8
 8001cd8:	2207      	movs	r2, #7
 8001cda:	4013      	ands	r3, r2
 8001cdc:	4a04      	ldr	r2, [pc, #16]	; (8001cf0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001cde:	5cd3      	ldrb	r3, [r2, r3]
 8001ce0:	40d9      	lsrs	r1, r3
 8001ce2:	000b      	movs	r3, r1
}
 8001ce4:	0018      	movs	r0, r3
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	46c0      	nop			; (mov r8, r8)
 8001cec:	40021000 	.word	0x40021000
 8001cf0:	08004064 	.word	0x08004064

08001cf4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001cf8:	f7ff ffdc 	bl	8001cb4 <HAL_RCC_GetHCLKFreq>
 8001cfc:	0001      	movs	r1, r0
 8001cfe:	4b06      	ldr	r3, [pc, #24]	; (8001d18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d00:	68db      	ldr	r3, [r3, #12]
 8001d02:	0adb      	lsrs	r3, r3, #11
 8001d04:	2207      	movs	r2, #7
 8001d06:	4013      	ands	r3, r2
 8001d08:	4a04      	ldr	r2, [pc, #16]	; (8001d1c <HAL_RCC_GetPCLK2Freq+0x28>)
 8001d0a:	5cd3      	ldrb	r3, [r2, r3]
 8001d0c:	40d9      	lsrs	r1, r3
 8001d0e:	000b      	movs	r3, r1
}
 8001d10:	0018      	movs	r0, r3
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	46c0      	nop			; (mov r8, r8)
 8001d18:	40021000 	.word	0x40021000
 8001d1c:	08004064 	.word	0x08004064

08001d20 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b086      	sub	sp, #24
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8001d28:	2317      	movs	r3, #23
 8001d2a:	18fb      	adds	r3, r7, r3
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	2220      	movs	r2, #32
 8001d36:	4013      	ands	r3, r2
 8001d38:	d106      	bne.n	8001d48 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	2380      	movs	r3, #128	; 0x80
 8001d40:	011b      	lsls	r3, r3, #4
 8001d42:	4013      	ands	r3, r2
 8001d44:	d100      	bne.n	8001d48 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8001d46:	e0d9      	b.n	8001efc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d48:	4ba4      	ldr	r3, [pc, #656]	; (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001d4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d4c:	2380      	movs	r3, #128	; 0x80
 8001d4e:	055b      	lsls	r3, r3, #21
 8001d50:	4013      	ands	r3, r2
 8001d52:	d10a      	bne.n	8001d6a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d54:	4ba1      	ldr	r3, [pc, #644]	; (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001d56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d58:	4ba0      	ldr	r3, [pc, #640]	; (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001d5a:	2180      	movs	r1, #128	; 0x80
 8001d5c:	0549      	lsls	r1, r1, #21
 8001d5e:	430a      	orrs	r2, r1
 8001d60:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001d62:	2317      	movs	r3, #23
 8001d64:	18fb      	adds	r3, r7, r3
 8001d66:	2201      	movs	r2, #1
 8001d68:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d6a:	4b9d      	ldr	r3, [pc, #628]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	2380      	movs	r3, #128	; 0x80
 8001d70:	005b      	lsls	r3, r3, #1
 8001d72:	4013      	ands	r3, r2
 8001d74:	d11a      	bne.n	8001dac <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d76:	4b9a      	ldr	r3, [pc, #616]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	4b99      	ldr	r3, [pc, #612]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8001d7c:	2180      	movs	r1, #128	; 0x80
 8001d7e:	0049      	lsls	r1, r1, #1
 8001d80:	430a      	orrs	r2, r1
 8001d82:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d84:	f7fe ff3c 	bl	8000c00 <HAL_GetTick>
 8001d88:	0003      	movs	r3, r0
 8001d8a:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d8c:	e008      	b.n	8001da0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d8e:	f7fe ff37 	bl	8000c00 <HAL_GetTick>
 8001d92:	0002      	movs	r2, r0
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	1ad3      	subs	r3, r2, r3
 8001d98:	2b64      	cmp	r3, #100	; 0x64
 8001d9a:	d901      	bls.n	8001da0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	e118      	b.n	8001fd2 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001da0:	4b8f      	ldr	r3, [pc, #572]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	2380      	movs	r3, #128	; 0x80
 8001da6:	005b      	lsls	r3, r3, #1
 8001da8:	4013      	ands	r3, r2
 8001daa:	d0f0      	beq.n	8001d8e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001dac:	4b8b      	ldr	r3, [pc, #556]	; (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	23c0      	movs	r3, #192	; 0xc0
 8001db2:	039b      	lsls	r3, r3, #14
 8001db4:	4013      	ands	r3, r2
 8001db6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	685a      	ldr	r2, [r3, #4]
 8001dbc:	23c0      	movs	r3, #192	; 0xc0
 8001dbe:	039b      	lsls	r3, r3, #14
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	68fa      	ldr	r2, [r7, #12]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d107      	bne.n	8001dd8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	689a      	ldr	r2, [r3, #8]
 8001dcc:	23c0      	movs	r3, #192	; 0xc0
 8001dce:	039b      	lsls	r3, r3, #14
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	68fa      	ldr	r2, [r7, #12]
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d013      	beq.n	8001e00 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	685a      	ldr	r2, [r3, #4]
 8001ddc:	23c0      	movs	r3, #192	; 0xc0
 8001dde:	029b      	lsls	r3, r3, #10
 8001de0:	401a      	ands	r2, r3
 8001de2:	23c0      	movs	r3, #192	; 0xc0
 8001de4:	029b      	lsls	r3, r3, #10
 8001de6:	429a      	cmp	r2, r3
 8001de8:	d10a      	bne.n	8001e00 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001dea:	4b7c      	ldr	r3, [pc, #496]	; (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	2380      	movs	r3, #128	; 0x80
 8001df0:	029b      	lsls	r3, r3, #10
 8001df2:	401a      	ands	r2, r3
 8001df4:	2380      	movs	r3, #128	; 0x80
 8001df6:	029b      	lsls	r3, r3, #10
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d101      	bne.n	8001e00 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e0e8      	b.n	8001fd2 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001e00:	4b76      	ldr	r3, [pc, #472]	; (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001e02:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e04:	23c0      	movs	r3, #192	; 0xc0
 8001e06:	029b      	lsls	r3, r3, #10
 8001e08:	4013      	ands	r3, r2
 8001e0a:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d049      	beq.n	8001ea6 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	685a      	ldr	r2, [r3, #4]
 8001e16:	23c0      	movs	r3, #192	; 0xc0
 8001e18:	029b      	lsls	r3, r3, #10
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	68fa      	ldr	r2, [r7, #12]
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	d004      	beq.n	8001e2c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	2220      	movs	r2, #32
 8001e28:	4013      	ands	r3, r2
 8001e2a:	d10d      	bne.n	8001e48 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	689a      	ldr	r2, [r3, #8]
 8001e30:	23c0      	movs	r3, #192	; 0xc0
 8001e32:	029b      	lsls	r3, r3, #10
 8001e34:	4013      	ands	r3, r2
 8001e36:	68fa      	ldr	r2, [r7, #12]
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d034      	beq.n	8001ea6 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	2380      	movs	r3, #128	; 0x80
 8001e42:	011b      	lsls	r3, r3, #4
 8001e44:	4013      	ands	r3, r2
 8001e46:	d02e      	beq.n	8001ea6 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001e48:	4b64      	ldr	r3, [pc, #400]	; (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001e4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e4c:	4a65      	ldr	r2, [pc, #404]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001e4e:	4013      	ands	r3, r2
 8001e50:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e52:	4b62      	ldr	r3, [pc, #392]	; (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001e54:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e56:	4b61      	ldr	r3, [pc, #388]	; (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001e58:	2180      	movs	r1, #128	; 0x80
 8001e5a:	0309      	lsls	r1, r1, #12
 8001e5c:	430a      	orrs	r2, r1
 8001e5e:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001e60:	4b5e      	ldr	r3, [pc, #376]	; (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001e62:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e64:	4b5d      	ldr	r3, [pc, #372]	; (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001e66:	4960      	ldr	r1, [pc, #384]	; (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8001e68:	400a      	ands	r2, r1
 8001e6a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8001e6c:	4b5b      	ldr	r3, [pc, #364]	; (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001e6e:	68fa      	ldr	r2, [r7, #12]
 8001e70:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001e72:	68fa      	ldr	r2, [r7, #12]
 8001e74:	2380      	movs	r3, #128	; 0x80
 8001e76:	005b      	lsls	r3, r3, #1
 8001e78:	4013      	ands	r3, r2
 8001e7a:	d014      	beq.n	8001ea6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e7c:	f7fe fec0 	bl	8000c00 <HAL_GetTick>
 8001e80:	0003      	movs	r3, r0
 8001e82:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001e84:	e009      	b.n	8001e9a <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e86:	f7fe febb 	bl	8000c00 <HAL_GetTick>
 8001e8a:	0002      	movs	r2, r0
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	4a56      	ldr	r2, [pc, #344]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d901      	bls.n	8001e9a <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8001e96:	2303      	movs	r3, #3
 8001e98:	e09b      	b.n	8001fd2 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001e9a:	4b50      	ldr	r3, [pc, #320]	; (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001e9c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e9e:	2380      	movs	r3, #128	; 0x80
 8001ea0:	009b      	lsls	r3, r3, #2
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	d0ef      	beq.n	8001e86 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	685a      	ldr	r2, [r3, #4]
 8001eaa:	23c0      	movs	r3, #192	; 0xc0
 8001eac:	029b      	lsls	r3, r3, #10
 8001eae:	401a      	ands	r2, r3
 8001eb0:	23c0      	movs	r3, #192	; 0xc0
 8001eb2:	029b      	lsls	r3, r3, #10
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d10c      	bne.n	8001ed2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8001eb8:	4b48      	ldr	r3, [pc, #288]	; (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a4c      	ldr	r2, [pc, #304]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	0019      	movs	r1, r3
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	685a      	ldr	r2, [r3, #4]
 8001ec6:	23c0      	movs	r3, #192	; 0xc0
 8001ec8:	039b      	lsls	r3, r3, #14
 8001eca:	401a      	ands	r2, r3
 8001ecc:	4b43      	ldr	r3, [pc, #268]	; (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001ece:	430a      	orrs	r2, r1
 8001ed0:	601a      	str	r2, [r3, #0]
 8001ed2:	4b42      	ldr	r3, [pc, #264]	; (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001ed4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	685a      	ldr	r2, [r3, #4]
 8001eda:	23c0      	movs	r3, #192	; 0xc0
 8001edc:	029b      	lsls	r3, r3, #10
 8001ede:	401a      	ands	r2, r3
 8001ee0:	4b3e      	ldr	r3, [pc, #248]	; (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001ee2:	430a      	orrs	r2, r1
 8001ee4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001ee6:	2317      	movs	r3, #23
 8001ee8:	18fb      	adds	r3, r7, r3
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d105      	bne.n	8001efc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ef0:	4b3a      	ldr	r3, [pc, #232]	; (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001ef2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ef4:	4b39      	ldr	r3, [pc, #228]	; (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001ef6:	493f      	ldr	r1, [pc, #252]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8001ef8:	400a      	ands	r2, r1
 8001efa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	2201      	movs	r2, #1
 8001f02:	4013      	ands	r3, r2
 8001f04:	d009      	beq.n	8001f1a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f06:	4b35      	ldr	r3, [pc, #212]	; (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001f08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f0a:	2203      	movs	r2, #3
 8001f0c:	4393      	bics	r3, r2
 8001f0e:	0019      	movs	r1, r3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	68da      	ldr	r2, [r3, #12]
 8001f14:	4b31      	ldr	r3, [pc, #196]	; (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001f16:	430a      	orrs	r2, r1
 8001f18:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	2202      	movs	r2, #2
 8001f20:	4013      	ands	r3, r2
 8001f22:	d009      	beq.n	8001f38 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001f24:	4b2d      	ldr	r3, [pc, #180]	; (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001f26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f28:	220c      	movs	r2, #12
 8001f2a:	4393      	bics	r3, r2
 8001f2c:	0019      	movs	r1, r3
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	691a      	ldr	r2, [r3, #16]
 8001f32:	4b2a      	ldr	r3, [pc, #168]	; (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001f34:	430a      	orrs	r2, r1
 8001f36:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	2204      	movs	r2, #4
 8001f3e:	4013      	ands	r3, r2
 8001f40:	d009      	beq.n	8001f56 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001f42:	4b26      	ldr	r3, [pc, #152]	; (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f46:	4a2c      	ldr	r2, [pc, #176]	; (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8001f48:	4013      	ands	r3, r2
 8001f4a:	0019      	movs	r1, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	695a      	ldr	r2, [r3, #20]
 8001f50:	4b22      	ldr	r3, [pc, #136]	; (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001f52:	430a      	orrs	r2, r1
 8001f54:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	2208      	movs	r2, #8
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	d009      	beq.n	8001f74 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001f60:	4b1e      	ldr	r3, [pc, #120]	; (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001f62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f64:	4a25      	ldr	r2, [pc, #148]	; (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8001f66:	4013      	ands	r3, r2
 8001f68:	0019      	movs	r1, r3
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	699a      	ldr	r2, [r3, #24]
 8001f6e:	4b1b      	ldr	r3, [pc, #108]	; (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001f70:	430a      	orrs	r2, r1
 8001f72:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	2380      	movs	r3, #128	; 0x80
 8001f7a:	005b      	lsls	r3, r3, #1
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	d009      	beq.n	8001f94 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001f80:	4b16      	ldr	r3, [pc, #88]	; (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001f82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f84:	4a17      	ldr	r2, [pc, #92]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001f86:	4013      	ands	r3, r2
 8001f88:	0019      	movs	r1, r3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	69da      	ldr	r2, [r3, #28]
 8001f8e:	4b13      	ldr	r3, [pc, #76]	; (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001f90:	430a      	orrs	r2, r1
 8001f92:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	2240      	movs	r2, #64	; 0x40
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	d009      	beq.n	8001fb2 <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001f9e:	4b0f      	ldr	r3, [pc, #60]	; (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fa2:	4a17      	ldr	r2, [pc, #92]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	0019      	movs	r1, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001fac:	4b0b      	ldr	r3, [pc, #44]	; (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001fae:	430a      	orrs	r2, r1
 8001fb0:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	2280      	movs	r2, #128	; 0x80
 8001fb8:	4013      	ands	r3, r2
 8001fba:	d009      	beq.n	8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8001fbc:	4b07      	ldr	r3, [pc, #28]	; (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001fbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fc0:	4a10      	ldr	r2, [pc, #64]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	0019      	movs	r1, r3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6a1a      	ldr	r2, [r3, #32]
 8001fca:	4b04      	ldr	r3, [pc, #16]	; (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001fcc:	430a      	orrs	r2, r1
 8001fce:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8001fd0:	2300      	movs	r3, #0
}
 8001fd2:	0018      	movs	r0, r3
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	b006      	add	sp, #24
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	46c0      	nop			; (mov r8, r8)
 8001fdc:	40021000 	.word	0x40021000
 8001fe0:	40007000 	.word	0x40007000
 8001fe4:	fffcffff 	.word	0xfffcffff
 8001fe8:	fff7ffff 	.word	0xfff7ffff
 8001fec:	00001388 	.word	0x00001388
 8001ff0:	ffcfffff 	.word	0xffcfffff
 8001ff4:	efffffff 	.word	0xefffffff
 8001ff8:	fffff3ff 	.word	0xfffff3ff
 8001ffc:	ffffcfff 	.word	0xffffcfff
 8002000:	fbffffff 	.word	0xfbffffff
 8002004:	fff3ffff 	.word	0xfff3ffff

08002008 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d101      	bne.n	800201a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e083      	b.n	8002122 <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800201e:	2b00      	cmp	r3, #0
 8002020:	d109      	bne.n	8002036 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	685a      	ldr	r2, [r3, #4]
 8002026:	2382      	movs	r3, #130	; 0x82
 8002028:	005b      	lsls	r3, r3, #1
 800202a:	429a      	cmp	r2, r3
 800202c:	d009      	beq.n	8002042 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2200      	movs	r2, #0
 8002032:	61da      	str	r2, [r3, #28]
 8002034:	e005      	b.n	8002042 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2200      	movs	r2, #0
 800203a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2200      	movs	r2, #0
 8002040:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2200      	movs	r2, #0
 8002046:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2251      	movs	r2, #81	; 0x51
 800204c:	5c9b      	ldrb	r3, [r3, r2]
 800204e:	b2db      	uxtb	r3, r3
 8002050:	2b00      	cmp	r3, #0
 8002052:	d107      	bne.n	8002064 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2250      	movs	r2, #80	; 0x50
 8002058:	2100      	movs	r1, #0
 800205a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	0018      	movs	r0, r3
 8002060:	f7fe fc62 	bl	8000928 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2251      	movs	r2, #81	; 0x51
 8002068:	2102      	movs	r1, #2
 800206a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	2140      	movs	r1, #64	; 0x40
 8002078:	438a      	bics	r2, r1
 800207a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	685a      	ldr	r2, [r3, #4]
 8002080:	2382      	movs	r3, #130	; 0x82
 8002082:	005b      	lsls	r3, r3, #1
 8002084:	401a      	ands	r2, r3
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6899      	ldr	r1, [r3, #8]
 800208a:	2384      	movs	r3, #132	; 0x84
 800208c:	021b      	lsls	r3, r3, #8
 800208e:	400b      	ands	r3, r1
 8002090:	431a      	orrs	r2, r3
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	68d9      	ldr	r1, [r3, #12]
 8002096:	2380      	movs	r3, #128	; 0x80
 8002098:	011b      	lsls	r3, r3, #4
 800209a:	400b      	ands	r3, r1
 800209c:	431a      	orrs	r2, r3
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	691b      	ldr	r3, [r3, #16]
 80020a2:	2102      	movs	r1, #2
 80020a4:	400b      	ands	r3, r1
 80020a6:	431a      	orrs	r2, r3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	695b      	ldr	r3, [r3, #20]
 80020ac:	2101      	movs	r1, #1
 80020ae:	400b      	ands	r3, r1
 80020b0:	431a      	orrs	r2, r3
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6999      	ldr	r1, [r3, #24]
 80020b6:	2380      	movs	r3, #128	; 0x80
 80020b8:	009b      	lsls	r3, r3, #2
 80020ba:	400b      	ands	r3, r1
 80020bc:	431a      	orrs	r2, r3
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	69db      	ldr	r3, [r3, #28]
 80020c2:	2138      	movs	r1, #56	; 0x38
 80020c4:	400b      	ands	r3, r1
 80020c6:	431a      	orrs	r2, r3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6a1b      	ldr	r3, [r3, #32]
 80020cc:	2180      	movs	r1, #128	; 0x80
 80020ce:	400b      	ands	r3, r1
 80020d0:	431a      	orrs	r2, r3
 80020d2:	0011      	movs	r1, r2
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80020d8:	2380      	movs	r3, #128	; 0x80
 80020da:	019b      	lsls	r3, r3, #6
 80020dc:	401a      	ands	r2, r3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	430a      	orrs	r2, r1
 80020e4:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	699b      	ldr	r3, [r3, #24]
 80020ea:	0c1b      	lsrs	r3, r3, #16
 80020ec:	2204      	movs	r2, #4
 80020ee:	4013      	ands	r3, r2
 80020f0:	0019      	movs	r1, r3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f6:	2210      	movs	r2, #16
 80020f8:	401a      	ands	r2, r3
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	430a      	orrs	r2, r1
 8002100:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	69da      	ldr	r2, [r3, #28]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4907      	ldr	r1, [pc, #28]	; (800212c <HAL_SPI_Init+0x124>)
 800210e:	400a      	ands	r2, r1
 8002110:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2200      	movs	r2, #0
 8002116:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2251      	movs	r2, #81	; 0x51
 800211c:	2101      	movs	r1, #1
 800211e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002120:	2300      	movs	r3, #0
}
 8002122:	0018      	movs	r0, r3
 8002124:	46bd      	mov	sp, r7
 8002126:	b002      	add	sp, #8
 8002128:	bd80      	pop	{r7, pc}
 800212a:	46c0      	nop			; (mov r8, r8)
 800212c:	fffff7ff 	.word	0xfffff7ff

08002130 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b088      	sub	sp, #32
 8002134:	af00      	add	r7, sp, #0
 8002136:	60f8      	str	r0, [r7, #12]
 8002138:	60b9      	str	r1, [r7, #8]
 800213a:	603b      	str	r3, [r7, #0]
 800213c:	1dbb      	adds	r3, r7, #6
 800213e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002140:	231f      	movs	r3, #31
 8002142:	18fb      	adds	r3, r7, r3
 8002144:	2200      	movs	r2, #0
 8002146:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	2250      	movs	r2, #80	; 0x50
 800214c:	5c9b      	ldrb	r3, [r3, r2]
 800214e:	2b01      	cmp	r3, #1
 8002150:	d101      	bne.n	8002156 <HAL_SPI_Transmit+0x26>
 8002152:	2302      	movs	r3, #2
 8002154:	e13e      	b.n	80023d4 <HAL_SPI_Transmit+0x2a4>
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2250      	movs	r2, #80	; 0x50
 800215a:	2101      	movs	r1, #1
 800215c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800215e:	f7fe fd4f 	bl	8000c00 <HAL_GetTick>
 8002162:	0003      	movs	r3, r0
 8002164:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002166:	2316      	movs	r3, #22
 8002168:	18fb      	adds	r3, r7, r3
 800216a:	1dba      	adds	r2, r7, #6
 800216c:	8812      	ldrh	r2, [r2, #0]
 800216e:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	2251      	movs	r2, #81	; 0x51
 8002174:	5c9b      	ldrb	r3, [r3, r2]
 8002176:	b2db      	uxtb	r3, r3
 8002178:	2b01      	cmp	r3, #1
 800217a:	d004      	beq.n	8002186 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 800217c:	231f      	movs	r3, #31
 800217e:	18fb      	adds	r3, r7, r3
 8002180:	2202      	movs	r2, #2
 8002182:	701a      	strb	r2, [r3, #0]
    goto error;
 8002184:	e11b      	b.n	80023be <HAL_SPI_Transmit+0x28e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d003      	beq.n	8002194 <HAL_SPI_Transmit+0x64>
 800218c:	1dbb      	adds	r3, r7, #6
 800218e:	881b      	ldrh	r3, [r3, #0]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d104      	bne.n	800219e <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8002194:	231f      	movs	r3, #31
 8002196:	18fb      	adds	r3, r7, r3
 8002198:	2201      	movs	r2, #1
 800219a:	701a      	strb	r2, [r3, #0]
    goto error;
 800219c:	e10f      	b.n	80023be <HAL_SPI_Transmit+0x28e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	2251      	movs	r2, #81	; 0x51
 80021a2:	2103      	movs	r1, #3
 80021a4:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2200      	movs	r2, #0
 80021aa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	68ba      	ldr	r2, [r7, #8]
 80021b0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	1dba      	adds	r2, r7, #6
 80021b6:	8812      	ldrh	r2, [r2, #0]
 80021b8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	1dba      	adds	r2, r7, #6
 80021be:	8812      	ldrh	r2, [r2, #0]
 80021c0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	2200      	movs	r2, #0
 80021c6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2200      	movs	r2, #0
 80021cc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	2200      	movs	r2, #0
 80021d2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2200      	movs	r2, #0
 80021d8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	2200      	movs	r2, #0
 80021de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	689a      	ldr	r2, [r3, #8]
 80021e4:	2380      	movs	r3, #128	; 0x80
 80021e6:	021b      	lsls	r3, r3, #8
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d110      	bne.n	800220e <HAL_SPI_Transmit+0xde>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	2140      	movs	r1, #64	; 0x40
 80021f8:	438a      	bics	r2, r1
 80021fa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	2180      	movs	r1, #128	; 0x80
 8002208:	01c9      	lsls	r1, r1, #7
 800220a:	430a      	orrs	r2, r1
 800220c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	2240      	movs	r2, #64	; 0x40
 8002216:	4013      	ands	r3, r2
 8002218:	2b40      	cmp	r3, #64	; 0x40
 800221a:	d007      	beq.n	800222c <HAL_SPI_Transmit+0xfc>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	2140      	movs	r1, #64	; 0x40
 8002228:	430a      	orrs	r2, r1
 800222a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	68da      	ldr	r2, [r3, #12]
 8002230:	2380      	movs	r3, #128	; 0x80
 8002232:	011b      	lsls	r3, r3, #4
 8002234:	429a      	cmp	r2, r3
 8002236:	d14e      	bne.n	80022d6 <HAL_SPI_Transmit+0x1a6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d004      	beq.n	800224a <HAL_SPI_Transmit+0x11a>
 8002240:	2316      	movs	r3, #22
 8002242:	18fb      	adds	r3, r7, r3
 8002244:	881b      	ldrh	r3, [r3, #0]
 8002246:	2b01      	cmp	r3, #1
 8002248:	d13f      	bne.n	80022ca <HAL_SPI_Transmit+0x19a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224e:	881a      	ldrh	r2, [r3, #0]
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225a:	1c9a      	adds	r2, r3, #2
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002264:	b29b      	uxth	r3, r3
 8002266:	3b01      	subs	r3, #1
 8002268:	b29a      	uxth	r2, r3
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800226e:	e02c      	b.n	80022ca <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	2202      	movs	r2, #2
 8002278:	4013      	ands	r3, r2
 800227a:	2b02      	cmp	r3, #2
 800227c:	d112      	bne.n	80022a4 <HAL_SPI_Transmit+0x174>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002282:	881a      	ldrh	r2, [r3, #0]
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228e:	1c9a      	adds	r2, r3, #2
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002298:	b29b      	uxth	r3, r3
 800229a:	3b01      	subs	r3, #1
 800229c:	b29a      	uxth	r2, r3
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	86da      	strh	r2, [r3, #54]	; 0x36
 80022a2:	e012      	b.n	80022ca <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80022a4:	f7fe fcac 	bl	8000c00 <HAL_GetTick>
 80022a8:	0002      	movs	r2, r0
 80022aa:	69bb      	ldr	r3, [r7, #24]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	683a      	ldr	r2, [r7, #0]
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d802      	bhi.n	80022ba <HAL_SPI_Transmit+0x18a>
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	3301      	adds	r3, #1
 80022b8:	d102      	bne.n	80022c0 <HAL_SPI_Transmit+0x190>
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d104      	bne.n	80022ca <HAL_SPI_Transmit+0x19a>
        {
          errorcode = HAL_TIMEOUT;
 80022c0:	231f      	movs	r3, #31
 80022c2:	18fb      	adds	r3, r7, r3
 80022c4:	2203      	movs	r2, #3
 80022c6:	701a      	strb	r2, [r3, #0]
          goto error;
 80022c8:	e079      	b.n	80023be <HAL_SPI_Transmit+0x28e>
    while (hspi->TxXferCount > 0U)
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022ce:	b29b      	uxth	r3, r3
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d1cd      	bne.n	8002270 <HAL_SPI_Transmit+0x140>
 80022d4:	e04f      	b.n	8002376 <HAL_SPI_Transmit+0x246>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d004      	beq.n	80022e8 <HAL_SPI_Transmit+0x1b8>
 80022de:	2316      	movs	r3, #22
 80022e0:	18fb      	adds	r3, r7, r3
 80022e2:	881b      	ldrh	r3, [r3, #0]
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d141      	bne.n	800236c <HAL_SPI_Transmit+0x23c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	330c      	adds	r3, #12
 80022f2:	7812      	ldrb	r2, [r2, #0]
 80022f4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fa:	1c5a      	adds	r2, r3, #1
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002304:	b29b      	uxth	r3, r3
 8002306:	3b01      	subs	r3, #1
 8002308:	b29a      	uxth	r2, r3
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800230e:	e02d      	b.n	800236c <HAL_SPI_Transmit+0x23c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	2202      	movs	r2, #2
 8002318:	4013      	ands	r3, r2
 800231a:	2b02      	cmp	r3, #2
 800231c:	d113      	bne.n	8002346 <HAL_SPI_Transmit+0x216>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	330c      	adds	r3, #12
 8002328:	7812      	ldrb	r2, [r2, #0]
 800232a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002330:	1c5a      	adds	r2, r3, #1
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800233a:	b29b      	uxth	r3, r3
 800233c:	3b01      	subs	r3, #1
 800233e:	b29a      	uxth	r2, r3
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	86da      	strh	r2, [r3, #54]	; 0x36
 8002344:	e012      	b.n	800236c <HAL_SPI_Transmit+0x23c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002346:	f7fe fc5b 	bl	8000c00 <HAL_GetTick>
 800234a:	0002      	movs	r2, r0
 800234c:	69bb      	ldr	r3, [r7, #24]
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	683a      	ldr	r2, [r7, #0]
 8002352:	429a      	cmp	r2, r3
 8002354:	d802      	bhi.n	800235c <HAL_SPI_Transmit+0x22c>
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	3301      	adds	r3, #1
 800235a:	d102      	bne.n	8002362 <HAL_SPI_Transmit+0x232>
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d104      	bne.n	800236c <HAL_SPI_Transmit+0x23c>
        {
          errorcode = HAL_TIMEOUT;
 8002362:	231f      	movs	r3, #31
 8002364:	18fb      	adds	r3, r7, r3
 8002366:	2203      	movs	r2, #3
 8002368:	701a      	strb	r2, [r3, #0]
          goto error;
 800236a:	e028      	b.n	80023be <HAL_SPI_Transmit+0x28e>
    while (hspi->TxXferCount > 0U)
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002370:	b29b      	uxth	r3, r3
 8002372:	2b00      	cmp	r3, #0
 8002374:	d1cc      	bne.n	8002310 <HAL_SPI_Transmit+0x1e0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002376:	69ba      	ldr	r2, [r7, #24]
 8002378:	6839      	ldr	r1, [r7, #0]
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	0018      	movs	r0, r3
 800237e:	f000 fc07 	bl	8002b90 <SPI_EndRxTxTransaction>
 8002382:	1e03      	subs	r3, r0, #0
 8002384:	d002      	beq.n	800238c <HAL_SPI_Transmit+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	2220      	movs	r2, #32
 800238a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d10a      	bne.n	80023aa <HAL_SPI_Transmit+0x27a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002394:	2300      	movs	r3, #0
 8002396:	613b      	str	r3, [r7, #16]
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	68db      	ldr	r3, [r3, #12]
 800239e:	613b      	str	r3, [r7, #16]
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	613b      	str	r3, [r7, #16]
 80023a8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d004      	beq.n	80023bc <HAL_SPI_Transmit+0x28c>
  {
    errorcode = HAL_ERROR;
 80023b2:	231f      	movs	r3, #31
 80023b4:	18fb      	adds	r3, r7, r3
 80023b6:	2201      	movs	r2, #1
 80023b8:	701a      	strb	r2, [r3, #0]
 80023ba:	e000      	b.n	80023be <HAL_SPI_Transmit+0x28e>
  }

error:
 80023bc:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2251      	movs	r2, #81	; 0x51
 80023c2:	2101      	movs	r1, #1
 80023c4:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2250      	movs	r2, #80	; 0x50
 80023ca:	2100      	movs	r1, #0
 80023cc:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80023ce:	231f      	movs	r3, #31
 80023d0:	18fb      	adds	r3, r7, r3
 80023d2:	781b      	ldrb	r3, [r3, #0]
}
 80023d4:	0018      	movs	r0, r3
 80023d6:	46bd      	mov	sp, r7
 80023d8:	b008      	add	sp, #32
 80023da:	bd80      	pop	{r7, pc}

080023dc <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023dc:	b590      	push	{r4, r7, lr}
 80023de:	b089      	sub	sp, #36	; 0x24
 80023e0:	af02      	add	r7, sp, #8
 80023e2:	60f8      	str	r0, [r7, #12]
 80023e4:	60b9      	str	r1, [r7, #8]
 80023e6:	603b      	str	r3, [r7, #0]
 80023e8:	1dbb      	adds	r3, r7, #6
 80023ea:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80023ec:	2317      	movs	r3, #23
 80023ee:	18fb      	adds	r3, r7, r3
 80023f0:	2200      	movs	r2, #0
 80023f2:	701a      	strb	r2, [r3, #0]
    /* in this case, 16-bit access is performed on Data
       So, check Data is 16-bit aligned address */
    assert_param(IS_SPI_16BIT_ALIGNED_ADDRESS(pData));
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	685a      	ldr	r2, [r3, #4]
 80023f8:	2382      	movs	r3, #130	; 0x82
 80023fa:	005b      	lsls	r3, r3, #1
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d113      	bne.n	8002428 <HAL_SPI_Receive+0x4c>
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d10f      	bne.n	8002428 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2251      	movs	r2, #81	; 0x51
 800240c:	2104      	movs	r1, #4
 800240e:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002410:	1dbb      	adds	r3, r7, #6
 8002412:	881c      	ldrh	r4, [r3, #0]
 8002414:	68ba      	ldr	r2, [r7, #8]
 8002416:	68b9      	ldr	r1, [r7, #8]
 8002418:	68f8      	ldr	r0, [r7, #12]
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	9300      	str	r3, [sp, #0]
 800241e:	0023      	movs	r3, r4
 8002420:	f000 f902 	bl	8002628 <HAL_SPI_TransmitReceive>
 8002424:	0003      	movs	r3, r0
 8002426:	e0f9      	b.n	800261c <HAL_SPI_Receive+0x240>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2250      	movs	r2, #80	; 0x50
 800242c:	5c9b      	ldrb	r3, [r3, r2]
 800242e:	2b01      	cmp	r3, #1
 8002430:	d101      	bne.n	8002436 <HAL_SPI_Receive+0x5a>
 8002432:	2302      	movs	r3, #2
 8002434:	e0f2      	b.n	800261c <HAL_SPI_Receive+0x240>
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2250      	movs	r2, #80	; 0x50
 800243a:	2101      	movs	r1, #1
 800243c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800243e:	f7fe fbdf 	bl	8000c00 <HAL_GetTick>
 8002442:	0003      	movs	r3, r0
 8002444:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2251      	movs	r2, #81	; 0x51
 800244a:	5c9b      	ldrb	r3, [r3, r2]
 800244c:	b2db      	uxtb	r3, r3
 800244e:	2b01      	cmp	r3, #1
 8002450:	d004      	beq.n	800245c <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 8002452:	2317      	movs	r3, #23
 8002454:	18fb      	adds	r3, r7, r3
 8002456:	2202      	movs	r2, #2
 8002458:	701a      	strb	r2, [r3, #0]
    goto error;
 800245a:	e0d4      	b.n	8002606 <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d003      	beq.n	800246a <HAL_SPI_Receive+0x8e>
 8002462:	1dbb      	adds	r3, r7, #6
 8002464:	881b      	ldrh	r3, [r3, #0]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d104      	bne.n	8002474 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 800246a:	2317      	movs	r3, #23
 800246c:	18fb      	adds	r3, r7, r3
 800246e:	2201      	movs	r2, #1
 8002470:	701a      	strb	r2, [r3, #0]
    goto error;
 8002472:	e0c8      	b.n	8002606 <HAL_SPI_Receive+0x22a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2251      	movs	r2, #81	; 0x51
 8002478:	2104      	movs	r1, #4
 800247a:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2200      	movs	r2, #0
 8002480:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	68ba      	ldr	r2, [r7, #8]
 8002486:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	1dba      	adds	r2, r7, #6
 800248c:	8812      	ldrh	r2, [r2, #0]
 800248e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	1dba      	adds	r2, r7, #6
 8002494:	8812      	ldrh	r2, [r2, #0]
 8002496:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2200      	movs	r2, #0
 800249c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2200      	movs	r2, #0
 80024a2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2200      	movs	r2, #0
 80024a8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2200      	movs	r2, #0
 80024ae:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2200      	movs	r2, #0
 80024b4:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	689a      	ldr	r2, [r3, #8]
 80024ba:	2380      	movs	r3, #128	; 0x80
 80024bc:	021b      	lsls	r3, r3, #8
 80024be:	429a      	cmp	r2, r3
 80024c0:	d10f      	bne.n	80024e2 <HAL_SPI_Receive+0x106>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	2140      	movs	r1, #64	; 0x40
 80024ce:	438a      	bics	r2, r1
 80024d0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4951      	ldr	r1, [pc, #324]	; (8002624 <HAL_SPI_Receive+0x248>)
 80024de:	400a      	ands	r2, r1
 80024e0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	2240      	movs	r2, #64	; 0x40
 80024ea:	4013      	ands	r3, r2
 80024ec:	2b40      	cmp	r3, #64	; 0x40
 80024ee:	d007      	beq.n	8002500 <HAL_SPI_Receive+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	2140      	movs	r1, #64	; 0x40
 80024fc:	430a      	orrs	r2, r1
 80024fe:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d164      	bne.n	80025d2 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002508:	e02f      	b.n	800256a <HAL_SPI_Receive+0x18e>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	2201      	movs	r2, #1
 8002512:	4013      	ands	r3, r2
 8002514:	2b01      	cmp	r3, #1
 8002516:	d115      	bne.n	8002544 <HAL_SPI_Receive+0x168>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	330c      	adds	r3, #12
 800251e:	001a      	movs	r2, r3
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002524:	7812      	ldrb	r2, [r2, #0]
 8002526:	b2d2      	uxtb	r2, r2
 8002528:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800252e:	1c5a      	adds	r2, r3, #1
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002538:	b29b      	uxth	r3, r3
 800253a:	3b01      	subs	r3, #1
 800253c:	b29a      	uxth	r2, r3
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002542:	e012      	b.n	800256a <HAL_SPI_Receive+0x18e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002544:	f7fe fb5c 	bl	8000c00 <HAL_GetTick>
 8002548:	0002      	movs	r2, r0
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	683a      	ldr	r2, [r7, #0]
 8002550:	429a      	cmp	r2, r3
 8002552:	d802      	bhi.n	800255a <HAL_SPI_Receive+0x17e>
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	3301      	adds	r3, #1
 8002558:	d102      	bne.n	8002560 <HAL_SPI_Receive+0x184>
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d104      	bne.n	800256a <HAL_SPI_Receive+0x18e>
        {
          errorcode = HAL_TIMEOUT;
 8002560:	2317      	movs	r3, #23
 8002562:	18fb      	adds	r3, r7, r3
 8002564:	2203      	movs	r2, #3
 8002566:	701a      	strb	r2, [r3, #0]
          goto error;
 8002568:	e04d      	b.n	8002606 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800256e:	b29b      	uxth	r3, r3
 8002570:	2b00      	cmp	r3, #0
 8002572:	d1ca      	bne.n	800250a <HAL_SPI_Receive+0x12e>
 8002574:	e032      	b.n	80025dc <HAL_SPI_Receive+0x200>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	2201      	movs	r2, #1
 800257e:	4013      	ands	r3, r2
 8002580:	2b01      	cmp	r3, #1
 8002582:	d113      	bne.n	80025ac <HAL_SPI_Receive+0x1d0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	68da      	ldr	r2, [r3, #12]
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800258e:	b292      	uxth	r2, r2
 8002590:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002596:	1c9a      	adds	r2, r3, #2
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025a0:	b29b      	uxth	r3, r3
 80025a2:	3b01      	subs	r3, #1
 80025a4:	b29a      	uxth	r2, r3
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80025aa:	e012      	b.n	80025d2 <HAL_SPI_Receive+0x1f6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80025ac:	f7fe fb28 	bl	8000c00 <HAL_GetTick>
 80025b0:	0002      	movs	r2, r0
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	683a      	ldr	r2, [r7, #0]
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d802      	bhi.n	80025c2 <HAL_SPI_Receive+0x1e6>
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	3301      	adds	r3, #1
 80025c0:	d102      	bne.n	80025c8 <HAL_SPI_Receive+0x1ec>
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d104      	bne.n	80025d2 <HAL_SPI_Receive+0x1f6>
        {
          errorcode = HAL_TIMEOUT;
 80025c8:	2317      	movs	r3, #23
 80025ca:	18fb      	adds	r3, r7, r3
 80025cc:	2203      	movs	r2, #3
 80025ce:	701a      	strb	r2, [r3, #0]
          goto error;
 80025d0:	e019      	b.n	8002606 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d1cc      	bne.n	8002576 <HAL_SPI_Receive+0x19a>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80025dc:	693a      	ldr	r2, [r7, #16]
 80025de:	6839      	ldr	r1, [r7, #0]
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	0018      	movs	r0, r3
 80025e4:	f000 fa6a 	bl	8002abc <SPI_EndRxTransaction>
 80025e8:	1e03      	subs	r3, r0, #0
 80025ea:	d002      	beq.n	80025f2 <HAL_SPI_Receive+0x216>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2220      	movs	r2, #32
 80025f0:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d004      	beq.n	8002604 <HAL_SPI_Receive+0x228>
  {
    errorcode = HAL_ERROR;
 80025fa:	2317      	movs	r3, #23
 80025fc:	18fb      	adds	r3, r7, r3
 80025fe:	2201      	movs	r2, #1
 8002600:	701a      	strb	r2, [r3, #0]
 8002602:	e000      	b.n	8002606 <HAL_SPI_Receive+0x22a>
  }

error :
 8002604:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2251      	movs	r2, #81	; 0x51
 800260a:	2101      	movs	r1, #1
 800260c:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2250      	movs	r2, #80	; 0x50
 8002612:	2100      	movs	r1, #0
 8002614:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002616:	2317      	movs	r3, #23
 8002618:	18fb      	adds	r3, r7, r3
 800261a:	781b      	ldrb	r3, [r3, #0]
}
 800261c:	0018      	movs	r0, r3
 800261e:	46bd      	mov	sp, r7
 8002620:	b007      	add	sp, #28
 8002622:	bd90      	pop	{r4, r7, pc}
 8002624:	ffffbfff 	.word	0xffffbfff

08002628 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b08c      	sub	sp, #48	; 0x30
 800262c:	af00      	add	r7, sp, #0
 800262e:	60f8      	str	r0, [r7, #12]
 8002630:	60b9      	str	r1, [r7, #8]
 8002632:	607a      	str	r2, [r7, #4]
 8002634:	001a      	movs	r2, r3
 8002636:	1cbb      	adds	r3, r7, #2
 8002638:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800263a:	2301      	movs	r3, #1
 800263c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800263e:	232b      	movs	r3, #43	; 0x2b
 8002640:	18fb      	adds	r3, r7, r3
 8002642:	2200      	movs	r2, #0
 8002644:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2250      	movs	r2, #80	; 0x50
 800264a:	5c9b      	ldrb	r3, [r3, r2]
 800264c:	2b01      	cmp	r3, #1
 800264e:	d101      	bne.n	8002654 <HAL_SPI_TransmitReceive+0x2c>
 8002650:	2302      	movs	r3, #2
 8002652:	e1a0      	b.n	8002996 <HAL_SPI_TransmitReceive+0x36e>
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2250      	movs	r2, #80	; 0x50
 8002658:	2101      	movs	r1, #1
 800265a:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800265c:	f7fe fad0 	bl	8000c00 <HAL_GetTick>
 8002660:	0003      	movs	r3, r0
 8002662:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002664:	2023      	movs	r0, #35	; 0x23
 8002666:	183b      	adds	r3, r7, r0
 8002668:	68fa      	ldr	r2, [r7, #12]
 800266a:	2151      	movs	r1, #81	; 0x51
 800266c:	5c52      	ldrb	r2, [r2, r1]
 800266e:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002676:	231a      	movs	r3, #26
 8002678:	18fb      	adds	r3, r7, r3
 800267a:	1cba      	adds	r2, r7, #2
 800267c:	8812      	ldrh	r2, [r2, #0]
 800267e:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002680:	183b      	adds	r3, r7, r0
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	2b01      	cmp	r3, #1
 8002686:	d011      	beq.n	80026ac <HAL_SPI_TransmitReceive+0x84>
 8002688:	69fa      	ldr	r2, [r7, #28]
 800268a:	2382      	movs	r3, #130	; 0x82
 800268c:	005b      	lsls	r3, r3, #1
 800268e:	429a      	cmp	r2, r3
 8002690:	d107      	bne.n	80026a2 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d103      	bne.n	80026a2 <HAL_SPI_TransmitReceive+0x7a>
 800269a:	183b      	adds	r3, r7, r0
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	2b04      	cmp	r3, #4
 80026a0:	d004      	beq.n	80026ac <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 80026a2:	232b      	movs	r3, #43	; 0x2b
 80026a4:	18fb      	adds	r3, r7, r3
 80026a6:	2202      	movs	r2, #2
 80026a8:	701a      	strb	r2, [r3, #0]
    goto error;
 80026aa:	e169      	b.n	8002980 <HAL_SPI_TransmitReceive+0x358>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d006      	beq.n	80026c0 <HAL_SPI_TransmitReceive+0x98>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d003      	beq.n	80026c0 <HAL_SPI_TransmitReceive+0x98>
 80026b8:	1cbb      	adds	r3, r7, #2
 80026ba:	881b      	ldrh	r3, [r3, #0]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d104      	bne.n	80026ca <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 80026c0:	232b      	movs	r3, #43	; 0x2b
 80026c2:	18fb      	adds	r3, r7, r3
 80026c4:	2201      	movs	r2, #1
 80026c6:	701a      	strb	r2, [r3, #0]
    goto error;
 80026c8:	e15a      	b.n	8002980 <HAL_SPI_TransmitReceive+0x358>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2251      	movs	r2, #81	; 0x51
 80026ce:	5c9b      	ldrb	r3, [r3, r2]
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	2b04      	cmp	r3, #4
 80026d4:	d003      	beq.n	80026de <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2251      	movs	r2, #81	; 0x51
 80026da:	2105      	movs	r1, #5
 80026dc:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2200      	movs	r2, #0
 80026e2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	1cba      	adds	r2, r7, #2
 80026ee:	8812      	ldrh	r2, [r2, #0]
 80026f0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	1cba      	adds	r2, r7, #2
 80026f6:	8812      	ldrh	r2, [r2, #0]
 80026f8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	68ba      	ldr	r2, [r7, #8]
 80026fe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	1cba      	adds	r2, r7, #2
 8002704:	8812      	ldrh	r2, [r2, #0]
 8002706:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	1cba      	adds	r2, r7, #2
 800270c:	8812      	ldrh	r2, [r2, #0]
 800270e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2200      	movs	r2, #0
 8002714:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2200      	movs	r2, #0
 800271a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	2240      	movs	r2, #64	; 0x40
 8002724:	4013      	ands	r3, r2
 8002726:	2b40      	cmp	r3, #64	; 0x40
 8002728:	d007      	beq.n	800273a <HAL_SPI_TransmitReceive+0x112>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	2140      	movs	r1, #64	; 0x40
 8002736:	430a      	orrs	r2, r1
 8002738:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	68da      	ldr	r2, [r3, #12]
 800273e:	2380      	movs	r3, #128	; 0x80
 8002740:	011b      	lsls	r3, r3, #4
 8002742:	429a      	cmp	r2, r3
 8002744:	d000      	beq.n	8002748 <HAL_SPI_TransmitReceive+0x120>
 8002746:	e07a      	b.n	800283e <HAL_SPI_TransmitReceive+0x216>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d004      	beq.n	800275a <HAL_SPI_TransmitReceive+0x132>
 8002750:	231a      	movs	r3, #26
 8002752:	18fb      	adds	r3, r7, r3
 8002754:	881b      	ldrh	r3, [r3, #0]
 8002756:	2b01      	cmp	r3, #1
 8002758:	d166      	bne.n	8002828 <HAL_SPI_TransmitReceive+0x200>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275e:	881a      	ldrh	r2, [r3, #0]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276a:	1c9a      	adds	r2, r3, #2
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002774:	b29b      	uxth	r3, r3
 8002776:	3b01      	subs	r3, #1
 8002778:	b29a      	uxth	r2, r3
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800277e:	e053      	b.n	8002828 <HAL_SPI_TransmitReceive+0x200>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	2202      	movs	r2, #2
 8002788:	4013      	ands	r3, r2
 800278a:	2b02      	cmp	r3, #2
 800278c:	d11b      	bne.n	80027c6 <HAL_SPI_TransmitReceive+0x19e>
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002792:	b29b      	uxth	r3, r3
 8002794:	2b00      	cmp	r3, #0
 8002796:	d016      	beq.n	80027c6 <HAL_SPI_TransmitReceive+0x19e>
 8002798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800279a:	2b01      	cmp	r3, #1
 800279c:	d113      	bne.n	80027c6 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a2:	881a      	ldrh	r2, [r3, #0]
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ae:	1c9a      	adds	r2, r3, #2
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027b8:	b29b      	uxth	r3, r3
 80027ba:	3b01      	subs	r3, #1
 80027bc:	b29a      	uxth	r2, r3
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80027c2:	2300      	movs	r3, #0
 80027c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	2201      	movs	r2, #1
 80027ce:	4013      	ands	r3, r2
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d119      	bne.n	8002808 <HAL_SPI_TransmitReceive+0x1e0>
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027d8:	b29b      	uxth	r3, r3
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d014      	beq.n	8002808 <HAL_SPI_TransmitReceive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	68da      	ldr	r2, [r3, #12]
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027e8:	b292      	uxth	r2, r2
 80027ea:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027f0:	1c9a      	adds	r2, r3, #2
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027fa:	b29b      	uxth	r3, r3
 80027fc:	3b01      	subs	r3, #1
 80027fe:	b29a      	uxth	r2, r3
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002804:	2301      	movs	r3, #1
 8002806:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002808:	f7fe f9fa 	bl	8000c00 <HAL_GetTick>
 800280c:	0002      	movs	r2, r0
 800280e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002814:	429a      	cmp	r2, r3
 8002816:	d807      	bhi.n	8002828 <HAL_SPI_TransmitReceive+0x200>
 8002818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800281a:	3301      	adds	r3, #1
 800281c:	d004      	beq.n	8002828 <HAL_SPI_TransmitReceive+0x200>
      {
        errorcode = HAL_TIMEOUT;
 800281e:	232b      	movs	r3, #43	; 0x2b
 8002820:	18fb      	adds	r3, r7, r3
 8002822:	2203      	movs	r2, #3
 8002824:	701a      	strb	r2, [r3, #0]
        goto error;
 8002826:	e0ab      	b.n	8002980 <HAL_SPI_TransmitReceive+0x358>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800282c:	b29b      	uxth	r3, r3
 800282e:	2b00      	cmp	r3, #0
 8002830:	d1a6      	bne.n	8002780 <HAL_SPI_TransmitReceive+0x158>
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002836:	b29b      	uxth	r3, r3
 8002838:	2b00      	cmp	r3, #0
 800283a:	d1a1      	bne.n	8002780 <HAL_SPI_TransmitReceive+0x158>
 800283c:	e07f      	b.n	800293e <HAL_SPI_TransmitReceive+0x316>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d005      	beq.n	8002852 <HAL_SPI_TransmitReceive+0x22a>
 8002846:	231a      	movs	r3, #26
 8002848:	18fb      	adds	r3, r7, r3
 800284a:	881b      	ldrh	r3, [r3, #0]
 800284c:	2b01      	cmp	r3, #1
 800284e:	d000      	beq.n	8002852 <HAL_SPI_TransmitReceive+0x22a>
 8002850:	e06b      	b.n	800292a <HAL_SPI_TransmitReceive+0x302>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	330c      	adds	r3, #12
 800285c:	7812      	ldrb	r2, [r2, #0]
 800285e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002864:	1c5a      	adds	r2, r3, #1
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800286e:	b29b      	uxth	r3, r3
 8002870:	3b01      	subs	r3, #1
 8002872:	b29a      	uxth	r2, r3
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002878:	e057      	b.n	800292a <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	2202      	movs	r2, #2
 8002882:	4013      	ands	r3, r2
 8002884:	2b02      	cmp	r3, #2
 8002886:	d11c      	bne.n	80028c2 <HAL_SPI_TransmitReceive+0x29a>
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800288c:	b29b      	uxth	r3, r3
 800288e:	2b00      	cmp	r3, #0
 8002890:	d017      	beq.n	80028c2 <HAL_SPI_TransmitReceive+0x29a>
 8002892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002894:	2b01      	cmp	r3, #1
 8002896:	d114      	bne.n	80028c2 <HAL_SPI_TransmitReceive+0x29a>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	330c      	adds	r3, #12
 80028a2:	7812      	ldrb	r2, [r2, #0]
 80028a4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028aa:	1c5a      	adds	r2, r3, #1
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028b4:	b29b      	uxth	r3, r3
 80028b6:	3b01      	subs	r3, #1
 80028b8:	b29a      	uxth	r2, r3
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80028be:	2300      	movs	r3, #0
 80028c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	2201      	movs	r2, #1
 80028ca:	4013      	ands	r3, r2
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d119      	bne.n	8002904 <HAL_SPI_TransmitReceive+0x2dc>
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d014      	beq.n	8002904 <HAL_SPI_TransmitReceive+0x2dc>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	68da      	ldr	r2, [r3, #12]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028e4:	b2d2      	uxtb	r2, r2
 80028e6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ec:	1c5a      	adds	r2, r3, #1
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028f6:	b29b      	uxth	r3, r3
 80028f8:	3b01      	subs	r3, #1
 80028fa:	b29a      	uxth	r2, r3
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002900:	2301      	movs	r3, #1
 8002902:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002904:	f7fe f97c 	bl	8000c00 <HAL_GetTick>
 8002908:	0002      	movs	r2, r0
 800290a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002910:	429a      	cmp	r2, r3
 8002912:	d802      	bhi.n	800291a <HAL_SPI_TransmitReceive+0x2f2>
 8002914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002916:	3301      	adds	r3, #1
 8002918:	d102      	bne.n	8002920 <HAL_SPI_TransmitReceive+0x2f8>
 800291a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800291c:	2b00      	cmp	r3, #0
 800291e:	d104      	bne.n	800292a <HAL_SPI_TransmitReceive+0x302>
      {
        errorcode = HAL_TIMEOUT;
 8002920:	232b      	movs	r3, #43	; 0x2b
 8002922:	18fb      	adds	r3, r7, r3
 8002924:	2203      	movs	r2, #3
 8002926:	701a      	strb	r2, [r3, #0]
        goto error;
 8002928:	e02a      	b.n	8002980 <HAL_SPI_TransmitReceive+0x358>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800292e:	b29b      	uxth	r3, r3
 8002930:	2b00      	cmp	r3, #0
 8002932:	d1a2      	bne.n	800287a <HAL_SPI_TransmitReceive+0x252>
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002938:	b29b      	uxth	r3, r3
 800293a:	2b00      	cmp	r3, #0
 800293c:	d19d      	bne.n	800287a <HAL_SPI_TransmitReceive+0x252>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800293e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002940:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	0018      	movs	r0, r3
 8002946:	f000 f923 	bl	8002b90 <SPI_EndRxTxTransaction>
 800294a:	1e03      	subs	r3, r0, #0
 800294c:	d007      	beq.n	800295e <HAL_SPI_TransmitReceive+0x336>
  {
    errorcode = HAL_ERROR;
 800294e:	232b      	movs	r3, #43	; 0x2b
 8002950:	18fb      	adds	r3, r7, r3
 8002952:	2201      	movs	r2, #1
 8002954:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2220      	movs	r2, #32
 800295a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800295c:	e010      	b.n	8002980 <HAL_SPI_TransmitReceive+0x358>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d10b      	bne.n	800297e <HAL_SPI_TransmitReceive+0x356>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002966:	2300      	movs	r3, #0
 8002968:	617b      	str	r3, [r7, #20]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	617b      	str	r3, [r7, #20]
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	617b      	str	r3, [r7, #20]
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	e000      	b.n	8002980 <HAL_SPI_TransmitReceive+0x358>
  }

error :
 800297e:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2251      	movs	r2, #81	; 0x51
 8002984:	2101      	movs	r1, #1
 8002986:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2250      	movs	r2, #80	; 0x50
 800298c:	2100      	movs	r1, #0
 800298e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002990:	232b      	movs	r3, #43	; 0x2b
 8002992:	18fb      	adds	r3, r7, r3
 8002994:	781b      	ldrb	r3, [r3, #0]
}
 8002996:	0018      	movs	r0, r3
 8002998:	46bd      	mov	sp, r7
 800299a:	b00c      	add	sp, #48	; 0x30
 800299c:	bd80      	pop	{r7, pc}
	...

080029a0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b088      	sub	sp, #32
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	60f8      	str	r0, [r7, #12]
 80029a8:	60b9      	str	r1, [r7, #8]
 80029aa:	603b      	str	r3, [r7, #0]
 80029ac:	1dfb      	adds	r3, r7, #7
 80029ae:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80029b0:	f7fe f926 	bl	8000c00 <HAL_GetTick>
 80029b4:	0002      	movs	r2, r0
 80029b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029b8:	1a9b      	subs	r3, r3, r2
 80029ba:	683a      	ldr	r2, [r7, #0]
 80029bc:	18d3      	adds	r3, r2, r3
 80029be:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80029c0:	f7fe f91e 	bl	8000c00 <HAL_GetTick>
 80029c4:	0003      	movs	r3, r0
 80029c6:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80029c8:	4b3a      	ldr	r3, [pc, #232]	; (8002ab4 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	015b      	lsls	r3, r3, #5
 80029ce:	0d1b      	lsrs	r3, r3, #20
 80029d0:	69fa      	ldr	r2, [r7, #28]
 80029d2:	4353      	muls	r3, r2
 80029d4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80029d6:	e058      	b.n	8002a8a <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	3301      	adds	r3, #1
 80029dc:	d055      	beq.n	8002a8a <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80029de:	f7fe f90f 	bl	8000c00 <HAL_GetTick>
 80029e2:	0002      	movs	r2, r0
 80029e4:	69bb      	ldr	r3, [r7, #24]
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	69fa      	ldr	r2, [r7, #28]
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d902      	bls.n	80029f4 <SPI_WaitFlagStateUntilTimeout+0x54>
 80029ee:	69fb      	ldr	r3, [r7, #28]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d142      	bne.n	8002a7a <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	685a      	ldr	r2, [r3, #4]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	21e0      	movs	r1, #224	; 0xe0
 8002a00:	438a      	bics	r2, r1
 8002a02:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	685a      	ldr	r2, [r3, #4]
 8002a08:	2382      	movs	r3, #130	; 0x82
 8002a0a:	005b      	lsls	r3, r3, #1
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d113      	bne.n	8002a38 <SPI_WaitFlagStateUntilTimeout+0x98>
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	689a      	ldr	r2, [r3, #8]
 8002a14:	2380      	movs	r3, #128	; 0x80
 8002a16:	021b      	lsls	r3, r3, #8
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d005      	beq.n	8002a28 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	689a      	ldr	r2, [r3, #8]
 8002a20:	2380      	movs	r3, #128	; 0x80
 8002a22:	00db      	lsls	r3, r3, #3
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d107      	bne.n	8002a38 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	2140      	movs	r1, #64	; 0x40
 8002a34:	438a      	bics	r2, r1
 8002a36:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a3c:	2380      	movs	r3, #128	; 0x80
 8002a3e:	019b      	lsls	r3, r3, #6
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d110      	bne.n	8002a66 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	491a      	ldr	r1, [pc, #104]	; (8002ab8 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8002a50:	400a      	ands	r2, r1
 8002a52:	601a      	str	r2, [r3, #0]
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	2180      	movs	r1, #128	; 0x80
 8002a60:	0189      	lsls	r1, r1, #6
 8002a62:	430a      	orrs	r2, r1
 8002a64:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2251      	movs	r2, #81	; 0x51
 8002a6a:	2101      	movs	r1, #1
 8002a6c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2250      	movs	r2, #80	; 0x50
 8002a72:	2100      	movs	r1, #0
 8002a74:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	e017      	b.n	8002aaa <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d101      	bne.n	8002a84 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8002a80:	2300      	movs	r3, #0
 8002a82:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	3b01      	subs	r3, #1
 8002a88:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	68ba      	ldr	r2, [r7, #8]
 8002a92:	4013      	ands	r3, r2
 8002a94:	68ba      	ldr	r2, [r7, #8]
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	425a      	negs	r2, r3
 8002a9a:	4153      	adcs	r3, r2
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	001a      	movs	r2, r3
 8002aa0:	1dfb      	adds	r3, r7, #7
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d197      	bne.n	80029d8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002aa8:	2300      	movs	r3, #0
}
 8002aaa:	0018      	movs	r0, r3
 8002aac:	46bd      	mov	sp, r7
 8002aae:	b008      	add	sp, #32
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	46c0      	nop			; (mov r8, r8)
 8002ab4:	20000000 	.word	0x20000000
 8002ab8:	ffffdfff 	.word	0xffffdfff

08002abc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b086      	sub	sp, #24
 8002ac0:	af02      	add	r7, sp, #8
 8002ac2:	60f8      	str	r0, [r7, #12]
 8002ac4:	60b9      	str	r1, [r7, #8]
 8002ac6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	685a      	ldr	r2, [r3, #4]
 8002acc:	2382      	movs	r3, #130	; 0x82
 8002ace:	005b      	lsls	r3, r3, #1
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d113      	bne.n	8002afc <SPI_EndRxTransaction+0x40>
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	689a      	ldr	r2, [r3, #8]
 8002ad8:	2380      	movs	r3, #128	; 0x80
 8002ada:	021b      	lsls	r3, r3, #8
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d005      	beq.n	8002aec <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	689a      	ldr	r2, [r3, #8]
 8002ae4:	2380      	movs	r3, #128	; 0x80
 8002ae6:	00db      	lsls	r3, r3, #3
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d107      	bne.n	8002afc <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	2140      	movs	r1, #64	; 0x40
 8002af8:	438a      	bics	r2, r1
 8002afa:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	685a      	ldr	r2, [r3, #4]
 8002b00:	2382      	movs	r3, #130	; 0x82
 8002b02:	005b      	lsls	r3, r3, #1
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d12b      	bne.n	8002b60 <SPI_EndRxTransaction+0xa4>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	689a      	ldr	r2, [r3, #8]
 8002b0c:	2380      	movs	r3, #128	; 0x80
 8002b0e:	00db      	lsls	r3, r3, #3
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d012      	beq.n	8002b3a <SPI_EndRxTransaction+0x7e>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002b14:	68ba      	ldr	r2, [r7, #8]
 8002b16:	68f8      	ldr	r0, [r7, #12]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	9300      	str	r3, [sp, #0]
 8002b1c:	0013      	movs	r3, r2
 8002b1e:	2200      	movs	r2, #0
 8002b20:	2180      	movs	r1, #128	; 0x80
 8002b22:	f7ff ff3d 	bl	80029a0 <SPI_WaitFlagStateUntilTimeout>
 8002b26:	1e03      	subs	r3, r0, #0
 8002b28:	d02d      	beq.n	8002b86 <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b2e:	2220      	movs	r2, #32
 8002b30:	431a      	orrs	r2, r3
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002b36:	2303      	movs	r3, #3
 8002b38:	e026      	b.n	8002b88 <SPI_EndRxTransaction+0xcc>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002b3a:	68ba      	ldr	r2, [r7, #8]
 8002b3c:	68f8      	ldr	r0, [r7, #12]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	9300      	str	r3, [sp, #0]
 8002b42:	0013      	movs	r3, r2
 8002b44:	2200      	movs	r2, #0
 8002b46:	2101      	movs	r1, #1
 8002b48:	f7ff ff2a 	bl	80029a0 <SPI_WaitFlagStateUntilTimeout>
 8002b4c:	1e03      	subs	r3, r0, #0
 8002b4e:	d01a      	beq.n	8002b86 <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b54:	2220      	movs	r2, #32
 8002b56:	431a      	orrs	r2, r3
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	e013      	b.n	8002b88 <SPI_EndRxTransaction+0xcc>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002b60:	68ba      	ldr	r2, [r7, #8]
 8002b62:	68f8      	ldr	r0, [r7, #12]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	9300      	str	r3, [sp, #0]
 8002b68:	0013      	movs	r3, r2
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	2101      	movs	r1, #1
 8002b6e:	f7ff ff17 	bl	80029a0 <SPI_WaitFlagStateUntilTimeout>
 8002b72:	1e03      	subs	r3, r0, #0
 8002b74:	d007      	beq.n	8002b86 <SPI_EndRxTransaction+0xca>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b7a:	2220      	movs	r2, #32
 8002b7c:	431a      	orrs	r2, r3
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e000      	b.n	8002b88 <SPI_EndRxTransaction+0xcc>
    }
  }
  return HAL_OK;
 8002b86:	2300      	movs	r3, #0
}
 8002b88:	0018      	movs	r0, r3
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	b004      	add	sp, #16
 8002b8e:	bd80      	pop	{r7, pc}

08002b90 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b088      	sub	sp, #32
 8002b94:	af02      	add	r7, sp, #8
 8002b96:	60f8      	str	r0, [r7, #12]
 8002b98:	60b9      	str	r1, [r7, #8]
 8002b9a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002b9c:	4b1d      	ldr	r3, [pc, #116]	; (8002c14 <SPI_EndRxTxTransaction+0x84>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	491d      	ldr	r1, [pc, #116]	; (8002c18 <SPI_EndRxTxTransaction+0x88>)
 8002ba2:	0018      	movs	r0, r3
 8002ba4:	f7fd faba 	bl	800011c <__udivsi3>
 8002ba8:	0003      	movs	r3, r0
 8002baa:	001a      	movs	r2, r3
 8002bac:	0013      	movs	r3, r2
 8002bae:	015b      	lsls	r3, r3, #5
 8002bb0:	1a9b      	subs	r3, r3, r2
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	189b      	adds	r3, r3, r2
 8002bb6:	00db      	lsls	r3, r3, #3
 8002bb8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	685a      	ldr	r2, [r3, #4]
 8002bbe:	2382      	movs	r3, #130	; 0x82
 8002bc0:	005b      	lsls	r3, r3, #1
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d112      	bne.n	8002bec <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002bc6:	68ba      	ldr	r2, [r7, #8]
 8002bc8:	68f8      	ldr	r0, [r7, #12]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	9300      	str	r3, [sp, #0]
 8002bce:	0013      	movs	r3, r2
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	2180      	movs	r1, #128	; 0x80
 8002bd4:	f7ff fee4 	bl	80029a0 <SPI_WaitFlagStateUntilTimeout>
 8002bd8:	1e03      	subs	r3, r0, #0
 8002bda:	d016      	beq.n	8002c0a <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002be0:	2220      	movs	r2, #32
 8002be2:	431a      	orrs	r2, r3
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002be8:	2303      	movs	r3, #3
 8002bea:	e00f      	b.n	8002c0c <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d00a      	beq.n	8002c08 <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	3b01      	subs	r3, #1
 8002bf6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	2280      	movs	r2, #128	; 0x80
 8002c00:	4013      	ands	r3, r2
 8002c02:	2b80      	cmp	r3, #128	; 0x80
 8002c04:	d0f2      	beq.n	8002bec <SPI_EndRxTxTransaction+0x5c>
 8002c06:	e000      	b.n	8002c0a <SPI_EndRxTxTransaction+0x7a>
        break;
 8002c08:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 8002c0a:	2300      	movs	r3, #0
}
 8002c0c:	0018      	movs	r0, r3
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	b006      	add	sp, #24
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	20000000 	.word	0x20000000
 8002c18:	016e3600 	.word	0x016e3600

08002c1c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b082      	sub	sp, #8
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d101      	bne.n	8002c2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e044      	b.n	8002cb8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d107      	bne.n	8002c46 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2274      	movs	r2, #116	; 0x74
 8002c3a:	2100      	movs	r1, #0
 8002c3c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	0018      	movs	r0, r3
 8002c42:	f7fd feb5 	bl	80009b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2224      	movs	r2, #36	; 0x24
 8002c4a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	2101      	movs	r1, #1
 8002c58:	438a      	bics	r2, r1
 8002c5a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	0018      	movs	r0, r3
 8002c60:	f000 f8d8 	bl	8002e14 <UART_SetConfig>
 8002c64:	0003      	movs	r3, r0
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d101      	bne.n	8002c6e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e024      	b.n	8002cb8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d003      	beq.n	8002c7e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	0018      	movs	r0, r3
 8002c7a:	f000 fb6b 	bl	8003354 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	685a      	ldr	r2, [r3, #4]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	490d      	ldr	r1, [pc, #52]	; (8002cc0 <HAL_UART_Init+0xa4>)
 8002c8a:	400a      	ands	r2, r1
 8002c8c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	689a      	ldr	r2, [r3, #8]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	212a      	movs	r1, #42	; 0x2a
 8002c9a:	438a      	bics	r2, r1
 8002c9c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	2101      	movs	r1, #1
 8002caa:	430a      	orrs	r2, r1
 8002cac:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	0018      	movs	r0, r3
 8002cb2:	f000 fc03 	bl	80034bc <UART_CheckIdleState>
 8002cb6:	0003      	movs	r3, r0
}
 8002cb8:	0018      	movs	r0, r3
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	b002      	add	sp, #8
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	ffffb7ff 	.word	0xffffb7ff

08002cc4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b08a      	sub	sp, #40	; 0x28
 8002cc8:	af02      	add	r7, sp, #8
 8002cca:	60f8      	str	r0, [r7, #12]
 8002ccc:	60b9      	str	r1, [r7, #8]
 8002cce:	603b      	str	r3, [r7, #0]
 8002cd0:	1dbb      	adds	r3, r7, #6
 8002cd2:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002cd8:	2b20      	cmp	r3, #32
 8002cda:	d000      	beq.n	8002cde <HAL_UART_Transmit+0x1a>
 8002cdc:	e095      	b.n	8002e0a <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d003      	beq.n	8002cec <HAL_UART_Transmit+0x28>
 8002ce4:	1dbb      	adds	r3, r7, #6
 8002ce6:	881b      	ldrh	r3, [r3, #0]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d101      	bne.n	8002cf0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e08d      	b.n	8002e0c <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	689a      	ldr	r2, [r3, #8]
 8002cf4:	2380      	movs	r3, #128	; 0x80
 8002cf6:	015b      	lsls	r3, r3, #5
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d109      	bne.n	8002d10 <HAL_UART_Transmit+0x4c>
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	691b      	ldr	r3, [r3, #16]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d105      	bne.n	8002d10 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	2201      	movs	r2, #1
 8002d08:	4013      	ands	r3, r2
 8002d0a:	d001      	beq.n	8002d10 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e07d      	b.n	8002e0c <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2274      	movs	r2, #116	; 0x74
 8002d14:	5c9b      	ldrb	r3, [r3, r2]
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d101      	bne.n	8002d1e <HAL_UART_Transmit+0x5a>
 8002d1a:	2302      	movs	r3, #2
 8002d1c:	e076      	b.n	8002e0c <HAL_UART_Transmit+0x148>
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2274      	movs	r2, #116	; 0x74
 8002d22:	2101      	movs	r1, #1
 8002d24:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2280      	movs	r2, #128	; 0x80
 8002d2a:	2100      	movs	r1, #0
 8002d2c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2221      	movs	r2, #33	; 0x21
 8002d32:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d34:	f7fd ff64 	bl	8000c00 <HAL_GetTick>
 8002d38:	0003      	movs	r3, r0
 8002d3a:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	1dba      	adds	r2, r7, #6
 8002d40:	2150      	movs	r1, #80	; 0x50
 8002d42:	8812      	ldrh	r2, [r2, #0]
 8002d44:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	1dba      	adds	r2, r7, #6
 8002d4a:	2152      	movs	r1, #82	; 0x52
 8002d4c:	8812      	ldrh	r2, [r2, #0]
 8002d4e:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	689a      	ldr	r2, [r3, #8]
 8002d54:	2380      	movs	r3, #128	; 0x80
 8002d56:	015b      	lsls	r3, r3, #5
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d108      	bne.n	8002d6e <HAL_UART_Transmit+0xaa>
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	691b      	ldr	r3, [r3, #16]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d104      	bne.n	8002d6e <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8002d64:	2300      	movs	r3, #0
 8002d66:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	61bb      	str	r3, [r7, #24]
 8002d6c:	e003      	b.n	8002d76 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d72:	2300      	movs	r3, #0
 8002d74:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2274      	movs	r2, #116	; 0x74
 8002d7a:	2100      	movs	r1, #0
 8002d7c:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8002d7e:	e02c      	b.n	8002dda <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d80:	697a      	ldr	r2, [r7, #20]
 8002d82:	68f8      	ldr	r0, [r7, #12]
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	9300      	str	r3, [sp, #0]
 8002d88:	0013      	movs	r3, r2
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	2180      	movs	r1, #128	; 0x80
 8002d8e:	f000 fbdd 	bl	800354c <UART_WaitOnFlagUntilTimeout>
 8002d92:	1e03      	subs	r3, r0, #0
 8002d94:	d001      	beq.n	8002d9a <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e038      	b.n	8002e0c <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d10b      	bne.n	8002db8 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002da0:	69bb      	ldr	r3, [r7, #24]
 8002da2:	881b      	ldrh	r3, [r3, #0]
 8002da4:	001a      	movs	r2, r3
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	05d2      	lsls	r2, r2, #23
 8002dac:	0dd2      	lsrs	r2, r2, #23
 8002dae:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002db0:	69bb      	ldr	r3, [r7, #24]
 8002db2:	3302      	adds	r3, #2
 8002db4:	61bb      	str	r3, [r7, #24]
 8002db6:	e007      	b.n	8002dc8 <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002db8:	69fb      	ldr	r3, [r7, #28]
 8002dba:	781a      	ldrb	r2, [r3, #0]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	3301      	adds	r3, #1
 8002dc6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2252      	movs	r2, #82	; 0x52
 8002dcc:	5a9b      	ldrh	r3, [r3, r2]
 8002dce:	b29b      	uxth	r3, r3
 8002dd0:	3b01      	subs	r3, #1
 8002dd2:	b299      	uxth	r1, r3
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2252      	movs	r2, #82	; 0x52
 8002dd8:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2252      	movs	r2, #82	; 0x52
 8002dde:	5a9b      	ldrh	r3, [r3, r2]
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d1cc      	bne.n	8002d80 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002de6:	697a      	ldr	r2, [r7, #20]
 8002de8:	68f8      	ldr	r0, [r7, #12]
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	9300      	str	r3, [sp, #0]
 8002dee:	0013      	movs	r3, r2
 8002df0:	2200      	movs	r2, #0
 8002df2:	2140      	movs	r1, #64	; 0x40
 8002df4:	f000 fbaa 	bl	800354c <UART_WaitOnFlagUntilTimeout>
 8002df8:	1e03      	subs	r3, r0, #0
 8002dfa:	d001      	beq.n	8002e00 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 8002dfc:	2303      	movs	r3, #3
 8002dfe:	e005      	b.n	8002e0c <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2220      	movs	r2, #32
 8002e04:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002e06:	2300      	movs	r3, #0
 8002e08:	e000      	b.n	8002e0c <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8002e0a:	2302      	movs	r3, #2
  }
}
 8002e0c:	0018      	movs	r0, r3
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	b008      	add	sp, #32
 8002e12:	bd80      	pop	{r7, pc}

08002e14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e14:	b5b0      	push	{r4, r5, r7, lr}
 8002e16:	b08e      	sub	sp, #56	; 0x38
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e1c:	231a      	movs	r3, #26
 8002e1e:	2218      	movs	r2, #24
 8002e20:	189b      	adds	r3, r3, r2
 8002e22:	19db      	adds	r3, r3, r7
 8002e24:	2200      	movs	r2, #0
 8002e26:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e28:	69fb      	ldr	r3, [r7, #28]
 8002e2a:	689a      	ldr	r2, [r3, #8]
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	691b      	ldr	r3, [r3, #16]
 8002e30:	431a      	orrs	r2, r3
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	695b      	ldr	r3, [r3, #20]
 8002e36:	431a      	orrs	r2, r3
 8002e38:	69fb      	ldr	r3, [r7, #28]
 8002e3a:	69db      	ldr	r3, [r3, #28]
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4ac3      	ldr	r2, [pc, #780]	; (8003154 <UART_SetConfig+0x340>)
 8002e48:	4013      	ands	r3, r2
 8002e4a:	0019      	movs	r1, r3
 8002e4c:	69fb      	ldr	r3, [r7, #28]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e52:	430a      	orrs	r2, r1
 8002e54:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	4abe      	ldr	r2, [pc, #760]	; (8003158 <UART_SetConfig+0x344>)
 8002e5e:	4013      	ands	r3, r2
 8002e60:	0019      	movs	r1, r3
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	68da      	ldr	r2, [r3, #12]
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	430a      	orrs	r2, r1
 8002e6c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	699b      	ldr	r3, [r3, #24]
 8002e72:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4ab8      	ldr	r2, [pc, #736]	; (800315c <UART_SetConfig+0x348>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d004      	beq.n	8002e88 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	6a1b      	ldr	r3, [r3, #32]
 8002e82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e84:	4313      	orrs	r3, r2
 8002e86:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002e88:	69fb      	ldr	r3, [r7, #28]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	4ab4      	ldr	r2, [pc, #720]	; (8003160 <UART_SetConfig+0x34c>)
 8002e90:	4013      	ands	r3, r2
 8002e92:	0019      	movs	r1, r3
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e9a:	430a      	orrs	r2, r1
 8002e9c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4ab0      	ldr	r2, [pc, #704]	; (8003164 <UART_SetConfig+0x350>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d131      	bne.n	8002f0c <UART_SetConfig+0xf8>
 8002ea8:	4baf      	ldr	r3, [pc, #700]	; (8003168 <UART_SetConfig+0x354>)
 8002eaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eac:	2203      	movs	r2, #3
 8002eae:	4013      	ands	r3, r2
 8002eb0:	2b03      	cmp	r3, #3
 8002eb2:	d01d      	beq.n	8002ef0 <UART_SetConfig+0xdc>
 8002eb4:	d823      	bhi.n	8002efe <UART_SetConfig+0xea>
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	d00c      	beq.n	8002ed4 <UART_SetConfig+0xc0>
 8002eba:	d820      	bhi.n	8002efe <UART_SetConfig+0xea>
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d002      	beq.n	8002ec6 <UART_SetConfig+0xb2>
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d00e      	beq.n	8002ee2 <UART_SetConfig+0xce>
 8002ec4:	e01b      	b.n	8002efe <UART_SetConfig+0xea>
 8002ec6:	231b      	movs	r3, #27
 8002ec8:	2218      	movs	r2, #24
 8002eca:	189b      	adds	r3, r3, r2
 8002ecc:	19db      	adds	r3, r3, r7
 8002ece:	2201      	movs	r2, #1
 8002ed0:	701a      	strb	r2, [r3, #0]
 8002ed2:	e0b4      	b.n	800303e <UART_SetConfig+0x22a>
 8002ed4:	231b      	movs	r3, #27
 8002ed6:	2218      	movs	r2, #24
 8002ed8:	189b      	adds	r3, r3, r2
 8002eda:	19db      	adds	r3, r3, r7
 8002edc:	2202      	movs	r2, #2
 8002ede:	701a      	strb	r2, [r3, #0]
 8002ee0:	e0ad      	b.n	800303e <UART_SetConfig+0x22a>
 8002ee2:	231b      	movs	r3, #27
 8002ee4:	2218      	movs	r2, #24
 8002ee6:	189b      	adds	r3, r3, r2
 8002ee8:	19db      	adds	r3, r3, r7
 8002eea:	2204      	movs	r2, #4
 8002eec:	701a      	strb	r2, [r3, #0]
 8002eee:	e0a6      	b.n	800303e <UART_SetConfig+0x22a>
 8002ef0:	231b      	movs	r3, #27
 8002ef2:	2218      	movs	r2, #24
 8002ef4:	189b      	adds	r3, r3, r2
 8002ef6:	19db      	adds	r3, r3, r7
 8002ef8:	2208      	movs	r2, #8
 8002efa:	701a      	strb	r2, [r3, #0]
 8002efc:	e09f      	b.n	800303e <UART_SetConfig+0x22a>
 8002efe:	231b      	movs	r3, #27
 8002f00:	2218      	movs	r2, #24
 8002f02:	189b      	adds	r3, r3, r2
 8002f04:	19db      	adds	r3, r3, r7
 8002f06:	2210      	movs	r2, #16
 8002f08:	701a      	strb	r2, [r3, #0]
 8002f0a:	e098      	b.n	800303e <UART_SetConfig+0x22a>
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a96      	ldr	r2, [pc, #600]	; (800316c <UART_SetConfig+0x358>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d131      	bne.n	8002f7a <UART_SetConfig+0x166>
 8002f16:	4b94      	ldr	r3, [pc, #592]	; (8003168 <UART_SetConfig+0x354>)
 8002f18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f1a:	220c      	movs	r2, #12
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	2b0c      	cmp	r3, #12
 8002f20:	d01d      	beq.n	8002f5e <UART_SetConfig+0x14a>
 8002f22:	d823      	bhi.n	8002f6c <UART_SetConfig+0x158>
 8002f24:	2b08      	cmp	r3, #8
 8002f26:	d00c      	beq.n	8002f42 <UART_SetConfig+0x12e>
 8002f28:	d820      	bhi.n	8002f6c <UART_SetConfig+0x158>
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d002      	beq.n	8002f34 <UART_SetConfig+0x120>
 8002f2e:	2b04      	cmp	r3, #4
 8002f30:	d00e      	beq.n	8002f50 <UART_SetConfig+0x13c>
 8002f32:	e01b      	b.n	8002f6c <UART_SetConfig+0x158>
 8002f34:	231b      	movs	r3, #27
 8002f36:	2218      	movs	r2, #24
 8002f38:	189b      	adds	r3, r3, r2
 8002f3a:	19db      	adds	r3, r3, r7
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	701a      	strb	r2, [r3, #0]
 8002f40:	e07d      	b.n	800303e <UART_SetConfig+0x22a>
 8002f42:	231b      	movs	r3, #27
 8002f44:	2218      	movs	r2, #24
 8002f46:	189b      	adds	r3, r3, r2
 8002f48:	19db      	adds	r3, r3, r7
 8002f4a:	2202      	movs	r2, #2
 8002f4c:	701a      	strb	r2, [r3, #0]
 8002f4e:	e076      	b.n	800303e <UART_SetConfig+0x22a>
 8002f50:	231b      	movs	r3, #27
 8002f52:	2218      	movs	r2, #24
 8002f54:	189b      	adds	r3, r3, r2
 8002f56:	19db      	adds	r3, r3, r7
 8002f58:	2204      	movs	r2, #4
 8002f5a:	701a      	strb	r2, [r3, #0]
 8002f5c:	e06f      	b.n	800303e <UART_SetConfig+0x22a>
 8002f5e:	231b      	movs	r3, #27
 8002f60:	2218      	movs	r2, #24
 8002f62:	189b      	adds	r3, r3, r2
 8002f64:	19db      	adds	r3, r3, r7
 8002f66:	2208      	movs	r2, #8
 8002f68:	701a      	strb	r2, [r3, #0]
 8002f6a:	e068      	b.n	800303e <UART_SetConfig+0x22a>
 8002f6c:	231b      	movs	r3, #27
 8002f6e:	2218      	movs	r2, #24
 8002f70:	189b      	adds	r3, r3, r2
 8002f72:	19db      	adds	r3, r3, r7
 8002f74:	2210      	movs	r2, #16
 8002f76:	701a      	strb	r2, [r3, #0]
 8002f78:	e061      	b.n	800303e <UART_SetConfig+0x22a>
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a7c      	ldr	r2, [pc, #496]	; (8003170 <UART_SetConfig+0x35c>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d106      	bne.n	8002f92 <UART_SetConfig+0x17e>
 8002f84:	231b      	movs	r3, #27
 8002f86:	2218      	movs	r2, #24
 8002f88:	189b      	adds	r3, r3, r2
 8002f8a:	19db      	adds	r3, r3, r7
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	701a      	strb	r2, [r3, #0]
 8002f90:	e055      	b.n	800303e <UART_SetConfig+0x22a>
 8002f92:	69fb      	ldr	r3, [r7, #28]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a77      	ldr	r2, [pc, #476]	; (8003174 <UART_SetConfig+0x360>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d106      	bne.n	8002faa <UART_SetConfig+0x196>
 8002f9c:	231b      	movs	r3, #27
 8002f9e:	2218      	movs	r2, #24
 8002fa0:	189b      	adds	r3, r3, r2
 8002fa2:	19db      	adds	r3, r3, r7
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	701a      	strb	r2, [r3, #0]
 8002fa8:	e049      	b.n	800303e <UART_SetConfig+0x22a>
 8002faa:	69fb      	ldr	r3, [r7, #28]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a6b      	ldr	r2, [pc, #428]	; (800315c <UART_SetConfig+0x348>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d13e      	bne.n	8003032 <UART_SetConfig+0x21e>
 8002fb4:	4b6c      	ldr	r3, [pc, #432]	; (8003168 <UART_SetConfig+0x354>)
 8002fb6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002fb8:	23c0      	movs	r3, #192	; 0xc0
 8002fba:	011b      	lsls	r3, r3, #4
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	22c0      	movs	r2, #192	; 0xc0
 8002fc0:	0112      	lsls	r2, r2, #4
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d027      	beq.n	8003016 <UART_SetConfig+0x202>
 8002fc6:	22c0      	movs	r2, #192	; 0xc0
 8002fc8:	0112      	lsls	r2, r2, #4
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d82a      	bhi.n	8003024 <UART_SetConfig+0x210>
 8002fce:	2280      	movs	r2, #128	; 0x80
 8002fd0:	0112      	lsls	r2, r2, #4
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d011      	beq.n	8002ffa <UART_SetConfig+0x1e6>
 8002fd6:	2280      	movs	r2, #128	; 0x80
 8002fd8:	0112      	lsls	r2, r2, #4
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d822      	bhi.n	8003024 <UART_SetConfig+0x210>
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d004      	beq.n	8002fec <UART_SetConfig+0x1d8>
 8002fe2:	2280      	movs	r2, #128	; 0x80
 8002fe4:	00d2      	lsls	r2, r2, #3
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d00e      	beq.n	8003008 <UART_SetConfig+0x1f4>
 8002fea:	e01b      	b.n	8003024 <UART_SetConfig+0x210>
 8002fec:	231b      	movs	r3, #27
 8002fee:	2218      	movs	r2, #24
 8002ff0:	189b      	adds	r3, r3, r2
 8002ff2:	19db      	adds	r3, r3, r7
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	701a      	strb	r2, [r3, #0]
 8002ff8:	e021      	b.n	800303e <UART_SetConfig+0x22a>
 8002ffa:	231b      	movs	r3, #27
 8002ffc:	2218      	movs	r2, #24
 8002ffe:	189b      	adds	r3, r3, r2
 8003000:	19db      	adds	r3, r3, r7
 8003002:	2202      	movs	r2, #2
 8003004:	701a      	strb	r2, [r3, #0]
 8003006:	e01a      	b.n	800303e <UART_SetConfig+0x22a>
 8003008:	231b      	movs	r3, #27
 800300a:	2218      	movs	r2, #24
 800300c:	189b      	adds	r3, r3, r2
 800300e:	19db      	adds	r3, r3, r7
 8003010:	2204      	movs	r2, #4
 8003012:	701a      	strb	r2, [r3, #0]
 8003014:	e013      	b.n	800303e <UART_SetConfig+0x22a>
 8003016:	231b      	movs	r3, #27
 8003018:	2218      	movs	r2, #24
 800301a:	189b      	adds	r3, r3, r2
 800301c:	19db      	adds	r3, r3, r7
 800301e:	2208      	movs	r2, #8
 8003020:	701a      	strb	r2, [r3, #0]
 8003022:	e00c      	b.n	800303e <UART_SetConfig+0x22a>
 8003024:	231b      	movs	r3, #27
 8003026:	2218      	movs	r2, #24
 8003028:	189b      	adds	r3, r3, r2
 800302a:	19db      	adds	r3, r3, r7
 800302c:	2210      	movs	r2, #16
 800302e:	701a      	strb	r2, [r3, #0]
 8003030:	e005      	b.n	800303e <UART_SetConfig+0x22a>
 8003032:	231b      	movs	r3, #27
 8003034:	2218      	movs	r2, #24
 8003036:	189b      	adds	r3, r3, r2
 8003038:	19db      	adds	r3, r3, r7
 800303a:	2210      	movs	r2, #16
 800303c:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a46      	ldr	r2, [pc, #280]	; (800315c <UART_SetConfig+0x348>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d000      	beq.n	800304a <UART_SetConfig+0x236>
 8003048:	e09a      	b.n	8003180 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800304a:	231b      	movs	r3, #27
 800304c:	2218      	movs	r2, #24
 800304e:	189b      	adds	r3, r3, r2
 8003050:	19db      	adds	r3, r3, r7
 8003052:	781b      	ldrb	r3, [r3, #0]
 8003054:	2b08      	cmp	r3, #8
 8003056:	d01d      	beq.n	8003094 <UART_SetConfig+0x280>
 8003058:	dc20      	bgt.n	800309c <UART_SetConfig+0x288>
 800305a:	2b04      	cmp	r3, #4
 800305c:	d015      	beq.n	800308a <UART_SetConfig+0x276>
 800305e:	dc1d      	bgt.n	800309c <UART_SetConfig+0x288>
 8003060:	2b00      	cmp	r3, #0
 8003062:	d002      	beq.n	800306a <UART_SetConfig+0x256>
 8003064:	2b02      	cmp	r3, #2
 8003066:	d005      	beq.n	8003074 <UART_SetConfig+0x260>
 8003068:	e018      	b.n	800309c <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800306a:	f7fe fe2d 	bl	8001cc8 <HAL_RCC_GetPCLK1Freq>
 800306e:	0003      	movs	r3, r0
 8003070:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003072:	e01c      	b.n	80030ae <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003074:	4b3c      	ldr	r3, [pc, #240]	; (8003168 <UART_SetConfig+0x354>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	2210      	movs	r2, #16
 800307a:	4013      	ands	r3, r2
 800307c:	d002      	beq.n	8003084 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800307e:	4b3e      	ldr	r3, [pc, #248]	; (8003178 <UART_SetConfig+0x364>)
 8003080:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003082:	e014      	b.n	80030ae <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8003084:	4b3d      	ldr	r3, [pc, #244]	; (800317c <UART_SetConfig+0x368>)
 8003086:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003088:	e011      	b.n	80030ae <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800308a:	f7fe fd6d 	bl	8001b68 <HAL_RCC_GetSysClockFreq>
 800308e:	0003      	movs	r3, r0
 8003090:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003092:	e00c      	b.n	80030ae <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003094:	2380      	movs	r3, #128	; 0x80
 8003096:	021b      	lsls	r3, r3, #8
 8003098:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800309a:	e008      	b.n	80030ae <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 800309c:	2300      	movs	r3, #0
 800309e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80030a0:	231a      	movs	r3, #26
 80030a2:	2218      	movs	r2, #24
 80030a4:	189b      	adds	r3, r3, r2
 80030a6:	19db      	adds	r3, r3, r7
 80030a8:	2201      	movs	r2, #1
 80030aa:	701a      	strb	r2, [r3, #0]
        break;
 80030ac:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80030ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d100      	bne.n	80030b6 <UART_SetConfig+0x2a2>
 80030b4:	e134      	b.n	8003320 <UART_SetConfig+0x50c>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	685a      	ldr	r2, [r3, #4]
 80030ba:	0013      	movs	r3, r2
 80030bc:	005b      	lsls	r3, r3, #1
 80030be:	189b      	adds	r3, r3, r2
 80030c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d305      	bcc.n	80030d2 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 80030c6:	69fb      	ldr	r3, [r7, #28]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80030cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d906      	bls.n	80030e0 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 80030d2:	231a      	movs	r3, #26
 80030d4:	2218      	movs	r2, #24
 80030d6:	189b      	adds	r3, r3, r2
 80030d8:	19db      	adds	r3, r3, r7
 80030da:	2201      	movs	r2, #1
 80030dc:	701a      	strb	r2, [r3, #0]
 80030de:	e11f      	b.n	8003320 <UART_SetConfig+0x50c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80030e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030e2:	613b      	str	r3, [r7, #16]
 80030e4:	2300      	movs	r3, #0
 80030e6:	617b      	str	r3, [r7, #20]
 80030e8:	6939      	ldr	r1, [r7, #16]
 80030ea:	697a      	ldr	r2, [r7, #20]
 80030ec:	000b      	movs	r3, r1
 80030ee:	0e1b      	lsrs	r3, r3, #24
 80030f0:	0010      	movs	r0, r2
 80030f2:	0205      	lsls	r5, r0, #8
 80030f4:	431d      	orrs	r5, r3
 80030f6:	000b      	movs	r3, r1
 80030f8:	021c      	lsls	r4, r3, #8
 80030fa:	69fb      	ldr	r3, [r7, #28]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	085b      	lsrs	r3, r3, #1
 8003100:	60bb      	str	r3, [r7, #8]
 8003102:	2300      	movs	r3, #0
 8003104:	60fb      	str	r3, [r7, #12]
 8003106:	68b8      	ldr	r0, [r7, #8]
 8003108:	68f9      	ldr	r1, [r7, #12]
 800310a:	1900      	adds	r0, r0, r4
 800310c:	4169      	adcs	r1, r5
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	603b      	str	r3, [r7, #0]
 8003114:	2300      	movs	r3, #0
 8003116:	607b      	str	r3, [r7, #4]
 8003118:	683a      	ldr	r2, [r7, #0]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	f7fd f88a 	bl	8000234 <__aeabi_uldivmod>
 8003120:	0002      	movs	r2, r0
 8003122:	000b      	movs	r3, r1
 8003124:	0013      	movs	r3, r2
 8003126:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003128:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800312a:	23c0      	movs	r3, #192	; 0xc0
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	429a      	cmp	r2, r3
 8003130:	d309      	bcc.n	8003146 <UART_SetConfig+0x332>
 8003132:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003134:	2380      	movs	r3, #128	; 0x80
 8003136:	035b      	lsls	r3, r3, #13
 8003138:	429a      	cmp	r2, r3
 800313a:	d204      	bcs.n	8003146 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 800313c:	69fb      	ldr	r3, [r7, #28]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003142:	60da      	str	r2, [r3, #12]
 8003144:	e0ec      	b.n	8003320 <UART_SetConfig+0x50c>
        }
        else
        {
          ret = HAL_ERROR;
 8003146:	231a      	movs	r3, #26
 8003148:	2218      	movs	r2, #24
 800314a:	189b      	adds	r3, r3, r2
 800314c:	19db      	adds	r3, r3, r7
 800314e:	2201      	movs	r2, #1
 8003150:	701a      	strb	r2, [r3, #0]
 8003152:	e0e5      	b.n	8003320 <UART_SetConfig+0x50c>
 8003154:	efff69f3 	.word	0xefff69f3
 8003158:	ffffcfff 	.word	0xffffcfff
 800315c:	40004800 	.word	0x40004800
 8003160:	fffff4ff 	.word	0xfffff4ff
 8003164:	40013800 	.word	0x40013800
 8003168:	40021000 	.word	0x40021000
 800316c:	40004400 	.word	0x40004400
 8003170:	40004c00 	.word	0x40004c00
 8003174:	40005000 	.word	0x40005000
 8003178:	003d0900 	.word	0x003d0900
 800317c:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003180:	69fb      	ldr	r3, [r7, #28]
 8003182:	69da      	ldr	r2, [r3, #28]
 8003184:	2380      	movs	r3, #128	; 0x80
 8003186:	021b      	lsls	r3, r3, #8
 8003188:	429a      	cmp	r2, r3
 800318a:	d000      	beq.n	800318e <UART_SetConfig+0x37a>
 800318c:	e071      	b.n	8003272 <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 800318e:	231b      	movs	r3, #27
 8003190:	2218      	movs	r2, #24
 8003192:	189b      	adds	r3, r3, r2
 8003194:	19db      	adds	r3, r3, r7
 8003196:	781b      	ldrb	r3, [r3, #0]
 8003198:	2b08      	cmp	r3, #8
 800319a:	d822      	bhi.n	80031e2 <UART_SetConfig+0x3ce>
 800319c:	009a      	lsls	r2, r3, #2
 800319e:	4b68      	ldr	r3, [pc, #416]	; (8003340 <UART_SetConfig+0x52c>)
 80031a0:	18d3      	adds	r3, r2, r3
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031a6:	f7fe fd8f 	bl	8001cc8 <HAL_RCC_GetPCLK1Freq>
 80031aa:	0003      	movs	r3, r0
 80031ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80031ae:	e021      	b.n	80031f4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80031b0:	f7fe fda0 	bl	8001cf4 <HAL_RCC_GetPCLK2Freq>
 80031b4:	0003      	movs	r3, r0
 80031b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80031b8:	e01c      	b.n	80031f4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80031ba:	4b62      	ldr	r3, [pc, #392]	; (8003344 <UART_SetConfig+0x530>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	2210      	movs	r2, #16
 80031c0:	4013      	ands	r3, r2
 80031c2:	d002      	beq.n	80031ca <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80031c4:	4b60      	ldr	r3, [pc, #384]	; (8003348 <UART_SetConfig+0x534>)
 80031c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80031c8:	e014      	b.n	80031f4 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 80031ca:	4b60      	ldr	r3, [pc, #384]	; (800334c <UART_SetConfig+0x538>)
 80031cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80031ce:	e011      	b.n	80031f4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031d0:	f7fe fcca 	bl	8001b68 <HAL_RCC_GetSysClockFreq>
 80031d4:	0003      	movs	r3, r0
 80031d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80031d8:	e00c      	b.n	80031f4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031da:	2380      	movs	r3, #128	; 0x80
 80031dc:	021b      	lsls	r3, r3, #8
 80031de:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80031e0:	e008      	b.n	80031f4 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 80031e2:	2300      	movs	r3, #0
 80031e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80031e6:	231a      	movs	r3, #26
 80031e8:	2218      	movs	r2, #24
 80031ea:	189b      	adds	r3, r3, r2
 80031ec:	19db      	adds	r3, r3, r7
 80031ee:	2201      	movs	r2, #1
 80031f0:	701a      	strb	r2, [r3, #0]
        break;
 80031f2:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80031f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d100      	bne.n	80031fc <UART_SetConfig+0x3e8>
 80031fa:	e091      	b.n	8003320 <UART_SetConfig+0x50c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80031fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031fe:	005a      	lsls	r2, r3, #1
 8003200:	69fb      	ldr	r3, [r7, #28]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	085b      	lsrs	r3, r3, #1
 8003206:	18d2      	adds	r2, r2, r3
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	0019      	movs	r1, r3
 800320e:	0010      	movs	r0, r2
 8003210:	f7fc ff84 	bl	800011c <__udivsi3>
 8003214:	0003      	movs	r3, r0
 8003216:	b29b      	uxth	r3, r3
 8003218:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800321a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800321c:	2b0f      	cmp	r3, #15
 800321e:	d921      	bls.n	8003264 <UART_SetConfig+0x450>
 8003220:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003222:	2380      	movs	r3, #128	; 0x80
 8003224:	025b      	lsls	r3, r3, #9
 8003226:	429a      	cmp	r2, r3
 8003228:	d21c      	bcs.n	8003264 <UART_SetConfig+0x450>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800322a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800322c:	b29a      	uxth	r2, r3
 800322e:	200e      	movs	r0, #14
 8003230:	2418      	movs	r4, #24
 8003232:	1903      	adds	r3, r0, r4
 8003234:	19db      	adds	r3, r3, r7
 8003236:	210f      	movs	r1, #15
 8003238:	438a      	bics	r2, r1
 800323a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800323c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800323e:	085b      	lsrs	r3, r3, #1
 8003240:	b29b      	uxth	r3, r3
 8003242:	2207      	movs	r2, #7
 8003244:	4013      	ands	r3, r2
 8003246:	b299      	uxth	r1, r3
 8003248:	1903      	adds	r3, r0, r4
 800324a:	19db      	adds	r3, r3, r7
 800324c:	1902      	adds	r2, r0, r4
 800324e:	19d2      	adds	r2, r2, r7
 8003250:	8812      	ldrh	r2, [r2, #0]
 8003252:	430a      	orrs	r2, r1
 8003254:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	1902      	adds	r2, r0, r4
 800325c:	19d2      	adds	r2, r2, r7
 800325e:	8812      	ldrh	r2, [r2, #0]
 8003260:	60da      	str	r2, [r3, #12]
 8003262:	e05d      	b.n	8003320 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8003264:	231a      	movs	r3, #26
 8003266:	2218      	movs	r2, #24
 8003268:	189b      	adds	r3, r3, r2
 800326a:	19db      	adds	r3, r3, r7
 800326c:	2201      	movs	r2, #1
 800326e:	701a      	strb	r2, [r3, #0]
 8003270:	e056      	b.n	8003320 <UART_SetConfig+0x50c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003272:	231b      	movs	r3, #27
 8003274:	2218      	movs	r2, #24
 8003276:	189b      	adds	r3, r3, r2
 8003278:	19db      	adds	r3, r3, r7
 800327a:	781b      	ldrb	r3, [r3, #0]
 800327c:	2b08      	cmp	r3, #8
 800327e:	d822      	bhi.n	80032c6 <UART_SetConfig+0x4b2>
 8003280:	009a      	lsls	r2, r3, #2
 8003282:	4b33      	ldr	r3, [pc, #204]	; (8003350 <UART_SetConfig+0x53c>)
 8003284:	18d3      	adds	r3, r2, r3
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800328a:	f7fe fd1d 	bl	8001cc8 <HAL_RCC_GetPCLK1Freq>
 800328e:	0003      	movs	r3, r0
 8003290:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003292:	e021      	b.n	80032d8 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003294:	f7fe fd2e 	bl	8001cf4 <HAL_RCC_GetPCLK2Freq>
 8003298:	0003      	movs	r3, r0
 800329a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800329c:	e01c      	b.n	80032d8 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800329e:	4b29      	ldr	r3, [pc, #164]	; (8003344 <UART_SetConfig+0x530>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	2210      	movs	r2, #16
 80032a4:	4013      	ands	r3, r2
 80032a6:	d002      	beq.n	80032ae <UART_SetConfig+0x49a>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80032a8:	4b27      	ldr	r3, [pc, #156]	; (8003348 <UART_SetConfig+0x534>)
 80032aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80032ac:	e014      	b.n	80032d8 <UART_SetConfig+0x4c4>
          pclk = (uint32_t) HSI_VALUE;
 80032ae:	4b27      	ldr	r3, [pc, #156]	; (800334c <UART_SetConfig+0x538>)
 80032b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80032b2:	e011      	b.n	80032d8 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032b4:	f7fe fc58 	bl	8001b68 <HAL_RCC_GetSysClockFreq>
 80032b8:	0003      	movs	r3, r0
 80032ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80032bc:	e00c      	b.n	80032d8 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032be:	2380      	movs	r3, #128	; 0x80
 80032c0:	021b      	lsls	r3, r3, #8
 80032c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80032c4:	e008      	b.n	80032d8 <UART_SetConfig+0x4c4>
      default:
        pclk = 0U;
 80032c6:	2300      	movs	r3, #0
 80032c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80032ca:	231a      	movs	r3, #26
 80032cc:	2218      	movs	r2, #24
 80032ce:	189b      	adds	r3, r3, r2
 80032d0:	19db      	adds	r3, r3, r7
 80032d2:	2201      	movs	r2, #1
 80032d4:	701a      	strb	r2, [r3, #0]
        break;
 80032d6:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80032d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d020      	beq.n	8003320 <UART_SetConfig+0x50c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	085a      	lsrs	r2, r3, #1
 80032e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032e6:	18d2      	adds	r2, r2, r3
 80032e8:	69fb      	ldr	r3, [r7, #28]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	0019      	movs	r1, r3
 80032ee:	0010      	movs	r0, r2
 80032f0:	f7fc ff14 	bl	800011c <__udivsi3>
 80032f4:	0003      	movs	r3, r0
 80032f6:	b29b      	uxth	r3, r3
 80032f8:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032fc:	2b0f      	cmp	r3, #15
 80032fe:	d909      	bls.n	8003314 <UART_SetConfig+0x500>
 8003300:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003302:	2380      	movs	r3, #128	; 0x80
 8003304:	025b      	lsls	r3, r3, #9
 8003306:	429a      	cmp	r2, r3
 8003308:	d204      	bcs.n	8003314 <UART_SetConfig+0x500>
      {
        huart->Instance->BRR = usartdiv;
 800330a:	69fb      	ldr	r3, [r7, #28]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003310:	60da      	str	r2, [r3, #12]
 8003312:	e005      	b.n	8003320 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8003314:	231a      	movs	r3, #26
 8003316:	2218      	movs	r2, #24
 8003318:	189b      	adds	r3, r3, r2
 800331a:	19db      	adds	r3, r3, r7
 800331c:	2201      	movs	r2, #1
 800331e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	2200      	movs	r2, #0
 8003324:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003326:	69fb      	ldr	r3, [r7, #28]
 8003328:	2200      	movs	r2, #0
 800332a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800332c:	231a      	movs	r3, #26
 800332e:	2218      	movs	r2, #24
 8003330:	189b      	adds	r3, r3, r2
 8003332:	19db      	adds	r3, r3, r7
 8003334:	781b      	ldrb	r3, [r3, #0]
}
 8003336:	0018      	movs	r0, r3
 8003338:	46bd      	mov	sp, r7
 800333a:	b00e      	add	sp, #56	; 0x38
 800333c:	bdb0      	pop	{r4, r5, r7, pc}
 800333e:	46c0      	nop			; (mov r8, r8)
 8003340:	08004078 	.word	0x08004078
 8003344:	40021000 	.word	0x40021000
 8003348:	003d0900 	.word	0x003d0900
 800334c:	00f42400 	.word	0x00f42400
 8003350:	0800409c 	.word	0x0800409c

08003354 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b082      	sub	sp, #8
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003360:	2201      	movs	r2, #1
 8003362:	4013      	ands	r3, r2
 8003364:	d00b      	beq.n	800337e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	4a4a      	ldr	r2, [pc, #296]	; (8003498 <UART_AdvFeatureConfig+0x144>)
 800336e:	4013      	ands	r3, r2
 8003370:	0019      	movs	r1, r3
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	430a      	orrs	r2, r1
 800337c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003382:	2202      	movs	r2, #2
 8003384:	4013      	ands	r3, r2
 8003386:	d00b      	beq.n	80033a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	4a43      	ldr	r2, [pc, #268]	; (800349c <UART_AdvFeatureConfig+0x148>)
 8003390:	4013      	ands	r3, r2
 8003392:	0019      	movs	r1, r3
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	430a      	orrs	r2, r1
 800339e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a4:	2204      	movs	r2, #4
 80033a6:	4013      	ands	r3, r2
 80033a8:	d00b      	beq.n	80033c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	4a3b      	ldr	r2, [pc, #236]	; (80034a0 <UART_AdvFeatureConfig+0x14c>)
 80033b2:	4013      	ands	r3, r2
 80033b4:	0019      	movs	r1, r3
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	430a      	orrs	r2, r1
 80033c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c6:	2208      	movs	r2, #8
 80033c8:	4013      	ands	r3, r2
 80033ca:	d00b      	beq.n	80033e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	4a34      	ldr	r2, [pc, #208]	; (80034a4 <UART_AdvFeatureConfig+0x150>)
 80033d4:	4013      	ands	r3, r2
 80033d6:	0019      	movs	r1, r3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	430a      	orrs	r2, r1
 80033e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e8:	2210      	movs	r2, #16
 80033ea:	4013      	ands	r3, r2
 80033ec:	d00b      	beq.n	8003406 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	4a2c      	ldr	r2, [pc, #176]	; (80034a8 <UART_AdvFeatureConfig+0x154>)
 80033f6:	4013      	ands	r3, r2
 80033f8:	0019      	movs	r1, r3
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	430a      	orrs	r2, r1
 8003404:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340a:	2220      	movs	r2, #32
 800340c:	4013      	ands	r3, r2
 800340e:	d00b      	beq.n	8003428 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	4a25      	ldr	r2, [pc, #148]	; (80034ac <UART_AdvFeatureConfig+0x158>)
 8003418:	4013      	ands	r3, r2
 800341a:	0019      	movs	r1, r3
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	430a      	orrs	r2, r1
 8003426:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342c:	2240      	movs	r2, #64	; 0x40
 800342e:	4013      	ands	r3, r2
 8003430:	d01d      	beq.n	800346e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	4a1d      	ldr	r2, [pc, #116]	; (80034b0 <UART_AdvFeatureConfig+0x15c>)
 800343a:	4013      	ands	r3, r2
 800343c:	0019      	movs	r1, r3
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	430a      	orrs	r2, r1
 8003448:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800344e:	2380      	movs	r3, #128	; 0x80
 8003450:	035b      	lsls	r3, r3, #13
 8003452:	429a      	cmp	r2, r3
 8003454:	d10b      	bne.n	800346e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	4a15      	ldr	r2, [pc, #84]	; (80034b4 <UART_AdvFeatureConfig+0x160>)
 800345e:	4013      	ands	r3, r2
 8003460:	0019      	movs	r1, r3
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	430a      	orrs	r2, r1
 800346c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003472:	2280      	movs	r2, #128	; 0x80
 8003474:	4013      	ands	r3, r2
 8003476:	d00b      	beq.n	8003490 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	4a0e      	ldr	r2, [pc, #56]	; (80034b8 <UART_AdvFeatureConfig+0x164>)
 8003480:	4013      	ands	r3, r2
 8003482:	0019      	movs	r1, r3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	430a      	orrs	r2, r1
 800348e:	605a      	str	r2, [r3, #4]
  }
}
 8003490:	46c0      	nop			; (mov r8, r8)
 8003492:	46bd      	mov	sp, r7
 8003494:	b002      	add	sp, #8
 8003496:	bd80      	pop	{r7, pc}
 8003498:	fffdffff 	.word	0xfffdffff
 800349c:	fffeffff 	.word	0xfffeffff
 80034a0:	fffbffff 	.word	0xfffbffff
 80034a4:	ffff7fff 	.word	0xffff7fff
 80034a8:	ffffefff 	.word	0xffffefff
 80034ac:	ffffdfff 	.word	0xffffdfff
 80034b0:	ffefffff 	.word	0xffefffff
 80034b4:	ff9fffff 	.word	0xff9fffff
 80034b8:	fff7ffff 	.word	0xfff7ffff

080034bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b086      	sub	sp, #24
 80034c0:	af02      	add	r7, sp, #8
 80034c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2280      	movs	r2, #128	; 0x80
 80034c8:	2100      	movs	r1, #0
 80034ca:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80034cc:	f7fd fb98 	bl	8000c00 <HAL_GetTick>
 80034d0:	0003      	movs	r3, r0
 80034d2:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	2208      	movs	r2, #8
 80034dc:	4013      	ands	r3, r2
 80034de:	2b08      	cmp	r3, #8
 80034e0:	d10c      	bne.n	80034fc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2280      	movs	r2, #128	; 0x80
 80034e6:	0391      	lsls	r1, r2, #14
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	4a17      	ldr	r2, [pc, #92]	; (8003548 <UART_CheckIdleState+0x8c>)
 80034ec:	9200      	str	r2, [sp, #0]
 80034ee:	2200      	movs	r2, #0
 80034f0:	f000 f82c 	bl	800354c <UART_WaitOnFlagUntilTimeout>
 80034f4:	1e03      	subs	r3, r0, #0
 80034f6:	d001      	beq.n	80034fc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034f8:	2303      	movs	r3, #3
 80034fa:	e021      	b.n	8003540 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	2204      	movs	r2, #4
 8003504:	4013      	ands	r3, r2
 8003506:	2b04      	cmp	r3, #4
 8003508:	d10c      	bne.n	8003524 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2280      	movs	r2, #128	; 0x80
 800350e:	03d1      	lsls	r1, r2, #15
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	4a0d      	ldr	r2, [pc, #52]	; (8003548 <UART_CheckIdleState+0x8c>)
 8003514:	9200      	str	r2, [sp, #0]
 8003516:	2200      	movs	r2, #0
 8003518:	f000 f818 	bl	800354c <UART_WaitOnFlagUntilTimeout>
 800351c:	1e03      	subs	r3, r0, #0
 800351e:	d001      	beq.n	8003524 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003520:	2303      	movs	r3, #3
 8003522:	e00d      	b.n	8003540 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2220      	movs	r2, #32
 8003528:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2220      	movs	r2, #32
 800352e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2200      	movs	r2, #0
 8003534:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2274      	movs	r2, #116	; 0x74
 800353a:	2100      	movs	r1, #0
 800353c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800353e:	2300      	movs	r3, #0
}
 8003540:	0018      	movs	r0, r3
 8003542:	46bd      	mov	sp, r7
 8003544:	b004      	add	sp, #16
 8003546:	bd80      	pop	{r7, pc}
 8003548:	01ffffff 	.word	0x01ffffff

0800354c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b094      	sub	sp, #80	; 0x50
 8003550:	af00      	add	r7, sp, #0
 8003552:	60f8      	str	r0, [r7, #12]
 8003554:	60b9      	str	r1, [r7, #8]
 8003556:	603b      	str	r3, [r7, #0]
 8003558:	1dfb      	adds	r3, r7, #7
 800355a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800355c:	e0a3      	b.n	80036a6 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800355e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003560:	3301      	adds	r3, #1
 8003562:	d100      	bne.n	8003566 <UART_WaitOnFlagUntilTimeout+0x1a>
 8003564:	e09f      	b.n	80036a6 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003566:	f7fd fb4b 	bl	8000c00 <HAL_GetTick>
 800356a:	0002      	movs	r2, r0
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	1ad3      	subs	r3, r2, r3
 8003570:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003572:	429a      	cmp	r2, r3
 8003574:	d302      	bcc.n	800357c <UART_WaitOnFlagUntilTimeout+0x30>
 8003576:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003578:	2b00      	cmp	r3, #0
 800357a:	d13d      	bne.n	80035f8 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800357c:	f3ef 8310 	mrs	r3, PRIMASK
 8003580:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003582:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003584:	647b      	str	r3, [r7, #68]	; 0x44
 8003586:	2301      	movs	r3, #1
 8003588:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800358a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800358c:	f383 8810 	msr	PRIMASK, r3
}
 8003590:	46c0      	nop			; (mov r8, r8)
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	494c      	ldr	r1, [pc, #304]	; (80036d0 <UART_WaitOnFlagUntilTimeout+0x184>)
 800359e:	400a      	ands	r2, r1
 80035a0:	601a      	str	r2, [r3, #0]
 80035a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035a4:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035a8:	f383 8810 	msr	PRIMASK, r3
}
 80035ac:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035ae:	f3ef 8310 	mrs	r3, PRIMASK
 80035b2:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80035b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035b6:	643b      	str	r3, [r7, #64]	; 0x40
 80035b8:	2301      	movs	r3, #1
 80035ba:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035be:	f383 8810 	msr	PRIMASK, r3
}
 80035c2:	46c0      	nop			; (mov r8, r8)
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	689a      	ldr	r2, [r3, #8]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	2101      	movs	r1, #1
 80035d0:	438a      	bics	r2, r1
 80035d2:	609a      	str	r2, [r3, #8]
 80035d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035da:	f383 8810 	msr	PRIMASK, r3
}
 80035de:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2220      	movs	r2, #32
 80035e4:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2220      	movs	r2, #32
 80035ea:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2274      	movs	r2, #116	; 0x74
 80035f0:	2100      	movs	r1, #0
 80035f2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80035f4:	2303      	movs	r3, #3
 80035f6:	e067      	b.n	80036c8 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	2204      	movs	r2, #4
 8003600:	4013      	ands	r3, r2
 8003602:	d050      	beq.n	80036a6 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	69da      	ldr	r2, [r3, #28]
 800360a:	2380      	movs	r3, #128	; 0x80
 800360c:	011b      	lsls	r3, r3, #4
 800360e:	401a      	ands	r2, r3
 8003610:	2380      	movs	r3, #128	; 0x80
 8003612:	011b      	lsls	r3, r3, #4
 8003614:	429a      	cmp	r2, r3
 8003616:	d146      	bne.n	80036a6 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	2280      	movs	r2, #128	; 0x80
 800361e:	0112      	lsls	r2, r2, #4
 8003620:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003622:	f3ef 8310 	mrs	r3, PRIMASK
 8003626:	613b      	str	r3, [r7, #16]
  return(result);
 8003628:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800362a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800362c:	2301      	movs	r3, #1
 800362e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	f383 8810 	msr	PRIMASK, r3
}
 8003636:	46c0      	nop			; (mov r8, r8)
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4923      	ldr	r1, [pc, #140]	; (80036d0 <UART_WaitOnFlagUntilTimeout+0x184>)
 8003644:	400a      	ands	r2, r1
 8003646:	601a      	str	r2, [r3, #0]
 8003648:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800364a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800364c:	69bb      	ldr	r3, [r7, #24]
 800364e:	f383 8810 	msr	PRIMASK, r3
}
 8003652:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003654:	f3ef 8310 	mrs	r3, PRIMASK
 8003658:	61fb      	str	r3, [r7, #28]
  return(result);
 800365a:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800365c:	64bb      	str	r3, [r7, #72]	; 0x48
 800365e:	2301      	movs	r3, #1
 8003660:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003662:	6a3b      	ldr	r3, [r7, #32]
 8003664:	f383 8810 	msr	PRIMASK, r3
}
 8003668:	46c0      	nop			; (mov r8, r8)
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	689a      	ldr	r2, [r3, #8]
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	2101      	movs	r1, #1
 8003676:	438a      	bics	r2, r1
 8003678:	609a      	str	r2, [r3, #8]
 800367a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800367c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800367e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003680:	f383 8810 	msr	PRIMASK, r3
}
 8003684:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2220      	movs	r2, #32
 800368a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2220      	movs	r2, #32
 8003690:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2280      	movs	r2, #128	; 0x80
 8003696:	2120      	movs	r1, #32
 8003698:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2274      	movs	r2, #116	; 0x74
 800369e:	2100      	movs	r1, #0
 80036a0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80036a2:	2303      	movs	r3, #3
 80036a4:	e010      	b.n	80036c8 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	69db      	ldr	r3, [r3, #28]
 80036ac:	68ba      	ldr	r2, [r7, #8]
 80036ae:	4013      	ands	r3, r2
 80036b0:	68ba      	ldr	r2, [r7, #8]
 80036b2:	1ad3      	subs	r3, r2, r3
 80036b4:	425a      	negs	r2, r3
 80036b6:	4153      	adcs	r3, r2
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	001a      	movs	r2, r3
 80036bc:	1dfb      	adds	r3, r7, #7
 80036be:	781b      	ldrb	r3, [r3, #0]
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d100      	bne.n	80036c6 <UART_WaitOnFlagUntilTimeout+0x17a>
 80036c4:	e74b      	b.n	800355e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80036c6:	2300      	movs	r3, #0
}
 80036c8:	0018      	movs	r0, r3
 80036ca:	46bd      	mov	sp, r7
 80036cc:	b014      	add	sp, #80	; 0x50
 80036ce:	bd80      	pop	{r7, pc}
 80036d0:	fffffe5f 	.word	0xfffffe5f

080036d4 <__errno>:
 80036d4:	4b01      	ldr	r3, [pc, #4]	; (80036dc <__errno+0x8>)
 80036d6:	6818      	ldr	r0, [r3, #0]
 80036d8:	4770      	bx	lr
 80036da:	46c0      	nop			; (mov r8, r8)
 80036dc:	2000000c 	.word	0x2000000c

080036e0 <__libc_init_array>:
 80036e0:	b570      	push	{r4, r5, r6, lr}
 80036e2:	2600      	movs	r6, #0
 80036e4:	4d0c      	ldr	r5, [pc, #48]	; (8003718 <__libc_init_array+0x38>)
 80036e6:	4c0d      	ldr	r4, [pc, #52]	; (800371c <__libc_init_array+0x3c>)
 80036e8:	1b64      	subs	r4, r4, r5
 80036ea:	10a4      	asrs	r4, r4, #2
 80036ec:	42a6      	cmp	r6, r4
 80036ee:	d109      	bne.n	8003704 <__libc_init_array+0x24>
 80036f0:	2600      	movs	r6, #0
 80036f2:	f000 fc8b 	bl	800400c <_init>
 80036f6:	4d0a      	ldr	r5, [pc, #40]	; (8003720 <__libc_init_array+0x40>)
 80036f8:	4c0a      	ldr	r4, [pc, #40]	; (8003724 <__libc_init_array+0x44>)
 80036fa:	1b64      	subs	r4, r4, r5
 80036fc:	10a4      	asrs	r4, r4, #2
 80036fe:	42a6      	cmp	r6, r4
 8003700:	d105      	bne.n	800370e <__libc_init_array+0x2e>
 8003702:	bd70      	pop	{r4, r5, r6, pc}
 8003704:	00b3      	lsls	r3, r6, #2
 8003706:	58eb      	ldr	r3, [r5, r3]
 8003708:	4798      	blx	r3
 800370a:	3601      	adds	r6, #1
 800370c:	e7ee      	b.n	80036ec <__libc_init_array+0xc>
 800370e:	00b3      	lsls	r3, r6, #2
 8003710:	58eb      	ldr	r3, [r5, r3]
 8003712:	4798      	blx	r3
 8003714:	3601      	adds	r6, #1
 8003716:	e7f2      	b.n	80036fe <__libc_init_array+0x1e>
 8003718:	080040fc 	.word	0x080040fc
 800371c:	080040fc 	.word	0x080040fc
 8003720:	080040fc 	.word	0x080040fc
 8003724:	08004100 	.word	0x08004100

08003728 <memset>:
 8003728:	0003      	movs	r3, r0
 800372a:	1882      	adds	r2, r0, r2
 800372c:	4293      	cmp	r3, r2
 800372e:	d100      	bne.n	8003732 <memset+0xa>
 8003730:	4770      	bx	lr
 8003732:	7019      	strb	r1, [r3, #0]
 8003734:	3301      	adds	r3, #1
 8003736:	e7f9      	b.n	800372c <memset+0x4>

08003738 <siprintf>:
 8003738:	b40e      	push	{r1, r2, r3}
 800373a:	b500      	push	{lr}
 800373c:	490b      	ldr	r1, [pc, #44]	; (800376c <siprintf+0x34>)
 800373e:	b09c      	sub	sp, #112	; 0x70
 8003740:	ab1d      	add	r3, sp, #116	; 0x74
 8003742:	9002      	str	r0, [sp, #8]
 8003744:	9006      	str	r0, [sp, #24]
 8003746:	9107      	str	r1, [sp, #28]
 8003748:	9104      	str	r1, [sp, #16]
 800374a:	4809      	ldr	r0, [pc, #36]	; (8003770 <siprintf+0x38>)
 800374c:	4909      	ldr	r1, [pc, #36]	; (8003774 <siprintf+0x3c>)
 800374e:	cb04      	ldmia	r3!, {r2}
 8003750:	9105      	str	r1, [sp, #20]
 8003752:	6800      	ldr	r0, [r0, #0]
 8003754:	a902      	add	r1, sp, #8
 8003756:	9301      	str	r3, [sp, #4]
 8003758:	f000 f870 	bl	800383c <_svfiprintf_r>
 800375c:	2300      	movs	r3, #0
 800375e:	9a02      	ldr	r2, [sp, #8]
 8003760:	7013      	strb	r3, [r2, #0]
 8003762:	b01c      	add	sp, #112	; 0x70
 8003764:	bc08      	pop	{r3}
 8003766:	b003      	add	sp, #12
 8003768:	4718      	bx	r3
 800376a:	46c0      	nop			; (mov r8, r8)
 800376c:	7fffffff 	.word	0x7fffffff
 8003770:	2000000c 	.word	0x2000000c
 8003774:	ffff0208 	.word	0xffff0208

08003778 <__ssputs_r>:
 8003778:	b5f0      	push	{r4, r5, r6, r7, lr}
 800377a:	688e      	ldr	r6, [r1, #8]
 800377c:	b085      	sub	sp, #20
 800377e:	0007      	movs	r7, r0
 8003780:	000c      	movs	r4, r1
 8003782:	9203      	str	r2, [sp, #12]
 8003784:	9301      	str	r3, [sp, #4]
 8003786:	429e      	cmp	r6, r3
 8003788:	d83c      	bhi.n	8003804 <__ssputs_r+0x8c>
 800378a:	2390      	movs	r3, #144	; 0x90
 800378c:	898a      	ldrh	r2, [r1, #12]
 800378e:	00db      	lsls	r3, r3, #3
 8003790:	421a      	tst	r2, r3
 8003792:	d034      	beq.n	80037fe <__ssputs_r+0x86>
 8003794:	6909      	ldr	r1, [r1, #16]
 8003796:	6823      	ldr	r3, [r4, #0]
 8003798:	6960      	ldr	r0, [r4, #20]
 800379a:	1a5b      	subs	r3, r3, r1
 800379c:	9302      	str	r3, [sp, #8]
 800379e:	2303      	movs	r3, #3
 80037a0:	4343      	muls	r3, r0
 80037a2:	0fdd      	lsrs	r5, r3, #31
 80037a4:	18ed      	adds	r5, r5, r3
 80037a6:	9b01      	ldr	r3, [sp, #4]
 80037a8:	9802      	ldr	r0, [sp, #8]
 80037aa:	3301      	adds	r3, #1
 80037ac:	181b      	adds	r3, r3, r0
 80037ae:	106d      	asrs	r5, r5, #1
 80037b0:	42ab      	cmp	r3, r5
 80037b2:	d900      	bls.n	80037b6 <__ssputs_r+0x3e>
 80037b4:	001d      	movs	r5, r3
 80037b6:	0553      	lsls	r3, r2, #21
 80037b8:	d532      	bpl.n	8003820 <__ssputs_r+0xa8>
 80037ba:	0029      	movs	r1, r5
 80037bc:	0038      	movs	r0, r7
 80037be:	f000 fb53 	bl	8003e68 <_malloc_r>
 80037c2:	1e06      	subs	r6, r0, #0
 80037c4:	d109      	bne.n	80037da <__ssputs_r+0x62>
 80037c6:	230c      	movs	r3, #12
 80037c8:	603b      	str	r3, [r7, #0]
 80037ca:	2340      	movs	r3, #64	; 0x40
 80037cc:	2001      	movs	r0, #1
 80037ce:	89a2      	ldrh	r2, [r4, #12]
 80037d0:	4240      	negs	r0, r0
 80037d2:	4313      	orrs	r3, r2
 80037d4:	81a3      	strh	r3, [r4, #12]
 80037d6:	b005      	add	sp, #20
 80037d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80037da:	9a02      	ldr	r2, [sp, #8]
 80037dc:	6921      	ldr	r1, [r4, #16]
 80037de:	f000 faba 	bl	8003d56 <memcpy>
 80037e2:	89a3      	ldrh	r3, [r4, #12]
 80037e4:	4a14      	ldr	r2, [pc, #80]	; (8003838 <__ssputs_r+0xc0>)
 80037e6:	401a      	ands	r2, r3
 80037e8:	2380      	movs	r3, #128	; 0x80
 80037ea:	4313      	orrs	r3, r2
 80037ec:	81a3      	strh	r3, [r4, #12]
 80037ee:	9b02      	ldr	r3, [sp, #8]
 80037f0:	6126      	str	r6, [r4, #16]
 80037f2:	18f6      	adds	r6, r6, r3
 80037f4:	6026      	str	r6, [r4, #0]
 80037f6:	6165      	str	r5, [r4, #20]
 80037f8:	9e01      	ldr	r6, [sp, #4]
 80037fa:	1aed      	subs	r5, r5, r3
 80037fc:	60a5      	str	r5, [r4, #8]
 80037fe:	9b01      	ldr	r3, [sp, #4]
 8003800:	429e      	cmp	r6, r3
 8003802:	d900      	bls.n	8003806 <__ssputs_r+0x8e>
 8003804:	9e01      	ldr	r6, [sp, #4]
 8003806:	0032      	movs	r2, r6
 8003808:	9903      	ldr	r1, [sp, #12]
 800380a:	6820      	ldr	r0, [r4, #0]
 800380c:	f000 faac 	bl	8003d68 <memmove>
 8003810:	68a3      	ldr	r3, [r4, #8]
 8003812:	2000      	movs	r0, #0
 8003814:	1b9b      	subs	r3, r3, r6
 8003816:	60a3      	str	r3, [r4, #8]
 8003818:	6823      	ldr	r3, [r4, #0]
 800381a:	199e      	adds	r6, r3, r6
 800381c:	6026      	str	r6, [r4, #0]
 800381e:	e7da      	b.n	80037d6 <__ssputs_r+0x5e>
 8003820:	002a      	movs	r2, r5
 8003822:	0038      	movs	r0, r7
 8003824:	f000 fb96 	bl	8003f54 <_realloc_r>
 8003828:	1e06      	subs	r6, r0, #0
 800382a:	d1e0      	bne.n	80037ee <__ssputs_r+0x76>
 800382c:	0038      	movs	r0, r7
 800382e:	6921      	ldr	r1, [r4, #16]
 8003830:	f000 faae 	bl	8003d90 <_free_r>
 8003834:	e7c7      	b.n	80037c6 <__ssputs_r+0x4e>
 8003836:	46c0      	nop			; (mov r8, r8)
 8003838:	fffffb7f 	.word	0xfffffb7f

0800383c <_svfiprintf_r>:
 800383c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800383e:	b0a1      	sub	sp, #132	; 0x84
 8003840:	9003      	str	r0, [sp, #12]
 8003842:	001d      	movs	r5, r3
 8003844:	898b      	ldrh	r3, [r1, #12]
 8003846:	000f      	movs	r7, r1
 8003848:	0016      	movs	r6, r2
 800384a:	061b      	lsls	r3, r3, #24
 800384c:	d511      	bpl.n	8003872 <_svfiprintf_r+0x36>
 800384e:	690b      	ldr	r3, [r1, #16]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d10e      	bne.n	8003872 <_svfiprintf_r+0x36>
 8003854:	2140      	movs	r1, #64	; 0x40
 8003856:	f000 fb07 	bl	8003e68 <_malloc_r>
 800385a:	6038      	str	r0, [r7, #0]
 800385c:	6138      	str	r0, [r7, #16]
 800385e:	2800      	cmp	r0, #0
 8003860:	d105      	bne.n	800386e <_svfiprintf_r+0x32>
 8003862:	230c      	movs	r3, #12
 8003864:	9a03      	ldr	r2, [sp, #12]
 8003866:	3801      	subs	r0, #1
 8003868:	6013      	str	r3, [r2, #0]
 800386a:	b021      	add	sp, #132	; 0x84
 800386c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800386e:	2340      	movs	r3, #64	; 0x40
 8003870:	617b      	str	r3, [r7, #20]
 8003872:	2300      	movs	r3, #0
 8003874:	ac08      	add	r4, sp, #32
 8003876:	6163      	str	r3, [r4, #20]
 8003878:	3320      	adds	r3, #32
 800387a:	7663      	strb	r3, [r4, #25]
 800387c:	3310      	adds	r3, #16
 800387e:	76a3      	strb	r3, [r4, #26]
 8003880:	9507      	str	r5, [sp, #28]
 8003882:	0035      	movs	r5, r6
 8003884:	782b      	ldrb	r3, [r5, #0]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d001      	beq.n	800388e <_svfiprintf_r+0x52>
 800388a:	2b25      	cmp	r3, #37	; 0x25
 800388c:	d147      	bne.n	800391e <_svfiprintf_r+0xe2>
 800388e:	1bab      	subs	r3, r5, r6
 8003890:	9305      	str	r3, [sp, #20]
 8003892:	42b5      	cmp	r5, r6
 8003894:	d00c      	beq.n	80038b0 <_svfiprintf_r+0x74>
 8003896:	0032      	movs	r2, r6
 8003898:	0039      	movs	r1, r7
 800389a:	9803      	ldr	r0, [sp, #12]
 800389c:	f7ff ff6c 	bl	8003778 <__ssputs_r>
 80038a0:	1c43      	adds	r3, r0, #1
 80038a2:	d100      	bne.n	80038a6 <_svfiprintf_r+0x6a>
 80038a4:	e0ae      	b.n	8003a04 <_svfiprintf_r+0x1c8>
 80038a6:	6962      	ldr	r2, [r4, #20]
 80038a8:	9b05      	ldr	r3, [sp, #20]
 80038aa:	4694      	mov	ip, r2
 80038ac:	4463      	add	r3, ip
 80038ae:	6163      	str	r3, [r4, #20]
 80038b0:	782b      	ldrb	r3, [r5, #0]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d100      	bne.n	80038b8 <_svfiprintf_r+0x7c>
 80038b6:	e0a5      	b.n	8003a04 <_svfiprintf_r+0x1c8>
 80038b8:	2201      	movs	r2, #1
 80038ba:	2300      	movs	r3, #0
 80038bc:	4252      	negs	r2, r2
 80038be:	6062      	str	r2, [r4, #4]
 80038c0:	a904      	add	r1, sp, #16
 80038c2:	3254      	adds	r2, #84	; 0x54
 80038c4:	1852      	adds	r2, r2, r1
 80038c6:	1c6e      	adds	r6, r5, #1
 80038c8:	6023      	str	r3, [r4, #0]
 80038ca:	60e3      	str	r3, [r4, #12]
 80038cc:	60a3      	str	r3, [r4, #8]
 80038ce:	7013      	strb	r3, [r2, #0]
 80038d0:	65a3      	str	r3, [r4, #88]	; 0x58
 80038d2:	2205      	movs	r2, #5
 80038d4:	7831      	ldrb	r1, [r6, #0]
 80038d6:	4854      	ldr	r0, [pc, #336]	; (8003a28 <_svfiprintf_r+0x1ec>)
 80038d8:	f000 fa32 	bl	8003d40 <memchr>
 80038dc:	1c75      	adds	r5, r6, #1
 80038de:	2800      	cmp	r0, #0
 80038e0:	d11f      	bne.n	8003922 <_svfiprintf_r+0xe6>
 80038e2:	6822      	ldr	r2, [r4, #0]
 80038e4:	06d3      	lsls	r3, r2, #27
 80038e6:	d504      	bpl.n	80038f2 <_svfiprintf_r+0xb6>
 80038e8:	2353      	movs	r3, #83	; 0x53
 80038ea:	a904      	add	r1, sp, #16
 80038ec:	185b      	adds	r3, r3, r1
 80038ee:	2120      	movs	r1, #32
 80038f0:	7019      	strb	r1, [r3, #0]
 80038f2:	0713      	lsls	r3, r2, #28
 80038f4:	d504      	bpl.n	8003900 <_svfiprintf_r+0xc4>
 80038f6:	2353      	movs	r3, #83	; 0x53
 80038f8:	a904      	add	r1, sp, #16
 80038fa:	185b      	adds	r3, r3, r1
 80038fc:	212b      	movs	r1, #43	; 0x2b
 80038fe:	7019      	strb	r1, [r3, #0]
 8003900:	7833      	ldrb	r3, [r6, #0]
 8003902:	2b2a      	cmp	r3, #42	; 0x2a
 8003904:	d016      	beq.n	8003934 <_svfiprintf_r+0xf8>
 8003906:	0035      	movs	r5, r6
 8003908:	2100      	movs	r1, #0
 800390a:	200a      	movs	r0, #10
 800390c:	68e3      	ldr	r3, [r4, #12]
 800390e:	782a      	ldrb	r2, [r5, #0]
 8003910:	1c6e      	adds	r6, r5, #1
 8003912:	3a30      	subs	r2, #48	; 0x30
 8003914:	2a09      	cmp	r2, #9
 8003916:	d94e      	bls.n	80039b6 <_svfiprintf_r+0x17a>
 8003918:	2900      	cmp	r1, #0
 800391a:	d111      	bne.n	8003940 <_svfiprintf_r+0x104>
 800391c:	e017      	b.n	800394e <_svfiprintf_r+0x112>
 800391e:	3501      	adds	r5, #1
 8003920:	e7b0      	b.n	8003884 <_svfiprintf_r+0x48>
 8003922:	4b41      	ldr	r3, [pc, #260]	; (8003a28 <_svfiprintf_r+0x1ec>)
 8003924:	6822      	ldr	r2, [r4, #0]
 8003926:	1ac0      	subs	r0, r0, r3
 8003928:	2301      	movs	r3, #1
 800392a:	4083      	lsls	r3, r0
 800392c:	4313      	orrs	r3, r2
 800392e:	002e      	movs	r6, r5
 8003930:	6023      	str	r3, [r4, #0]
 8003932:	e7ce      	b.n	80038d2 <_svfiprintf_r+0x96>
 8003934:	9b07      	ldr	r3, [sp, #28]
 8003936:	1d19      	adds	r1, r3, #4
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	9107      	str	r1, [sp, #28]
 800393c:	2b00      	cmp	r3, #0
 800393e:	db01      	blt.n	8003944 <_svfiprintf_r+0x108>
 8003940:	930b      	str	r3, [sp, #44]	; 0x2c
 8003942:	e004      	b.n	800394e <_svfiprintf_r+0x112>
 8003944:	425b      	negs	r3, r3
 8003946:	60e3      	str	r3, [r4, #12]
 8003948:	2302      	movs	r3, #2
 800394a:	4313      	orrs	r3, r2
 800394c:	6023      	str	r3, [r4, #0]
 800394e:	782b      	ldrb	r3, [r5, #0]
 8003950:	2b2e      	cmp	r3, #46	; 0x2e
 8003952:	d10a      	bne.n	800396a <_svfiprintf_r+0x12e>
 8003954:	786b      	ldrb	r3, [r5, #1]
 8003956:	2b2a      	cmp	r3, #42	; 0x2a
 8003958:	d135      	bne.n	80039c6 <_svfiprintf_r+0x18a>
 800395a:	9b07      	ldr	r3, [sp, #28]
 800395c:	3502      	adds	r5, #2
 800395e:	1d1a      	adds	r2, r3, #4
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	9207      	str	r2, [sp, #28]
 8003964:	2b00      	cmp	r3, #0
 8003966:	db2b      	blt.n	80039c0 <_svfiprintf_r+0x184>
 8003968:	9309      	str	r3, [sp, #36]	; 0x24
 800396a:	4e30      	ldr	r6, [pc, #192]	; (8003a2c <_svfiprintf_r+0x1f0>)
 800396c:	2203      	movs	r2, #3
 800396e:	0030      	movs	r0, r6
 8003970:	7829      	ldrb	r1, [r5, #0]
 8003972:	f000 f9e5 	bl	8003d40 <memchr>
 8003976:	2800      	cmp	r0, #0
 8003978:	d006      	beq.n	8003988 <_svfiprintf_r+0x14c>
 800397a:	2340      	movs	r3, #64	; 0x40
 800397c:	1b80      	subs	r0, r0, r6
 800397e:	4083      	lsls	r3, r0
 8003980:	6822      	ldr	r2, [r4, #0]
 8003982:	3501      	adds	r5, #1
 8003984:	4313      	orrs	r3, r2
 8003986:	6023      	str	r3, [r4, #0]
 8003988:	7829      	ldrb	r1, [r5, #0]
 800398a:	2206      	movs	r2, #6
 800398c:	4828      	ldr	r0, [pc, #160]	; (8003a30 <_svfiprintf_r+0x1f4>)
 800398e:	1c6e      	adds	r6, r5, #1
 8003990:	7621      	strb	r1, [r4, #24]
 8003992:	f000 f9d5 	bl	8003d40 <memchr>
 8003996:	2800      	cmp	r0, #0
 8003998:	d03c      	beq.n	8003a14 <_svfiprintf_r+0x1d8>
 800399a:	4b26      	ldr	r3, [pc, #152]	; (8003a34 <_svfiprintf_r+0x1f8>)
 800399c:	2b00      	cmp	r3, #0
 800399e:	d125      	bne.n	80039ec <_svfiprintf_r+0x1b0>
 80039a0:	2207      	movs	r2, #7
 80039a2:	9b07      	ldr	r3, [sp, #28]
 80039a4:	3307      	adds	r3, #7
 80039a6:	4393      	bics	r3, r2
 80039a8:	3308      	adds	r3, #8
 80039aa:	9307      	str	r3, [sp, #28]
 80039ac:	6963      	ldr	r3, [r4, #20]
 80039ae:	9a04      	ldr	r2, [sp, #16]
 80039b0:	189b      	adds	r3, r3, r2
 80039b2:	6163      	str	r3, [r4, #20]
 80039b4:	e765      	b.n	8003882 <_svfiprintf_r+0x46>
 80039b6:	4343      	muls	r3, r0
 80039b8:	0035      	movs	r5, r6
 80039ba:	2101      	movs	r1, #1
 80039bc:	189b      	adds	r3, r3, r2
 80039be:	e7a6      	b.n	800390e <_svfiprintf_r+0xd2>
 80039c0:	2301      	movs	r3, #1
 80039c2:	425b      	negs	r3, r3
 80039c4:	e7d0      	b.n	8003968 <_svfiprintf_r+0x12c>
 80039c6:	2300      	movs	r3, #0
 80039c8:	200a      	movs	r0, #10
 80039ca:	001a      	movs	r2, r3
 80039cc:	3501      	adds	r5, #1
 80039ce:	6063      	str	r3, [r4, #4]
 80039d0:	7829      	ldrb	r1, [r5, #0]
 80039d2:	1c6e      	adds	r6, r5, #1
 80039d4:	3930      	subs	r1, #48	; 0x30
 80039d6:	2909      	cmp	r1, #9
 80039d8:	d903      	bls.n	80039e2 <_svfiprintf_r+0x1a6>
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d0c5      	beq.n	800396a <_svfiprintf_r+0x12e>
 80039de:	9209      	str	r2, [sp, #36]	; 0x24
 80039e0:	e7c3      	b.n	800396a <_svfiprintf_r+0x12e>
 80039e2:	4342      	muls	r2, r0
 80039e4:	0035      	movs	r5, r6
 80039e6:	2301      	movs	r3, #1
 80039e8:	1852      	adds	r2, r2, r1
 80039ea:	e7f1      	b.n	80039d0 <_svfiprintf_r+0x194>
 80039ec:	ab07      	add	r3, sp, #28
 80039ee:	9300      	str	r3, [sp, #0]
 80039f0:	003a      	movs	r2, r7
 80039f2:	0021      	movs	r1, r4
 80039f4:	4b10      	ldr	r3, [pc, #64]	; (8003a38 <_svfiprintf_r+0x1fc>)
 80039f6:	9803      	ldr	r0, [sp, #12]
 80039f8:	e000      	b.n	80039fc <_svfiprintf_r+0x1c0>
 80039fa:	bf00      	nop
 80039fc:	9004      	str	r0, [sp, #16]
 80039fe:	9b04      	ldr	r3, [sp, #16]
 8003a00:	3301      	adds	r3, #1
 8003a02:	d1d3      	bne.n	80039ac <_svfiprintf_r+0x170>
 8003a04:	89bb      	ldrh	r3, [r7, #12]
 8003a06:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003a08:	065b      	lsls	r3, r3, #25
 8003a0a:	d400      	bmi.n	8003a0e <_svfiprintf_r+0x1d2>
 8003a0c:	e72d      	b.n	800386a <_svfiprintf_r+0x2e>
 8003a0e:	2001      	movs	r0, #1
 8003a10:	4240      	negs	r0, r0
 8003a12:	e72a      	b.n	800386a <_svfiprintf_r+0x2e>
 8003a14:	ab07      	add	r3, sp, #28
 8003a16:	9300      	str	r3, [sp, #0]
 8003a18:	003a      	movs	r2, r7
 8003a1a:	0021      	movs	r1, r4
 8003a1c:	4b06      	ldr	r3, [pc, #24]	; (8003a38 <_svfiprintf_r+0x1fc>)
 8003a1e:	9803      	ldr	r0, [sp, #12]
 8003a20:	f000 f87c 	bl	8003b1c <_printf_i>
 8003a24:	e7ea      	b.n	80039fc <_svfiprintf_r+0x1c0>
 8003a26:	46c0      	nop			; (mov r8, r8)
 8003a28:	080040c0 	.word	0x080040c0
 8003a2c:	080040c6 	.word	0x080040c6
 8003a30:	080040ca 	.word	0x080040ca
 8003a34:	00000000 	.word	0x00000000
 8003a38:	08003779 	.word	0x08003779

08003a3c <_printf_common>:
 8003a3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003a3e:	0015      	movs	r5, r2
 8003a40:	9301      	str	r3, [sp, #4]
 8003a42:	688a      	ldr	r2, [r1, #8]
 8003a44:	690b      	ldr	r3, [r1, #16]
 8003a46:	000c      	movs	r4, r1
 8003a48:	9000      	str	r0, [sp, #0]
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	da00      	bge.n	8003a50 <_printf_common+0x14>
 8003a4e:	0013      	movs	r3, r2
 8003a50:	0022      	movs	r2, r4
 8003a52:	602b      	str	r3, [r5, #0]
 8003a54:	3243      	adds	r2, #67	; 0x43
 8003a56:	7812      	ldrb	r2, [r2, #0]
 8003a58:	2a00      	cmp	r2, #0
 8003a5a:	d001      	beq.n	8003a60 <_printf_common+0x24>
 8003a5c:	3301      	adds	r3, #1
 8003a5e:	602b      	str	r3, [r5, #0]
 8003a60:	6823      	ldr	r3, [r4, #0]
 8003a62:	069b      	lsls	r3, r3, #26
 8003a64:	d502      	bpl.n	8003a6c <_printf_common+0x30>
 8003a66:	682b      	ldr	r3, [r5, #0]
 8003a68:	3302      	adds	r3, #2
 8003a6a:	602b      	str	r3, [r5, #0]
 8003a6c:	6822      	ldr	r2, [r4, #0]
 8003a6e:	2306      	movs	r3, #6
 8003a70:	0017      	movs	r7, r2
 8003a72:	401f      	ands	r7, r3
 8003a74:	421a      	tst	r2, r3
 8003a76:	d027      	beq.n	8003ac8 <_printf_common+0x8c>
 8003a78:	0023      	movs	r3, r4
 8003a7a:	3343      	adds	r3, #67	; 0x43
 8003a7c:	781b      	ldrb	r3, [r3, #0]
 8003a7e:	1e5a      	subs	r2, r3, #1
 8003a80:	4193      	sbcs	r3, r2
 8003a82:	6822      	ldr	r2, [r4, #0]
 8003a84:	0692      	lsls	r2, r2, #26
 8003a86:	d430      	bmi.n	8003aea <_printf_common+0xae>
 8003a88:	0022      	movs	r2, r4
 8003a8a:	9901      	ldr	r1, [sp, #4]
 8003a8c:	9800      	ldr	r0, [sp, #0]
 8003a8e:	9e08      	ldr	r6, [sp, #32]
 8003a90:	3243      	adds	r2, #67	; 0x43
 8003a92:	47b0      	blx	r6
 8003a94:	1c43      	adds	r3, r0, #1
 8003a96:	d025      	beq.n	8003ae4 <_printf_common+0xa8>
 8003a98:	2306      	movs	r3, #6
 8003a9a:	6820      	ldr	r0, [r4, #0]
 8003a9c:	682a      	ldr	r2, [r5, #0]
 8003a9e:	68e1      	ldr	r1, [r4, #12]
 8003aa0:	2500      	movs	r5, #0
 8003aa2:	4003      	ands	r3, r0
 8003aa4:	2b04      	cmp	r3, #4
 8003aa6:	d103      	bne.n	8003ab0 <_printf_common+0x74>
 8003aa8:	1a8d      	subs	r5, r1, r2
 8003aaa:	43eb      	mvns	r3, r5
 8003aac:	17db      	asrs	r3, r3, #31
 8003aae:	401d      	ands	r5, r3
 8003ab0:	68a3      	ldr	r3, [r4, #8]
 8003ab2:	6922      	ldr	r2, [r4, #16]
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	dd01      	ble.n	8003abc <_printf_common+0x80>
 8003ab8:	1a9b      	subs	r3, r3, r2
 8003aba:	18ed      	adds	r5, r5, r3
 8003abc:	2700      	movs	r7, #0
 8003abe:	42bd      	cmp	r5, r7
 8003ac0:	d120      	bne.n	8003b04 <_printf_common+0xc8>
 8003ac2:	2000      	movs	r0, #0
 8003ac4:	e010      	b.n	8003ae8 <_printf_common+0xac>
 8003ac6:	3701      	adds	r7, #1
 8003ac8:	68e3      	ldr	r3, [r4, #12]
 8003aca:	682a      	ldr	r2, [r5, #0]
 8003acc:	1a9b      	subs	r3, r3, r2
 8003ace:	42bb      	cmp	r3, r7
 8003ad0:	ddd2      	ble.n	8003a78 <_printf_common+0x3c>
 8003ad2:	0022      	movs	r2, r4
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	9901      	ldr	r1, [sp, #4]
 8003ad8:	9800      	ldr	r0, [sp, #0]
 8003ada:	9e08      	ldr	r6, [sp, #32]
 8003adc:	3219      	adds	r2, #25
 8003ade:	47b0      	blx	r6
 8003ae0:	1c43      	adds	r3, r0, #1
 8003ae2:	d1f0      	bne.n	8003ac6 <_printf_common+0x8a>
 8003ae4:	2001      	movs	r0, #1
 8003ae6:	4240      	negs	r0, r0
 8003ae8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003aea:	2030      	movs	r0, #48	; 0x30
 8003aec:	18e1      	adds	r1, r4, r3
 8003aee:	3143      	adds	r1, #67	; 0x43
 8003af0:	7008      	strb	r0, [r1, #0]
 8003af2:	0021      	movs	r1, r4
 8003af4:	1c5a      	adds	r2, r3, #1
 8003af6:	3145      	adds	r1, #69	; 0x45
 8003af8:	7809      	ldrb	r1, [r1, #0]
 8003afa:	18a2      	adds	r2, r4, r2
 8003afc:	3243      	adds	r2, #67	; 0x43
 8003afe:	3302      	adds	r3, #2
 8003b00:	7011      	strb	r1, [r2, #0]
 8003b02:	e7c1      	b.n	8003a88 <_printf_common+0x4c>
 8003b04:	0022      	movs	r2, r4
 8003b06:	2301      	movs	r3, #1
 8003b08:	9901      	ldr	r1, [sp, #4]
 8003b0a:	9800      	ldr	r0, [sp, #0]
 8003b0c:	9e08      	ldr	r6, [sp, #32]
 8003b0e:	321a      	adds	r2, #26
 8003b10:	47b0      	blx	r6
 8003b12:	1c43      	adds	r3, r0, #1
 8003b14:	d0e6      	beq.n	8003ae4 <_printf_common+0xa8>
 8003b16:	3701      	adds	r7, #1
 8003b18:	e7d1      	b.n	8003abe <_printf_common+0x82>
	...

08003b1c <_printf_i>:
 8003b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b1e:	b08b      	sub	sp, #44	; 0x2c
 8003b20:	9206      	str	r2, [sp, #24]
 8003b22:	000a      	movs	r2, r1
 8003b24:	3243      	adds	r2, #67	; 0x43
 8003b26:	9307      	str	r3, [sp, #28]
 8003b28:	9005      	str	r0, [sp, #20]
 8003b2a:	9204      	str	r2, [sp, #16]
 8003b2c:	7e0a      	ldrb	r2, [r1, #24]
 8003b2e:	000c      	movs	r4, r1
 8003b30:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003b32:	2a78      	cmp	r2, #120	; 0x78
 8003b34:	d807      	bhi.n	8003b46 <_printf_i+0x2a>
 8003b36:	2a62      	cmp	r2, #98	; 0x62
 8003b38:	d809      	bhi.n	8003b4e <_printf_i+0x32>
 8003b3a:	2a00      	cmp	r2, #0
 8003b3c:	d100      	bne.n	8003b40 <_printf_i+0x24>
 8003b3e:	e0c1      	b.n	8003cc4 <_printf_i+0x1a8>
 8003b40:	2a58      	cmp	r2, #88	; 0x58
 8003b42:	d100      	bne.n	8003b46 <_printf_i+0x2a>
 8003b44:	e08c      	b.n	8003c60 <_printf_i+0x144>
 8003b46:	0026      	movs	r6, r4
 8003b48:	3642      	adds	r6, #66	; 0x42
 8003b4a:	7032      	strb	r2, [r6, #0]
 8003b4c:	e022      	b.n	8003b94 <_printf_i+0x78>
 8003b4e:	0010      	movs	r0, r2
 8003b50:	3863      	subs	r0, #99	; 0x63
 8003b52:	2815      	cmp	r0, #21
 8003b54:	d8f7      	bhi.n	8003b46 <_printf_i+0x2a>
 8003b56:	f7fc fad7 	bl	8000108 <__gnu_thumb1_case_shi>
 8003b5a:	0016      	.short	0x0016
 8003b5c:	fff6001f 	.word	0xfff6001f
 8003b60:	fff6fff6 	.word	0xfff6fff6
 8003b64:	001ffff6 	.word	0x001ffff6
 8003b68:	fff6fff6 	.word	0xfff6fff6
 8003b6c:	fff6fff6 	.word	0xfff6fff6
 8003b70:	003600a8 	.word	0x003600a8
 8003b74:	fff6009a 	.word	0xfff6009a
 8003b78:	00b9fff6 	.word	0x00b9fff6
 8003b7c:	0036fff6 	.word	0x0036fff6
 8003b80:	fff6fff6 	.word	0xfff6fff6
 8003b84:	009e      	.short	0x009e
 8003b86:	0026      	movs	r6, r4
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	3642      	adds	r6, #66	; 0x42
 8003b8c:	1d11      	adds	r1, r2, #4
 8003b8e:	6019      	str	r1, [r3, #0]
 8003b90:	6813      	ldr	r3, [r2, #0]
 8003b92:	7033      	strb	r3, [r6, #0]
 8003b94:	2301      	movs	r3, #1
 8003b96:	e0a7      	b.n	8003ce8 <_printf_i+0x1cc>
 8003b98:	6808      	ldr	r0, [r1, #0]
 8003b9a:	6819      	ldr	r1, [r3, #0]
 8003b9c:	1d0a      	adds	r2, r1, #4
 8003b9e:	0605      	lsls	r5, r0, #24
 8003ba0:	d50b      	bpl.n	8003bba <_printf_i+0x9e>
 8003ba2:	680d      	ldr	r5, [r1, #0]
 8003ba4:	601a      	str	r2, [r3, #0]
 8003ba6:	2d00      	cmp	r5, #0
 8003ba8:	da03      	bge.n	8003bb2 <_printf_i+0x96>
 8003baa:	232d      	movs	r3, #45	; 0x2d
 8003bac:	9a04      	ldr	r2, [sp, #16]
 8003bae:	426d      	negs	r5, r5
 8003bb0:	7013      	strb	r3, [r2, #0]
 8003bb2:	4b61      	ldr	r3, [pc, #388]	; (8003d38 <_printf_i+0x21c>)
 8003bb4:	270a      	movs	r7, #10
 8003bb6:	9303      	str	r3, [sp, #12]
 8003bb8:	e01b      	b.n	8003bf2 <_printf_i+0xd6>
 8003bba:	680d      	ldr	r5, [r1, #0]
 8003bbc:	601a      	str	r2, [r3, #0]
 8003bbe:	0641      	lsls	r1, r0, #25
 8003bc0:	d5f1      	bpl.n	8003ba6 <_printf_i+0x8a>
 8003bc2:	b22d      	sxth	r5, r5
 8003bc4:	e7ef      	b.n	8003ba6 <_printf_i+0x8a>
 8003bc6:	680d      	ldr	r5, [r1, #0]
 8003bc8:	6819      	ldr	r1, [r3, #0]
 8003bca:	1d08      	adds	r0, r1, #4
 8003bcc:	6018      	str	r0, [r3, #0]
 8003bce:	062e      	lsls	r6, r5, #24
 8003bd0:	d501      	bpl.n	8003bd6 <_printf_i+0xba>
 8003bd2:	680d      	ldr	r5, [r1, #0]
 8003bd4:	e003      	b.n	8003bde <_printf_i+0xc2>
 8003bd6:	066d      	lsls	r5, r5, #25
 8003bd8:	d5fb      	bpl.n	8003bd2 <_printf_i+0xb6>
 8003bda:	680d      	ldr	r5, [r1, #0]
 8003bdc:	b2ad      	uxth	r5, r5
 8003bde:	4b56      	ldr	r3, [pc, #344]	; (8003d38 <_printf_i+0x21c>)
 8003be0:	2708      	movs	r7, #8
 8003be2:	9303      	str	r3, [sp, #12]
 8003be4:	2a6f      	cmp	r2, #111	; 0x6f
 8003be6:	d000      	beq.n	8003bea <_printf_i+0xce>
 8003be8:	3702      	adds	r7, #2
 8003bea:	0023      	movs	r3, r4
 8003bec:	2200      	movs	r2, #0
 8003bee:	3343      	adds	r3, #67	; 0x43
 8003bf0:	701a      	strb	r2, [r3, #0]
 8003bf2:	6863      	ldr	r3, [r4, #4]
 8003bf4:	60a3      	str	r3, [r4, #8]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	db03      	blt.n	8003c02 <_printf_i+0xe6>
 8003bfa:	2204      	movs	r2, #4
 8003bfc:	6821      	ldr	r1, [r4, #0]
 8003bfe:	4391      	bics	r1, r2
 8003c00:	6021      	str	r1, [r4, #0]
 8003c02:	2d00      	cmp	r5, #0
 8003c04:	d102      	bne.n	8003c0c <_printf_i+0xf0>
 8003c06:	9e04      	ldr	r6, [sp, #16]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d00c      	beq.n	8003c26 <_printf_i+0x10a>
 8003c0c:	9e04      	ldr	r6, [sp, #16]
 8003c0e:	0028      	movs	r0, r5
 8003c10:	0039      	movs	r1, r7
 8003c12:	f7fc fb09 	bl	8000228 <__aeabi_uidivmod>
 8003c16:	9b03      	ldr	r3, [sp, #12]
 8003c18:	3e01      	subs	r6, #1
 8003c1a:	5c5b      	ldrb	r3, [r3, r1]
 8003c1c:	7033      	strb	r3, [r6, #0]
 8003c1e:	002b      	movs	r3, r5
 8003c20:	0005      	movs	r5, r0
 8003c22:	429f      	cmp	r7, r3
 8003c24:	d9f3      	bls.n	8003c0e <_printf_i+0xf2>
 8003c26:	2f08      	cmp	r7, #8
 8003c28:	d109      	bne.n	8003c3e <_printf_i+0x122>
 8003c2a:	6823      	ldr	r3, [r4, #0]
 8003c2c:	07db      	lsls	r3, r3, #31
 8003c2e:	d506      	bpl.n	8003c3e <_printf_i+0x122>
 8003c30:	6863      	ldr	r3, [r4, #4]
 8003c32:	6922      	ldr	r2, [r4, #16]
 8003c34:	4293      	cmp	r3, r2
 8003c36:	dc02      	bgt.n	8003c3e <_printf_i+0x122>
 8003c38:	2330      	movs	r3, #48	; 0x30
 8003c3a:	3e01      	subs	r6, #1
 8003c3c:	7033      	strb	r3, [r6, #0]
 8003c3e:	9b04      	ldr	r3, [sp, #16]
 8003c40:	1b9b      	subs	r3, r3, r6
 8003c42:	6123      	str	r3, [r4, #16]
 8003c44:	9b07      	ldr	r3, [sp, #28]
 8003c46:	0021      	movs	r1, r4
 8003c48:	9300      	str	r3, [sp, #0]
 8003c4a:	9805      	ldr	r0, [sp, #20]
 8003c4c:	9b06      	ldr	r3, [sp, #24]
 8003c4e:	aa09      	add	r2, sp, #36	; 0x24
 8003c50:	f7ff fef4 	bl	8003a3c <_printf_common>
 8003c54:	1c43      	adds	r3, r0, #1
 8003c56:	d14c      	bne.n	8003cf2 <_printf_i+0x1d6>
 8003c58:	2001      	movs	r0, #1
 8003c5a:	4240      	negs	r0, r0
 8003c5c:	b00b      	add	sp, #44	; 0x2c
 8003c5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c60:	3145      	adds	r1, #69	; 0x45
 8003c62:	700a      	strb	r2, [r1, #0]
 8003c64:	4a34      	ldr	r2, [pc, #208]	; (8003d38 <_printf_i+0x21c>)
 8003c66:	9203      	str	r2, [sp, #12]
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	6821      	ldr	r1, [r4, #0]
 8003c6c:	ca20      	ldmia	r2!, {r5}
 8003c6e:	601a      	str	r2, [r3, #0]
 8003c70:	0608      	lsls	r0, r1, #24
 8003c72:	d516      	bpl.n	8003ca2 <_printf_i+0x186>
 8003c74:	07cb      	lsls	r3, r1, #31
 8003c76:	d502      	bpl.n	8003c7e <_printf_i+0x162>
 8003c78:	2320      	movs	r3, #32
 8003c7a:	4319      	orrs	r1, r3
 8003c7c:	6021      	str	r1, [r4, #0]
 8003c7e:	2710      	movs	r7, #16
 8003c80:	2d00      	cmp	r5, #0
 8003c82:	d1b2      	bne.n	8003bea <_printf_i+0xce>
 8003c84:	2320      	movs	r3, #32
 8003c86:	6822      	ldr	r2, [r4, #0]
 8003c88:	439a      	bics	r2, r3
 8003c8a:	6022      	str	r2, [r4, #0]
 8003c8c:	e7ad      	b.n	8003bea <_printf_i+0xce>
 8003c8e:	2220      	movs	r2, #32
 8003c90:	6809      	ldr	r1, [r1, #0]
 8003c92:	430a      	orrs	r2, r1
 8003c94:	6022      	str	r2, [r4, #0]
 8003c96:	0022      	movs	r2, r4
 8003c98:	2178      	movs	r1, #120	; 0x78
 8003c9a:	3245      	adds	r2, #69	; 0x45
 8003c9c:	7011      	strb	r1, [r2, #0]
 8003c9e:	4a27      	ldr	r2, [pc, #156]	; (8003d3c <_printf_i+0x220>)
 8003ca0:	e7e1      	b.n	8003c66 <_printf_i+0x14a>
 8003ca2:	0648      	lsls	r0, r1, #25
 8003ca4:	d5e6      	bpl.n	8003c74 <_printf_i+0x158>
 8003ca6:	b2ad      	uxth	r5, r5
 8003ca8:	e7e4      	b.n	8003c74 <_printf_i+0x158>
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	680d      	ldr	r5, [r1, #0]
 8003cae:	1d10      	adds	r0, r2, #4
 8003cb0:	6949      	ldr	r1, [r1, #20]
 8003cb2:	6018      	str	r0, [r3, #0]
 8003cb4:	6813      	ldr	r3, [r2, #0]
 8003cb6:	062e      	lsls	r6, r5, #24
 8003cb8:	d501      	bpl.n	8003cbe <_printf_i+0x1a2>
 8003cba:	6019      	str	r1, [r3, #0]
 8003cbc:	e002      	b.n	8003cc4 <_printf_i+0x1a8>
 8003cbe:	066d      	lsls	r5, r5, #25
 8003cc0:	d5fb      	bpl.n	8003cba <_printf_i+0x19e>
 8003cc2:	8019      	strh	r1, [r3, #0]
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	9e04      	ldr	r6, [sp, #16]
 8003cc8:	6123      	str	r3, [r4, #16]
 8003cca:	e7bb      	b.n	8003c44 <_printf_i+0x128>
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	1d11      	adds	r1, r2, #4
 8003cd0:	6019      	str	r1, [r3, #0]
 8003cd2:	6816      	ldr	r6, [r2, #0]
 8003cd4:	2100      	movs	r1, #0
 8003cd6:	0030      	movs	r0, r6
 8003cd8:	6862      	ldr	r2, [r4, #4]
 8003cda:	f000 f831 	bl	8003d40 <memchr>
 8003cde:	2800      	cmp	r0, #0
 8003ce0:	d001      	beq.n	8003ce6 <_printf_i+0x1ca>
 8003ce2:	1b80      	subs	r0, r0, r6
 8003ce4:	6060      	str	r0, [r4, #4]
 8003ce6:	6863      	ldr	r3, [r4, #4]
 8003ce8:	6123      	str	r3, [r4, #16]
 8003cea:	2300      	movs	r3, #0
 8003cec:	9a04      	ldr	r2, [sp, #16]
 8003cee:	7013      	strb	r3, [r2, #0]
 8003cf0:	e7a8      	b.n	8003c44 <_printf_i+0x128>
 8003cf2:	6923      	ldr	r3, [r4, #16]
 8003cf4:	0032      	movs	r2, r6
 8003cf6:	9906      	ldr	r1, [sp, #24]
 8003cf8:	9805      	ldr	r0, [sp, #20]
 8003cfa:	9d07      	ldr	r5, [sp, #28]
 8003cfc:	47a8      	blx	r5
 8003cfe:	1c43      	adds	r3, r0, #1
 8003d00:	d0aa      	beq.n	8003c58 <_printf_i+0x13c>
 8003d02:	6823      	ldr	r3, [r4, #0]
 8003d04:	079b      	lsls	r3, r3, #30
 8003d06:	d415      	bmi.n	8003d34 <_printf_i+0x218>
 8003d08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d0a:	68e0      	ldr	r0, [r4, #12]
 8003d0c:	4298      	cmp	r0, r3
 8003d0e:	daa5      	bge.n	8003c5c <_printf_i+0x140>
 8003d10:	0018      	movs	r0, r3
 8003d12:	e7a3      	b.n	8003c5c <_printf_i+0x140>
 8003d14:	0022      	movs	r2, r4
 8003d16:	2301      	movs	r3, #1
 8003d18:	9906      	ldr	r1, [sp, #24]
 8003d1a:	9805      	ldr	r0, [sp, #20]
 8003d1c:	9e07      	ldr	r6, [sp, #28]
 8003d1e:	3219      	adds	r2, #25
 8003d20:	47b0      	blx	r6
 8003d22:	1c43      	adds	r3, r0, #1
 8003d24:	d098      	beq.n	8003c58 <_printf_i+0x13c>
 8003d26:	3501      	adds	r5, #1
 8003d28:	68e3      	ldr	r3, [r4, #12]
 8003d2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003d2c:	1a9b      	subs	r3, r3, r2
 8003d2e:	42ab      	cmp	r3, r5
 8003d30:	dcf0      	bgt.n	8003d14 <_printf_i+0x1f8>
 8003d32:	e7e9      	b.n	8003d08 <_printf_i+0x1ec>
 8003d34:	2500      	movs	r5, #0
 8003d36:	e7f7      	b.n	8003d28 <_printf_i+0x20c>
 8003d38:	080040d1 	.word	0x080040d1
 8003d3c:	080040e2 	.word	0x080040e2

08003d40 <memchr>:
 8003d40:	b2c9      	uxtb	r1, r1
 8003d42:	1882      	adds	r2, r0, r2
 8003d44:	4290      	cmp	r0, r2
 8003d46:	d101      	bne.n	8003d4c <memchr+0xc>
 8003d48:	2000      	movs	r0, #0
 8003d4a:	4770      	bx	lr
 8003d4c:	7803      	ldrb	r3, [r0, #0]
 8003d4e:	428b      	cmp	r3, r1
 8003d50:	d0fb      	beq.n	8003d4a <memchr+0xa>
 8003d52:	3001      	adds	r0, #1
 8003d54:	e7f6      	b.n	8003d44 <memchr+0x4>

08003d56 <memcpy>:
 8003d56:	2300      	movs	r3, #0
 8003d58:	b510      	push	{r4, lr}
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d100      	bne.n	8003d60 <memcpy+0xa>
 8003d5e:	bd10      	pop	{r4, pc}
 8003d60:	5ccc      	ldrb	r4, [r1, r3]
 8003d62:	54c4      	strb	r4, [r0, r3]
 8003d64:	3301      	adds	r3, #1
 8003d66:	e7f8      	b.n	8003d5a <memcpy+0x4>

08003d68 <memmove>:
 8003d68:	b510      	push	{r4, lr}
 8003d6a:	4288      	cmp	r0, r1
 8003d6c:	d902      	bls.n	8003d74 <memmove+0xc>
 8003d6e:	188b      	adds	r3, r1, r2
 8003d70:	4298      	cmp	r0, r3
 8003d72:	d303      	bcc.n	8003d7c <memmove+0x14>
 8003d74:	2300      	movs	r3, #0
 8003d76:	e007      	b.n	8003d88 <memmove+0x20>
 8003d78:	5c8b      	ldrb	r3, [r1, r2]
 8003d7a:	5483      	strb	r3, [r0, r2]
 8003d7c:	3a01      	subs	r2, #1
 8003d7e:	d2fb      	bcs.n	8003d78 <memmove+0x10>
 8003d80:	bd10      	pop	{r4, pc}
 8003d82:	5ccc      	ldrb	r4, [r1, r3]
 8003d84:	54c4      	strb	r4, [r0, r3]
 8003d86:	3301      	adds	r3, #1
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d1fa      	bne.n	8003d82 <memmove+0x1a>
 8003d8c:	e7f8      	b.n	8003d80 <memmove+0x18>
	...

08003d90 <_free_r>:
 8003d90:	b570      	push	{r4, r5, r6, lr}
 8003d92:	0005      	movs	r5, r0
 8003d94:	2900      	cmp	r1, #0
 8003d96:	d010      	beq.n	8003dba <_free_r+0x2a>
 8003d98:	1f0c      	subs	r4, r1, #4
 8003d9a:	6823      	ldr	r3, [r4, #0]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	da00      	bge.n	8003da2 <_free_r+0x12>
 8003da0:	18e4      	adds	r4, r4, r3
 8003da2:	0028      	movs	r0, r5
 8003da4:	f000 f918 	bl	8003fd8 <__malloc_lock>
 8003da8:	4a1d      	ldr	r2, [pc, #116]	; (8003e20 <_free_r+0x90>)
 8003daa:	6813      	ldr	r3, [r2, #0]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d105      	bne.n	8003dbc <_free_r+0x2c>
 8003db0:	6063      	str	r3, [r4, #4]
 8003db2:	6014      	str	r4, [r2, #0]
 8003db4:	0028      	movs	r0, r5
 8003db6:	f000 f917 	bl	8003fe8 <__malloc_unlock>
 8003dba:	bd70      	pop	{r4, r5, r6, pc}
 8003dbc:	42a3      	cmp	r3, r4
 8003dbe:	d908      	bls.n	8003dd2 <_free_r+0x42>
 8003dc0:	6821      	ldr	r1, [r4, #0]
 8003dc2:	1860      	adds	r0, r4, r1
 8003dc4:	4283      	cmp	r3, r0
 8003dc6:	d1f3      	bne.n	8003db0 <_free_r+0x20>
 8003dc8:	6818      	ldr	r0, [r3, #0]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	1841      	adds	r1, r0, r1
 8003dce:	6021      	str	r1, [r4, #0]
 8003dd0:	e7ee      	b.n	8003db0 <_free_r+0x20>
 8003dd2:	001a      	movs	r2, r3
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d001      	beq.n	8003dde <_free_r+0x4e>
 8003dda:	42a3      	cmp	r3, r4
 8003ddc:	d9f9      	bls.n	8003dd2 <_free_r+0x42>
 8003dde:	6811      	ldr	r1, [r2, #0]
 8003de0:	1850      	adds	r0, r2, r1
 8003de2:	42a0      	cmp	r0, r4
 8003de4:	d10b      	bne.n	8003dfe <_free_r+0x6e>
 8003de6:	6820      	ldr	r0, [r4, #0]
 8003de8:	1809      	adds	r1, r1, r0
 8003dea:	1850      	adds	r0, r2, r1
 8003dec:	6011      	str	r1, [r2, #0]
 8003dee:	4283      	cmp	r3, r0
 8003df0:	d1e0      	bne.n	8003db4 <_free_r+0x24>
 8003df2:	6818      	ldr	r0, [r3, #0]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	1841      	adds	r1, r0, r1
 8003df8:	6011      	str	r1, [r2, #0]
 8003dfa:	6053      	str	r3, [r2, #4]
 8003dfc:	e7da      	b.n	8003db4 <_free_r+0x24>
 8003dfe:	42a0      	cmp	r0, r4
 8003e00:	d902      	bls.n	8003e08 <_free_r+0x78>
 8003e02:	230c      	movs	r3, #12
 8003e04:	602b      	str	r3, [r5, #0]
 8003e06:	e7d5      	b.n	8003db4 <_free_r+0x24>
 8003e08:	6821      	ldr	r1, [r4, #0]
 8003e0a:	1860      	adds	r0, r4, r1
 8003e0c:	4283      	cmp	r3, r0
 8003e0e:	d103      	bne.n	8003e18 <_free_r+0x88>
 8003e10:	6818      	ldr	r0, [r3, #0]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	1841      	adds	r1, r0, r1
 8003e16:	6021      	str	r1, [r4, #0]
 8003e18:	6063      	str	r3, [r4, #4]
 8003e1a:	6054      	str	r4, [r2, #4]
 8003e1c:	e7ca      	b.n	8003db4 <_free_r+0x24>
 8003e1e:	46c0      	nop			; (mov r8, r8)
 8003e20:	20000170 	.word	0x20000170

08003e24 <sbrk_aligned>:
 8003e24:	b570      	push	{r4, r5, r6, lr}
 8003e26:	4e0f      	ldr	r6, [pc, #60]	; (8003e64 <sbrk_aligned+0x40>)
 8003e28:	000d      	movs	r5, r1
 8003e2a:	6831      	ldr	r1, [r6, #0]
 8003e2c:	0004      	movs	r4, r0
 8003e2e:	2900      	cmp	r1, #0
 8003e30:	d102      	bne.n	8003e38 <sbrk_aligned+0x14>
 8003e32:	f000 f8bf 	bl	8003fb4 <_sbrk_r>
 8003e36:	6030      	str	r0, [r6, #0]
 8003e38:	0029      	movs	r1, r5
 8003e3a:	0020      	movs	r0, r4
 8003e3c:	f000 f8ba 	bl	8003fb4 <_sbrk_r>
 8003e40:	1c43      	adds	r3, r0, #1
 8003e42:	d00a      	beq.n	8003e5a <sbrk_aligned+0x36>
 8003e44:	2303      	movs	r3, #3
 8003e46:	1cc5      	adds	r5, r0, #3
 8003e48:	439d      	bics	r5, r3
 8003e4a:	42a8      	cmp	r0, r5
 8003e4c:	d007      	beq.n	8003e5e <sbrk_aligned+0x3a>
 8003e4e:	1a29      	subs	r1, r5, r0
 8003e50:	0020      	movs	r0, r4
 8003e52:	f000 f8af 	bl	8003fb4 <_sbrk_r>
 8003e56:	1c43      	adds	r3, r0, #1
 8003e58:	d101      	bne.n	8003e5e <sbrk_aligned+0x3a>
 8003e5a:	2501      	movs	r5, #1
 8003e5c:	426d      	negs	r5, r5
 8003e5e:	0028      	movs	r0, r5
 8003e60:	bd70      	pop	{r4, r5, r6, pc}
 8003e62:	46c0      	nop			; (mov r8, r8)
 8003e64:	20000174 	.word	0x20000174

08003e68 <_malloc_r>:
 8003e68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003e6a:	2203      	movs	r2, #3
 8003e6c:	1ccb      	adds	r3, r1, #3
 8003e6e:	4393      	bics	r3, r2
 8003e70:	3308      	adds	r3, #8
 8003e72:	0006      	movs	r6, r0
 8003e74:	001f      	movs	r7, r3
 8003e76:	2b0c      	cmp	r3, #12
 8003e78:	d232      	bcs.n	8003ee0 <_malloc_r+0x78>
 8003e7a:	270c      	movs	r7, #12
 8003e7c:	42b9      	cmp	r1, r7
 8003e7e:	d831      	bhi.n	8003ee4 <_malloc_r+0x7c>
 8003e80:	0030      	movs	r0, r6
 8003e82:	f000 f8a9 	bl	8003fd8 <__malloc_lock>
 8003e86:	4d32      	ldr	r5, [pc, #200]	; (8003f50 <_malloc_r+0xe8>)
 8003e88:	682b      	ldr	r3, [r5, #0]
 8003e8a:	001c      	movs	r4, r3
 8003e8c:	2c00      	cmp	r4, #0
 8003e8e:	d12e      	bne.n	8003eee <_malloc_r+0x86>
 8003e90:	0039      	movs	r1, r7
 8003e92:	0030      	movs	r0, r6
 8003e94:	f7ff ffc6 	bl	8003e24 <sbrk_aligned>
 8003e98:	0004      	movs	r4, r0
 8003e9a:	1c43      	adds	r3, r0, #1
 8003e9c:	d11e      	bne.n	8003edc <_malloc_r+0x74>
 8003e9e:	682c      	ldr	r4, [r5, #0]
 8003ea0:	0025      	movs	r5, r4
 8003ea2:	2d00      	cmp	r5, #0
 8003ea4:	d14a      	bne.n	8003f3c <_malloc_r+0xd4>
 8003ea6:	6823      	ldr	r3, [r4, #0]
 8003ea8:	0029      	movs	r1, r5
 8003eaa:	18e3      	adds	r3, r4, r3
 8003eac:	0030      	movs	r0, r6
 8003eae:	9301      	str	r3, [sp, #4]
 8003eb0:	f000 f880 	bl	8003fb4 <_sbrk_r>
 8003eb4:	9b01      	ldr	r3, [sp, #4]
 8003eb6:	4283      	cmp	r3, r0
 8003eb8:	d143      	bne.n	8003f42 <_malloc_r+0xda>
 8003eba:	6823      	ldr	r3, [r4, #0]
 8003ebc:	3703      	adds	r7, #3
 8003ebe:	1aff      	subs	r7, r7, r3
 8003ec0:	2303      	movs	r3, #3
 8003ec2:	439f      	bics	r7, r3
 8003ec4:	3708      	adds	r7, #8
 8003ec6:	2f0c      	cmp	r7, #12
 8003ec8:	d200      	bcs.n	8003ecc <_malloc_r+0x64>
 8003eca:	270c      	movs	r7, #12
 8003ecc:	0039      	movs	r1, r7
 8003ece:	0030      	movs	r0, r6
 8003ed0:	f7ff ffa8 	bl	8003e24 <sbrk_aligned>
 8003ed4:	1c43      	adds	r3, r0, #1
 8003ed6:	d034      	beq.n	8003f42 <_malloc_r+0xda>
 8003ed8:	6823      	ldr	r3, [r4, #0]
 8003eda:	19df      	adds	r7, r3, r7
 8003edc:	6027      	str	r7, [r4, #0]
 8003ede:	e013      	b.n	8003f08 <_malloc_r+0xa0>
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	dacb      	bge.n	8003e7c <_malloc_r+0x14>
 8003ee4:	230c      	movs	r3, #12
 8003ee6:	2500      	movs	r5, #0
 8003ee8:	6033      	str	r3, [r6, #0]
 8003eea:	0028      	movs	r0, r5
 8003eec:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003eee:	6822      	ldr	r2, [r4, #0]
 8003ef0:	1bd1      	subs	r1, r2, r7
 8003ef2:	d420      	bmi.n	8003f36 <_malloc_r+0xce>
 8003ef4:	290b      	cmp	r1, #11
 8003ef6:	d917      	bls.n	8003f28 <_malloc_r+0xc0>
 8003ef8:	19e2      	adds	r2, r4, r7
 8003efa:	6027      	str	r7, [r4, #0]
 8003efc:	42a3      	cmp	r3, r4
 8003efe:	d111      	bne.n	8003f24 <_malloc_r+0xbc>
 8003f00:	602a      	str	r2, [r5, #0]
 8003f02:	6863      	ldr	r3, [r4, #4]
 8003f04:	6011      	str	r1, [r2, #0]
 8003f06:	6053      	str	r3, [r2, #4]
 8003f08:	0030      	movs	r0, r6
 8003f0a:	0025      	movs	r5, r4
 8003f0c:	f000 f86c 	bl	8003fe8 <__malloc_unlock>
 8003f10:	2207      	movs	r2, #7
 8003f12:	350b      	adds	r5, #11
 8003f14:	1d23      	adds	r3, r4, #4
 8003f16:	4395      	bics	r5, r2
 8003f18:	1aea      	subs	r2, r5, r3
 8003f1a:	429d      	cmp	r5, r3
 8003f1c:	d0e5      	beq.n	8003eea <_malloc_r+0x82>
 8003f1e:	1b5b      	subs	r3, r3, r5
 8003f20:	50a3      	str	r3, [r4, r2]
 8003f22:	e7e2      	b.n	8003eea <_malloc_r+0x82>
 8003f24:	605a      	str	r2, [r3, #4]
 8003f26:	e7ec      	b.n	8003f02 <_malloc_r+0x9a>
 8003f28:	6862      	ldr	r2, [r4, #4]
 8003f2a:	42a3      	cmp	r3, r4
 8003f2c:	d101      	bne.n	8003f32 <_malloc_r+0xca>
 8003f2e:	602a      	str	r2, [r5, #0]
 8003f30:	e7ea      	b.n	8003f08 <_malloc_r+0xa0>
 8003f32:	605a      	str	r2, [r3, #4]
 8003f34:	e7e8      	b.n	8003f08 <_malloc_r+0xa0>
 8003f36:	0023      	movs	r3, r4
 8003f38:	6864      	ldr	r4, [r4, #4]
 8003f3a:	e7a7      	b.n	8003e8c <_malloc_r+0x24>
 8003f3c:	002c      	movs	r4, r5
 8003f3e:	686d      	ldr	r5, [r5, #4]
 8003f40:	e7af      	b.n	8003ea2 <_malloc_r+0x3a>
 8003f42:	230c      	movs	r3, #12
 8003f44:	0030      	movs	r0, r6
 8003f46:	6033      	str	r3, [r6, #0]
 8003f48:	f000 f84e 	bl	8003fe8 <__malloc_unlock>
 8003f4c:	e7cd      	b.n	8003eea <_malloc_r+0x82>
 8003f4e:	46c0      	nop			; (mov r8, r8)
 8003f50:	20000170 	.word	0x20000170

08003f54 <_realloc_r>:
 8003f54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003f56:	0007      	movs	r7, r0
 8003f58:	000e      	movs	r6, r1
 8003f5a:	0014      	movs	r4, r2
 8003f5c:	2900      	cmp	r1, #0
 8003f5e:	d105      	bne.n	8003f6c <_realloc_r+0x18>
 8003f60:	0011      	movs	r1, r2
 8003f62:	f7ff ff81 	bl	8003e68 <_malloc_r>
 8003f66:	0005      	movs	r5, r0
 8003f68:	0028      	movs	r0, r5
 8003f6a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003f6c:	2a00      	cmp	r2, #0
 8003f6e:	d103      	bne.n	8003f78 <_realloc_r+0x24>
 8003f70:	f7ff ff0e 	bl	8003d90 <_free_r>
 8003f74:	0025      	movs	r5, r4
 8003f76:	e7f7      	b.n	8003f68 <_realloc_r+0x14>
 8003f78:	f000 f83e 	bl	8003ff8 <_malloc_usable_size_r>
 8003f7c:	9001      	str	r0, [sp, #4]
 8003f7e:	4284      	cmp	r4, r0
 8003f80:	d803      	bhi.n	8003f8a <_realloc_r+0x36>
 8003f82:	0035      	movs	r5, r6
 8003f84:	0843      	lsrs	r3, r0, #1
 8003f86:	42a3      	cmp	r3, r4
 8003f88:	d3ee      	bcc.n	8003f68 <_realloc_r+0x14>
 8003f8a:	0021      	movs	r1, r4
 8003f8c:	0038      	movs	r0, r7
 8003f8e:	f7ff ff6b 	bl	8003e68 <_malloc_r>
 8003f92:	1e05      	subs	r5, r0, #0
 8003f94:	d0e8      	beq.n	8003f68 <_realloc_r+0x14>
 8003f96:	9b01      	ldr	r3, [sp, #4]
 8003f98:	0022      	movs	r2, r4
 8003f9a:	429c      	cmp	r4, r3
 8003f9c:	d900      	bls.n	8003fa0 <_realloc_r+0x4c>
 8003f9e:	001a      	movs	r2, r3
 8003fa0:	0031      	movs	r1, r6
 8003fa2:	0028      	movs	r0, r5
 8003fa4:	f7ff fed7 	bl	8003d56 <memcpy>
 8003fa8:	0031      	movs	r1, r6
 8003faa:	0038      	movs	r0, r7
 8003fac:	f7ff fef0 	bl	8003d90 <_free_r>
 8003fb0:	e7da      	b.n	8003f68 <_realloc_r+0x14>
	...

08003fb4 <_sbrk_r>:
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	b570      	push	{r4, r5, r6, lr}
 8003fb8:	4d06      	ldr	r5, [pc, #24]	; (8003fd4 <_sbrk_r+0x20>)
 8003fba:	0004      	movs	r4, r0
 8003fbc:	0008      	movs	r0, r1
 8003fbe:	602b      	str	r3, [r5, #0]
 8003fc0:	f7fc fd52 	bl	8000a68 <_sbrk>
 8003fc4:	1c43      	adds	r3, r0, #1
 8003fc6:	d103      	bne.n	8003fd0 <_sbrk_r+0x1c>
 8003fc8:	682b      	ldr	r3, [r5, #0]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d000      	beq.n	8003fd0 <_sbrk_r+0x1c>
 8003fce:	6023      	str	r3, [r4, #0]
 8003fd0:	bd70      	pop	{r4, r5, r6, pc}
 8003fd2:	46c0      	nop			; (mov r8, r8)
 8003fd4:	20000178 	.word	0x20000178

08003fd8 <__malloc_lock>:
 8003fd8:	b510      	push	{r4, lr}
 8003fda:	4802      	ldr	r0, [pc, #8]	; (8003fe4 <__malloc_lock+0xc>)
 8003fdc:	f000 f814 	bl	8004008 <__retarget_lock_acquire_recursive>
 8003fe0:	bd10      	pop	{r4, pc}
 8003fe2:	46c0      	nop			; (mov r8, r8)
 8003fe4:	2000017c 	.word	0x2000017c

08003fe8 <__malloc_unlock>:
 8003fe8:	b510      	push	{r4, lr}
 8003fea:	4802      	ldr	r0, [pc, #8]	; (8003ff4 <__malloc_unlock+0xc>)
 8003fec:	f000 f80d 	bl	800400a <__retarget_lock_release_recursive>
 8003ff0:	bd10      	pop	{r4, pc}
 8003ff2:	46c0      	nop			; (mov r8, r8)
 8003ff4:	2000017c 	.word	0x2000017c

08003ff8 <_malloc_usable_size_r>:
 8003ff8:	1f0b      	subs	r3, r1, #4
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	1f18      	subs	r0, r3, #4
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	da01      	bge.n	8004006 <_malloc_usable_size_r+0xe>
 8004002:	580b      	ldr	r3, [r1, r0]
 8004004:	18c0      	adds	r0, r0, r3
 8004006:	4770      	bx	lr

08004008 <__retarget_lock_acquire_recursive>:
 8004008:	4770      	bx	lr

0800400a <__retarget_lock_release_recursive>:
 800400a:	4770      	bx	lr

0800400c <_init>:
 800400c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800400e:	46c0      	nop			; (mov r8, r8)
 8004010:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004012:	bc08      	pop	{r3}
 8004014:	469e      	mov	lr, r3
 8004016:	4770      	bx	lr

08004018 <_fini>:
 8004018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800401a:	46c0      	nop			; (mov r8, r8)
 800401c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800401e:	bc08      	pop	{r3}
 8004020:	469e      	mov	lr, r3
 8004022:	4770      	bx	lr
