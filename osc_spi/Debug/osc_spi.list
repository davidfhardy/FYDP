
osc_spi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009bb4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005dc  08009c78  08009c78  00019c78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a254  0800a254  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800a254  0800a254  0001a254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a25c  0800a25c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a25c  0800a25c  0001a25c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a260  0800a260  0001a260  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800a264  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000218  200001dc  0800a440  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003f4  0800a440  000203f4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fdf9  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021cc  00000000  00000000  0002fffd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000df8  00000000  00000000  000321d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d10  00000000  00000000  00032fc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000162e5  00000000  00000000  00033cd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000110e1  00000000  00000000  00049fbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085937  00000000  00000000  0005b09e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e09d5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043e4  00000000  00000000  000e0a28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001dc 	.word	0x200001dc
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08009c5c 	.word	0x08009c5c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e0 	.word	0x200001e0
 8000104:	08009c5c 	.word	0x08009c5c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 f827 	bl	8001490 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f000 ff77 	bl	8001340 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 f819 	bl	8001490 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 f80f 	bl	8001490 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f000 ff9f 	bl	80013c4 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f000 ff95 	bl	80013c4 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_uldivmod>:
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d111      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	d10f      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004b0:	2900      	cmp	r1, #0
 80004b2:	d100      	bne.n	80004b6 <__aeabi_uldivmod+0xe>
 80004b4:	2800      	cmp	r0, #0
 80004b6:	d002      	beq.n	80004be <__aeabi_uldivmod+0x16>
 80004b8:	2100      	movs	r1, #0
 80004ba:	43c9      	mvns	r1, r1
 80004bc:	0008      	movs	r0, r1
 80004be:	b407      	push	{r0, r1, r2}
 80004c0:	4802      	ldr	r0, [pc, #8]	; (80004cc <__aeabi_uldivmod+0x24>)
 80004c2:	a102      	add	r1, pc, #8	; (adr r1, 80004cc <__aeabi_uldivmod+0x24>)
 80004c4:	1840      	adds	r0, r0, r1
 80004c6:	9002      	str	r0, [sp, #8]
 80004c8:	bd03      	pop	{r0, r1, pc}
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	ffffff5d 	.word	0xffffff5d
 80004d0:	b403      	push	{r0, r1}
 80004d2:	4668      	mov	r0, sp
 80004d4:	b501      	push	{r0, lr}
 80004d6:	9802      	ldr	r0, [sp, #8]
 80004d8:	f000 f834 	bl	8000544 <__udivmoddi4>
 80004dc:	9b01      	ldr	r3, [sp, #4]
 80004de:	469e      	mov	lr, r3
 80004e0:	b002      	add	sp, #8
 80004e2:	bc0c      	pop	{r2, r3}
 80004e4:	4770      	bx	lr
 80004e6:	46c0      	nop			; (mov r8, r8)

080004e8 <__aeabi_lmul>:
 80004e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ea:	46ce      	mov	lr, r9
 80004ec:	4647      	mov	r7, r8
 80004ee:	b580      	push	{r7, lr}
 80004f0:	0007      	movs	r7, r0
 80004f2:	4699      	mov	r9, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	469c      	mov	ip, r3
 80004f8:	0413      	lsls	r3, r2, #16
 80004fa:	0c1b      	lsrs	r3, r3, #16
 80004fc:	001d      	movs	r5, r3
 80004fe:	000e      	movs	r6, r1
 8000500:	4661      	mov	r1, ip
 8000502:	0400      	lsls	r0, r0, #16
 8000504:	0c14      	lsrs	r4, r2, #16
 8000506:	0c00      	lsrs	r0, r0, #16
 8000508:	4345      	muls	r5, r0
 800050a:	434b      	muls	r3, r1
 800050c:	4360      	muls	r0, r4
 800050e:	4361      	muls	r1, r4
 8000510:	18c0      	adds	r0, r0, r3
 8000512:	0c2c      	lsrs	r4, r5, #16
 8000514:	1820      	adds	r0, r4, r0
 8000516:	468c      	mov	ip, r1
 8000518:	4283      	cmp	r3, r0
 800051a:	d903      	bls.n	8000524 <__aeabi_lmul+0x3c>
 800051c:	2380      	movs	r3, #128	; 0x80
 800051e:	025b      	lsls	r3, r3, #9
 8000520:	4698      	mov	r8, r3
 8000522:	44c4      	add	ip, r8
 8000524:	4649      	mov	r1, r9
 8000526:	4379      	muls	r1, r7
 8000528:	4372      	muls	r2, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	4463      	add	r3, ip
 800052e:	042d      	lsls	r5, r5, #16
 8000530:	0c2d      	lsrs	r5, r5, #16
 8000532:	18c9      	adds	r1, r1, r3
 8000534:	0400      	lsls	r0, r0, #16
 8000536:	1940      	adds	r0, r0, r5
 8000538:	1889      	adds	r1, r1, r2
 800053a:	bcc0      	pop	{r6, r7}
 800053c:	46b9      	mov	r9, r7
 800053e:	46b0      	mov	r8, r6
 8000540:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000542:	46c0      	nop			; (mov r8, r8)

08000544 <__udivmoddi4>:
 8000544:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000546:	4657      	mov	r7, sl
 8000548:	464e      	mov	r6, r9
 800054a:	4645      	mov	r5, r8
 800054c:	46de      	mov	lr, fp
 800054e:	b5e0      	push	{r5, r6, r7, lr}
 8000550:	0004      	movs	r4, r0
 8000552:	000d      	movs	r5, r1
 8000554:	4692      	mov	sl, r2
 8000556:	4699      	mov	r9, r3
 8000558:	b083      	sub	sp, #12
 800055a:	428b      	cmp	r3, r1
 800055c:	d830      	bhi.n	80005c0 <__udivmoddi4+0x7c>
 800055e:	d02d      	beq.n	80005bc <__udivmoddi4+0x78>
 8000560:	4649      	mov	r1, r9
 8000562:	4650      	mov	r0, sl
 8000564:	f001 febe 	bl	80022e4 <__clzdi2>
 8000568:	0029      	movs	r1, r5
 800056a:	0006      	movs	r6, r0
 800056c:	0020      	movs	r0, r4
 800056e:	f001 feb9 	bl	80022e4 <__clzdi2>
 8000572:	1a33      	subs	r3, r6, r0
 8000574:	4698      	mov	r8, r3
 8000576:	3b20      	subs	r3, #32
 8000578:	469b      	mov	fp, r3
 800057a:	d433      	bmi.n	80005e4 <__udivmoddi4+0xa0>
 800057c:	465a      	mov	r2, fp
 800057e:	4653      	mov	r3, sl
 8000580:	4093      	lsls	r3, r2
 8000582:	4642      	mov	r2, r8
 8000584:	001f      	movs	r7, r3
 8000586:	4653      	mov	r3, sl
 8000588:	4093      	lsls	r3, r2
 800058a:	001e      	movs	r6, r3
 800058c:	42af      	cmp	r7, r5
 800058e:	d83a      	bhi.n	8000606 <__udivmoddi4+0xc2>
 8000590:	42af      	cmp	r7, r5
 8000592:	d100      	bne.n	8000596 <__udivmoddi4+0x52>
 8000594:	e078      	b.n	8000688 <__udivmoddi4+0x144>
 8000596:	465b      	mov	r3, fp
 8000598:	1ba4      	subs	r4, r4, r6
 800059a:	41bd      	sbcs	r5, r7
 800059c:	2b00      	cmp	r3, #0
 800059e:	da00      	bge.n	80005a2 <__udivmoddi4+0x5e>
 80005a0:	e075      	b.n	800068e <__udivmoddi4+0x14a>
 80005a2:	2200      	movs	r2, #0
 80005a4:	2300      	movs	r3, #0
 80005a6:	9200      	str	r2, [sp, #0]
 80005a8:	9301      	str	r3, [sp, #4]
 80005aa:	2301      	movs	r3, #1
 80005ac:	465a      	mov	r2, fp
 80005ae:	4093      	lsls	r3, r2
 80005b0:	9301      	str	r3, [sp, #4]
 80005b2:	2301      	movs	r3, #1
 80005b4:	4642      	mov	r2, r8
 80005b6:	4093      	lsls	r3, r2
 80005b8:	9300      	str	r3, [sp, #0]
 80005ba:	e028      	b.n	800060e <__udivmoddi4+0xca>
 80005bc:	4282      	cmp	r2, r0
 80005be:	d9cf      	bls.n	8000560 <__udivmoddi4+0x1c>
 80005c0:	2200      	movs	r2, #0
 80005c2:	2300      	movs	r3, #0
 80005c4:	9200      	str	r2, [sp, #0]
 80005c6:	9301      	str	r3, [sp, #4]
 80005c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <__udivmoddi4+0x8e>
 80005ce:	601c      	str	r4, [r3, #0]
 80005d0:	605d      	str	r5, [r3, #4]
 80005d2:	9800      	ldr	r0, [sp, #0]
 80005d4:	9901      	ldr	r1, [sp, #4]
 80005d6:	b003      	add	sp, #12
 80005d8:	bcf0      	pop	{r4, r5, r6, r7}
 80005da:	46bb      	mov	fp, r7
 80005dc:	46b2      	mov	sl, r6
 80005de:	46a9      	mov	r9, r5
 80005e0:	46a0      	mov	r8, r4
 80005e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005e4:	4642      	mov	r2, r8
 80005e6:	2320      	movs	r3, #32
 80005e8:	1a9b      	subs	r3, r3, r2
 80005ea:	4652      	mov	r2, sl
 80005ec:	40da      	lsrs	r2, r3
 80005ee:	4641      	mov	r1, r8
 80005f0:	0013      	movs	r3, r2
 80005f2:	464a      	mov	r2, r9
 80005f4:	408a      	lsls	r2, r1
 80005f6:	0017      	movs	r7, r2
 80005f8:	4642      	mov	r2, r8
 80005fa:	431f      	orrs	r7, r3
 80005fc:	4653      	mov	r3, sl
 80005fe:	4093      	lsls	r3, r2
 8000600:	001e      	movs	r6, r3
 8000602:	42af      	cmp	r7, r5
 8000604:	d9c4      	bls.n	8000590 <__udivmoddi4+0x4c>
 8000606:	2200      	movs	r2, #0
 8000608:	2300      	movs	r3, #0
 800060a:	9200      	str	r2, [sp, #0]
 800060c:	9301      	str	r3, [sp, #4]
 800060e:	4643      	mov	r3, r8
 8000610:	2b00      	cmp	r3, #0
 8000612:	d0d9      	beq.n	80005c8 <__udivmoddi4+0x84>
 8000614:	07fb      	lsls	r3, r7, #31
 8000616:	0872      	lsrs	r2, r6, #1
 8000618:	431a      	orrs	r2, r3
 800061a:	4646      	mov	r6, r8
 800061c:	087b      	lsrs	r3, r7, #1
 800061e:	e00e      	b.n	800063e <__udivmoddi4+0xfa>
 8000620:	42ab      	cmp	r3, r5
 8000622:	d101      	bne.n	8000628 <__udivmoddi4+0xe4>
 8000624:	42a2      	cmp	r2, r4
 8000626:	d80c      	bhi.n	8000642 <__udivmoddi4+0xfe>
 8000628:	1aa4      	subs	r4, r4, r2
 800062a:	419d      	sbcs	r5, r3
 800062c:	2001      	movs	r0, #1
 800062e:	1924      	adds	r4, r4, r4
 8000630:	416d      	adcs	r5, r5
 8000632:	2100      	movs	r1, #0
 8000634:	3e01      	subs	r6, #1
 8000636:	1824      	adds	r4, r4, r0
 8000638:	414d      	adcs	r5, r1
 800063a:	2e00      	cmp	r6, #0
 800063c:	d006      	beq.n	800064c <__udivmoddi4+0x108>
 800063e:	42ab      	cmp	r3, r5
 8000640:	d9ee      	bls.n	8000620 <__udivmoddi4+0xdc>
 8000642:	3e01      	subs	r6, #1
 8000644:	1924      	adds	r4, r4, r4
 8000646:	416d      	adcs	r5, r5
 8000648:	2e00      	cmp	r6, #0
 800064a:	d1f8      	bne.n	800063e <__udivmoddi4+0xfa>
 800064c:	9800      	ldr	r0, [sp, #0]
 800064e:	9901      	ldr	r1, [sp, #4]
 8000650:	465b      	mov	r3, fp
 8000652:	1900      	adds	r0, r0, r4
 8000654:	4169      	adcs	r1, r5
 8000656:	2b00      	cmp	r3, #0
 8000658:	db24      	blt.n	80006a4 <__udivmoddi4+0x160>
 800065a:	002b      	movs	r3, r5
 800065c:	465a      	mov	r2, fp
 800065e:	4644      	mov	r4, r8
 8000660:	40d3      	lsrs	r3, r2
 8000662:	002a      	movs	r2, r5
 8000664:	40e2      	lsrs	r2, r4
 8000666:	001c      	movs	r4, r3
 8000668:	465b      	mov	r3, fp
 800066a:	0015      	movs	r5, r2
 800066c:	2b00      	cmp	r3, #0
 800066e:	db2a      	blt.n	80006c6 <__udivmoddi4+0x182>
 8000670:	0026      	movs	r6, r4
 8000672:	409e      	lsls	r6, r3
 8000674:	0033      	movs	r3, r6
 8000676:	0026      	movs	r6, r4
 8000678:	4647      	mov	r7, r8
 800067a:	40be      	lsls	r6, r7
 800067c:	0032      	movs	r2, r6
 800067e:	1a80      	subs	r0, r0, r2
 8000680:	4199      	sbcs	r1, r3
 8000682:	9000      	str	r0, [sp, #0]
 8000684:	9101      	str	r1, [sp, #4]
 8000686:	e79f      	b.n	80005c8 <__udivmoddi4+0x84>
 8000688:	42a3      	cmp	r3, r4
 800068a:	d8bc      	bhi.n	8000606 <__udivmoddi4+0xc2>
 800068c:	e783      	b.n	8000596 <__udivmoddi4+0x52>
 800068e:	4642      	mov	r2, r8
 8000690:	2320      	movs	r3, #32
 8000692:	2100      	movs	r1, #0
 8000694:	1a9b      	subs	r3, r3, r2
 8000696:	2200      	movs	r2, #0
 8000698:	9100      	str	r1, [sp, #0]
 800069a:	9201      	str	r2, [sp, #4]
 800069c:	2201      	movs	r2, #1
 800069e:	40da      	lsrs	r2, r3
 80006a0:	9201      	str	r2, [sp, #4]
 80006a2:	e786      	b.n	80005b2 <__udivmoddi4+0x6e>
 80006a4:	4642      	mov	r2, r8
 80006a6:	2320      	movs	r3, #32
 80006a8:	1a9b      	subs	r3, r3, r2
 80006aa:	002a      	movs	r2, r5
 80006ac:	4646      	mov	r6, r8
 80006ae:	409a      	lsls	r2, r3
 80006b0:	0023      	movs	r3, r4
 80006b2:	40f3      	lsrs	r3, r6
 80006b4:	4644      	mov	r4, r8
 80006b6:	4313      	orrs	r3, r2
 80006b8:	002a      	movs	r2, r5
 80006ba:	40e2      	lsrs	r2, r4
 80006bc:	001c      	movs	r4, r3
 80006be:	465b      	mov	r3, fp
 80006c0:	0015      	movs	r5, r2
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	dad4      	bge.n	8000670 <__udivmoddi4+0x12c>
 80006c6:	4642      	mov	r2, r8
 80006c8:	002f      	movs	r7, r5
 80006ca:	2320      	movs	r3, #32
 80006cc:	0026      	movs	r6, r4
 80006ce:	4097      	lsls	r7, r2
 80006d0:	1a9b      	subs	r3, r3, r2
 80006d2:	40de      	lsrs	r6, r3
 80006d4:	003b      	movs	r3, r7
 80006d6:	4333      	orrs	r3, r6
 80006d8:	e7cd      	b.n	8000676 <__udivmoddi4+0x132>
 80006da:	46c0      	nop			; (mov r8, r8)

080006dc <__aeabi_dadd>:
 80006dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006de:	464f      	mov	r7, r9
 80006e0:	4646      	mov	r6, r8
 80006e2:	46d6      	mov	lr, sl
 80006e4:	000d      	movs	r5, r1
 80006e6:	0004      	movs	r4, r0
 80006e8:	b5c0      	push	{r6, r7, lr}
 80006ea:	001f      	movs	r7, r3
 80006ec:	0011      	movs	r1, r2
 80006ee:	0328      	lsls	r0, r5, #12
 80006f0:	0f62      	lsrs	r2, r4, #29
 80006f2:	0a40      	lsrs	r0, r0, #9
 80006f4:	4310      	orrs	r0, r2
 80006f6:	007a      	lsls	r2, r7, #1
 80006f8:	0d52      	lsrs	r2, r2, #21
 80006fa:	00e3      	lsls	r3, r4, #3
 80006fc:	033c      	lsls	r4, r7, #12
 80006fe:	4691      	mov	r9, r2
 8000700:	0a64      	lsrs	r4, r4, #9
 8000702:	0ffa      	lsrs	r2, r7, #31
 8000704:	0f4f      	lsrs	r7, r1, #29
 8000706:	006e      	lsls	r6, r5, #1
 8000708:	4327      	orrs	r7, r4
 800070a:	4692      	mov	sl, r2
 800070c:	46b8      	mov	r8, r7
 800070e:	0d76      	lsrs	r6, r6, #21
 8000710:	0fed      	lsrs	r5, r5, #31
 8000712:	00c9      	lsls	r1, r1, #3
 8000714:	4295      	cmp	r5, r2
 8000716:	d100      	bne.n	800071a <__aeabi_dadd+0x3e>
 8000718:	e099      	b.n	800084e <__aeabi_dadd+0x172>
 800071a:	464c      	mov	r4, r9
 800071c:	1b34      	subs	r4, r6, r4
 800071e:	46a4      	mov	ip, r4
 8000720:	2c00      	cmp	r4, #0
 8000722:	dc00      	bgt.n	8000726 <__aeabi_dadd+0x4a>
 8000724:	e07c      	b.n	8000820 <__aeabi_dadd+0x144>
 8000726:	464a      	mov	r2, r9
 8000728:	2a00      	cmp	r2, #0
 800072a:	d100      	bne.n	800072e <__aeabi_dadd+0x52>
 800072c:	e0b8      	b.n	80008a0 <__aeabi_dadd+0x1c4>
 800072e:	4ac5      	ldr	r2, [pc, #788]	; (8000a44 <__aeabi_dadd+0x368>)
 8000730:	4296      	cmp	r6, r2
 8000732:	d100      	bne.n	8000736 <__aeabi_dadd+0x5a>
 8000734:	e11c      	b.n	8000970 <__aeabi_dadd+0x294>
 8000736:	2280      	movs	r2, #128	; 0x80
 8000738:	003c      	movs	r4, r7
 800073a:	0412      	lsls	r2, r2, #16
 800073c:	4314      	orrs	r4, r2
 800073e:	46a0      	mov	r8, r4
 8000740:	4662      	mov	r2, ip
 8000742:	2a38      	cmp	r2, #56	; 0x38
 8000744:	dd00      	ble.n	8000748 <__aeabi_dadd+0x6c>
 8000746:	e161      	b.n	8000a0c <__aeabi_dadd+0x330>
 8000748:	2a1f      	cmp	r2, #31
 800074a:	dd00      	ble.n	800074e <__aeabi_dadd+0x72>
 800074c:	e1cc      	b.n	8000ae8 <__aeabi_dadd+0x40c>
 800074e:	4664      	mov	r4, ip
 8000750:	2220      	movs	r2, #32
 8000752:	1b12      	subs	r2, r2, r4
 8000754:	4644      	mov	r4, r8
 8000756:	4094      	lsls	r4, r2
 8000758:	000f      	movs	r7, r1
 800075a:	46a1      	mov	r9, r4
 800075c:	4664      	mov	r4, ip
 800075e:	4091      	lsls	r1, r2
 8000760:	40e7      	lsrs	r7, r4
 8000762:	464c      	mov	r4, r9
 8000764:	1e4a      	subs	r2, r1, #1
 8000766:	4191      	sbcs	r1, r2
 8000768:	433c      	orrs	r4, r7
 800076a:	4642      	mov	r2, r8
 800076c:	4321      	orrs	r1, r4
 800076e:	4664      	mov	r4, ip
 8000770:	40e2      	lsrs	r2, r4
 8000772:	1a80      	subs	r0, r0, r2
 8000774:	1a5c      	subs	r4, r3, r1
 8000776:	42a3      	cmp	r3, r4
 8000778:	419b      	sbcs	r3, r3
 800077a:	425f      	negs	r7, r3
 800077c:	1bc7      	subs	r7, r0, r7
 800077e:	023b      	lsls	r3, r7, #8
 8000780:	d400      	bmi.n	8000784 <__aeabi_dadd+0xa8>
 8000782:	e0d0      	b.n	8000926 <__aeabi_dadd+0x24a>
 8000784:	027f      	lsls	r7, r7, #9
 8000786:	0a7f      	lsrs	r7, r7, #9
 8000788:	2f00      	cmp	r7, #0
 800078a:	d100      	bne.n	800078e <__aeabi_dadd+0xb2>
 800078c:	e0ff      	b.n	800098e <__aeabi_dadd+0x2b2>
 800078e:	0038      	movs	r0, r7
 8000790:	f001 fd8a 	bl	80022a8 <__clzsi2>
 8000794:	0001      	movs	r1, r0
 8000796:	3908      	subs	r1, #8
 8000798:	2320      	movs	r3, #32
 800079a:	0022      	movs	r2, r4
 800079c:	1a5b      	subs	r3, r3, r1
 800079e:	408f      	lsls	r7, r1
 80007a0:	40da      	lsrs	r2, r3
 80007a2:	408c      	lsls	r4, r1
 80007a4:	4317      	orrs	r7, r2
 80007a6:	42b1      	cmp	r1, r6
 80007a8:	da00      	bge.n	80007ac <__aeabi_dadd+0xd0>
 80007aa:	e0ff      	b.n	80009ac <__aeabi_dadd+0x2d0>
 80007ac:	1b89      	subs	r1, r1, r6
 80007ae:	1c4b      	adds	r3, r1, #1
 80007b0:	2b1f      	cmp	r3, #31
 80007b2:	dd00      	ble.n	80007b6 <__aeabi_dadd+0xda>
 80007b4:	e0a8      	b.n	8000908 <__aeabi_dadd+0x22c>
 80007b6:	2220      	movs	r2, #32
 80007b8:	0039      	movs	r1, r7
 80007ba:	1ad2      	subs	r2, r2, r3
 80007bc:	0020      	movs	r0, r4
 80007be:	4094      	lsls	r4, r2
 80007c0:	4091      	lsls	r1, r2
 80007c2:	40d8      	lsrs	r0, r3
 80007c4:	1e62      	subs	r2, r4, #1
 80007c6:	4194      	sbcs	r4, r2
 80007c8:	40df      	lsrs	r7, r3
 80007ca:	2600      	movs	r6, #0
 80007cc:	4301      	orrs	r1, r0
 80007ce:	430c      	orrs	r4, r1
 80007d0:	0763      	lsls	r3, r4, #29
 80007d2:	d009      	beq.n	80007e8 <__aeabi_dadd+0x10c>
 80007d4:	230f      	movs	r3, #15
 80007d6:	4023      	ands	r3, r4
 80007d8:	2b04      	cmp	r3, #4
 80007da:	d005      	beq.n	80007e8 <__aeabi_dadd+0x10c>
 80007dc:	1d23      	adds	r3, r4, #4
 80007de:	42a3      	cmp	r3, r4
 80007e0:	41a4      	sbcs	r4, r4
 80007e2:	4264      	negs	r4, r4
 80007e4:	193f      	adds	r7, r7, r4
 80007e6:	001c      	movs	r4, r3
 80007e8:	023b      	lsls	r3, r7, #8
 80007ea:	d400      	bmi.n	80007ee <__aeabi_dadd+0x112>
 80007ec:	e09e      	b.n	800092c <__aeabi_dadd+0x250>
 80007ee:	4b95      	ldr	r3, [pc, #596]	; (8000a44 <__aeabi_dadd+0x368>)
 80007f0:	3601      	adds	r6, #1
 80007f2:	429e      	cmp	r6, r3
 80007f4:	d100      	bne.n	80007f8 <__aeabi_dadd+0x11c>
 80007f6:	e0b7      	b.n	8000968 <__aeabi_dadd+0x28c>
 80007f8:	4a93      	ldr	r2, [pc, #588]	; (8000a48 <__aeabi_dadd+0x36c>)
 80007fa:	08e4      	lsrs	r4, r4, #3
 80007fc:	4017      	ands	r7, r2
 80007fe:	077b      	lsls	r3, r7, #29
 8000800:	0571      	lsls	r1, r6, #21
 8000802:	027f      	lsls	r7, r7, #9
 8000804:	4323      	orrs	r3, r4
 8000806:	0b3f      	lsrs	r7, r7, #12
 8000808:	0d4a      	lsrs	r2, r1, #21
 800080a:	0512      	lsls	r2, r2, #20
 800080c:	433a      	orrs	r2, r7
 800080e:	07ed      	lsls	r5, r5, #31
 8000810:	432a      	orrs	r2, r5
 8000812:	0018      	movs	r0, r3
 8000814:	0011      	movs	r1, r2
 8000816:	bce0      	pop	{r5, r6, r7}
 8000818:	46ba      	mov	sl, r7
 800081a:	46b1      	mov	r9, r6
 800081c:	46a8      	mov	r8, r5
 800081e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000820:	2c00      	cmp	r4, #0
 8000822:	d04b      	beq.n	80008bc <__aeabi_dadd+0x1e0>
 8000824:	464c      	mov	r4, r9
 8000826:	1ba4      	subs	r4, r4, r6
 8000828:	46a4      	mov	ip, r4
 800082a:	2e00      	cmp	r6, #0
 800082c:	d000      	beq.n	8000830 <__aeabi_dadd+0x154>
 800082e:	e123      	b.n	8000a78 <__aeabi_dadd+0x39c>
 8000830:	0004      	movs	r4, r0
 8000832:	431c      	orrs	r4, r3
 8000834:	d100      	bne.n	8000838 <__aeabi_dadd+0x15c>
 8000836:	e1af      	b.n	8000b98 <__aeabi_dadd+0x4bc>
 8000838:	4662      	mov	r2, ip
 800083a:	1e54      	subs	r4, r2, #1
 800083c:	2a01      	cmp	r2, #1
 800083e:	d100      	bne.n	8000842 <__aeabi_dadd+0x166>
 8000840:	e215      	b.n	8000c6e <__aeabi_dadd+0x592>
 8000842:	4d80      	ldr	r5, [pc, #512]	; (8000a44 <__aeabi_dadd+0x368>)
 8000844:	45ac      	cmp	ip, r5
 8000846:	d100      	bne.n	800084a <__aeabi_dadd+0x16e>
 8000848:	e1c8      	b.n	8000bdc <__aeabi_dadd+0x500>
 800084a:	46a4      	mov	ip, r4
 800084c:	e11b      	b.n	8000a86 <__aeabi_dadd+0x3aa>
 800084e:	464a      	mov	r2, r9
 8000850:	1ab2      	subs	r2, r6, r2
 8000852:	4694      	mov	ip, r2
 8000854:	2a00      	cmp	r2, #0
 8000856:	dc00      	bgt.n	800085a <__aeabi_dadd+0x17e>
 8000858:	e0ac      	b.n	80009b4 <__aeabi_dadd+0x2d8>
 800085a:	464a      	mov	r2, r9
 800085c:	2a00      	cmp	r2, #0
 800085e:	d043      	beq.n	80008e8 <__aeabi_dadd+0x20c>
 8000860:	4a78      	ldr	r2, [pc, #480]	; (8000a44 <__aeabi_dadd+0x368>)
 8000862:	4296      	cmp	r6, r2
 8000864:	d100      	bne.n	8000868 <__aeabi_dadd+0x18c>
 8000866:	e1af      	b.n	8000bc8 <__aeabi_dadd+0x4ec>
 8000868:	2280      	movs	r2, #128	; 0x80
 800086a:	003c      	movs	r4, r7
 800086c:	0412      	lsls	r2, r2, #16
 800086e:	4314      	orrs	r4, r2
 8000870:	46a0      	mov	r8, r4
 8000872:	4662      	mov	r2, ip
 8000874:	2a38      	cmp	r2, #56	; 0x38
 8000876:	dc67      	bgt.n	8000948 <__aeabi_dadd+0x26c>
 8000878:	2a1f      	cmp	r2, #31
 800087a:	dc00      	bgt.n	800087e <__aeabi_dadd+0x1a2>
 800087c:	e15f      	b.n	8000b3e <__aeabi_dadd+0x462>
 800087e:	4647      	mov	r7, r8
 8000880:	3a20      	subs	r2, #32
 8000882:	40d7      	lsrs	r7, r2
 8000884:	4662      	mov	r2, ip
 8000886:	2a20      	cmp	r2, #32
 8000888:	d005      	beq.n	8000896 <__aeabi_dadd+0x1ba>
 800088a:	4664      	mov	r4, ip
 800088c:	2240      	movs	r2, #64	; 0x40
 800088e:	1b12      	subs	r2, r2, r4
 8000890:	4644      	mov	r4, r8
 8000892:	4094      	lsls	r4, r2
 8000894:	4321      	orrs	r1, r4
 8000896:	1e4a      	subs	r2, r1, #1
 8000898:	4191      	sbcs	r1, r2
 800089a:	000c      	movs	r4, r1
 800089c:	433c      	orrs	r4, r7
 800089e:	e057      	b.n	8000950 <__aeabi_dadd+0x274>
 80008a0:	003a      	movs	r2, r7
 80008a2:	430a      	orrs	r2, r1
 80008a4:	d100      	bne.n	80008a8 <__aeabi_dadd+0x1cc>
 80008a6:	e105      	b.n	8000ab4 <__aeabi_dadd+0x3d8>
 80008a8:	0022      	movs	r2, r4
 80008aa:	3a01      	subs	r2, #1
 80008ac:	2c01      	cmp	r4, #1
 80008ae:	d100      	bne.n	80008b2 <__aeabi_dadd+0x1d6>
 80008b0:	e182      	b.n	8000bb8 <__aeabi_dadd+0x4dc>
 80008b2:	4c64      	ldr	r4, [pc, #400]	; (8000a44 <__aeabi_dadd+0x368>)
 80008b4:	45a4      	cmp	ip, r4
 80008b6:	d05b      	beq.n	8000970 <__aeabi_dadd+0x294>
 80008b8:	4694      	mov	ip, r2
 80008ba:	e741      	b.n	8000740 <__aeabi_dadd+0x64>
 80008bc:	4c63      	ldr	r4, [pc, #396]	; (8000a4c <__aeabi_dadd+0x370>)
 80008be:	1c77      	adds	r7, r6, #1
 80008c0:	4227      	tst	r7, r4
 80008c2:	d000      	beq.n	80008c6 <__aeabi_dadd+0x1ea>
 80008c4:	e0c4      	b.n	8000a50 <__aeabi_dadd+0x374>
 80008c6:	0004      	movs	r4, r0
 80008c8:	431c      	orrs	r4, r3
 80008ca:	2e00      	cmp	r6, #0
 80008cc:	d000      	beq.n	80008d0 <__aeabi_dadd+0x1f4>
 80008ce:	e169      	b.n	8000ba4 <__aeabi_dadd+0x4c8>
 80008d0:	2c00      	cmp	r4, #0
 80008d2:	d100      	bne.n	80008d6 <__aeabi_dadd+0x1fa>
 80008d4:	e1bf      	b.n	8000c56 <__aeabi_dadd+0x57a>
 80008d6:	4644      	mov	r4, r8
 80008d8:	430c      	orrs	r4, r1
 80008da:	d000      	beq.n	80008de <__aeabi_dadd+0x202>
 80008dc:	e1d0      	b.n	8000c80 <__aeabi_dadd+0x5a4>
 80008de:	0742      	lsls	r2, r0, #29
 80008e0:	08db      	lsrs	r3, r3, #3
 80008e2:	4313      	orrs	r3, r2
 80008e4:	08c0      	lsrs	r0, r0, #3
 80008e6:	e029      	b.n	800093c <__aeabi_dadd+0x260>
 80008e8:	003a      	movs	r2, r7
 80008ea:	430a      	orrs	r2, r1
 80008ec:	d100      	bne.n	80008f0 <__aeabi_dadd+0x214>
 80008ee:	e170      	b.n	8000bd2 <__aeabi_dadd+0x4f6>
 80008f0:	4662      	mov	r2, ip
 80008f2:	4664      	mov	r4, ip
 80008f4:	3a01      	subs	r2, #1
 80008f6:	2c01      	cmp	r4, #1
 80008f8:	d100      	bne.n	80008fc <__aeabi_dadd+0x220>
 80008fa:	e0e0      	b.n	8000abe <__aeabi_dadd+0x3e2>
 80008fc:	4c51      	ldr	r4, [pc, #324]	; (8000a44 <__aeabi_dadd+0x368>)
 80008fe:	45a4      	cmp	ip, r4
 8000900:	d100      	bne.n	8000904 <__aeabi_dadd+0x228>
 8000902:	e161      	b.n	8000bc8 <__aeabi_dadd+0x4ec>
 8000904:	4694      	mov	ip, r2
 8000906:	e7b4      	b.n	8000872 <__aeabi_dadd+0x196>
 8000908:	003a      	movs	r2, r7
 800090a:	391f      	subs	r1, #31
 800090c:	40ca      	lsrs	r2, r1
 800090e:	0011      	movs	r1, r2
 8000910:	2b20      	cmp	r3, #32
 8000912:	d003      	beq.n	800091c <__aeabi_dadd+0x240>
 8000914:	2240      	movs	r2, #64	; 0x40
 8000916:	1ad3      	subs	r3, r2, r3
 8000918:	409f      	lsls	r7, r3
 800091a:	433c      	orrs	r4, r7
 800091c:	1e63      	subs	r3, r4, #1
 800091e:	419c      	sbcs	r4, r3
 8000920:	2700      	movs	r7, #0
 8000922:	2600      	movs	r6, #0
 8000924:	430c      	orrs	r4, r1
 8000926:	0763      	lsls	r3, r4, #29
 8000928:	d000      	beq.n	800092c <__aeabi_dadd+0x250>
 800092a:	e753      	b.n	80007d4 <__aeabi_dadd+0xf8>
 800092c:	46b4      	mov	ip, r6
 800092e:	08e4      	lsrs	r4, r4, #3
 8000930:	077b      	lsls	r3, r7, #29
 8000932:	4323      	orrs	r3, r4
 8000934:	08f8      	lsrs	r0, r7, #3
 8000936:	4a43      	ldr	r2, [pc, #268]	; (8000a44 <__aeabi_dadd+0x368>)
 8000938:	4594      	cmp	ip, r2
 800093a:	d01d      	beq.n	8000978 <__aeabi_dadd+0x29c>
 800093c:	4662      	mov	r2, ip
 800093e:	0307      	lsls	r7, r0, #12
 8000940:	0552      	lsls	r2, r2, #21
 8000942:	0b3f      	lsrs	r7, r7, #12
 8000944:	0d52      	lsrs	r2, r2, #21
 8000946:	e760      	b.n	800080a <__aeabi_dadd+0x12e>
 8000948:	4644      	mov	r4, r8
 800094a:	430c      	orrs	r4, r1
 800094c:	1e62      	subs	r2, r4, #1
 800094e:	4194      	sbcs	r4, r2
 8000950:	18e4      	adds	r4, r4, r3
 8000952:	429c      	cmp	r4, r3
 8000954:	419b      	sbcs	r3, r3
 8000956:	425f      	negs	r7, r3
 8000958:	183f      	adds	r7, r7, r0
 800095a:	023b      	lsls	r3, r7, #8
 800095c:	d5e3      	bpl.n	8000926 <__aeabi_dadd+0x24a>
 800095e:	4b39      	ldr	r3, [pc, #228]	; (8000a44 <__aeabi_dadd+0x368>)
 8000960:	3601      	adds	r6, #1
 8000962:	429e      	cmp	r6, r3
 8000964:	d000      	beq.n	8000968 <__aeabi_dadd+0x28c>
 8000966:	e0b5      	b.n	8000ad4 <__aeabi_dadd+0x3f8>
 8000968:	0032      	movs	r2, r6
 800096a:	2700      	movs	r7, #0
 800096c:	2300      	movs	r3, #0
 800096e:	e74c      	b.n	800080a <__aeabi_dadd+0x12e>
 8000970:	0742      	lsls	r2, r0, #29
 8000972:	08db      	lsrs	r3, r3, #3
 8000974:	4313      	orrs	r3, r2
 8000976:	08c0      	lsrs	r0, r0, #3
 8000978:	001a      	movs	r2, r3
 800097a:	4302      	orrs	r2, r0
 800097c:	d100      	bne.n	8000980 <__aeabi_dadd+0x2a4>
 800097e:	e1e1      	b.n	8000d44 <__aeabi_dadd+0x668>
 8000980:	2780      	movs	r7, #128	; 0x80
 8000982:	033f      	lsls	r7, r7, #12
 8000984:	4307      	orrs	r7, r0
 8000986:	033f      	lsls	r7, r7, #12
 8000988:	4a2e      	ldr	r2, [pc, #184]	; (8000a44 <__aeabi_dadd+0x368>)
 800098a:	0b3f      	lsrs	r7, r7, #12
 800098c:	e73d      	b.n	800080a <__aeabi_dadd+0x12e>
 800098e:	0020      	movs	r0, r4
 8000990:	f001 fc8a 	bl	80022a8 <__clzsi2>
 8000994:	0001      	movs	r1, r0
 8000996:	3118      	adds	r1, #24
 8000998:	291f      	cmp	r1, #31
 800099a:	dc00      	bgt.n	800099e <__aeabi_dadd+0x2c2>
 800099c:	e6fc      	b.n	8000798 <__aeabi_dadd+0xbc>
 800099e:	3808      	subs	r0, #8
 80009a0:	4084      	lsls	r4, r0
 80009a2:	0027      	movs	r7, r4
 80009a4:	2400      	movs	r4, #0
 80009a6:	42b1      	cmp	r1, r6
 80009a8:	db00      	blt.n	80009ac <__aeabi_dadd+0x2d0>
 80009aa:	e6ff      	b.n	80007ac <__aeabi_dadd+0xd0>
 80009ac:	4a26      	ldr	r2, [pc, #152]	; (8000a48 <__aeabi_dadd+0x36c>)
 80009ae:	1a76      	subs	r6, r6, r1
 80009b0:	4017      	ands	r7, r2
 80009b2:	e70d      	b.n	80007d0 <__aeabi_dadd+0xf4>
 80009b4:	2a00      	cmp	r2, #0
 80009b6:	d02f      	beq.n	8000a18 <__aeabi_dadd+0x33c>
 80009b8:	464a      	mov	r2, r9
 80009ba:	1b92      	subs	r2, r2, r6
 80009bc:	4694      	mov	ip, r2
 80009be:	2e00      	cmp	r6, #0
 80009c0:	d100      	bne.n	80009c4 <__aeabi_dadd+0x2e8>
 80009c2:	e0ad      	b.n	8000b20 <__aeabi_dadd+0x444>
 80009c4:	4a1f      	ldr	r2, [pc, #124]	; (8000a44 <__aeabi_dadd+0x368>)
 80009c6:	4591      	cmp	r9, r2
 80009c8:	d100      	bne.n	80009cc <__aeabi_dadd+0x2f0>
 80009ca:	e10f      	b.n	8000bec <__aeabi_dadd+0x510>
 80009cc:	2280      	movs	r2, #128	; 0x80
 80009ce:	0412      	lsls	r2, r2, #16
 80009d0:	4310      	orrs	r0, r2
 80009d2:	4662      	mov	r2, ip
 80009d4:	2a38      	cmp	r2, #56	; 0x38
 80009d6:	dd00      	ble.n	80009da <__aeabi_dadd+0x2fe>
 80009d8:	e10f      	b.n	8000bfa <__aeabi_dadd+0x51e>
 80009da:	2a1f      	cmp	r2, #31
 80009dc:	dd00      	ble.n	80009e0 <__aeabi_dadd+0x304>
 80009de:	e180      	b.n	8000ce2 <__aeabi_dadd+0x606>
 80009e0:	4664      	mov	r4, ip
 80009e2:	2220      	movs	r2, #32
 80009e4:	001e      	movs	r6, r3
 80009e6:	1b12      	subs	r2, r2, r4
 80009e8:	4667      	mov	r7, ip
 80009ea:	0004      	movs	r4, r0
 80009ec:	4093      	lsls	r3, r2
 80009ee:	4094      	lsls	r4, r2
 80009f0:	40fe      	lsrs	r6, r7
 80009f2:	1e5a      	subs	r2, r3, #1
 80009f4:	4193      	sbcs	r3, r2
 80009f6:	40f8      	lsrs	r0, r7
 80009f8:	4334      	orrs	r4, r6
 80009fa:	431c      	orrs	r4, r3
 80009fc:	4480      	add	r8, r0
 80009fe:	1864      	adds	r4, r4, r1
 8000a00:	428c      	cmp	r4, r1
 8000a02:	41bf      	sbcs	r7, r7
 8000a04:	427f      	negs	r7, r7
 8000a06:	464e      	mov	r6, r9
 8000a08:	4447      	add	r7, r8
 8000a0a:	e7a6      	b.n	800095a <__aeabi_dadd+0x27e>
 8000a0c:	4642      	mov	r2, r8
 8000a0e:	430a      	orrs	r2, r1
 8000a10:	0011      	movs	r1, r2
 8000a12:	1e4a      	subs	r2, r1, #1
 8000a14:	4191      	sbcs	r1, r2
 8000a16:	e6ad      	b.n	8000774 <__aeabi_dadd+0x98>
 8000a18:	4c0c      	ldr	r4, [pc, #48]	; (8000a4c <__aeabi_dadd+0x370>)
 8000a1a:	1c72      	adds	r2, r6, #1
 8000a1c:	4222      	tst	r2, r4
 8000a1e:	d000      	beq.n	8000a22 <__aeabi_dadd+0x346>
 8000a20:	e0a1      	b.n	8000b66 <__aeabi_dadd+0x48a>
 8000a22:	0002      	movs	r2, r0
 8000a24:	431a      	orrs	r2, r3
 8000a26:	2e00      	cmp	r6, #0
 8000a28:	d000      	beq.n	8000a2c <__aeabi_dadd+0x350>
 8000a2a:	e0fa      	b.n	8000c22 <__aeabi_dadd+0x546>
 8000a2c:	2a00      	cmp	r2, #0
 8000a2e:	d100      	bne.n	8000a32 <__aeabi_dadd+0x356>
 8000a30:	e145      	b.n	8000cbe <__aeabi_dadd+0x5e2>
 8000a32:	003a      	movs	r2, r7
 8000a34:	430a      	orrs	r2, r1
 8000a36:	d000      	beq.n	8000a3a <__aeabi_dadd+0x35e>
 8000a38:	e146      	b.n	8000cc8 <__aeabi_dadd+0x5ec>
 8000a3a:	0742      	lsls	r2, r0, #29
 8000a3c:	08db      	lsrs	r3, r3, #3
 8000a3e:	4313      	orrs	r3, r2
 8000a40:	08c0      	lsrs	r0, r0, #3
 8000a42:	e77b      	b.n	800093c <__aeabi_dadd+0x260>
 8000a44:	000007ff 	.word	0x000007ff
 8000a48:	ff7fffff 	.word	0xff7fffff
 8000a4c:	000007fe 	.word	0x000007fe
 8000a50:	4647      	mov	r7, r8
 8000a52:	1a5c      	subs	r4, r3, r1
 8000a54:	1bc2      	subs	r2, r0, r7
 8000a56:	42a3      	cmp	r3, r4
 8000a58:	41bf      	sbcs	r7, r7
 8000a5a:	427f      	negs	r7, r7
 8000a5c:	46b9      	mov	r9, r7
 8000a5e:	0017      	movs	r7, r2
 8000a60:	464a      	mov	r2, r9
 8000a62:	1abf      	subs	r7, r7, r2
 8000a64:	023a      	lsls	r2, r7, #8
 8000a66:	d500      	bpl.n	8000a6a <__aeabi_dadd+0x38e>
 8000a68:	e08d      	b.n	8000b86 <__aeabi_dadd+0x4aa>
 8000a6a:	0023      	movs	r3, r4
 8000a6c:	433b      	orrs	r3, r7
 8000a6e:	d000      	beq.n	8000a72 <__aeabi_dadd+0x396>
 8000a70:	e68a      	b.n	8000788 <__aeabi_dadd+0xac>
 8000a72:	2000      	movs	r0, #0
 8000a74:	2500      	movs	r5, #0
 8000a76:	e761      	b.n	800093c <__aeabi_dadd+0x260>
 8000a78:	4cb4      	ldr	r4, [pc, #720]	; (8000d4c <__aeabi_dadd+0x670>)
 8000a7a:	45a1      	cmp	r9, r4
 8000a7c:	d100      	bne.n	8000a80 <__aeabi_dadd+0x3a4>
 8000a7e:	e0ad      	b.n	8000bdc <__aeabi_dadd+0x500>
 8000a80:	2480      	movs	r4, #128	; 0x80
 8000a82:	0424      	lsls	r4, r4, #16
 8000a84:	4320      	orrs	r0, r4
 8000a86:	4664      	mov	r4, ip
 8000a88:	2c38      	cmp	r4, #56	; 0x38
 8000a8a:	dc3d      	bgt.n	8000b08 <__aeabi_dadd+0x42c>
 8000a8c:	4662      	mov	r2, ip
 8000a8e:	2c1f      	cmp	r4, #31
 8000a90:	dd00      	ble.n	8000a94 <__aeabi_dadd+0x3b8>
 8000a92:	e0b7      	b.n	8000c04 <__aeabi_dadd+0x528>
 8000a94:	2520      	movs	r5, #32
 8000a96:	001e      	movs	r6, r3
 8000a98:	1b2d      	subs	r5, r5, r4
 8000a9a:	0004      	movs	r4, r0
 8000a9c:	40ab      	lsls	r3, r5
 8000a9e:	40ac      	lsls	r4, r5
 8000aa0:	40d6      	lsrs	r6, r2
 8000aa2:	40d0      	lsrs	r0, r2
 8000aa4:	4642      	mov	r2, r8
 8000aa6:	1e5d      	subs	r5, r3, #1
 8000aa8:	41ab      	sbcs	r3, r5
 8000aaa:	4334      	orrs	r4, r6
 8000aac:	1a12      	subs	r2, r2, r0
 8000aae:	4690      	mov	r8, r2
 8000ab0:	4323      	orrs	r3, r4
 8000ab2:	e02c      	b.n	8000b0e <__aeabi_dadd+0x432>
 8000ab4:	0742      	lsls	r2, r0, #29
 8000ab6:	08db      	lsrs	r3, r3, #3
 8000ab8:	4313      	orrs	r3, r2
 8000aba:	08c0      	lsrs	r0, r0, #3
 8000abc:	e73b      	b.n	8000936 <__aeabi_dadd+0x25a>
 8000abe:	185c      	adds	r4, r3, r1
 8000ac0:	429c      	cmp	r4, r3
 8000ac2:	419b      	sbcs	r3, r3
 8000ac4:	4440      	add	r0, r8
 8000ac6:	425b      	negs	r3, r3
 8000ac8:	18c7      	adds	r7, r0, r3
 8000aca:	2601      	movs	r6, #1
 8000acc:	023b      	lsls	r3, r7, #8
 8000ace:	d400      	bmi.n	8000ad2 <__aeabi_dadd+0x3f6>
 8000ad0:	e729      	b.n	8000926 <__aeabi_dadd+0x24a>
 8000ad2:	2602      	movs	r6, #2
 8000ad4:	4a9e      	ldr	r2, [pc, #632]	; (8000d50 <__aeabi_dadd+0x674>)
 8000ad6:	0863      	lsrs	r3, r4, #1
 8000ad8:	4017      	ands	r7, r2
 8000ada:	2201      	movs	r2, #1
 8000adc:	4014      	ands	r4, r2
 8000ade:	431c      	orrs	r4, r3
 8000ae0:	07fb      	lsls	r3, r7, #31
 8000ae2:	431c      	orrs	r4, r3
 8000ae4:	087f      	lsrs	r7, r7, #1
 8000ae6:	e673      	b.n	80007d0 <__aeabi_dadd+0xf4>
 8000ae8:	4644      	mov	r4, r8
 8000aea:	3a20      	subs	r2, #32
 8000aec:	40d4      	lsrs	r4, r2
 8000aee:	4662      	mov	r2, ip
 8000af0:	2a20      	cmp	r2, #32
 8000af2:	d005      	beq.n	8000b00 <__aeabi_dadd+0x424>
 8000af4:	4667      	mov	r7, ip
 8000af6:	2240      	movs	r2, #64	; 0x40
 8000af8:	1bd2      	subs	r2, r2, r7
 8000afa:	4647      	mov	r7, r8
 8000afc:	4097      	lsls	r7, r2
 8000afe:	4339      	orrs	r1, r7
 8000b00:	1e4a      	subs	r2, r1, #1
 8000b02:	4191      	sbcs	r1, r2
 8000b04:	4321      	orrs	r1, r4
 8000b06:	e635      	b.n	8000774 <__aeabi_dadd+0x98>
 8000b08:	4303      	orrs	r3, r0
 8000b0a:	1e58      	subs	r0, r3, #1
 8000b0c:	4183      	sbcs	r3, r0
 8000b0e:	1acc      	subs	r4, r1, r3
 8000b10:	42a1      	cmp	r1, r4
 8000b12:	41bf      	sbcs	r7, r7
 8000b14:	4643      	mov	r3, r8
 8000b16:	427f      	negs	r7, r7
 8000b18:	4655      	mov	r5, sl
 8000b1a:	464e      	mov	r6, r9
 8000b1c:	1bdf      	subs	r7, r3, r7
 8000b1e:	e62e      	b.n	800077e <__aeabi_dadd+0xa2>
 8000b20:	0002      	movs	r2, r0
 8000b22:	431a      	orrs	r2, r3
 8000b24:	d100      	bne.n	8000b28 <__aeabi_dadd+0x44c>
 8000b26:	e0bd      	b.n	8000ca4 <__aeabi_dadd+0x5c8>
 8000b28:	4662      	mov	r2, ip
 8000b2a:	4664      	mov	r4, ip
 8000b2c:	3a01      	subs	r2, #1
 8000b2e:	2c01      	cmp	r4, #1
 8000b30:	d100      	bne.n	8000b34 <__aeabi_dadd+0x458>
 8000b32:	e0e5      	b.n	8000d00 <__aeabi_dadd+0x624>
 8000b34:	4c85      	ldr	r4, [pc, #532]	; (8000d4c <__aeabi_dadd+0x670>)
 8000b36:	45a4      	cmp	ip, r4
 8000b38:	d058      	beq.n	8000bec <__aeabi_dadd+0x510>
 8000b3a:	4694      	mov	ip, r2
 8000b3c:	e749      	b.n	80009d2 <__aeabi_dadd+0x2f6>
 8000b3e:	4664      	mov	r4, ip
 8000b40:	2220      	movs	r2, #32
 8000b42:	1b12      	subs	r2, r2, r4
 8000b44:	4644      	mov	r4, r8
 8000b46:	4094      	lsls	r4, r2
 8000b48:	000f      	movs	r7, r1
 8000b4a:	46a1      	mov	r9, r4
 8000b4c:	4664      	mov	r4, ip
 8000b4e:	4091      	lsls	r1, r2
 8000b50:	40e7      	lsrs	r7, r4
 8000b52:	464c      	mov	r4, r9
 8000b54:	1e4a      	subs	r2, r1, #1
 8000b56:	4191      	sbcs	r1, r2
 8000b58:	433c      	orrs	r4, r7
 8000b5a:	4642      	mov	r2, r8
 8000b5c:	430c      	orrs	r4, r1
 8000b5e:	4661      	mov	r1, ip
 8000b60:	40ca      	lsrs	r2, r1
 8000b62:	1880      	adds	r0, r0, r2
 8000b64:	e6f4      	b.n	8000950 <__aeabi_dadd+0x274>
 8000b66:	4c79      	ldr	r4, [pc, #484]	; (8000d4c <__aeabi_dadd+0x670>)
 8000b68:	42a2      	cmp	r2, r4
 8000b6a:	d100      	bne.n	8000b6e <__aeabi_dadd+0x492>
 8000b6c:	e6fd      	b.n	800096a <__aeabi_dadd+0x28e>
 8000b6e:	1859      	adds	r1, r3, r1
 8000b70:	4299      	cmp	r1, r3
 8000b72:	419b      	sbcs	r3, r3
 8000b74:	4440      	add	r0, r8
 8000b76:	425f      	negs	r7, r3
 8000b78:	19c7      	adds	r7, r0, r7
 8000b7a:	07fc      	lsls	r4, r7, #31
 8000b7c:	0849      	lsrs	r1, r1, #1
 8000b7e:	0016      	movs	r6, r2
 8000b80:	430c      	orrs	r4, r1
 8000b82:	087f      	lsrs	r7, r7, #1
 8000b84:	e6cf      	b.n	8000926 <__aeabi_dadd+0x24a>
 8000b86:	1acc      	subs	r4, r1, r3
 8000b88:	42a1      	cmp	r1, r4
 8000b8a:	41bf      	sbcs	r7, r7
 8000b8c:	4643      	mov	r3, r8
 8000b8e:	427f      	negs	r7, r7
 8000b90:	1a18      	subs	r0, r3, r0
 8000b92:	4655      	mov	r5, sl
 8000b94:	1bc7      	subs	r7, r0, r7
 8000b96:	e5f7      	b.n	8000788 <__aeabi_dadd+0xac>
 8000b98:	08c9      	lsrs	r1, r1, #3
 8000b9a:	077b      	lsls	r3, r7, #29
 8000b9c:	4655      	mov	r5, sl
 8000b9e:	430b      	orrs	r3, r1
 8000ba0:	08f8      	lsrs	r0, r7, #3
 8000ba2:	e6c8      	b.n	8000936 <__aeabi_dadd+0x25a>
 8000ba4:	2c00      	cmp	r4, #0
 8000ba6:	d000      	beq.n	8000baa <__aeabi_dadd+0x4ce>
 8000ba8:	e081      	b.n	8000cae <__aeabi_dadd+0x5d2>
 8000baa:	4643      	mov	r3, r8
 8000bac:	430b      	orrs	r3, r1
 8000bae:	d115      	bne.n	8000bdc <__aeabi_dadd+0x500>
 8000bb0:	2080      	movs	r0, #128	; 0x80
 8000bb2:	2500      	movs	r5, #0
 8000bb4:	0300      	lsls	r0, r0, #12
 8000bb6:	e6e3      	b.n	8000980 <__aeabi_dadd+0x2a4>
 8000bb8:	1a5c      	subs	r4, r3, r1
 8000bba:	42a3      	cmp	r3, r4
 8000bbc:	419b      	sbcs	r3, r3
 8000bbe:	1bc7      	subs	r7, r0, r7
 8000bc0:	425b      	negs	r3, r3
 8000bc2:	2601      	movs	r6, #1
 8000bc4:	1aff      	subs	r7, r7, r3
 8000bc6:	e5da      	b.n	800077e <__aeabi_dadd+0xa2>
 8000bc8:	0742      	lsls	r2, r0, #29
 8000bca:	08db      	lsrs	r3, r3, #3
 8000bcc:	4313      	orrs	r3, r2
 8000bce:	08c0      	lsrs	r0, r0, #3
 8000bd0:	e6d2      	b.n	8000978 <__aeabi_dadd+0x29c>
 8000bd2:	0742      	lsls	r2, r0, #29
 8000bd4:	08db      	lsrs	r3, r3, #3
 8000bd6:	4313      	orrs	r3, r2
 8000bd8:	08c0      	lsrs	r0, r0, #3
 8000bda:	e6ac      	b.n	8000936 <__aeabi_dadd+0x25a>
 8000bdc:	4643      	mov	r3, r8
 8000bde:	4642      	mov	r2, r8
 8000be0:	08c9      	lsrs	r1, r1, #3
 8000be2:	075b      	lsls	r3, r3, #29
 8000be4:	4655      	mov	r5, sl
 8000be6:	430b      	orrs	r3, r1
 8000be8:	08d0      	lsrs	r0, r2, #3
 8000bea:	e6c5      	b.n	8000978 <__aeabi_dadd+0x29c>
 8000bec:	4643      	mov	r3, r8
 8000bee:	4642      	mov	r2, r8
 8000bf0:	075b      	lsls	r3, r3, #29
 8000bf2:	08c9      	lsrs	r1, r1, #3
 8000bf4:	430b      	orrs	r3, r1
 8000bf6:	08d0      	lsrs	r0, r2, #3
 8000bf8:	e6be      	b.n	8000978 <__aeabi_dadd+0x29c>
 8000bfa:	4303      	orrs	r3, r0
 8000bfc:	001c      	movs	r4, r3
 8000bfe:	1e63      	subs	r3, r4, #1
 8000c00:	419c      	sbcs	r4, r3
 8000c02:	e6fc      	b.n	80009fe <__aeabi_dadd+0x322>
 8000c04:	0002      	movs	r2, r0
 8000c06:	3c20      	subs	r4, #32
 8000c08:	40e2      	lsrs	r2, r4
 8000c0a:	0014      	movs	r4, r2
 8000c0c:	4662      	mov	r2, ip
 8000c0e:	2a20      	cmp	r2, #32
 8000c10:	d003      	beq.n	8000c1a <__aeabi_dadd+0x53e>
 8000c12:	2540      	movs	r5, #64	; 0x40
 8000c14:	1aad      	subs	r5, r5, r2
 8000c16:	40a8      	lsls	r0, r5
 8000c18:	4303      	orrs	r3, r0
 8000c1a:	1e58      	subs	r0, r3, #1
 8000c1c:	4183      	sbcs	r3, r0
 8000c1e:	4323      	orrs	r3, r4
 8000c20:	e775      	b.n	8000b0e <__aeabi_dadd+0x432>
 8000c22:	2a00      	cmp	r2, #0
 8000c24:	d0e2      	beq.n	8000bec <__aeabi_dadd+0x510>
 8000c26:	003a      	movs	r2, r7
 8000c28:	430a      	orrs	r2, r1
 8000c2a:	d0cd      	beq.n	8000bc8 <__aeabi_dadd+0x4ec>
 8000c2c:	0742      	lsls	r2, r0, #29
 8000c2e:	08db      	lsrs	r3, r3, #3
 8000c30:	4313      	orrs	r3, r2
 8000c32:	2280      	movs	r2, #128	; 0x80
 8000c34:	08c0      	lsrs	r0, r0, #3
 8000c36:	0312      	lsls	r2, r2, #12
 8000c38:	4210      	tst	r0, r2
 8000c3a:	d006      	beq.n	8000c4a <__aeabi_dadd+0x56e>
 8000c3c:	08fc      	lsrs	r4, r7, #3
 8000c3e:	4214      	tst	r4, r2
 8000c40:	d103      	bne.n	8000c4a <__aeabi_dadd+0x56e>
 8000c42:	0020      	movs	r0, r4
 8000c44:	08cb      	lsrs	r3, r1, #3
 8000c46:	077a      	lsls	r2, r7, #29
 8000c48:	4313      	orrs	r3, r2
 8000c4a:	0f5a      	lsrs	r2, r3, #29
 8000c4c:	00db      	lsls	r3, r3, #3
 8000c4e:	0752      	lsls	r2, r2, #29
 8000c50:	08db      	lsrs	r3, r3, #3
 8000c52:	4313      	orrs	r3, r2
 8000c54:	e690      	b.n	8000978 <__aeabi_dadd+0x29c>
 8000c56:	4643      	mov	r3, r8
 8000c58:	430b      	orrs	r3, r1
 8000c5a:	d100      	bne.n	8000c5e <__aeabi_dadd+0x582>
 8000c5c:	e709      	b.n	8000a72 <__aeabi_dadd+0x396>
 8000c5e:	4643      	mov	r3, r8
 8000c60:	4642      	mov	r2, r8
 8000c62:	08c9      	lsrs	r1, r1, #3
 8000c64:	075b      	lsls	r3, r3, #29
 8000c66:	4655      	mov	r5, sl
 8000c68:	430b      	orrs	r3, r1
 8000c6a:	08d0      	lsrs	r0, r2, #3
 8000c6c:	e666      	b.n	800093c <__aeabi_dadd+0x260>
 8000c6e:	1acc      	subs	r4, r1, r3
 8000c70:	42a1      	cmp	r1, r4
 8000c72:	4189      	sbcs	r1, r1
 8000c74:	1a3f      	subs	r7, r7, r0
 8000c76:	4249      	negs	r1, r1
 8000c78:	4655      	mov	r5, sl
 8000c7a:	2601      	movs	r6, #1
 8000c7c:	1a7f      	subs	r7, r7, r1
 8000c7e:	e57e      	b.n	800077e <__aeabi_dadd+0xa2>
 8000c80:	4642      	mov	r2, r8
 8000c82:	1a5c      	subs	r4, r3, r1
 8000c84:	1a87      	subs	r7, r0, r2
 8000c86:	42a3      	cmp	r3, r4
 8000c88:	4192      	sbcs	r2, r2
 8000c8a:	4252      	negs	r2, r2
 8000c8c:	1abf      	subs	r7, r7, r2
 8000c8e:	023a      	lsls	r2, r7, #8
 8000c90:	d53d      	bpl.n	8000d0e <__aeabi_dadd+0x632>
 8000c92:	1acc      	subs	r4, r1, r3
 8000c94:	42a1      	cmp	r1, r4
 8000c96:	4189      	sbcs	r1, r1
 8000c98:	4643      	mov	r3, r8
 8000c9a:	4249      	negs	r1, r1
 8000c9c:	1a1f      	subs	r7, r3, r0
 8000c9e:	4655      	mov	r5, sl
 8000ca0:	1a7f      	subs	r7, r7, r1
 8000ca2:	e595      	b.n	80007d0 <__aeabi_dadd+0xf4>
 8000ca4:	077b      	lsls	r3, r7, #29
 8000ca6:	08c9      	lsrs	r1, r1, #3
 8000ca8:	430b      	orrs	r3, r1
 8000caa:	08f8      	lsrs	r0, r7, #3
 8000cac:	e643      	b.n	8000936 <__aeabi_dadd+0x25a>
 8000cae:	4644      	mov	r4, r8
 8000cb0:	08db      	lsrs	r3, r3, #3
 8000cb2:	430c      	orrs	r4, r1
 8000cb4:	d130      	bne.n	8000d18 <__aeabi_dadd+0x63c>
 8000cb6:	0742      	lsls	r2, r0, #29
 8000cb8:	4313      	orrs	r3, r2
 8000cba:	08c0      	lsrs	r0, r0, #3
 8000cbc:	e65c      	b.n	8000978 <__aeabi_dadd+0x29c>
 8000cbe:	077b      	lsls	r3, r7, #29
 8000cc0:	08c9      	lsrs	r1, r1, #3
 8000cc2:	430b      	orrs	r3, r1
 8000cc4:	08f8      	lsrs	r0, r7, #3
 8000cc6:	e639      	b.n	800093c <__aeabi_dadd+0x260>
 8000cc8:	185c      	adds	r4, r3, r1
 8000cca:	429c      	cmp	r4, r3
 8000ccc:	419b      	sbcs	r3, r3
 8000cce:	4440      	add	r0, r8
 8000cd0:	425b      	negs	r3, r3
 8000cd2:	18c7      	adds	r7, r0, r3
 8000cd4:	023b      	lsls	r3, r7, #8
 8000cd6:	d400      	bmi.n	8000cda <__aeabi_dadd+0x5fe>
 8000cd8:	e625      	b.n	8000926 <__aeabi_dadd+0x24a>
 8000cda:	4b1d      	ldr	r3, [pc, #116]	; (8000d50 <__aeabi_dadd+0x674>)
 8000cdc:	2601      	movs	r6, #1
 8000cde:	401f      	ands	r7, r3
 8000ce0:	e621      	b.n	8000926 <__aeabi_dadd+0x24a>
 8000ce2:	0004      	movs	r4, r0
 8000ce4:	3a20      	subs	r2, #32
 8000ce6:	40d4      	lsrs	r4, r2
 8000ce8:	4662      	mov	r2, ip
 8000cea:	2a20      	cmp	r2, #32
 8000cec:	d004      	beq.n	8000cf8 <__aeabi_dadd+0x61c>
 8000cee:	2240      	movs	r2, #64	; 0x40
 8000cf0:	4666      	mov	r6, ip
 8000cf2:	1b92      	subs	r2, r2, r6
 8000cf4:	4090      	lsls	r0, r2
 8000cf6:	4303      	orrs	r3, r0
 8000cf8:	1e5a      	subs	r2, r3, #1
 8000cfa:	4193      	sbcs	r3, r2
 8000cfc:	431c      	orrs	r4, r3
 8000cfe:	e67e      	b.n	80009fe <__aeabi_dadd+0x322>
 8000d00:	185c      	adds	r4, r3, r1
 8000d02:	428c      	cmp	r4, r1
 8000d04:	4189      	sbcs	r1, r1
 8000d06:	4440      	add	r0, r8
 8000d08:	4249      	negs	r1, r1
 8000d0a:	1847      	adds	r7, r0, r1
 8000d0c:	e6dd      	b.n	8000aca <__aeabi_dadd+0x3ee>
 8000d0e:	0023      	movs	r3, r4
 8000d10:	433b      	orrs	r3, r7
 8000d12:	d100      	bne.n	8000d16 <__aeabi_dadd+0x63a>
 8000d14:	e6ad      	b.n	8000a72 <__aeabi_dadd+0x396>
 8000d16:	e606      	b.n	8000926 <__aeabi_dadd+0x24a>
 8000d18:	0744      	lsls	r4, r0, #29
 8000d1a:	4323      	orrs	r3, r4
 8000d1c:	2480      	movs	r4, #128	; 0x80
 8000d1e:	08c0      	lsrs	r0, r0, #3
 8000d20:	0324      	lsls	r4, r4, #12
 8000d22:	4220      	tst	r0, r4
 8000d24:	d008      	beq.n	8000d38 <__aeabi_dadd+0x65c>
 8000d26:	4642      	mov	r2, r8
 8000d28:	08d6      	lsrs	r6, r2, #3
 8000d2a:	4226      	tst	r6, r4
 8000d2c:	d104      	bne.n	8000d38 <__aeabi_dadd+0x65c>
 8000d2e:	4655      	mov	r5, sl
 8000d30:	0030      	movs	r0, r6
 8000d32:	08cb      	lsrs	r3, r1, #3
 8000d34:	0751      	lsls	r1, r2, #29
 8000d36:	430b      	orrs	r3, r1
 8000d38:	0f5a      	lsrs	r2, r3, #29
 8000d3a:	00db      	lsls	r3, r3, #3
 8000d3c:	08db      	lsrs	r3, r3, #3
 8000d3e:	0752      	lsls	r2, r2, #29
 8000d40:	4313      	orrs	r3, r2
 8000d42:	e619      	b.n	8000978 <__aeabi_dadd+0x29c>
 8000d44:	2300      	movs	r3, #0
 8000d46:	4a01      	ldr	r2, [pc, #4]	; (8000d4c <__aeabi_dadd+0x670>)
 8000d48:	001f      	movs	r7, r3
 8000d4a:	e55e      	b.n	800080a <__aeabi_dadd+0x12e>
 8000d4c:	000007ff 	.word	0x000007ff
 8000d50:	ff7fffff 	.word	0xff7fffff

08000d54 <__aeabi_ddiv>:
 8000d54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d56:	4657      	mov	r7, sl
 8000d58:	464e      	mov	r6, r9
 8000d5a:	4645      	mov	r5, r8
 8000d5c:	46de      	mov	lr, fp
 8000d5e:	b5e0      	push	{r5, r6, r7, lr}
 8000d60:	4681      	mov	r9, r0
 8000d62:	0005      	movs	r5, r0
 8000d64:	030c      	lsls	r4, r1, #12
 8000d66:	0048      	lsls	r0, r1, #1
 8000d68:	4692      	mov	sl, r2
 8000d6a:	001f      	movs	r7, r3
 8000d6c:	b085      	sub	sp, #20
 8000d6e:	0b24      	lsrs	r4, r4, #12
 8000d70:	0d40      	lsrs	r0, r0, #21
 8000d72:	0fce      	lsrs	r6, r1, #31
 8000d74:	2800      	cmp	r0, #0
 8000d76:	d100      	bne.n	8000d7a <__aeabi_ddiv+0x26>
 8000d78:	e156      	b.n	8001028 <__aeabi_ddiv+0x2d4>
 8000d7a:	4bd4      	ldr	r3, [pc, #848]	; (80010cc <__aeabi_ddiv+0x378>)
 8000d7c:	4298      	cmp	r0, r3
 8000d7e:	d100      	bne.n	8000d82 <__aeabi_ddiv+0x2e>
 8000d80:	e172      	b.n	8001068 <__aeabi_ddiv+0x314>
 8000d82:	0f6b      	lsrs	r3, r5, #29
 8000d84:	00e4      	lsls	r4, r4, #3
 8000d86:	431c      	orrs	r4, r3
 8000d88:	2380      	movs	r3, #128	; 0x80
 8000d8a:	041b      	lsls	r3, r3, #16
 8000d8c:	4323      	orrs	r3, r4
 8000d8e:	4698      	mov	r8, r3
 8000d90:	4bcf      	ldr	r3, [pc, #828]	; (80010d0 <__aeabi_ddiv+0x37c>)
 8000d92:	00ed      	lsls	r5, r5, #3
 8000d94:	469b      	mov	fp, r3
 8000d96:	2300      	movs	r3, #0
 8000d98:	4699      	mov	r9, r3
 8000d9a:	4483      	add	fp, r0
 8000d9c:	9300      	str	r3, [sp, #0]
 8000d9e:	033c      	lsls	r4, r7, #12
 8000da0:	007b      	lsls	r3, r7, #1
 8000da2:	4650      	mov	r0, sl
 8000da4:	0b24      	lsrs	r4, r4, #12
 8000da6:	0d5b      	lsrs	r3, r3, #21
 8000da8:	0fff      	lsrs	r7, r7, #31
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d100      	bne.n	8000db0 <__aeabi_ddiv+0x5c>
 8000dae:	e11f      	b.n	8000ff0 <__aeabi_ddiv+0x29c>
 8000db0:	4ac6      	ldr	r2, [pc, #792]	; (80010cc <__aeabi_ddiv+0x378>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d100      	bne.n	8000db8 <__aeabi_ddiv+0x64>
 8000db6:	e162      	b.n	800107e <__aeabi_ddiv+0x32a>
 8000db8:	49c5      	ldr	r1, [pc, #788]	; (80010d0 <__aeabi_ddiv+0x37c>)
 8000dba:	0f42      	lsrs	r2, r0, #29
 8000dbc:	468c      	mov	ip, r1
 8000dbe:	00e4      	lsls	r4, r4, #3
 8000dc0:	4659      	mov	r1, fp
 8000dc2:	4314      	orrs	r4, r2
 8000dc4:	2280      	movs	r2, #128	; 0x80
 8000dc6:	4463      	add	r3, ip
 8000dc8:	0412      	lsls	r2, r2, #16
 8000dca:	1acb      	subs	r3, r1, r3
 8000dcc:	4314      	orrs	r4, r2
 8000dce:	469b      	mov	fp, r3
 8000dd0:	00c2      	lsls	r2, r0, #3
 8000dd2:	2000      	movs	r0, #0
 8000dd4:	0033      	movs	r3, r6
 8000dd6:	407b      	eors	r3, r7
 8000dd8:	469a      	mov	sl, r3
 8000dda:	464b      	mov	r3, r9
 8000ddc:	2b0f      	cmp	r3, #15
 8000dde:	d827      	bhi.n	8000e30 <__aeabi_ddiv+0xdc>
 8000de0:	49bc      	ldr	r1, [pc, #752]	; (80010d4 <__aeabi_ddiv+0x380>)
 8000de2:	009b      	lsls	r3, r3, #2
 8000de4:	58cb      	ldr	r3, [r1, r3]
 8000de6:	469f      	mov	pc, r3
 8000de8:	46b2      	mov	sl, r6
 8000dea:	9b00      	ldr	r3, [sp, #0]
 8000dec:	2b02      	cmp	r3, #2
 8000dee:	d016      	beq.n	8000e1e <__aeabi_ddiv+0xca>
 8000df0:	2b03      	cmp	r3, #3
 8000df2:	d100      	bne.n	8000df6 <__aeabi_ddiv+0xa2>
 8000df4:	e28e      	b.n	8001314 <__aeabi_ddiv+0x5c0>
 8000df6:	2b01      	cmp	r3, #1
 8000df8:	d000      	beq.n	8000dfc <__aeabi_ddiv+0xa8>
 8000dfa:	e0d9      	b.n	8000fb0 <__aeabi_ddiv+0x25c>
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	2400      	movs	r4, #0
 8000e00:	2500      	movs	r5, #0
 8000e02:	4652      	mov	r2, sl
 8000e04:	051b      	lsls	r3, r3, #20
 8000e06:	4323      	orrs	r3, r4
 8000e08:	07d2      	lsls	r2, r2, #31
 8000e0a:	4313      	orrs	r3, r2
 8000e0c:	0028      	movs	r0, r5
 8000e0e:	0019      	movs	r1, r3
 8000e10:	b005      	add	sp, #20
 8000e12:	bcf0      	pop	{r4, r5, r6, r7}
 8000e14:	46bb      	mov	fp, r7
 8000e16:	46b2      	mov	sl, r6
 8000e18:	46a9      	mov	r9, r5
 8000e1a:	46a0      	mov	r8, r4
 8000e1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e1e:	2400      	movs	r4, #0
 8000e20:	2500      	movs	r5, #0
 8000e22:	4baa      	ldr	r3, [pc, #680]	; (80010cc <__aeabi_ddiv+0x378>)
 8000e24:	e7ed      	b.n	8000e02 <__aeabi_ddiv+0xae>
 8000e26:	46ba      	mov	sl, r7
 8000e28:	46a0      	mov	r8, r4
 8000e2a:	0015      	movs	r5, r2
 8000e2c:	9000      	str	r0, [sp, #0]
 8000e2e:	e7dc      	b.n	8000dea <__aeabi_ddiv+0x96>
 8000e30:	4544      	cmp	r4, r8
 8000e32:	d200      	bcs.n	8000e36 <__aeabi_ddiv+0xe2>
 8000e34:	e1c7      	b.n	80011c6 <__aeabi_ddiv+0x472>
 8000e36:	d100      	bne.n	8000e3a <__aeabi_ddiv+0xe6>
 8000e38:	e1c2      	b.n	80011c0 <__aeabi_ddiv+0x46c>
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	425b      	negs	r3, r3
 8000e3e:	469c      	mov	ip, r3
 8000e40:	002e      	movs	r6, r5
 8000e42:	4640      	mov	r0, r8
 8000e44:	2500      	movs	r5, #0
 8000e46:	44e3      	add	fp, ip
 8000e48:	0223      	lsls	r3, r4, #8
 8000e4a:	0e14      	lsrs	r4, r2, #24
 8000e4c:	431c      	orrs	r4, r3
 8000e4e:	0c1b      	lsrs	r3, r3, #16
 8000e50:	4699      	mov	r9, r3
 8000e52:	0423      	lsls	r3, r4, #16
 8000e54:	0c1f      	lsrs	r7, r3, #16
 8000e56:	0212      	lsls	r2, r2, #8
 8000e58:	4649      	mov	r1, r9
 8000e5a:	9200      	str	r2, [sp, #0]
 8000e5c:	9701      	str	r7, [sp, #4]
 8000e5e:	f7ff f9f5 	bl	800024c <__aeabi_uidivmod>
 8000e62:	0002      	movs	r2, r0
 8000e64:	437a      	muls	r2, r7
 8000e66:	040b      	lsls	r3, r1, #16
 8000e68:	0c31      	lsrs	r1, r6, #16
 8000e6a:	4680      	mov	r8, r0
 8000e6c:	4319      	orrs	r1, r3
 8000e6e:	428a      	cmp	r2, r1
 8000e70:	d907      	bls.n	8000e82 <__aeabi_ddiv+0x12e>
 8000e72:	2301      	movs	r3, #1
 8000e74:	425b      	negs	r3, r3
 8000e76:	469c      	mov	ip, r3
 8000e78:	1909      	adds	r1, r1, r4
 8000e7a:	44e0      	add	r8, ip
 8000e7c:	428c      	cmp	r4, r1
 8000e7e:	d800      	bhi.n	8000e82 <__aeabi_ddiv+0x12e>
 8000e80:	e207      	b.n	8001292 <__aeabi_ddiv+0x53e>
 8000e82:	1a88      	subs	r0, r1, r2
 8000e84:	4649      	mov	r1, r9
 8000e86:	f7ff f9e1 	bl	800024c <__aeabi_uidivmod>
 8000e8a:	0409      	lsls	r1, r1, #16
 8000e8c:	468c      	mov	ip, r1
 8000e8e:	0431      	lsls	r1, r6, #16
 8000e90:	4666      	mov	r6, ip
 8000e92:	9a01      	ldr	r2, [sp, #4]
 8000e94:	0c09      	lsrs	r1, r1, #16
 8000e96:	4342      	muls	r2, r0
 8000e98:	0003      	movs	r3, r0
 8000e9a:	4331      	orrs	r1, r6
 8000e9c:	428a      	cmp	r2, r1
 8000e9e:	d904      	bls.n	8000eaa <__aeabi_ddiv+0x156>
 8000ea0:	1909      	adds	r1, r1, r4
 8000ea2:	3b01      	subs	r3, #1
 8000ea4:	428c      	cmp	r4, r1
 8000ea6:	d800      	bhi.n	8000eaa <__aeabi_ddiv+0x156>
 8000ea8:	e1ed      	b.n	8001286 <__aeabi_ddiv+0x532>
 8000eaa:	1a88      	subs	r0, r1, r2
 8000eac:	4642      	mov	r2, r8
 8000eae:	0412      	lsls	r2, r2, #16
 8000eb0:	431a      	orrs	r2, r3
 8000eb2:	4690      	mov	r8, r2
 8000eb4:	4641      	mov	r1, r8
 8000eb6:	9b00      	ldr	r3, [sp, #0]
 8000eb8:	040e      	lsls	r6, r1, #16
 8000eba:	0c1b      	lsrs	r3, r3, #16
 8000ebc:	001f      	movs	r7, r3
 8000ebe:	9302      	str	r3, [sp, #8]
 8000ec0:	9b00      	ldr	r3, [sp, #0]
 8000ec2:	0c36      	lsrs	r6, r6, #16
 8000ec4:	041b      	lsls	r3, r3, #16
 8000ec6:	0c19      	lsrs	r1, r3, #16
 8000ec8:	000b      	movs	r3, r1
 8000eca:	4373      	muls	r3, r6
 8000ecc:	0c12      	lsrs	r2, r2, #16
 8000ece:	437e      	muls	r6, r7
 8000ed0:	9103      	str	r1, [sp, #12]
 8000ed2:	4351      	muls	r1, r2
 8000ed4:	437a      	muls	r2, r7
 8000ed6:	0c1f      	lsrs	r7, r3, #16
 8000ed8:	46bc      	mov	ip, r7
 8000eda:	1876      	adds	r6, r6, r1
 8000edc:	4466      	add	r6, ip
 8000ede:	42b1      	cmp	r1, r6
 8000ee0:	d903      	bls.n	8000eea <__aeabi_ddiv+0x196>
 8000ee2:	2180      	movs	r1, #128	; 0x80
 8000ee4:	0249      	lsls	r1, r1, #9
 8000ee6:	468c      	mov	ip, r1
 8000ee8:	4462      	add	r2, ip
 8000eea:	0c31      	lsrs	r1, r6, #16
 8000eec:	188a      	adds	r2, r1, r2
 8000eee:	0431      	lsls	r1, r6, #16
 8000ef0:	041e      	lsls	r6, r3, #16
 8000ef2:	0c36      	lsrs	r6, r6, #16
 8000ef4:	198e      	adds	r6, r1, r6
 8000ef6:	4290      	cmp	r0, r2
 8000ef8:	d302      	bcc.n	8000f00 <__aeabi_ddiv+0x1ac>
 8000efa:	d112      	bne.n	8000f22 <__aeabi_ddiv+0x1ce>
 8000efc:	42b5      	cmp	r5, r6
 8000efe:	d210      	bcs.n	8000f22 <__aeabi_ddiv+0x1ce>
 8000f00:	4643      	mov	r3, r8
 8000f02:	1e59      	subs	r1, r3, #1
 8000f04:	9b00      	ldr	r3, [sp, #0]
 8000f06:	469c      	mov	ip, r3
 8000f08:	4465      	add	r5, ip
 8000f0a:	001f      	movs	r7, r3
 8000f0c:	429d      	cmp	r5, r3
 8000f0e:	419b      	sbcs	r3, r3
 8000f10:	425b      	negs	r3, r3
 8000f12:	191b      	adds	r3, r3, r4
 8000f14:	18c0      	adds	r0, r0, r3
 8000f16:	4284      	cmp	r4, r0
 8000f18:	d200      	bcs.n	8000f1c <__aeabi_ddiv+0x1c8>
 8000f1a:	e1a0      	b.n	800125e <__aeabi_ddiv+0x50a>
 8000f1c:	d100      	bne.n	8000f20 <__aeabi_ddiv+0x1cc>
 8000f1e:	e19b      	b.n	8001258 <__aeabi_ddiv+0x504>
 8000f20:	4688      	mov	r8, r1
 8000f22:	1bae      	subs	r6, r5, r6
 8000f24:	42b5      	cmp	r5, r6
 8000f26:	41ad      	sbcs	r5, r5
 8000f28:	1a80      	subs	r0, r0, r2
 8000f2a:	426d      	negs	r5, r5
 8000f2c:	1b40      	subs	r0, r0, r5
 8000f2e:	4284      	cmp	r4, r0
 8000f30:	d100      	bne.n	8000f34 <__aeabi_ddiv+0x1e0>
 8000f32:	e1d5      	b.n	80012e0 <__aeabi_ddiv+0x58c>
 8000f34:	4649      	mov	r1, r9
 8000f36:	f7ff f989 	bl	800024c <__aeabi_uidivmod>
 8000f3a:	9a01      	ldr	r2, [sp, #4]
 8000f3c:	040b      	lsls	r3, r1, #16
 8000f3e:	4342      	muls	r2, r0
 8000f40:	0c31      	lsrs	r1, r6, #16
 8000f42:	0005      	movs	r5, r0
 8000f44:	4319      	orrs	r1, r3
 8000f46:	428a      	cmp	r2, r1
 8000f48:	d900      	bls.n	8000f4c <__aeabi_ddiv+0x1f8>
 8000f4a:	e16c      	b.n	8001226 <__aeabi_ddiv+0x4d2>
 8000f4c:	1a88      	subs	r0, r1, r2
 8000f4e:	4649      	mov	r1, r9
 8000f50:	f7ff f97c 	bl	800024c <__aeabi_uidivmod>
 8000f54:	9a01      	ldr	r2, [sp, #4]
 8000f56:	0436      	lsls	r6, r6, #16
 8000f58:	4342      	muls	r2, r0
 8000f5a:	0409      	lsls	r1, r1, #16
 8000f5c:	0c36      	lsrs	r6, r6, #16
 8000f5e:	0003      	movs	r3, r0
 8000f60:	430e      	orrs	r6, r1
 8000f62:	42b2      	cmp	r2, r6
 8000f64:	d900      	bls.n	8000f68 <__aeabi_ddiv+0x214>
 8000f66:	e153      	b.n	8001210 <__aeabi_ddiv+0x4bc>
 8000f68:	9803      	ldr	r0, [sp, #12]
 8000f6a:	1ab6      	subs	r6, r6, r2
 8000f6c:	0002      	movs	r2, r0
 8000f6e:	042d      	lsls	r5, r5, #16
 8000f70:	431d      	orrs	r5, r3
 8000f72:	9f02      	ldr	r7, [sp, #8]
 8000f74:	042b      	lsls	r3, r5, #16
 8000f76:	0c1b      	lsrs	r3, r3, #16
 8000f78:	435a      	muls	r2, r3
 8000f7a:	437b      	muls	r3, r7
 8000f7c:	469c      	mov	ip, r3
 8000f7e:	0c29      	lsrs	r1, r5, #16
 8000f80:	4348      	muls	r0, r1
 8000f82:	0c13      	lsrs	r3, r2, #16
 8000f84:	4484      	add	ip, r0
 8000f86:	4463      	add	r3, ip
 8000f88:	4379      	muls	r1, r7
 8000f8a:	4298      	cmp	r0, r3
 8000f8c:	d903      	bls.n	8000f96 <__aeabi_ddiv+0x242>
 8000f8e:	2080      	movs	r0, #128	; 0x80
 8000f90:	0240      	lsls	r0, r0, #9
 8000f92:	4684      	mov	ip, r0
 8000f94:	4461      	add	r1, ip
 8000f96:	0c18      	lsrs	r0, r3, #16
 8000f98:	0412      	lsls	r2, r2, #16
 8000f9a:	041b      	lsls	r3, r3, #16
 8000f9c:	0c12      	lsrs	r2, r2, #16
 8000f9e:	1841      	adds	r1, r0, r1
 8000fa0:	189b      	adds	r3, r3, r2
 8000fa2:	428e      	cmp	r6, r1
 8000fa4:	d200      	bcs.n	8000fa8 <__aeabi_ddiv+0x254>
 8000fa6:	e0ff      	b.n	80011a8 <__aeabi_ddiv+0x454>
 8000fa8:	d100      	bne.n	8000fac <__aeabi_ddiv+0x258>
 8000faa:	e0fa      	b.n	80011a2 <__aeabi_ddiv+0x44e>
 8000fac:	2301      	movs	r3, #1
 8000fae:	431d      	orrs	r5, r3
 8000fb0:	4a49      	ldr	r2, [pc, #292]	; (80010d8 <__aeabi_ddiv+0x384>)
 8000fb2:	445a      	add	r2, fp
 8000fb4:	2a00      	cmp	r2, #0
 8000fb6:	dc00      	bgt.n	8000fba <__aeabi_ddiv+0x266>
 8000fb8:	e0aa      	b.n	8001110 <__aeabi_ddiv+0x3bc>
 8000fba:	076b      	lsls	r3, r5, #29
 8000fbc:	d000      	beq.n	8000fc0 <__aeabi_ddiv+0x26c>
 8000fbe:	e13d      	b.n	800123c <__aeabi_ddiv+0x4e8>
 8000fc0:	08ed      	lsrs	r5, r5, #3
 8000fc2:	4643      	mov	r3, r8
 8000fc4:	01db      	lsls	r3, r3, #7
 8000fc6:	d506      	bpl.n	8000fd6 <__aeabi_ddiv+0x282>
 8000fc8:	4642      	mov	r2, r8
 8000fca:	4b44      	ldr	r3, [pc, #272]	; (80010dc <__aeabi_ddiv+0x388>)
 8000fcc:	401a      	ands	r2, r3
 8000fce:	4690      	mov	r8, r2
 8000fd0:	2280      	movs	r2, #128	; 0x80
 8000fd2:	00d2      	lsls	r2, r2, #3
 8000fd4:	445a      	add	r2, fp
 8000fd6:	4b42      	ldr	r3, [pc, #264]	; (80010e0 <__aeabi_ddiv+0x38c>)
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	dd00      	ble.n	8000fde <__aeabi_ddiv+0x28a>
 8000fdc:	e71f      	b.n	8000e1e <__aeabi_ddiv+0xca>
 8000fde:	4643      	mov	r3, r8
 8000fe0:	075b      	lsls	r3, r3, #29
 8000fe2:	431d      	orrs	r5, r3
 8000fe4:	4643      	mov	r3, r8
 8000fe6:	0552      	lsls	r2, r2, #21
 8000fe8:	025c      	lsls	r4, r3, #9
 8000fea:	0b24      	lsrs	r4, r4, #12
 8000fec:	0d53      	lsrs	r3, r2, #21
 8000fee:	e708      	b.n	8000e02 <__aeabi_ddiv+0xae>
 8000ff0:	4652      	mov	r2, sl
 8000ff2:	4322      	orrs	r2, r4
 8000ff4:	d100      	bne.n	8000ff8 <__aeabi_ddiv+0x2a4>
 8000ff6:	e07b      	b.n	80010f0 <__aeabi_ddiv+0x39c>
 8000ff8:	2c00      	cmp	r4, #0
 8000ffa:	d100      	bne.n	8000ffe <__aeabi_ddiv+0x2aa>
 8000ffc:	e0fa      	b.n	80011f4 <__aeabi_ddiv+0x4a0>
 8000ffe:	0020      	movs	r0, r4
 8001000:	f001 f952 	bl	80022a8 <__clzsi2>
 8001004:	0002      	movs	r2, r0
 8001006:	3a0b      	subs	r2, #11
 8001008:	231d      	movs	r3, #29
 800100a:	0001      	movs	r1, r0
 800100c:	1a9b      	subs	r3, r3, r2
 800100e:	4652      	mov	r2, sl
 8001010:	3908      	subs	r1, #8
 8001012:	40da      	lsrs	r2, r3
 8001014:	408c      	lsls	r4, r1
 8001016:	4314      	orrs	r4, r2
 8001018:	4652      	mov	r2, sl
 800101a:	408a      	lsls	r2, r1
 800101c:	4b31      	ldr	r3, [pc, #196]	; (80010e4 <__aeabi_ddiv+0x390>)
 800101e:	4458      	add	r0, fp
 8001020:	469b      	mov	fp, r3
 8001022:	4483      	add	fp, r0
 8001024:	2000      	movs	r0, #0
 8001026:	e6d5      	b.n	8000dd4 <__aeabi_ddiv+0x80>
 8001028:	464b      	mov	r3, r9
 800102a:	4323      	orrs	r3, r4
 800102c:	4698      	mov	r8, r3
 800102e:	d044      	beq.n	80010ba <__aeabi_ddiv+0x366>
 8001030:	2c00      	cmp	r4, #0
 8001032:	d100      	bne.n	8001036 <__aeabi_ddiv+0x2e2>
 8001034:	e0ce      	b.n	80011d4 <__aeabi_ddiv+0x480>
 8001036:	0020      	movs	r0, r4
 8001038:	f001 f936 	bl	80022a8 <__clzsi2>
 800103c:	0001      	movs	r1, r0
 800103e:	0002      	movs	r2, r0
 8001040:	390b      	subs	r1, #11
 8001042:	231d      	movs	r3, #29
 8001044:	1a5b      	subs	r3, r3, r1
 8001046:	4649      	mov	r1, r9
 8001048:	0010      	movs	r0, r2
 800104a:	40d9      	lsrs	r1, r3
 800104c:	3808      	subs	r0, #8
 800104e:	4084      	lsls	r4, r0
 8001050:	000b      	movs	r3, r1
 8001052:	464d      	mov	r5, r9
 8001054:	4323      	orrs	r3, r4
 8001056:	4698      	mov	r8, r3
 8001058:	4085      	lsls	r5, r0
 800105a:	4823      	ldr	r0, [pc, #140]	; (80010e8 <__aeabi_ddiv+0x394>)
 800105c:	1a83      	subs	r3, r0, r2
 800105e:	469b      	mov	fp, r3
 8001060:	2300      	movs	r3, #0
 8001062:	4699      	mov	r9, r3
 8001064:	9300      	str	r3, [sp, #0]
 8001066:	e69a      	b.n	8000d9e <__aeabi_ddiv+0x4a>
 8001068:	464b      	mov	r3, r9
 800106a:	4323      	orrs	r3, r4
 800106c:	4698      	mov	r8, r3
 800106e:	d11d      	bne.n	80010ac <__aeabi_ddiv+0x358>
 8001070:	2308      	movs	r3, #8
 8001072:	4699      	mov	r9, r3
 8001074:	3b06      	subs	r3, #6
 8001076:	2500      	movs	r5, #0
 8001078:	4683      	mov	fp, r0
 800107a:	9300      	str	r3, [sp, #0]
 800107c:	e68f      	b.n	8000d9e <__aeabi_ddiv+0x4a>
 800107e:	4652      	mov	r2, sl
 8001080:	4322      	orrs	r2, r4
 8001082:	d109      	bne.n	8001098 <__aeabi_ddiv+0x344>
 8001084:	2302      	movs	r3, #2
 8001086:	4649      	mov	r1, r9
 8001088:	4319      	orrs	r1, r3
 800108a:	4b18      	ldr	r3, [pc, #96]	; (80010ec <__aeabi_ddiv+0x398>)
 800108c:	4689      	mov	r9, r1
 800108e:	469c      	mov	ip, r3
 8001090:	2400      	movs	r4, #0
 8001092:	2002      	movs	r0, #2
 8001094:	44e3      	add	fp, ip
 8001096:	e69d      	b.n	8000dd4 <__aeabi_ddiv+0x80>
 8001098:	2303      	movs	r3, #3
 800109a:	464a      	mov	r2, r9
 800109c:	431a      	orrs	r2, r3
 800109e:	4b13      	ldr	r3, [pc, #76]	; (80010ec <__aeabi_ddiv+0x398>)
 80010a0:	4691      	mov	r9, r2
 80010a2:	469c      	mov	ip, r3
 80010a4:	4652      	mov	r2, sl
 80010a6:	2003      	movs	r0, #3
 80010a8:	44e3      	add	fp, ip
 80010aa:	e693      	b.n	8000dd4 <__aeabi_ddiv+0x80>
 80010ac:	230c      	movs	r3, #12
 80010ae:	4699      	mov	r9, r3
 80010b0:	3b09      	subs	r3, #9
 80010b2:	46a0      	mov	r8, r4
 80010b4:	4683      	mov	fp, r0
 80010b6:	9300      	str	r3, [sp, #0]
 80010b8:	e671      	b.n	8000d9e <__aeabi_ddiv+0x4a>
 80010ba:	2304      	movs	r3, #4
 80010bc:	4699      	mov	r9, r3
 80010be:	2300      	movs	r3, #0
 80010c0:	469b      	mov	fp, r3
 80010c2:	3301      	adds	r3, #1
 80010c4:	2500      	movs	r5, #0
 80010c6:	9300      	str	r3, [sp, #0]
 80010c8:	e669      	b.n	8000d9e <__aeabi_ddiv+0x4a>
 80010ca:	46c0      	nop			; (mov r8, r8)
 80010cc:	000007ff 	.word	0x000007ff
 80010d0:	fffffc01 	.word	0xfffffc01
 80010d4:	08009d84 	.word	0x08009d84
 80010d8:	000003ff 	.word	0x000003ff
 80010dc:	feffffff 	.word	0xfeffffff
 80010e0:	000007fe 	.word	0x000007fe
 80010e4:	000003f3 	.word	0x000003f3
 80010e8:	fffffc0d 	.word	0xfffffc0d
 80010ec:	fffff801 	.word	0xfffff801
 80010f0:	4649      	mov	r1, r9
 80010f2:	2301      	movs	r3, #1
 80010f4:	4319      	orrs	r1, r3
 80010f6:	4689      	mov	r9, r1
 80010f8:	2400      	movs	r4, #0
 80010fa:	2001      	movs	r0, #1
 80010fc:	e66a      	b.n	8000dd4 <__aeabi_ddiv+0x80>
 80010fe:	2300      	movs	r3, #0
 8001100:	2480      	movs	r4, #128	; 0x80
 8001102:	469a      	mov	sl, r3
 8001104:	2500      	movs	r5, #0
 8001106:	4b8a      	ldr	r3, [pc, #552]	; (8001330 <__aeabi_ddiv+0x5dc>)
 8001108:	0324      	lsls	r4, r4, #12
 800110a:	e67a      	b.n	8000e02 <__aeabi_ddiv+0xae>
 800110c:	2501      	movs	r5, #1
 800110e:	426d      	negs	r5, r5
 8001110:	2301      	movs	r3, #1
 8001112:	1a9b      	subs	r3, r3, r2
 8001114:	2b38      	cmp	r3, #56	; 0x38
 8001116:	dd00      	ble.n	800111a <__aeabi_ddiv+0x3c6>
 8001118:	e670      	b.n	8000dfc <__aeabi_ddiv+0xa8>
 800111a:	2b1f      	cmp	r3, #31
 800111c:	dc00      	bgt.n	8001120 <__aeabi_ddiv+0x3cc>
 800111e:	e0bf      	b.n	80012a0 <__aeabi_ddiv+0x54c>
 8001120:	211f      	movs	r1, #31
 8001122:	4249      	negs	r1, r1
 8001124:	1a8a      	subs	r2, r1, r2
 8001126:	4641      	mov	r1, r8
 8001128:	40d1      	lsrs	r1, r2
 800112a:	000a      	movs	r2, r1
 800112c:	2b20      	cmp	r3, #32
 800112e:	d004      	beq.n	800113a <__aeabi_ddiv+0x3e6>
 8001130:	4641      	mov	r1, r8
 8001132:	4b80      	ldr	r3, [pc, #512]	; (8001334 <__aeabi_ddiv+0x5e0>)
 8001134:	445b      	add	r3, fp
 8001136:	4099      	lsls	r1, r3
 8001138:	430d      	orrs	r5, r1
 800113a:	1e6b      	subs	r3, r5, #1
 800113c:	419d      	sbcs	r5, r3
 800113e:	2307      	movs	r3, #7
 8001140:	432a      	orrs	r2, r5
 8001142:	001d      	movs	r5, r3
 8001144:	2400      	movs	r4, #0
 8001146:	4015      	ands	r5, r2
 8001148:	4213      	tst	r3, r2
 800114a:	d100      	bne.n	800114e <__aeabi_ddiv+0x3fa>
 800114c:	e0d4      	b.n	80012f8 <__aeabi_ddiv+0x5a4>
 800114e:	210f      	movs	r1, #15
 8001150:	2300      	movs	r3, #0
 8001152:	4011      	ands	r1, r2
 8001154:	2904      	cmp	r1, #4
 8001156:	d100      	bne.n	800115a <__aeabi_ddiv+0x406>
 8001158:	e0cb      	b.n	80012f2 <__aeabi_ddiv+0x59e>
 800115a:	1d11      	adds	r1, r2, #4
 800115c:	4291      	cmp	r1, r2
 800115e:	4192      	sbcs	r2, r2
 8001160:	4252      	negs	r2, r2
 8001162:	189b      	adds	r3, r3, r2
 8001164:	000a      	movs	r2, r1
 8001166:	0219      	lsls	r1, r3, #8
 8001168:	d400      	bmi.n	800116c <__aeabi_ddiv+0x418>
 800116a:	e0c2      	b.n	80012f2 <__aeabi_ddiv+0x59e>
 800116c:	2301      	movs	r3, #1
 800116e:	2400      	movs	r4, #0
 8001170:	2500      	movs	r5, #0
 8001172:	e646      	b.n	8000e02 <__aeabi_ddiv+0xae>
 8001174:	2380      	movs	r3, #128	; 0x80
 8001176:	4641      	mov	r1, r8
 8001178:	031b      	lsls	r3, r3, #12
 800117a:	4219      	tst	r1, r3
 800117c:	d008      	beq.n	8001190 <__aeabi_ddiv+0x43c>
 800117e:	421c      	tst	r4, r3
 8001180:	d106      	bne.n	8001190 <__aeabi_ddiv+0x43c>
 8001182:	431c      	orrs	r4, r3
 8001184:	0324      	lsls	r4, r4, #12
 8001186:	46ba      	mov	sl, r7
 8001188:	0015      	movs	r5, r2
 800118a:	4b69      	ldr	r3, [pc, #420]	; (8001330 <__aeabi_ddiv+0x5dc>)
 800118c:	0b24      	lsrs	r4, r4, #12
 800118e:	e638      	b.n	8000e02 <__aeabi_ddiv+0xae>
 8001190:	2480      	movs	r4, #128	; 0x80
 8001192:	4643      	mov	r3, r8
 8001194:	0324      	lsls	r4, r4, #12
 8001196:	431c      	orrs	r4, r3
 8001198:	0324      	lsls	r4, r4, #12
 800119a:	46b2      	mov	sl, r6
 800119c:	4b64      	ldr	r3, [pc, #400]	; (8001330 <__aeabi_ddiv+0x5dc>)
 800119e:	0b24      	lsrs	r4, r4, #12
 80011a0:	e62f      	b.n	8000e02 <__aeabi_ddiv+0xae>
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d100      	bne.n	80011a8 <__aeabi_ddiv+0x454>
 80011a6:	e703      	b.n	8000fb0 <__aeabi_ddiv+0x25c>
 80011a8:	19a6      	adds	r6, r4, r6
 80011aa:	1e68      	subs	r0, r5, #1
 80011ac:	42a6      	cmp	r6, r4
 80011ae:	d200      	bcs.n	80011b2 <__aeabi_ddiv+0x45e>
 80011b0:	e08d      	b.n	80012ce <__aeabi_ddiv+0x57a>
 80011b2:	428e      	cmp	r6, r1
 80011b4:	d200      	bcs.n	80011b8 <__aeabi_ddiv+0x464>
 80011b6:	e0a3      	b.n	8001300 <__aeabi_ddiv+0x5ac>
 80011b8:	d100      	bne.n	80011bc <__aeabi_ddiv+0x468>
 80011ba:	e0b3      	b.n	8001324 <__aeabi_ddiv+0x5d0>
 80011bc:	0005      	movs	r5, r0
 80011be:	e6f5      	b.n	8000fac <__aeabi_ddiv+0x258>
 80011c0:	42aa      	cmp	r2, r5
 80011c2:	d900      	bls.n	80011c6 <__aeabi_ddiv+0x472>
 80011c4:	e639      	b.n	8000e3a <__aeabi_ddiv+0xe6>
 80011c6:	4643      	mov	r3, r8
 80011c8:	07de      	lsls	r6, r3, #31
 80011ca:	0858      	lsrs	r0, r3, #1
 80011cc:	086b      	lsrs	r3, r5, #1
 80011ce:	431e      	orrs	r6, r3
 80011d0:	07ed      	lsls	r5, r5, #31
 80011d2:	e639      	b.n	8000e48 <__aeabi_ddiv+0xf4>
 80011d4:	4648      	mov	r0, r9
 80011d6:	f001 f867 	bl	80022a8 <__clzsi2>
 80011da:	0001      	movs	r1, r0
 80011dc:	0002      	movs	r2, r0
 80011de:	3115      	adds	r1, #21
 80011e0:	3220      	adds	r2, #32
 80011e2:	291c      	cmp	r1, #28
 80011e4:	dc00      	bgt.n	80011e8 <__aeabi_ddiv+0x494>
 80011e6:	e72c      	b.n	8001042 <__aeabi_ddiv+0x2ee>
 80011e8:	464b      	mov	r3, r9
 80011ea:	3808      	subs	r0, #8
 80011ec:	4083      	lsls	r3, r0
 80011ee:	2500      	movs	r5, #0
 80011f0:	4698      	mov	r8, r3
 80011f2:	e732      	b.n	800105a <__aeabi_ddiv+0x306>
 80011f4:	f001 f858 	bl	80022a8 <__clzsi2>
 80011f8:	0003      	movs	r3, r0
 80011fa:	001a      	movs	r2, r3
 80011fc:	3215      	adds	r2, #21
 80011fe:	3020      	adds	r0, #32
 8001200:	2a1c      	cmp	r2, #28
 8001202:	dc00      	bgt.n	8001206 <__aeabi_ddiv+0x4b2>
 8001204:	e700      	b.n	8001008 <__aeabi_ddiv+0x2b4>
 8001206:	4654      	mov	r4, sl
 8001208:	3b08      	subs	r3, #8
 800120a:	2200      	movs	r2, #0
 800120c:	409c      	lsls	r4, r3
 800120e:	e705      	b.n	800101c <__aeabi_ddiv+0x2c8>
 8001210:	1936      	adds	r6, r6, r4
 8001212:	3b01      	subs	r3, #1
 8001214:	42b4      	cmp	r4, r6
 8001216:	d900      	bls.n	800121a <__aeabi_ddiv+0x4c6>
 8001218:	e6a6      	b.n	8000f68 <__aeabi_ddiv+0x214>
 800121a:	42b2      	cmp	r2, r6
 800121c:	d800      	bhi.n	8001220 <__aeabi_ddiv+0x4cc>
 800121e:	e6a3      	b.n	8000f68 <__aeabi_ddiv+0x214>
 8001220:	1e83      	subs	r3, r0, #2
 8001222:	1936      	adds	r6, r6, r4
 8001224:	e6a0      	b.n	8000f68 <__aeabi_ddiv+0x214>
 8001226:	1909      	adds	r1, r1, r4
 8001228:	3d01      	subs	r5, #1
 800122a:	428c      	cmp	r4, r1
 800122c:	d900      	bls.n	8001230 <__aeabi_ddiv+0x4dc>
 800122e:	e68d      	b.n	8000f4c <__aeabi_ddiv+0x1f8>
 8001230:	428a      	cmp	r2, r1
 8001232:	d800      	bhi.n	8001236 <__aeabi_ddiv+0x4e2>
 8001234:	e68a      	b.n	8000f4c <__aeabi_ddiv+0x1f8>
 8001236:	1e85      	subs	r5, r0, #2
 8001238:	1909      	adds	r1, r1, r4
 800123a:	e687      	b.n	8000f4c <__aeabi_ddiv+0x1f8>
 800123c:	230f      	movs	r3, #15
 800123e:	402b      	ands	r3, r5
 8001240:	2b04      	cmp	r3, #4
 8001242:	d100      	bne.n	8001246 <__aeabi_ddiv+0x4f2>
 8001244:	e6bc      	b.n	8000fc0 <__aeabi_ddiv+0x26c>
 8001246:	2305      	movs	r3, #5
 8001248:	425b      	negs	r3, r3
 800124a:	42ab      	cmp	r3, r5
 800124c:	419b      	sbcs	r3, r3
 800124e:	3504      	adds	r5, #4
 8001250:	425b      	negs	r3, r3
 8001252:	08ed      	lsrs	r5, r5, #3
 8001254:	4498      	add	r8, r3
 8001256:	e6b4      	b.n	8000fc2 <__aeabi_ddiv+0x26e>
 8001258:	42af      	cmp	r7, r5
 800125a:	d900      	bls.n	800125e <__aeabi_ddiv+0x50a>
 800125c:	e660      	b.n	8000f20 <__aeabi_ddiv+0x1cc>
 800125e:	4282      	cmp	r2, r0
 8001260:	d804      	bhi.n	800126c <__aeabi_ddiv+0x518>
 8001262:	d000      	beq.n	8001266 <__aeabi_ddiv+0x512>
 8001264:	e65c      	b.n	8000f20 <__aeabi_ddiv+0x1cc>
 8001266:	42ae      	cmp	r6, r5
 8001268:	d800      	bhi.n	800126c <__aeabi_ddiv+0x518>
 800126a:	e659      	b.n	8000f20 <__aeabi_ddiv+0x1cc>
 800126c:	2302      	movs	r3, #2
 800126e:	425b      	negs	r3, r3
 8001270:	469c      	mov	ip, r3
 8001272:	9b00      	ldr	r3, [sp, #0]
 8001274:	44e0      	add	r8, ip
 8001276:	469c      	mov	ip, r3
 8001278:	4465      	add	r5, ip
 800127a:	429d      	cmp	r5, r3
 800127c:	419b      	sbcs	r3, r3
 800127e:	425b      	negs	r3, r3
 8001280:	191b      	adds	r3, r3, r4
 8001282:	18c0      	adds	r0, r0, r3
 8001284:	e64d      	b.n	8000f22 <__aeabi_ddiv+0x1ce>
 8001286:	428a      	cmp	r2, r1
 8001288:	d800      	bhi.n	800128c <__aeabi_ddiv+0x538>
 800128a:	e60e      	b.n	8000eaa <__aeabi_ddiv+0x156>
 800128c:	1e83      	subs	r3, r0, #2
 800128e:	1909      	adds	r1, r1, r4
 8001290:	e60b      	b.n	8000eaa <__aeabi_ddiv+0x156>
 8001292:	428a      	cmp	r2, r1
 8001294:	d800      	bhi.n	8001298 <__aeabi_ddiv+0x544>
 8001296:	e5f4      	b.n	8000e82 <__aeabi_ddiv+0x12e>
 8001298:	1e83      	subs	r3, r0, #2
 800129a:	4698      	mov	r8, r3
 800129c:	1909      	adds	r1, r1, r4
 800129e:	e5f0      	b.n	8000e82 <__aeabi_ddiv+0x12e>
 80012a0:	4925      	ldr	r1, [pc, #148]	; (8001338 <__aeabi_ddiv+0x5e4>)
 80012a2:	0028      	movs	r0, r5
 80012a4:	4459      	add	r1, fp
 80012a6:	408d      	lsls	r5, r1
 80012a8:	4642      	mov	r2, r8
 80012aa:	408a      	lsls	r2, r1
 80012ac:	1e69      	subs	r1, r5, #1
 80012ae:	418d      	sbcs	r5, r1
 80012b0:	4641      	mov	r1, r8
 80012b2:	40d8      	lsrs	r0, r3
 80012b4:	40d9      	lsrs	r1, r3
 80012b6:	4302      	orrs	r2, r0
 80012b8:	432a      	orrs	r2, r5
 80012ba:	000b      	movs	r3, r1
 80012bc:	0751      	lsls	r1, r2, #29
 80012be:	d100      	bne.n	80012c2 <__aeabi_ddiv+0x56e>
 80012c0:	e751      	b.n	8001166 <__aeabi_ddiv+0x412>
 80012c2:	210f      	movs	r1, #15
 80012c4:	4011      	ands	r1, r2
 80012c6:	2904      	cmp	r1, #4
 80012c8:	d000      	beq.n	80012cc <__aeabi_ddiv+0x578>
 80012ca:	e746      	b.n	800115a <__aeabi_ddiv+0x406>
 80012cc:	e74b      	b.n	8001166 <__aeabi_ddiv+0x412>
 80012ce:	0005      	movs	r5, r0
 80012d0:	428e      	cmp	r6, r1
 80012d2:	d000      	beq.n	80012d6 <__aeabi_ddiv+0x582>
 80012d4:	e66a      	b.n	8000fac <__aeabi_ddiv+0x258>
 80012d6:	9a00      	ldr	r2, [sp, #0]
 80012d8:	4293      	cmp	r3, r2
 80012da:	d000      	beq.n	80012de <__aeabi_ddiv+0x58a>
 80012dc:	e666      	b.n	8000fac <__aeabi_ddiv+0x258>
 80012de:	e667      	b.n	8000fb0 <__aeabi_ddiv+0x25c>
 80012e0:	4a16      	ldr	r2, [pc, #88]	; (800133c <__aeabi_ddiv+0x5e8>)
 80012e2:	445a      	add	r2, fp
 80012e4:	2a00      	cmp	r2, #0
 80012e6:	dc00      	bgt.n	80012ea <__aeabi_ddiv+0x596>
 80012e8:	e710      	b.n	800110c <__aeabi_ddiv+0x3b8>
 80012ea:	2301      	movs	r3, #1
 80012ec:	2500      	movs	r5, #0
 80012ee:	4498      	add	r8, r3
 80012f0:	e667      	b.n	8000fc2 <__aeabi_ddiv+0x26e>
 80012f2:	075d      	lsls	r5, r3, #29
 80012f4:	025b      	lsls	r3, r3, #9
 80012f6:	0b1c      	lsrs	r4, r3, #12
 80012f8:	08d2      	lsrs	r2, r2, #3
 80012fa:	2300      	movs	r3, #0
 80012fc:	4315      	orrs	r5, r2
 80012fe:	e580      	b.n	8000e02 <__aeabi_ddiv+0xae>
 8001300:	9800      	ldr	r0, [sp, #0]
 8001302:	3d02      	subs	r5, #2
 8001304:	0042      	lsls	r2, r0, #1
 8001306:	4282      	cmp	r2, r0
 8001308:	41bf      	sbcs	r7, r7
 800130a:	427f      	negs	r7, r7
 800130c:	193c      	adds	r4, r7, r4
 800130e:	1936      	adds	r6, r6, r4
 8001310:	9200      	str	r2, [sp, #0]
 8001312:	e7dd      	b.n	80012d0 <__aeabi_ddiv+0x57c>
 8001314:	2480      	movs	r4, #128	; 0x80
 8001316:	4643      	mov	r3, r8
 8001318:	0324      	lsls	r4, r4, #12
 800131a:	431c      	orrs	r4, r3
 800131c:	0324      	lsls	r4, r4, #12
 800131e:	4b04      	ldr	r3, [pc, #16]	; (8001330 <__aeabi_ddiv+0x5dc>)
 8001320:	0b24      	lsrs	r4, r4, #12
 8001322:	e56e      	b.n	8000e02 <__aeabi_ddiv+0xae>
 8001324:	9a00      	ldr	r2, [sp, #0]
 8001326:	429a      	cmp	r2, r3
 8001328:	d3ea      	bcc.n	8001300 <__aeabi_ddiv+0x5ac>
 800132a:	0005      	movs	r5, r0
 800132c:	e7d3      	b.n	80012d6 <__aeabi_ddiv+0x582>
 800132e:	46c0      	nop			; (mov r8, r8)
 8001330:	000007ff 	.word	0x000007ff
 8001334:	0000043e 	.word	0x0000043e
 8001338:	0000041e 	.word	0x0000041e
 800133c:	000003ff 	.word	0x000003ff

08001340 <__eqdf2>:
 8001340:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001342:	464e      	mov	r6, r9
 8001344:	4645      	mov	r5, r8
 8001346:	46de      	mov	lr, fp
 8001348:	4657      	mov	r7, sl
 800134a:	4690      	mov	r8, r2
 800134c:	b5e0      	push	{r5, r6, r7, lr}
 800134e:	0017      	movs	r7, r2
 8001350:	031a      	lsls	r2, r3, #12
 8001352:	0b12      	lsrs	r2, r2, #12
 8001354:	0005      	movs	r5, r0
 8001356:	4684      	mov	ip, r0
 8001358:	4819      	ldr	r0, [pc, #100]	; (80013c0 <__eqdf2+0x80>)
 800135a:	030e      	lsls	r6, r1, #12
 800135c:	004c      	lsls	r4, r1, #1
 800135e:	4691      	mov	r9, r2
 8001360:	005a      	lsls	r2, r3, #1
 8001362:	0fdb      	lsrs	r3, r3, #31
 8001364:	469b      	mov	fp, r3
 8001366:	0b36      	lsrs	r6, r6, #12
 8001368:	0d64      	lsrs	r4, r4, #21
 800136a:	0fc9      	lsrs	r1, r1, #31
 800136c:	0d52      	lsrs	r2, r2, #21
 800136e:	4284      	cmp	r4, r0
 8001370:	d019      	beq.n	80013a6 <__eqdf2+0x66>
 8001372:	4282      	cmp	r2, r0
 8001374:	d010      	beq.n	8001398 <__eqdf2+0x58>
 8001376:	2001      	movs	r0, #1
 8001378:	4294      	cmp	r4, r2
 800137a:	d10e      	bne.n	800139a <__eqdf2+0x5a>
 800137c:	454e      	cmp	r6, r9
 800137e:	d10c      	bne.n	800139a <__eqdf2+0x5a>
 8001380:	2001      	movs	r0, #1
 8001382:	45c4      	cmp	ip, r8
 8001384:	d109      	bne.n	800139a <__eqdf2+0x5a>
 8001386:	4559      	cmp	r1, fp
 8001388:	d017      	beq.n	80013ba <__eqdf2+0x7a>
 800138a:	2c00      	cmp	r4, #0
 800138c:	d105      	bne.n	800139a <__eqdf2+0x5a>
 800138e:	0030      	movs	r0, r6
 8001390:	4328      	orrs	r0, r5
 8001392:	1e43      	subs	r3, r0, #1
 8001394:	4198      	sbcs	r0, r3
 8001396:	e000      	b.n	800139a <__eqdf2+0x5a>
 8001398:	2001      	movs	r0, #1
 800139a:	bcf0      	pop	{r4, r5, r6, r7}
 800139c:	46bb      	mov	fp, r7
 800139e:	46b2      	mov	sl, r6
 80013a0:	46a9      	mov	r9, r5
 80013a2:	46a0      	mov	r8, r4
 80013a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013a6:	0033      	movs	r3, r6
 80013a8:	2001      	movs	r0, #1
 80013aa:	432b      	orrs	r3, r5
 80013ac:	d1f5      	bne.n	800139a <__eqdf2+0x5a>
 80013ae:	42a2      	cmp	r2, r4
 80013b0:	d1f3      	bne.n	800139a <__eqdf2+0x5a>
 80013b2:	464b      	mov	r3, r9
 80013b4:	433b      	orrs	r3, r7
 80013b6:	d1f0      	bne.n	800139a <__eqdf2+0x5a>
 80013b8:	e7e2      	b.n	8001380 <__eqdf2+0x40>
 80013ba:	2000      	movs	r0, #0
 80013bc:	e7ed      	b.n	800139a <__eqdf2+0x5a>
 80013be:	46c0      	nop			; (mov r8, r8)
 80013c0:	000007ff 	.word	0x000007ff

080013c4 <__gedf2>:
 80013c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013c6:	4647      	mov	r7, r8
 80013c8:	46ce      	mov	lr, r9
 80013ca:	0004      	movs	r4, r0
 80013cc:	0018      	movs	r0, r3
 80013ce:	0016      	movs	r6, r2
 80013d0:	031b      	lsls	r3, r3, #12
 80013d2:	0b1b      	lsrs	r3, r3, #12
 80013d4:	4d2d      	ldr	r5, [pc, #180]	; (800148c <__gedf2+0xc8>)
 80013d6:	004a      	lsls	r2, r1, #1
 80013d8:	4699      	mov	r9, r3
 80013da:	b580      	push	{r7, lr}
 80013dc:	0043      	lsls	r3, r0, #1
 80013de:	030f      	lsls	r7, r1, #12
 80013e0:	46a4      	mov	ip, r4
 80013e2:	46b0      	mov	r8, r6
 80013e4:	0b3f      	lsrs	r7, r7, #12
 80013e6:	0d52      	lsrs	r2, r2, #21
 80013e8:	0fc9      	lsrs	r1, r1, #31
 80013ea:	0d5b      	lsrs	r3, r3, #21
 80013ec:	0fc0      	lsrs	r0, r0, #31
 80013ee:	42aa      	cmp	r2, r5
 80013f0:	d021      	beq.n	8001436 <__gedf2+0x72>
 80013f2:	42ab      	cmp	r3, r5
 80013f4:	d013      	beq.n	800141e <__gedf2+0x5a>
 80013f6:	2a00      	cmp	r2, #0
 80013f8:	d122      	bne.n	8001440 <__gedf2+0x7c>
 80013fa:	433c      	orrs	r4, r7
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d102      	bne.n	8001406 <__gedf2+0x42>
 8001400:	464d      	mov	r5, r9
 8001402:	432e      	orrs	r6, r5
 8001404:	d022      	beq.n	800144c <__gedf2+0x88>
 8001406:	2c00      	cmp	r4, #0
 8001408:	d010      	beq.n	800142c <__gedf2+0x68>
 800140a:	4281      	cmp	r1, r0
 800140c:	d022      	beq.n	8001454 <__gedf2+0x90>
 800140e:	2002      	movs	r0, #2
 8001410:	3901      	subs	r1, #1
 8001412:	4008      	ands	r0, r1
 8001414:	3801      	subs	r0, #1
 8001416:	bcc0      	pop	{r6, r7}
 8001418:	46b9      	mov	r9, r7
 800141a:	46b0      	mov	r8, r6
 800141c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800141e:	464d      	mov	r5, r9
 8001420:	432e      	orrs	r6, r5
 8001422:	d129      	bne.n	8001478 <__gedf2+0xb4>
 8001424:	2a00      	cmp	r2, #0
 8001426:	d1f0      	bne.n	800140a <__gedf2+0x46>
 8001428:	433c      	orrs	r4, r7
 800142a:	d1ee      	bne.n	800140a <__gedf2+0x46>
 800142c:	2800      	cmp	r0, #0
 800142e:	d1f2      	bne.n	8001416 <__gedf2+0x52>
 8001430:	2001      	movs	r0, #1
 8001432:	4240      	negs	r0, r0
 8001434:	e7ef      	b.n	8001416 <__gedf2+0x52>
 8001436:	003d      	movs	r5, r7
 8001438:	4325      	orrs	r5, r4
 800143a:	d11d      	bne.n	8001478 <__gedf2+0xb4>
 800143c:	4293      	cmp	r3, r2
 800143e:	d0ee      	beq.n	800141e <__gedf2+0x5a>
 8001440:	2b00      	cmp	r3, #0
 8001442:	d1e2      	bne.n	800140a <__gedf2+0x46>
 8001444:	464c      	mov	r4, r9
 8001446:	4326      	orrs	r6, r4
 8001448:	d1df      	bne.n	800140a <__gedf2+0x46>
 800144a:	e7e0      	b.n	800140e <__gedf2+0x4a>
 800144c:	2000      	movs	r0, #0
 800144e:	2c00      	cmp	r4, #0
 8001450:	d0e1      	beq.n	8001416 <__gedf2+0x52>
 8001452:	e7dc      	b.n	800140e <__gedf2+0x4a>
 8001454:	429a      	cmp	r2, r3
 8001456:	dc0a      	bgt.n	800146e <__gedf2+0xaa>
 8001458:	dbe8      	blt.n	800142c <__gedf2+0x68>
 800145a:	454f      	cmp	r7, r9
 800145c:	d8d7      	bhi.n	800140e <__gedf2+0x4a>
 800145e:	d00e      	beq.n	800147e <__gedf2+0xba>
 8001460:	2000      	movs	r0, #0
 8001462:	454f      	cmp	r7, r9
 8001464:	d2d7      	bcs.n	8001416 <__gedf2+0x52>
 8001466:	2900      	cmp	r1, #0
 8001468:	d0e2      	beq.n	8001430 <__gedf2+0x6c>
 800146a:	0008      	movs	r0, r1
 800146c:	e7d3      	b.n	8001416 <__gedf2+0x52>
 800146e:	4243      	negs	r3, r0
 8001470:	4158      	adcs	r0, r3
 8001472:	0040      	lsls	r0, r0, #1
 8001474:	3801      	subs	r0, #1
 8001476:	e7ce      	b.n	8001416 <__gedf2+0x52>
 8001478:	2002      	movs	r0, #2
 800147a:	4240      	negs	r0, r0
 800147c:	e7cb      	b.n	8001416 <__gedf2+0x52>
 800147e:	45c4      	cmp	ip, r8
 8001480:	d8c5      	bhi.n	800140e <__gedf2+0x4a>
 8001482:	2000      	movs	r0, #0
 8001484:	45c4      	cmp	ip, r8
 8001486:	d2c6      	bcs.n	8001416 <__gedf2+0x52>
 8001488:	e7ed      	b.n	8001466 <__gedf2+0xa2>
 800148a:	46c0      	nop			; (mov r8, r8)
 800148c:	000007ff 	.word	0x000007ff

08001490 <__ledf2>:
 8001490:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001492:	4647      	mov	r7, r8
 8001494:	46ce      	mov	lr, r9
 8001496:	0004      	movs	r4, r0
 8001498:	0018      	movs	r0, r3
 800149a:	0016      	movs	r6, r2
 800149c:	031b      	lsls	r3, r3, #12
 800149e:	0b1b      	lsrs	r3, r3, #12
 80014a0:	4d2c      	ldr	r5, [pc, #176]	; (8001554 <__ledf2+0xc4>)
 80014a2:	004a      	lsls	r2, r1, #1
 80014a4:	4699      	mov	r9, r3
 80014a6:	b580      	push	{r7, lr}
 80014a8:	0043      	lsls	r3, r0, #1
 80014aa:	030f      	lsls	r7, r1, #12
 80014ac:	46a4      	mov	ip, r4
 80014ae:	46b0      	mov	r8, r6
 80014b0:	0b3f      	lsrs	r7, r7, #12
 80014b2:	0d52      	lsrs	r2, r2, #21
 80014b4:	0fc9      	lsrs	r1, r1, #31
 80014b6:	0d5b      	lsrs	r3, r3, #21
 80014b8:	0fc0      	lsrs	r0, r0, #31
 80014ba:	42aa      	cmp	r2, r5
 80014bc:	d00d      	beq.n	80014da <__ledf2+0x4a>
 80014be:	42ab      	cmp	r3, r5
 80014c0:	d010      	beq.n	80014e4 <__ledf2+0x54>
 80014c2:	2a00      	cmp	r2, #0
 80014c4:	d127      	bne.n	8001516 <__ledf2+0x86>
 80014c6:	433c      	orrs	r4, r7
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d111      	bne.n	80014f0 <__ledf2+0x60>
 80014cc:	464d      	mov	r5, r9
 80014ce:	432e      	orrs	r6, r5
 80014d0:	d10e      	bne.n	80014f0 <__ledf2+0x60>
 80014d2:	2000      	movs	r0, #0
 80014d4:	2c00      	cmp	r4, #0
 80014d6:	d015      	beq.n	8001504 <__ledf2+0x74>
 80014d8:	e00e      	b.n	80014f8 <__ledf2+0x68>
 80014da:	003d      	movs	r5, r7
 80014dc:	4325      	orrs	r5, r4
 80014de:	d110      	bne.n	8001502 <__ledf2+0x72>
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d118      	bne.n	8001516 <__ledf2+0x86>
 80014e4:	464d      	mov	r5, r9
 80014e6:	432e      	orrs	r6, r5
 80014e8:	d10b      	bne.n	8001502 <__ledf2+0x72>
 80014ea:	2a00      	cmp	r2, #0
 80014ec:	d102      	bne.n	80014f4 <__ledf2+0x64>
 80014ee:	433c      	orrs	r4, r7
 80014f0:	2c00      	cmp	r4, #0
 80014f2:	d00b      	beq.n	800150c <__ledf2+0x7c>
 80014f4:	4281      	cmp	r1, r0
 80014f6:	d014      	beq.n	8001522 <__ledf2+0x92>
 80014f8:	2002      	movs	r0, #2
 80014fa:	3901      	subs	r1, #1
 80014fc:	4008      	ands	r0, r1
 80014fe:	3801      	subs	r0, #1
 8001500:	e000      	b.n	8001504 <__ledf2+0x74>
 8001502:	2002      	movs	r0, #2
 8001504:	bcc0      	pop	{r6, r7}
 8001506:	46b9      	mov	r9, r7
 8001508:	46b0      	mov	r8, r6
 800150a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800150c:	2800      	cmp	r0, #0
 800150e:	d1f9      	bne.n	8001504 <__ledf2+0x74>
 8001510:	2001      	movs	r0, #1
 8001512:	4240      	negs	r0, r0
 8001514:	e7f6      	b.n	8001504 <__ledf2+0x74>
 8001516:	2b00      	cmp	r3, #0
 8001518:	d1ec      	bne.n	80014f4 <__ledf2+0x64>
 800151a:	464c      	mov	r4, r9
 800151c:	4326      	orrs	r6, r4
 800151e:	d1e9      	bne.n	80014f4 <__ledf2+0x64>
 8001520:	e7ea      	b.n	80014f8 <__ledf2+0x68>
 8001522:	429a      	cmp	r2, r3
 8001524:	dd04      	ble.n	8001530 <__ledf2+0xa0>
 8001526:	4243      	negs	r3, r0
 8001528:	4158      	adcs	r0, r3
 800152a:	0040      	lsls	r0, r0, #1
 800152c:	3801      	subs	r0, #1
 800152e:	e7e9      	b.n	8001504 <__ledf2+0x74>
 8001530:	429a      	cmp	r2, r3
 8001532:	dbeb      	blt.n	800150c <__ledf2+0x7c>
 8001534:	454f      	cmp	r7, r9
 8001536:	d8df      	bhi.n	80014f8 <__ledf2+0x68>
 8001538:	d006      	beq.n	8001548 <__ledf2+0xb8>
 800153a:	2000      	movs	r0, #0
 800153c:	454f      	cmp	r7, r9
 800153e:	d2e1      	bcs.n	8001504 <__ledf2+0x74>
 8001540:	2900      	cmp	r1, #0
 8001542:	d0e5      	beq.n	8001510 <__ledf2+0x80>
 8001544:	0008      	movs	r0, r1
 8001546:	e7dd      	b.n	8001504 <__ledf2+0x74>
 8001548:	45c4      	cmp	ip, r8
 800154a:	d8d5      	bhi.n	80014f8 <__ledf2+0x68>
 800154c:	2000      	movs	r0, #0
 800154e:	45c4      	cmp	ip, r8
 8001550:	d2d8      	bcs.n	8001504 <__ledf2+0x74>
 8001552:	e7f5      	b.n	8001540 <__ledf2+0xb0>
 8001554:	000007ff 	.word	0x000007ff

08001558 <__aeabi_dmul>:
 8001558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800155a:	4657      	mov	r7, sl
 800155c:	464e      	mov	r6, r9
 800155e:	4645      	mov	r5, r8
 8001560:	46de      	mov	lr, fp
 8001562:	b5e0      	push	{r5, r6, r7, lr}
 8001564:	4698      	mov	r8, r3
 8001566:	030c      	lsls	r4, r1, #12
 8001568:	004b      	lsls	r3, r1, #1
 800156a:	0006      	movs	r6, r0
 800156c:	4692      	mov	sl, r2
 800156e:	b087      	sub	sp, #28
 8001570:	0b24      	lsrs	r4, r4, #12
 8001572:	0d5b      	lsrs	r3, r3, #21
 8001574:	0fcf      	lsrs	r7, r1, #31
 8001576:	2b00      	cmp	r3, #0
 8001578:	d100      	bne.n	800157c <__aeabi_dmul+0x24>
 800157a:	e15c      	b.n	8001836 <__aeabi_dmul+0x2de>
 800157c:	4ad9      	ldr	r2, [pc, #868]	; (80018e4 <__aeabi_dmul+0x38c>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d100      	bne.n	8001584 <__aeabi_dmul+0x2c>
 8001582:	e175      	b.n	8001870 <__aeabi_dmul+0x318>
 8001584:	0f42      	lsrs	r2, r0, #29
 8001586:	00e4      	lsls	r4, r4, #3
 8001588:	4314      	orrs	r4, r2
 800158a:	2280      	movs	r2, #128	; 0x80
 800158c:	0412      	lsls	r2, r2, #16
 800158e:	4314      	orrs	r4, r2
 8001590:	4ad5      	ldr	r2, [pc, #852]	; (80018e8 <__aeabi_dmul+0x390>)
 8001592:	00c5      	lsls	r5, r0, #3
 8001594:	4694      	mov	ip, r2
 8001596:	4463      	add	r3, ip
 8001598:	9300      	str	r3, [sp, #0]
 800159a:	2300      	movs	r3, #0
 800159c:	4699      	mov	r9, r3
 800159e:	469b      	mov	fp, r3
 80015a0:	4643      	mov	r3, r8
 80015a2:	4642      	mov	r2, r8
 80015a4:	031e      	lsls	r6, r3, #12
 80015a6:	0fd2      	lsrs	r2, r2, #31
 80015a8:	005b      	lsls	r3, r3, #1
 80015aa:	4650      	mov	r0, sl
 80015ac:	4690      	mov	r8, r2
 80015ae:	0b36      	lsrs	r6, r6, #12
 80015b0:	0d5b      	lsrs	r3, r3, #21
 80015b2:	d100      	bne.n	80015b6 <__aeabi_dmul+0x5e>
 80015b4:	e120      	b.n	80017f8 <__aeabi_dmul+0x2a0>
 80015b6:	4acb      	ldr	r2, [pc, #812]	; (80018e4 <__aeabi_dmul+0x38c>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d100      	bne.n	80015be <__aeabi_dmul+0x66>
 80015bc:	e162      	b.n	8001884 <__aeabi_dmul+0x32c>
 80015be:	49ca      	ldr	r1, [pc, #808]	; (80018e8 <__aeabi_dmul+0x390>)
 80015c0:	0f42      	lsrs	r2, r0, #29
 80015c2:	468c      	mov	ip, r1
 80015c4:	9900      	ldr	r1, [sp, #0]
 80015c6:	4463      	add	r3, ip
 80015c8:	00f6      	lsls	r6, r6, #3
 80015ca:	468c      	mov	ip, r1
 80015cc:	4316      	orrs	r6, r2
 80015ce:	2280      	movs	r2, #128	; 0x80
 80015d0:	449c      	add	ip, r3
 80015d2:	0412      	lsls	r2, r2, #16
 80015d4:	4663      	mov	r3, ip
 80015d6:	4316      	orrs	r6, r2
 80015d8:	00c2      	lsls	r2, r0, #3
 80015da:	2000      	movs	r0, #0
 80015dc:	9300      	str	r3, [sp, #0]
 80015de:	9900      	ldr	r1, [sp, #0]
 80015e0:	4643      	mov	r3, r8
 80015e2:	3101      	adds	r1, #1
 80015e4:	468c      	mov	ip, r1
 80015e6:	4649      	mov	r1, r9
 80015e8:	407b      	eors	r3, r7
 80015ea:	9301      	str	r3, [sp, #4]
 80015ec:	290f      	cmp	r1, #15
 80015ee:	d826      	bhi.n	800163e <__aeabi_dmul+0xe6>
 80015f0:	4bbe      	ldr	r3, [pc, #760]	; (80018ec <__aeabi_dmul+0x394>)
 80015f2:	0089      	lsls	r1, r1, #2
 80015f4:	5859      	ldr	r1, [r3, r1]
 80015f6:	468f      	mov	pc, r1
 80015f8:	4643      	mov	r3, r8
 80015fa:	9301      	str	r3, [sp, #4]
 80015fc:	0034      	movs	r4, r6
 80015fe:	0015      	movs	r5, r2
 8001600:	4683      	mov	fp, r0
 8001602:	465b      	mov	r3, fp
 8001604:	2b02      	cmp	r3, #2
 8001606:	d016      	beq.n	8001636 <__aeabi_dmul+0xde>
 8001608:	2b03      	cmp	r3, #3
 800160a:	d100      	bne.n	800160e <__aeabi_dmul+0xb6>
 800160c:	e203      	b.n	8001a16 <__aeabi_dmul+0x4be>
 800160e:	2b01      	cmp	r3, #1
 8001610:	d000      	beq.n	8001614 <__aeabi_dmul+0xbc>
 8001612:	e0cd      	b.n	80017b0 <__aeabi_dmul+0x258>
 8001614:	2200      	movs	r2, #0
 8001616:	2400      	movs	r4, #0
 8001618:	2500      	movs	r5, #0
 800161a:	9b01      	ldr	r3, [sp, #4]
 800161c:	0512      	lsls	r2, r2, #20
 800161e:	4322      	orrs	r2, r4
 8001620:	07db      	lsls	r3, r3, #31
 8001622:	431a      	orrs	r2, r3
 8001624:	0028      	movs	r0, r5
 8001626:	0011      	movs	r1, r2
 8001628:	b007      	add	sp, #28
 800162a:	bcf0      	pop	{r4, r5, r6, r7}
 800162c:	46bb      	mov	fp, r7
 800162e:	46b2      	mov	sl, r6
 8001630:	46a9      	mov	r9, r5
 8001632:	46a0      	mov	r8, r4
 8001634:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001636:	2400      	movs	r4, #0
 8001638:	2500      	movs	r5, #0
 800163a:	4aaa      	ldr	r2, [pc, #680]	; (80018e4 <__aeabi_dmul+0x38c>)
 800163c:	e7ed      	b.n	800161a <__aeabi_dmul+0xc2>
 800163e:	0c28      	lsrs	r0, r5, #16
 8001640:	042d      	lsls	r5, r5, #16
 8001642:	0c2d      	lsrs	r5, r5, #16
 8001644:	002b      	movs	r3, r5
 8001646:	0c11      	lsrs	r1, r2, #16
 8001648:	0412      	lsls	r2, r2, #16
 800164a:	0c12      	lsrs	r2, r2, #16
 800164c:	4353      	muls	r3, r2
 800164e:	4698      	mov	r8, r3
 8001650:	0013      	movs	r3, r2
 8001652:	002f      	movs	r7, r5
 8001654:	4343      	muls	r3, r0
 8001656:	4699      	mov	r9, r3
 8001658:	434f      	muls	r7, r1
 800165a:	444f      	add	r7, r9
 800165c:	46bb      	mov	fp, r7
 800165e:	4647      	mov	r7, r8
 8001660:	000b      	movs	r3, r1
 8001662:	0c3f      	lsrs	r7, r7, #16
 8001664:	46ba      	mov	sl, r7
 8001666:	4343      	muls	r3, r0
 8001668:	44da      	add	sl, fp
 800166a:	9302      	str	r3, [sp, #8]
 800166c:	45d1      	cmp	r9, sl
 800166e:	d904      	bls.n	800167a <__aeabi_dmul+0x122>
 8001670:	2780      	movs	r7, #128	; 0x80
 8001672:	027f      	lsls	r7, r7, #9
 8001674:	46b9      	mov	r9, r7
 8001676:	444b      	add	r3, r9
 8001678:	9302      	str	r3, [sp, #8]
 800167a:	4653      	mov	r3, sl
 800167c:	0c1b      	lsrs	r3, r3, #16
 800167e:	469b      	mov	fp, r3
 8001680:	4653      	mov	r3, sl
 8001682:	041f      	lsls	r7, r3, #16
 8001684:	4643      	mov	r3, r8
 8001686:	041b      	lsls	r3, r3, #16
 8001688:	0c1b      	lsrs	r3, r3, #16
 800168a:	4698      	mov	r8, r3
 800168c:	003b      	movs	r3, r7
 800168e:	4443      	add	r3, r8
 8001690:	9304      	str	r3, [sp, #16]
 8001692:	0c33      	lsrs	r3, r6, #16
 8001694:	0436      	lsls	r6, r6, #16
 8001696:	0c36      	lsrs	r6, r6, #16
 8001698:	4698      	mov	r8, r3
 800169a:	0033      	movs	r3, r6
 800169c:	4343      	muls	r3, r0
 800169e:	4699      	mov	r9, r3
 80016a0:	4643      	mov	r3, r8
 80016a2:	4343      	muls	r3, r0
 80016a4:	002f      	movs	r7, r5
 80016a6:	469a      	mov	sl, r3
 80016a8:	4643      	mov	r3, r8
 80016aa:	4377      	muls	r7, r6
 80016ac:	435d      	muls	r5, r3
 80016ae:	0c38      	lsrs	r0, r7, #16
 80016b0:	444d      	add	r5, r9
 80016b2:	1945      	adds	r5, r0, r5
 80016b4:	45a9      	cmp	r9, r5
 80016b6:	d903      	bls.n	80016c0 <__aeabi_dmul+0x168>
 80016b8:	2380      	movs	r3, #128	; 0x80
 80016ba:	025b      	lsls	r3, r3, #9
 80016bc:	4699      	mov	r9, r3
 80016be:	44ca      	add	sl, r9
 80016c0:	043f      	lsls	r7, r7, #16
 80016c2:	0c28      	lsrs	r0, r5, #16
 80016c4:	0c3f      	lsrs	r7, r7, #16
 80016c6:	042d      	lsls	r5, r5, #16
 80016c8:	19ed      	adds	r5, r5, r7
 80016ca:	0c27      	lsrs	r7, r4, #16
 80016cc:	0424      	lsls	r4, r4, #16
 80016ce:	0c24      	lsrs	r4, r4, #16
 80016d0:	0003      	movs	r3, r0
 80016d2:	0020      	movs	r0, r4
 80016d4:	4350      	muls	r0, r2
 80016d6:	437a      	muls	r2, r7
 80016d8:	4691      	mov	r9, r2
 80016da:	003a      	movs	r2, r7
 80016dc:	4453      	add	r3, sl
 80016de:	9305      	str	r3, [sp, #20]
 80016e0:	0c03      	lsrs	r3, r0, #16
 80016e2:	469a      	mov	sl, r3
 80016e4:	434a      	muls	r2, r1
 80016e6:	4361      	muls	r1, r4
 80016e8:	4449      	add	r1, r9
 80016ea:	4451      	add	r1, sl
 80016ec:	44ab      	add	fp, r5
 80016ee:	4589      	cmp	r9, r1
 80016f0:	d903      	bls.n	80016fa <__aeabi_dmul+0x1a2>
 80016f2:	2380      	movs	r3, #128	; 0x80
 80016f4:	025b      	lsls	r3, r3, #9
 80016f6:	4699      	mov	r9, r3
 80016f8:	444a      	add	r2, r9
 80016fa:	0400      	lsls	r0, r0, #16
 80016fc:	0c0b      	lsrs	r3, r1, #16
 80016fe:	0c00      	lsrs	r0, r0, #16
 8001700:	0409      	lsls	r1, r1, #16
 8001702:	1809      	adds	r1, r1, r0
 8001704:	0020      	movs	r0, r4
 8001706:	4699      	mov	r9, r3
 8001708:	4643      	mov	r3, r8
 800170a:	4370      	muls	r0, r6
 800170c:	435c      	muls	r4, r3
 800170e:	437e      	muls	r6, r7
 8001710:	435f      	muls	r7, r3
 8001712:	0c03      	lsrs	r3, r0, #16
 8001714:	4698      	mov	r8, r3
 8001716:	19a4      	adds	r4, r4, r6
 8001718:	4444      	add	r4, r8
 800171a:	444a      	add	r2, r9
 800171c:	9703      	str	r7, [sp, #12]
 800171e:	42a6      	cmp	r6, r4
 8001720:	d904      	bls.n	800172c <__aeabi_dmul+0x1d4>
 8001722:	2380      	movs	r3, #128	; 0x80
 8001724:	025b      	lsls	r3, r3, #9
 8001726:	4698      	mov	r8, r3
 8001728:	4447      	add	r7, r8
 800172a:	9703      	str	r7, [sp, #12]
 800172c:	0423      	lsls	r3, r4, #16
 800172e:	9e02      	ldr	r6, [sp, #8]
 8001730:	469a      	mov	sl, r3
 8001732:	9b05      	ldr	r3, [sp, #20]
 8001734:	445e      	add	r6, fp
 8001736:	4698      	mov	r8, r3
 8001738:	42ae      	cmp	r6, r5
 800173a:	41ad      	sbcs	r5, r5
 800173c:	1876      	adds	r6, r6, r1
 800173e:	428e      	cmp	r6, r1
 8001740:	4189      	sbcs	r1, r1
 8001742:	0400      	lsls	r0, r0, #16
 8001744:	0c00      	lsrs	r0, r0, #16
 8001746:	4450      	add	r0, sl
 8001748:	4440      	add	r0, r8
 800174a:	426d      	negs	r5, r5
 800174c:	1947      	adds	r7, r0, r5
 800174e:	46b8      	mov	r8, r7
 8001750:	4693      	mov	fp, r2
 8001752:	4249      	negs	r1, r1
 8001754:	4689      	mov	r9, r1
 8001756:	44c3      	add	fp, r8
 8001758:	44d9      	add	r9, fp
 800175a:	4298      	cmp	r0, r3
 800175c:	4180      	sbcs	r0, r0
 800175e:	45a8      	cmp	r8, r5
 8001760:	41ad      	sbcs	r5, r5
 8001762:	4593      	cmp	fp, r2
 8001764:	4192      	sbcs	r2, r2
 8001766:	4589      	cmp	r9, r1
 8001768:	4189      	sbcs	r1, r1
 800176a:	426d      	negs	r5, r5
 800176c:	4240      	negs	r0, r0
 800176e:	4328      	orrs	r0, r5
 8001770:	0c24      	lsrs	r4, r4, #16
 8001772:	4252      	negs	r2, r2
 8001774:	4249      	negs	r1, r1
 8001776:	430a      	orrs	r2, r1
 8001778:	9b03      	ldr	r3, [sp, #12]
 800177a:	1900      	adds	r0, r0, r4
 800177c:	1880      	adds	r0, r0, r2
 800177e:	18c7      	adds	r7, r0, r3
 8001780:	464b      	mov	r3, r9
 8001782:	0ddc      	lsrs	r4, r3, #23
 8001784:	9b04      	ldr	r3, [sp, #16]
 8001786:	0275      	lsls	r5, r6, #9
 8001788:	431d      	orrs	r5, r3
 800178a:	1e6a      	subs	r2, r5, #1
 800178c:	4195      	sbcs	r5, r2
 800178e:	464b      	mov	r3, r9
 8001790:	0df6      	lsrs	r6, r6, #23
 8001792:	027f      	lsls	r7, r7, #9
 8001794:	4335      	orrs	r5, r6
 8001796:	025a      	lsls	r2, r3, #9
 8001798:	433c      	orrs	r4, r7
 800179a:	4315      	orrs	r5, r2
 800179c:	01fb      	lsls	r3, r7, #7
 800179e:	d400      	bmi.n	80017a2 <__aeabi_dmul+0x24a>
 80017a0:	e11c      	b.n	80019dc <__aeabi_dmul+0x484>
 80017a2:	2101      	movs	r1, #1
 80017a4:	086a      	lsrs	r2, r5, #1
 80017a6:	400d      	ands	r5, r1
 80017a8:	4315      	orrs	r5, r2
 80017aa:	07e2      	lsls	r2, r4, #31
 80017ac:	4315      	orrs	r5, r2
 80017ae:	0864      	lsrs	r4, r4, #1
 80017b0:	494f      	ldr	r1, [pc, #316]	; (80018f0 <__aeabi_dmul+0x398>)
 80017b2:	4461      	add	r1, ip
 80017b4:	2900      	cmp	r1, #0
 80017b6:	dc00      	bgt.n	80017ba <__aeabi_dmul+0x262>
 80017b8:	e0b0      	b.n	800191c <__aeabi_dmul+0x3c4>
 80017ba:	076b      	lsls	r3, r5, #29
 80017bc:	d009      	beq.n	80017d2 <__aeabi_dmul+0x27a>
 80017be:	220f      	movs	r2, #15
 80017c0:	402a      	ands	r2, r5
 80017c2:	2a04      	cmp	r2, #4
 80017c4:	d005      	beq.n	80017d2 <__aeabi_dmul+0x27a>
 80017c6:	1d2a      	adds	r2, r5, #4
 80017c8:	42aa      	cmp	r2, r5
 80017ca:	41ad      	sbcs	r5, r5
 80017cc:	426d      	negs	r5, r5
 80017ce:	1964      	adds	r4, r4, r5
 80017d0:	0015      	movs	r5, r2
 80017d2:	01e3      	lsls	r3, r4, #7
 80017d4:	d504      	bpl.n	80017e0 <__aeabi_dmul+0x288>
 80017d6:	2180      	movs	r1, #128	; 0x80
 80017d8:	4a46      	ldr	r2, [pc, #280]	; (80018f4 <__aeabi_dmul+0x39c>)
 80017da:	00c9      	lsls	r1, r1, #3
 80017dc:	4014      	ands	r4, r2
 80017de:	4461      	add	r1, ip
 80017e0:	4a45      	ldr	r2, [pc, #276]	; (80018f8 <__aeabi_dmul+0x3a0>)
 80017e2:	4291      	cmp	r1, r2
 80017e4:	dd00      	ble.n	80017e8 <__aeabi_dmul+0x290>
 80017e6:	e726      	b.n	8001636 <__aeabi_dmul+0xde>
 80017e8:	0762      	lsls	r2, r4, #29
 80017ea:	08ed      	lsrs	r5, r5, #3
 80017ec:	0264      	lsls	r4, r4, #9
 80017ee:	0549      	lsls	r1, r1, #21
 80017f0:	4315      	orrs	r5, r2
 80017f2:	0b24      	lsrs	r4, r4, #12
 80017f4:	0d4a      	lsrs	r2, r1, #21
 80017f6:	e710      	b.n	800161a <__aeabi_dmul+0xc2>
 80017f8:	4652      	mov	r2, sl
 80017fa:	4332      	orrs	r2, r6
 80017fc:	d100      	bne.n	8001800 <__aeabi_dmul+0x2a8>
 80017fe:	e07f      	b.n	8001900 <__aeabi_dmul+0x3a8>
 8001800:	2e00      	cmp	r6, #0
 8001802:	d100      	bne.n	8001806 <__aeabi_dmul+0x2ae>
 8001804:	e0dc      	b.n	80019c0 <__aeabi_dmul+0x468>
 8001806:	0030      	movs	r0, r6
 8001808:	f000 fd4e 	bl	80022a8 <__clzsi2>
 800180c:	0002      	movs	r2, r0
 800180e:	3a0b      	subs	r2, #11
 8001810:	231d      	movs	r3, #29
 8001812:	0001      	movs	r1, r0
 8001814:	1a9b      	subs	r3, r3, r2
 8001816:	4652      	mov	r2, sl
 8001818:	3908      	subs	r1, #8
 800181a:	40da      	lsrs	r2, r3
 800181c:	408e      	lsls	r6, r1
 800181e:	4316      	orrs	r6, r2
 8001820:	4652      	mov	r2, sl
 8001822:	408a      	lsls	r2, r1
 8001824:	9b00      	ldr	r3, [sp, #0]
 8001826:	4935      	ldr	r1, [pc, #212]	; (80018fc <__aeabi_dmul+0x3a4>)
 8001828:	1a18      	subs	r0, r3, r0
 800182a:	0003      	movs	r3, r0
 800182c:	468c      	mov	ip, r1
 800182e:	4463      	add	r3, ip
 8001830:	2000      	movs	r0, #0
 8001832:	9300      	str	r3, [sp, #0]
 8001834:	e6d3      	b.n	80015de <__aeabi_dmul+0x86>
 8001836:	0025      	movs	r5, r4
 8001838:	4305      	orrs	r5, r0
 800183a:	d04a      	beq.n	80018d2 <__aeabi_dmul+0x37a>
 800183c:	2c00      	cmp	r4, #0
 800183e:	d100      	bne.n	8001842 <__aeabi_dmul+0x2ea>
 8001840:	e0b0      	b.n	80019a4 <__aeabi_dmul+0x44c>
 8001842:	0020      	movs	r0, r4
 8001844:	f000 fd30 	bl	80022a8 <__clzsi2>
 8001848:	0001      	movs	r1, r0
 800184a:	0002      	movs	r2, r0
 800184c:	390b      	subs	r1, #11
 800184e:	231d      	movs	r3, #29
 8001850:	0010      	movs	r0, r2
 8001852:	1a5b      	subs	r3, r3, r1
 8001854:	0031      	movs	r1, r6
 8001856:	0035      	movs	r5, r6
 8001858:	3808      	subs	r0, #8
 800185a:	4084      	lsls	r4, r0
 800185c:	40d9      	lsrs	r1, r3
 800185e:	4085      	lsls	r5, r0
 8001860:	430c      	orrs	r4, r1
 8001862:	4826      	ldr	r0, [pc, #152]	; (80018fc <__aeabi_dmul+0x3a4>)
 8001864:	1a83      	subs	r3, r0, r2
 8001866:	9300      	str	r3, [sp, #0]
 8001868:	2300      	movs	r3, #0
 800186a:	4699      	mov	r9, r3
 800186c:	469b      	mov	fp, r3
 800186e:	e697      	b.n	80015a0 <__aeabi_dmul+0x48>
 8001870:	0005      	movs	r5, r0
 8001872:	4325      	orrs	r5, r4
 8001874:	d126      	bne.n	80018c4 <__aeabi_dmul+0x36c>
 8001876:	2208      	movs	r2, #8
 8001878:	9300      	str	r3, [sp, #0]
 800187a:	2302      	movs	r3, #2
 800187c:	2400      	movs	r4, #0
 800187e:	4691      	mov	r9, r2
 8001880:	469b      	mov	fp, r3
 8001882:	e68d      	b.n	80015a0 <__aeabi_dmul+0x48>
 8001884:	4652      	mov	r2, sl
 8001886:	9b00      	ldr	r3, [sp, #0]
 8001888:	4332      	orrs	r2, r6
 800188a:	d110      	bne.n	80018ae <__aeabi_dmul+0x356>
 800188c:	4915      	ldr	r1, [pc, #84]	; (80018e4 <__aeabi_dmul+0x38c>)
 800188e:	2600      	movs	r6, #0
 8001890:	468c      	mov	ip, r1
 8001892:	4463      	add	r3, ip
 8001894:	4649      	mov	r1, r9
 8001896:	9300      	str	r3, [sp, #0]
 8001898:	2302      	movs	r3, #2
 800189a:	4319      	orrs	r1, r3
 800189c:	4689      	mov	r9, r1
 800189e:	2002      	movs	r0, #2
 80018a0:	e69d      	b.n	80015de <__aeabi_dmul+0x86>
 80018a2:	465b      	mov	r3, fp
 80018a4:	9701      	str	r7, [sp, #4]
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	d000      	beq.n	80018ac <__aeabi_dmul+0x354>
 80018aa:	e6ad      	b.n	8001608 <__aeabi_dmul+0xb0>
 80018ac:	e6c3      	b.n	8001636 <__aeabi_dmul+0xde>
 80018ae:	4a0d      	ldr	r2, [pc, #52]	; (80018e4 <__aeabi_dmul+0x38c>)
 80018b0:	2003      	movs	r0, #3
 80018b2:	4694      	mov	ip, r2
 80018b4:	4463      	add	r3, ip
 80018b6:	464a      	mov	r2, r9
 80018b8:	9300      	str	r3, [sp, #0]
 80018ba:	2303      	movs	r3, #3
 80018bc:	431a      	orrs	r2, r3
 80018be:	4691      	mov	r9, r2
 80018c0:	4652      	mov	r2, sl
 80018c2:	e68c      	b.n	80015de <__aeabi_dmul+0x86>
 80018c4:	220c      	movs	r2, #12
 80018c6:	9300      	str	r3, [sp, #0]
 80018c8:	2303      	movs	r3, #3
 80018ca:	0005      	movs	r5, r0
 80018cc:	4691      	mov	r9, r2
 80018ce:	469b      	mov	fp, r3
 80018d0:	e666      	b.n	80015a0 <__aeabi_dmul+0x48>
 80018d2:	2304      	movs	r3, #4
 80018d4:	4699      	mov	r9, r3
 80018d6:	2300      	movs	r3, #0
 80018d8:	9300      	str	r3, [sp, #0]
 80018da:	3301      	adds	r3, #1
 80018dc:	2400      	movs	r4, #0
 80018de:	469b      	mov	fp, r3
 80018e0:	e65e      	b.n	80015a0 <__aeabi_dmul+0x48>
 80018e2:	46c0      	nop			; (mov r8, r8)
 80018e4:	000007ff 	.word	0x000007ff
 80018e8:	fffffc01 	.word	0xfffffc01
 80018ec:	08009dc4 	.word	0x08009dc4
 80018f0:	000003ff 	.word	0x000003ff
 80018f4:	feffffff 	.word	0xfeffffff
 80018f8:	000007fe 	.word	0x000007fe
 80018fc:	fffffc0d 	.word	0xfffffc0d
 8001900:	4649      	mov	r1, r9
 8001902:	2301      	movs	r3, #1
 8001904:	4319      	orrs	r1, r3
 8001906:	4689      	mov	r9, r1
 8001908:	2600      	movs	r6, #0
 800190a:	2001      	movs	r0, #1
 800190c:	e667      	b.n	80015de <__aeabi_dmul+0x86>
 800190e:	2300      	movs	r3, #0
 8001910:	2480      	movs	r4, #128	; 0x80
 8001912:	2500      	movs	r5, #0
 8001914:	4a43      	ldr	r2, [pc, #268]	; (8001a24 <__aeabi_dmul+0x4cc>)
 8001916:	9301      	str	r3, [sp, #4]
 8001918:	0324      	lsls	r4, r4, #12
 800191a:	e67e      	b.n	800161a <__aeabi_dmul+0xc2>
 800191c:	2001      	movs	r0, #1
 800191e:	1a40      	subs	r0, r0, r1
 8001920:	2838      	cmp	r0, #56	; 0x38
 8001922:	dd00      	ble.n	8001926 <__aeabi_dmul+0x3ce>
 8001924:	e676      	b.n	8001614 <__aeabi_dmul+0xbc>
 8001926:	281f      	cmp	r0, #31
 8001928:	dd5b      	ble.n	80019e2 <__aeabi_dmul+0x48a>
 800192a:	221f      	movs	r2, #31
 800192c:	0023      	movs	r3, r4
 800192e:	4252      	negs	r2, r2
 8001930:	1a51      	subs	r1, r2, r1
 8001932:	40cb      	lsrs	r3, r1
 8001934:	0019      	movs	r1, r3
 8001936:	2820      	cmp	r0, #32
 8001938:	d003      	beq.n	8001942 <__aeabi_dmul+0x3ea>
 800193a:	4a3b      	ldr	r2, [pc, #236]	; (8001a28 <__aeabi_dmul+0x4d0>)
 800193c:	4462      	add	r2, ip
 800193e:	4094      	lsls	r4, r2
 8001940:	4325      	orrs	r5, r4
 8001942:	1e6a      	subs	r2, r5, #1
 8001944:	4195      	sbcs	r5, r2
 8001946:	002a      	movs	r2, r5
 8001948:	430a      	orrs	r2, r1
 800194a:	2107      	movs	r1, #7
 800194c:	000d      	movs	r5, r1
 800194e:	2400      	movs	r4, #0
 8001950:	4015      	ands	r5, r2
 8001952:	4211      	tst	r1, r2
 8001954:	d05b      	beq.n	8001a0e <__aeabi_dmul+0x4b6>
 8001956:	210f      	movs	r1, #15
 8001958:	2400      	movs	r4, #0
 800195a:	4011      	ands	r1, r2
 800195c:	2904      	cmp	r1, #4
 800195e:	d053      	beq.n	8001a08 <__aeabi_dmul+0x4b0>
 8001960:	1d11      	adds	r1, r2, #4
 8001962:	4291      	cmp	r1, r2
 8001964:	4192      	sbcs	r2, r2
 8001966:	4252      	negs	r2, r2
 8001968:	18a4      	adds	r4, r4, r2
 800196a:	000a      	movs	r2, r1
 800196c:	0223      	lsls	r3, r4, #8
 800196e:	d54b      	bpl.n	8001a08 <__aeabi_dmul+0x4b0>
 8001970:	2201      	movs	r2, #1
 8001972:	2400      	movs	r4, #0
 8001974:	2500      	movs	r5, #0
 8001976:	e650      	b.n	800161a <__aeabi_dmul+0xc2>
 8001978:	2380      	movs	r3, #128	; 0x80
 800197a:	031b      	lsls	r3, r3, #12
 800197c:	421c      	tst	r4, r3
 800197e:	d009      	beq.n	8001994 <__aeabi_dmul+0x43c>
 8001980:	421e      	tst	r6, r3
 8001982:	d107      	bne.n	8001994 <__aeabi_dmul+0x43c>
 8001984:	4333      	orrs	r3, r6
 8001986:	031c      	lsls	r4, r3, #12
 8001988:	4643      	mov	r3, r8
 800198a:	0015      	movs	r5, r2
 800198c:	0b24      	lsrs	r4, r4, #12
 800198e:	4a25      	ldr	r2, [pc, #148]	; (8001a24 <__aeabi_dmul+0x4cc>)
 8001990:	9301      	str	r3, [sp, #4]
 8001992:	e642      	b.n	800161a <__aeabi_dmul+0xc2>
 8001994:	2280      	movs	r2, #128	; 0x80
 8001996:	0312      	lsls	r2, r2, #12
 8001998:	4314      	orrs	r4, r2
 800199a:	0324      	lsls	r4, r4, #12
 800199c:	4a21      	ldr	r2, [pc, #132]	; (8001a24 <__aeabi_dmul+0x4cc>)
 800199e:	0b24      	lsrs	r4, r4, #12
 80019a0:	9701      	str	r7, [sp, #4]
 80019a2:	e63a      	b.n	800161a <__aeabi_dmul+0xc2>
 80019a4:	f000 fc80 	bl	80022a8 <__clzsi2>
 80019a8:	0001      	movs	r1, r0
 80019aa:	0002      	movs	r2, r0
 80019ac:	3115      	adds	r1, #21
 80019ae:	3220      	adds	r2, #32
 80019b0:	291c      	cmp	r1, #28
 80019b2:	dc00      	bgt.n	80019b6 <__aeabi_dmul+0x45e>
 80019b4:	e74b      	b.n	800184e <__aeabi_dmul+0x2f6>
 80019b6:	0034      	movs	r4, r6
 80019b8:	3808      	subs	r0, #8
 80019ba:	2500      	movs	r5, #0
 80019bc:	4084      	lsls	r4, r0
 80019be:	e750      	b.n	8001862 <__aeabi_dmul+0x30a>
 80019c0:	f000 fc72 	bl	80022a8 <__clzsi2>
 80019c4:	0003      	movs	r3, r0
 80019c6:	001a      	movs	r2, r3
 80019c8:	3215      	adds	r2, #21
 80019ca:	3020      	adds	r0, #32
 80019cc:	2a1c      	cmp	r2, #28
 80019ce:	dc00      	bgt.n	80019d2 <__aeabi_dmul+0x47a>
 80019d0:	e71e      	b.n	8001810 <__aeabi_dmul+0x2b8>
 80019d2:	4656      	mov	r6, sl
 80019d4:	3b08      	subs	r3, #8
 80019d6:	2200      	movs	r2, #0
 80019d8:	409e      	lsls	r6, r3
 80019da:	e723      	b.n	8001824 <__aeabi_dmul+0x2cc>
 80019dc:	9b00      	ldr	r3, [sp, #0]
 80019de:	469c      	mov	ip, r3
 80019e0:	e6e6      	b.n	80017b0 <__aeabi_dmul+0x258>
 80019e2:	4912      	ldr	r1, [pc, #72]	; (8001a2c <__aeabi_dmul+0x4d4>)
 80019e4:	0022      	movs	r2, r4
 80019e6:	4461      	add	r1, ip
 80019e8:	002e      	movs	r6, r5
 80019ea:	408d      	lsls	r5, r1
 80019ec:	408a      	lsls	r2, r1
 80019ee:	40c6      	lsrs	r6, r0
 80019f0:	1e69      	subs	r1, r5, #1
 80019f2:	418d      	sbcs	r5, r1
 80019f4:	4332      	orrs	r2, r6
 80019f6:	432a      	orrs	r2, r5
 80019f8:	40c4      	lsrs	r4, r0
 80019fa:	0753      	lsls	r3, r2, #29
 80019fc:	d0b6      	beq.n	800196c <__aeabi_dmul+0x414>
 80019fe:	210f      	movs	r1, #15
 8001a00:	4011      	ands	r1, r2
 8001a02:	2904      	cmp	r1, #4
 8001a04:	d1ac      	bne.n	8001960 <__aeabi_dmul+0x408>
 8001a06:	e7b1      	b.n	800196c <__aeabi_dmul+0x414>
 8001a08:	0765      	lsls	r5, r4, #29
 8001a0a:	0264      	lsls	r4, r4, #9
 8001a0c:	0b24      	lsrs	r4, r4, #12
 8001a0e:	08d2      	lsrs	r2, r2, #3
 8001a10:	4315      	orrs	r5, r2
 8001a12:	2200      	movs	r2, #0
 8001a14:	e601      	b.n	800161a <__aeabi_dmul+0xc2>
 8001a16:	2280      	movs	r2, #128	; 0x80
 8001a18:	0312      	lsls	r2, r2, #12
 8001a1a:	4314      	orrs	r4, r2
 8001a1c:	0324      	lsls	r4, r4, #12
 8001a1e:	4a01      	ldr	r2, [pc, #4]	; (8001a24 <__aeabi_dmul+0x4cc>)
 8001a20:	0b24      	lsrs	r4, r4, #12
 8001a22:	e5fa      	b.n	800161a <__aeabi_dmul+0xc2>
 8001a24:	000007ff 	.word	0x000007ff
 8001a28:	0000043e 	.word	0x0000043e
 8001a2c:	0000041e 	.word	0x0000041e

08001a30 <__aeabi_dsub>:
 8001a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a32:	4657      	mov	r7, sl
 8001a34:	464e      	mov	r6, r9
 8001a36:	4645      	mov	r5, r8
 8001a38:	46de      	mov	lr, fp
 8001a3a:	b5e0      	push	{r5, r6, r7, lr}
 8001a3c:	001e      	movs	r6, r3
 8001a3e:	0017      	movs	r7, r2
 8001a40:	004a      	lsls	r2, r1, #1
 8001a42:	030b      	lsls	r3, r1, #12
 8001a44:	0d52      	lsrs	r2, r2, #21
 8001a46:	0a5b      	lsrs	r3, r3, #9
 8001a48:	4690      	mov	r8, r2
 8001a4a:	0f42      	lsrs	r2, r0, #29
 8001a4c:	431a      	orrs	r2, r3
 8001a4e:	0fcd      	lsrs	r5, r1, #31
 8001a50:	4ccd      	ldr	r4, [pc, #820]	; (8001d88 <__aeabi_dsub+0x358>)
 8001a52:	0331      	lsls	r1, r6, #12
 8001a54:	00c3      	lsls	r3, r0, #3
 8001a56:	4694      	mov	ip, r2
 8001a58:	0070      	lsls	r0, r6, #1
 8001a5a:	0f7a      	lsrs	r2, r7, #29
 8001a5c:	0a49      	lsrs	r1, r1, #9
 8001a5e:	00ff      	lsls	r7, r7, #3
 8001a60:	469a      	mov	sl, r3
 8001a62:	46b9      	mov	r9, r7
 8001a64:	0d40      	lsrs	r0, r0, #21
 8001a66:	0ff6      	lsrs	r6, r6, #31
 8001a68:	4311      	orrs	r1, r2
 8001a6a:	42a0      	cmp	r0, r4
 8001a6c:	d100      	bne.n	8001a70 <__aeabi_dsub+0x40>
 8001a6e:	e0b1      	b.n	8001bd4 <__aeabi_dsub+0x1a4>
 8001a70:	2201      	movs	r2, #1
 8001a72:	4056      	eors	r6, r2
 8001a74:	46b3      	mov	fp, r6
 8001a76:	42b5      	cmp	r5, r6
 8001a78:	d100      	bne.n	8001a7c <__aeabi_dsub+0x4c>
 8001a7a:	e088      	b.n	8001b8e <__aeabi_dsub+0x15e>
 8001a7c:	4642      	mov	r2, r8
 8001a7e:	1a12      	subs	r2, r2, r0
 8001a80:	2a00      	cmp	r2, #0
 8001a82:	dc00      	bgt.n	8001a86 <__aeabi_dsub+0x56>
 8001a84:	e0ae      	b.n	8001be4 <__aeabi_dsub+0x1b4>
 8001a86:	2800      	cmp	r0, #0
 8001a88:	d100      	bne.n	8001a8c <__aeabi_dsub+0x5c>
 8001a8a:	e0c1      	b.n	8001c10 <__aeabi_dsub+0x1e0>
 8001a8c:	48be      	ldr	r0, [pc, #760]	; (8001d88 <__aeabi_dsub+0x358>)
 8001a8e:	4580      	cmp	r8, r0
 8001a90:	d100      	bne.n	8001a94 <__aeabi_dsub+0x64>
 8001a92:	e151      	b.n	8001d38 <__aeabi_dsub+0x308>
 8001a94:	2080      	movs	r0, #128	; 0x80
 8001a96:	0400      	lsls	r0, r0, #16
 8001a98:	4301      	orrs	r1, r0
 8001a9a:	2a38      	cmp	r2, #56	; 0x38
 8001a9c:	dd00      	ble.n	8001aa0 <__aeabi_dsub+0x70>
 8001a9e:	e17b      	b.n	8001d98 <__aeabi_dsub+0x368>
 8001aa0:	2a1f      	cmp	r2, #31
 8001aa2:	dd00      	ble.n	8001aa6 <__aeabi_dsub+0x76>
 8001aa4:	e1ee      	b.n	8001e84 <__aeabi_dsub+0x454>
 8001aa6:	2020      	movs	r0, #32
 8001aa8:	003e      	movs	r6, r7
 8001aaa:	1a80      	subs	r0, r0, r2
 8001aac:	000c      	movs	r4, r1
 8001aae:	40d6      	lsrs	r6, r2
 8001ab0:	40d1      	lsrs	r1, r2
 8001ab2:	4087      	lsls	r7, r0
 8001ab4:	4662      	mov	r2, ip
 8001ab6:	4084      	lsls	r4, r0
 8001ab8:	1a52      	subs	r2, r2, r1
 8001aba:	1e78      	subs	r0, r7, #1
 8001abc:	4187      	sbcs	r7, r0
 8001abe:	4694      	mov	ip, r2
 8001ac0:	4334      	orrs	r4, r6
 8001ac2:	4327      	orrs	r7, r4
 8001ac4:	1bdc      	subs	r4, r3, r7
 8001ac6:	42a3      	cmp	r3, r4
 8001ac8:	419b      	sbcs	r3, r3
 8001aca:	4662      	mov	r2, ip
 8001acc:	425b      	negs	r3, r3
 8001ace:	1ad3      	subs	r3, r2, r3
 8001ad0:	4699      	mov	r9, r3
 8001ad2:	464b      	mov	r3, r9
 8001ad4:	021b      	lsls	r3, r3, #8
 8001ad6:	d400      	bmi.n	8001ada <__aeabi_dsub+0xaa>
 8001ad8:	e118      	b.n	8001d0c <__aeabi_dsub+0x2dc>
 8001ada:	464b      	mov	r3, r9
 8001adc:	0258      	lsls	r0, r3, #9
 8001ade:	0a43      	lsrs	r3, r0, #9
 8001ae0:	4699      	mov	r9, r3
 8001ae2:	464b      	mov	r3, r9
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d100      	bne.n	8001aea <__aeabi_dsub+0xba>
 8001ae8:	e137      	b.n	8001d5a <__aeabi_dsub+0x32a>
 8001aea:	4648      	mov	r0, r9
 8001aec:	f000 fbdc 	bl	80022a8 <__clzsi2>
 8001af0:	0001      	movs	r1, r0
 8001af2:	3908      	subs	r1, #8
 8001af4:	2320      	movs	r3, #32
 8001af6:	0022      	movs	r2, r4
 8001af8:	4648      	mov	r0, r9
 8001afa:	1a5b      	subs	r3, r3, r1
 8001afc:	40da      	lsrs	r2, r3
 8001afe:	4088      	lsls	r0, r1
 8001b00:	408c      	lsls	r4, r1
 8001b02:	4643      	mov	r3, r8
 8001b04:	4310      	orrs	r0, r2
 8001b06:	4588      	cmp	r8, r1
 8001b08:	dd00      	ble.n	8001b0c <__aeabi_dsub+0xdc>
 8001b0a:	e136      	b.n	8001d7a <__aeabi_dsub+0x34a>
 8001b0c:	1ac9      	subs	r1, r1, r3
 8001b0e:	1c4b      	adds	r3, r1, #1
 8001b10:	2b1f      	cmp	r3, #31
 8001b12:	dd00      	ble.n	8001b16 <__aeabi_dsub+0xe6>
 8001b14:	e0ea      	b.n	8001cec <__aeabi_dsub+0x2bc>
 8001b16:	2220      	movs	r2, #32
 8001b18:	0026      	movs	r6, r4
 8001b1a:	1ad2      	subs	r2, r2, r3
 8001b1c:	0001      	movs	r1, r0
 8001b1e:	4094      	lsls	r4, r2
 8001b20:	40de      	lsrs	r6, r3
 8001b22:	40d8      	lsrs	r0, r3
 8001b24:	2300      	movs	r3, #0
 8001b26:	4091      	lsls	r1, r2
 8001b28:	1e62      	subs	r2, r4, #1
 8001b2a:	4194      	sbcs	r4, r2
 8001b2c:	4681      	mov	r9, r0
 8001b2e:	4698      	mov	r8, r3
 8001b30:	4331      	orrs	r1, r6
 8001b32:	430c      	orrs	r4, r1
 8001b34:	0763      	lsls	r3, r4, #29
 8001b36:	d009      	beq.n	8001b4c <__aeabi_dsub+0x11c>
 8001b38:	230f      	movs	r3, #15
 8001b3a:	4023      	ands	r3, r4
 8001b3c:	2b04      	cmp	r3, #4
 8001b3e:	d005      	beq.n	8001b4c <__aeabi_dsub+0x11c>
 8001b40:	1d23      	adds	r3, r4, #4
 8001b42:	42a3      	cmp	r3, r4
 8001b44:	41a4      	sbcs	r4, r4
 8001b46:	4264      	negs	r4, r4
 8001b48:	44a1      	add	r9, r4
 8001b4a:	001c      	movs	r4, r3
 8001b4c:	464b      	mov	r3, r9
 8001b4e:	021b      	lsls	r3, r3, #8
 8001b50:	d400      	bmi.n	8001b54 <__aeabi_dsub+0x124>
 8001b52:	e0de      	b.n	8001d12 <__aeabi_dsub+0x2e2>
 8001b54:	4641      	mov	r1, r8
 8001b56:	4b8c      	ldr	r3, [pc, #560]	; (8001d88 <__aeabi_dsub+0x358>)
 8001b58:	3101      	adds	r1, #1
 8001b5a:	4299      	cmp	r1, r3
 8001b5c:	d100      	bne.n	8001b60 <__aeabi_dsub+0x130>
 8001b5e:	e0e7      	b.n	8001d30 <__aeabi_dsub+0x300>
 8001b60:	464b      	mov	r3, r9
 8001b62:	488a      	ldr	r0, [pc, #552]	; (8001d8c <__aeabi_dsub+0x35c>)
 8001b64:	08e4      	lsrs	r4, r4, #3
 8001b66:	4003      	ands	r3, r0
 8001b68:	0018      	movs	r0, r3
 8001b6a:	0549      	lsls	r1, r1, #21
 8001b6c:	075b      	lsls	r3, r3, #29
 8001b6e:	0240      	lsls	r0, r0, #9
 8001b70:	4323      	orrs	r3, r4
 8001b72:	0d4a      	lsrs	r2, r1, #21
 8001b74:	0b04      	lsrs	r4, r0, #12
 8001b76:	0512      	lsls	r2, r2, #20
 8001b78:	07ed      	lsls	r5, r5, #31
 8001b7a:	4322      	orrs	r2, r4
 8001b7c:	432a      	orrs	r2, r5
 8001b7e:	0018      	movs	r0, r3
 8001b80:	0011      	movs	r1, r2
 8001b82:	bcf0      	pop	{r4, r5, r6, r7}
 8001b84:	46bb      	mov	fp, r7
 8001b86:	46b2      	mov	sl, r6
 8001b88:	46a9      	mov	r9, r5
 8001b8a:	46a0      	mov	r8, r4
 8001b8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b8e:	4642      	mov	r2, r8
 8001b90:	1a12      	subs	r2, r2, r0
 8001b92:	2a00      	cmp	r2, #0
 8001b94:	dd52      	ble.n	8001c3c <__aeabi_dsub+0x20c>
 8001b96:	2800      	cmp	r0, #0
 8001b98:	d100      	bne.n	8001b9c <__aeabi_dsub+0x16c>
 8001b9a:	e09c      	b.n	8001cd6 <__aeabi_dsub+0x2a6>
 8001b9c:	45a0      	cmp	r8, r4
 8001b9e:	d100      	bne.n	8001ba2 <__aeabi_dsub+0x172>
 8001ba0:	e0ca      	b.n	8001d38 <__aeabi_dsub+0x308>
 8001ba2:	2080      	movs	r0, #128	; 0x80
 8001ba4:	0400      	lsls	r0, r0, #16
 8001ba6:	4301      	orrs	r1, r0
 8001ba8:	2a38      	cmp	r2, #56	; 0x38
 8001baa:	dd00      	ble.n	8001bae <__aeabi_dsub+0x17e>
 8001bac:	e149      	b.n	8001e42 <__aeabi_dsub+0x412>
 8001bae:	2a1f      	cmp	r2, #31
 8001bb0:	dc00      	bgt.n	8001bb4 <__aeabi_dsub+0x184>
 8001bb2:	e197      	b.n	8001ee4 <__aeabi_dsub+0x4b4>
 8001bb4:	0010      	movs	r0, r2
 8001bb6:	000e      	movs	r6, r1
 8001bb8:	3820      	subs	r0, #32
 8001bba:	40c6      	lsrs	r6, r0
 8001bbc:	2a20      	cmp	r2, #32
 8001bbe:	d004      	beq.n	8001bca <__aeabi_dsub+0x19a>
 8001bc0:	2040      	movs	r0, #64	; 0x40
 8001bc2:	1a82      	subs	r2, r0, r2
 8001bc4:	4091      	lsls	r1, r2
 8001bc6:	430f      	orrs	r7, r1
 8001bc8:	46b9      	mov	r9, r7
 8001bca:	464c      	mov	r4, r9
 8001bcc:	1e62      	subs	r2, r4, #1
 8001bce:	4194      	sbcs	r4, r2
 8001bd0:	4334      	orrs	r4, r6
 8001bd2:	e13a      	b.n	8001e4a <__aeabi_dsub+0x41a>
 8001bd4:	000a      	movs	r2, r1
 8001bd6:	433a      	orrs	r2, r7
 8001bd8:	d028      	beq.n	8001c2c <__aeabi_dsub+0x1fc>
 8001bda:	46b3      	mov	fp, r6
 8001bdc:	42b5      	cmp	r5, r6
 8001bde:	d02b      	beq.n	8001c38 <__aeabi_dsub+0x208>
 8001be0:	4a6b      	ldr	r2, [pc, #428]	; (8001d90 <__aeabi_dsub+0x360>)
 8001be2:	4442      	add	r2, r8
 8001be4:	2a00      	cmp	r2, #0
 8001be6:	d05d      	beq.n	8001ca4 <__aeabi_dsub+0x274>
 8001be8:	4642      	mov	r2, r8
 8001bea:	4644      	mov	r4, r8
 8001bec:	1a82      	subs	r2, r0, r2
 8001bee:	2c00      	cmp	r4, #0
 8001bf0:	d000      	beq.n	8001bf4 <__aeabi_dsub+0x1c4>
 8001bf2:	e0f5      	b.n	8001de0 <__aeabi_dsub+0x3b0>
 8001bf4:	4665      	mov	r5, ip
 8001bf6:	431d      	orrs	r5, r3
 8001bf8:	d100      	bne.n	8001bfc <__aeabi_dsub+0x1cc>
 8001bfa:	e19c      	b.n	8001f36 <__aeabi_dsub+0x506>
 8001bfc:	1e55      	subs	r5, r2, #1
 8001bfe:	2a01      	cmp	r2, #1
 8001c00:	d100      	bne.n	8001c04 <__aeabi_dsub+0x1d4>
 8001c02:	e1fb      	b.n	8001ffc <__aeabi_dsub+0x5cc>
 8001c04:	4c60      	ldr	r4, [pc, #384]	; (8001d88 <__aeabi_dsub+0x358>)
 8001c06:	42a2      	cmp	r2, r4
 8001c08:	d100      	bne.n	8001c0c <__aeabi_dsub+0x1dc>
 8001c0a:	e1bd      	b.n	8001f88 <__aeabi_dsub+0x558>
 8001c0c:	002a      	movs	r2, r5
 8001c0e:	e0f0      	b.n	8001df2 <__aeabi_dsub+0x3c2>
 8001c10:	0008      	movs	r0, r1
 8001c12:	4338      	orrs	r0, r7
 8001c14:	d100      	bne.n	8001c18 <__aeabi_dsub+0x1e8>
 8001c16:	e0c3      	b.n	8001da0 <__aeabi_dsub+0x370>
 8001c18:	1e50      	subs	r0, r2, #1
 8001c1a:	2a01      	cmp	r2, #1
 8001c1c:	d100      	bne.n	8001c20 <__aeabi_dsub+0x1f0>
 8001c1e:	e1a8      	b.n	8001f72 <__aeabi_dsub+0x542>
 8001c20:	4c59      	ldr	r4, [pc, #356]	; (8001d88 <__aeabi_dsub+0x358>)
 8001c22:	42a2      	cmp	r2, r4
 8001c24:	d100      	bne.n	8001c28 <__aeabi_dsub+0x1f8>
 8001c26:	e087      	b.n	8001d38 <__aeabi_dsub+0x308>
 8001c28:	0002      	movs	r2, r0
 8001c2a:	e736      	b.n	8001a9a <__aeabi_dsub+0x6a>
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	4056      	eors	r6, r2
 8001c30:	46b3      	mov	fp, r6
 8001c32:	42b5      	cmp	r5, r6
 8001c34:	d000      	beq.n	8001c38 <__aeabi_dsub+0x208>
 8001c36:	e721      	b.n	8001a7c <__aeabi_dsub+0x4c>
 8001c38:	4a55      	ldr	r2, [pc, #340]	; (8001d90 <__aeabi_dsub+0x360>)
 8001c3a:	4442      	add	r2, r8
 8001c3c:	2a00      	cmp	r2, #0
 8001c3e:	d100      	bne.n	8001c42 <__aeabi_dsub+0x212>
 8001c40:	e0b5      	b.n	8001dae <__aeabi_dsub+0x37e>
 8001c42:	4642      	mov	r2, r8
 8001c44:	4644      	mov	r4, r8
 8001c46:	1a82      	subs	r2, r0, r2
 8001c48:	2c00      	cmp	r4, #0
 8001c4a:	d100      	bne.n	8001c4e <__aeabi_dsub+0x21e>
 8001c4c:	e138      	b.n	8001ec0 <__aeabi_dsub+0x490>
 8001c4e:	4e4e      	ldr	r6, [pc, #312]	; (8001d88 <__aeabi_dsub+0x358>)
 8001c50:	42b0      	cmp	r0, r6
 8001c52:	d100      	bne.n	8001c56 <__aeabi_dsub+0x226>
 8001c54:	e1de      	b.n	8002014 <__aeabi_dsub+0x5e4>
 8001c56:	2680      	movs	r6, #128	; 0x80
 8001c58:	4664      	mov	r4, ip
 8001c5a:	0436      	lsls	r6, r6, #16
 8001c5c:	4334      	orrs	r4, r6
 8001c5e:	46a4      	mov	ip, r4
 8001c60:	2a38      	cmp	r2, #56	; 0x38
 8001c62:	dd00      	ble.n	8001c66 <__aeabi_dsub+0x236>
 8001c64:	e196      	b.n	8001f94 <__aeabi_dsub+0x564>
 8001c66:	2a1f      	cmp	r2, #31
 8001c68:	dd00      	ble.n	8001c6c <__aeabi_dsub+0x23c>
 8001c6a:	e224      	b.n	80020b6 <__aeabi_dsub+0x686>
 8001c6c:	2620      	movs	r6, #32
 8001c6e:	1ab4      	subs	r4, r6, r2
 8001c70:	46a2      	mov	sl, r4
 8001c72:	4664      	mov	r4, ip
 8001c74:	4656      	mov	r6, sl
 8001c76:	40b4      	lsls	r4, r6
 8001c78:	46a1      	mov	r9, r4
 8001c7a:	001c      	movs	r4, r3
 8001c7c:	464e      	mov	r6, r9
 8001c7e:	40d4      	lsrs	r4, r2
 8001c80:	4326      	orrs	r6, r4
 8001c82:	0034      	movs	r4, r6
 8001c84:	4656      	mov	r6, sl
 8001c86:	40b3      	lsls	r3, r6
 8001c88:	1e5e      	subs	r6, r3, #1
 8001c8a:	41b3      	sbcs	r3, r6
 8001c8c:	431c      	orrs	r4, r3
 8001c8e:	4663      	mov	r3, ip
 8001c90:	40d3      	lsrs	r3, r2
 8001c92:	18c9      	adds	r1, r1, r3
 8001c94:	19e4      	adds	r4, r4, r7
 8001c96:	42bc      	cmp	r4, r7
 8001c98:	41bf      	sbcs	r7, r7
 8001c9a:	427f      	negs	r7, r7
 8001c9c:	46b9      	mov	r9, r7
 8001c9e:	4680      	mov	r8, r0
 8001ca0:	4489      	add	r9, r1
 8001ca2:	e0d8      	b.n	8001e56 <__aeabi_dsub+0x426>
 8001ca4:	4640      	mov	r0, r8
 8001ca6:	4c3b      	ldr	r4, [pc, #236]	; (8001d94 <__aeabi_dsub+0x364>)
 8001ca8:	3001      	adds	r0, #1
 8001caa:	4220      	tst	r0, r4
 8001cac:	d000      	beq.n	8001cb0 <__aeabi_dsub+0x280>
 8001cae:	e0b4      	b.n	8001e1a <__aeabi_dsub+0x3ea>
 8001cb0:	4640      	mov	r0, r8
 8001cb2:	2800      	cmp	r0, #0
 8001cb4:	d000      	beq.n	8001cb8 <__aeabi_dsub+0x288>
 8001cb6:	e144      	b.n	8001f42 <__aeabi_dsub+0x512>
 8001cb8:	4660      	mov	r0, ip
 8001cba:	4318      	orrs	r0, r3
 8001cbc:	d100      	bne.n	8001cc0 <__aeabi_dsub+0x290>
 8001cbe:	e190      	b.n	8001fe2 <__aeabi_dsub+0x5b2>
 8001cc0:	0008      	movs	r0, r1
 8001cc2:	4338      	orrs	r0, r7
 8001cc4:	d000      	beq.n	8001cc8 <__aeabi_dsub+0x298>
 8001cc6:	e1aa      	b.n	800201e <__aeabi_dsub+0x5ee>
 8001cc8:	4661      	mov	r1, ip
 8001cca:	08db      	lsrs	r3, r3, #3
 8001ccc:	0749      	lsls	r1, r1, #29
 8001cce:	430b      	orrs	r3, r1
 8001cd0:	4661      	mov	r1, ip
 8001cd2:	08cc      	lsrs	r4, r1, #3
 8001cd4:	e027      	b.n	8001d26 <__aeabi_dsub+0x2f6>
 8001cd6:	0008      	movs	r0, r1
 8001cd8:	4338      	orrs	r0, r7
 8001cda:	d061      	beq.n	8001da0 <__aeabi_dsub+0x370>
 8001cdc:	1e50      	subs	r0, r2, #1
 8001cde:	2a01      	cmp	r2, #1
 8001ce0:	d100      	bne.n	8001ce4 <__aeabi_dsub+0x2b4>
 8001ce2:	e139      	b.n	8001f58 <__aeabi_dsub+0x528>
 8001ce4:	42a2      	cmp	r2, r4
 8001ce6:	d027      	beq.n	8001d38 <__aeabi_dsub+0x308>
 8001ce8:	0002      	movs	r2, r0
 8001cea:	e75d      	b.n	8001ba8 <__aeabi_dsub+0x178>
 8001cec:	0002      	movs	r2, r0
 8001cee:	391f      	subs	r1, #31
 8001cf0:	40ca      	lsrs	r2, r1
 8001cf2:	0011      	movs	r1, r2
 8001cf4:	2b20      	cmp	r3, #32
 8001cf6:	d003      	beq.n	8001d00 <__aeabi_dsub+0x2d0>
 8001cf8:	2240      	movs	r2, #64	; 0x40
 8001cfa:	1ad3      	subs	r3, r2, r3
 8001cfc:	4098      	lsls	r0, r3
 8001cfe:	4304      	orrs	r4, r0
 8001d00:	1e63      	subs	r3, r4, #1
 8001d02:	419c      	sbcs	r4, r3
 8001d04:	2300      	movs	r3, #0
 8001d06:	4699      	mov	r9, r3
 8001d08:	4698      	mov	r8, r3
 8001d0a:	430c      	orrs	r4, r1
 8001d0c:	0763      	lsls	r3, r4, #29
 8001d0e:	d000      	beq.n	8001d12 <__aeabi_dsub+0x2e2>
 8001d10:	e712      	b.n	8001b38 <__aeabi_dsub+0x108>
 8001d12:	464b      	mov	r3, r9
 8001d14:	464a      	mov	r2, r9
 8001d16:	08e4      	lsrs	r4, r4, #3
 8001d18:	075b      	lsls	r3, r3, #29
 8001d1a:	4323      	orrs	r3, r4
 8001d1c:	08d4      	lsrs	r4, r2, #3
 8001d1e:	4642      	mov	r2, r8
 8001d20:	4919      	ldr	r1, [pc, #100]	; (8001d88 <__aeabi_dsub+0x358>)
 8001d22:	428a      	cmp	r2, r1
 8001d24:	d00e      	beq.n	8001d44 <__aeabi_dsub+0x314>
 8001d26:	0324      	lsls	r4, r4, #12
 8001d28:	0552      	lsls	r2, r2, #21
 8001d2a:	0b24      	lsrs	r4, r4, #12
 8001d2c:	0d52      	lsrs	r2, r2, #21
 8001d2e:	e722      	b.n	8001b76 <__aeabi_dsub+0x146>
 8001d30:	000a      	movs	r2, r1
 8001d32:	2400      	movs	r4, #0
 8001d34:	2300      	movs	r3, #0
 8001d36:	e71e      	b.n	8001b76 <__aeabi_dsub+0x146>
 8001d38:	08db      	lsrs	r3, r3, #3
 8001d3a:	4662      	mov	r2, ip
 8001d3c:	0752      	lsls	r2, r2, #29
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	4662      	mov	r2, ip
 8001d42:	08d4      	lsrs	r4, r2, #3
 8001d44:	001a      	movs	r2, r3
 8001d46:	4322      	orrs	r2, r4
 8001d48:	d100      	bne.n	8001d4c <__aeabi_dsub+0x31c>
 8001d4a:	e1fc      	b.n	8002146 <__aeabi_dsub+0x716>
 8001d4c:	2280      	movs	r2, #128	; 0x80
 8001d4e:	0312      	lsls	r2, r2, #12
 8001d50:	4314      	orrs	r4, r2
 8001d52:	0324      	lsls	r4, r4, #12
 8001d54:	4a0c      	ldr	r2, [pc, #48]	; (8001d88 <__aeabi_dsub+0x358>)
 8001d56:	0b24      	lsrs	r4, r4, #12
 8001d58:	e70d      	b.n	8001b76 <__aeabi_dsub+0x146>
 8001d5a:	0020      	movs	r0, r4
 8001d5c:	f000 faa4 	bl	80022a8 <__clzsi2>
 8001d60:	0001      	movs	r1, r0
 8001d62:	3118      	adds	r1, #24
 8001d64:	291f      	cmp	r1, #31
 8001d66:	dc00      	bgt.n	8001d6a <__aeabi_dsub+0x33a>
 8001d68:	e6c4      	b.n	8001af4 <__aeabi_dsub+0xc4>
 8001d6a:	3808      	subs	r0, #8
 8001d6c:	4084      	lsls	r4, r0
 8001d6e:	4643      	mov	r3, r8
 8001d70:	0020      	movs	r0, r4
 8001d72:	2400      	movs	r4, #0
 8001d74:	4588      	cmp	r8, r1
 8001d76:	dc00      	bgt.n	8001d7a <__aeabi_dsub+0x34a>
 8001d78:	e6c8      	b.n	8001b0c <__aeabi_dsub+0xdc>
 8001d7a:	4a04      	ldr	r2, [pc, #16]	; (8001d8c <__aeabi_dsub+0x35c>)
 8001d7c:	1a5b      	subs	r3, r3, r1
 8001d7e:	4010      	ands	r0, r2
 8001d80:	4698      	mov	r8, r3
 8001d82:	4681      	mov	r9, r0
 8001d84:	e6d6      	b.n	8001b34 <__aeabi_dsub+0x104>
 8001d86:	46c0      	nop			; (mov r8, r8)
 8001d88:	000007ff 	.word	0x000007ff
 8001d8c:	ff7fffff 	.word	0xff7fffff
 8001d90:	fffff801 	.word	0xfffff801
 8001d94:	000007fe 	.word	0x000007fe
 8001d98:	430f      	orrs	r7, r1
 8001d9a:	1e7a      	subs	r2, r7, #1
 8001d9c:	4197      	sbcs	r7, r2
 8001d9e:	e691      	b.n	8001ac4 <__aeabi_dsub+0x94>
 8001da0:	4661      	mov	r1, ip
 8001da2:	08db      	lsrs	r3, r3, #3
 8001da4:	0749      	lsls	r1, r1, #29
 8001da6:	430b      	orrs	r3, r1
 8001da8:	4661      	mov	r1, ip
 8001daa:	08cc      	lsrs	r4, r1, #3
 8001dac:	e7b8      	b.n	8001d20 <__aeabi_dsub+0x2f0>
 8001dae:	4640      	mov	r0, r8
 8001db0:	4cd3      	ldr	r4, [pc, #844]	; (8002100 <__aeabi_dsub+0x6d0>)
 8001db2:	3001      	adds	r0, #1
 8001db4:	4220      	tst	r0, r4
 8001db6:	d000      	beq.n	8001dba <__aeabi_dsub+0x38a>
 8001db8:	e0a2      	b.n	8001f00 <__aeabi_dsub+0x4d0>
 8001dba:	4640      	mov	r0, r8
 8001dbc:	2800      	cmp	r0, #0
 8001dbe:	d000      	beq.n	8001dc2 <__aeabi_dsub+0x392>
 8001dc0:	e101      	b.n	8001fc6 <__aeabi_dsub+0x596>
 8001dc2:	4660      	mov	r0, ip
 8001dc4:	4318      	orrs	r0, r3
 8001dc6:	d100      	bne.n	8001dca <__aeabi_dsub+0x39a>
 8001dc8:	e15e      	b.n	8002088 <__aeabi_dsub+0x658>
 8001dca:	0008      	movs	r0, r1
 8001dcc:	4338      	orrs	r0, r7
 8001dce:	d000      	beq.n	8001dd2 <__aeabi_dsub+0x3a2>
 8001dd0:	e15f      	b.n	8002092 <__aeabi_dsub+0x662>
 8001dd2:	4661      	mov	r1, ip
 8001dd4:	08db      	lsrs	r3, r3, #3
 8001dd6:	0749      	lsls	r1, r1, #29
 8001dd8:	430b      	orrs	r3, r1
 8001dda:	4661      	mov	r1, ip
 8001ddc:	08cc      	lsrs	r4, r1, #3
 8001dde:	e7a2      	b.n	8001d26 <__aeabi_dsub+0x2f6>
 8001de0:	4dc8      	ldr	r5, [pc, #800]	; (8002104 <__aeabi_dsub+0x6d4>)
 8001de2:	42a8      	cmp	r0, r5
 8001de4:	d100      	bne.n	8001de8 <__aeabi_dsub+0x3b8>
 8001de6:	e0cf      	b.n	8001f88 <__aeabi_dsub+0x558>
 8001de8:	2580      	movs	r5, #128	; 0x80
 8001dea:	4664      	mov	r4, ip
 8001dec:	042d      	lsls	r5, r5, #16
 8001dee:	432c      	orrs	r4, r5
 8001df0:	46a4      	mov	ip, r4
 8001df2:	2a38      	cmp	r2, #56	; 0x38
 8001df4:	dc56      	bgt.n	8001ea4 <__aeabi_dsub+0x474>
 8001df6:	2a1f      	cmp	r2, #31
 8001df8:	dd00      	ble.n	8001dfc <__aeabi_dsub+0x3cc>
 8001dfa:	e0d1      	b.n	8001fa0 <__aeabi_dsub+0x570>
 8001dfc:	2520      	movs	r5, #32
 8001dfe:	001e      	movs	r6, r3
 8001e00:	1aad      	subs	r5, r5, r2
 8001e02:	4664      	mov	r4, ip
 8001e04:	40ab      	lsls	r3, r5
 8001e06:	40ac      	lsls	r4, r5
 8001e08:	40d6      	lsrs	r6, r2
 8001e0a:	1e5d      	subs	r5, r3, #1
 8001e0c:	41ab      	sbcs	r3, r5
 8001e0e:	4334      	orrs	r4, r6
 8001e10:	4323      	orrs	r3, r4
 8001e12:	4664      	mov	r4, ip
 8001e14:	40d4      	lsrs	r4, r2
 8001e16:	1b09      	subs	r1, r1, r4
 8001e18:	e049      	b.n	8001eae <__aeabi_dsub+0x47e>
 8001e1a:	4660      	mov	r0, ip
 8001e1c:	1bdc      	subs	r4, r3, r7
 8001e1e:	1a46      	subs	r6, r0, r1
 8001e20:	42a3      	cmp	r3, r4
 8001e22:	4180      	sbcs	r0, r0
 8001e24:	4240      	negs	r0, r0
 8001e26:	4681      	mov	r9, r0
 8001e28:	0030      	movs	r0, r6
 8001e2a:	464e      	mov	r6, r9
 8001e2c:	1b80      	subs	r0, r0, r6
 8001e2e:	4681      	mov	r9, r0
 8001e30:	0200      	lsls	r0, r0, #8
 8001e32:	d476      	bmi.n	8001f22 <__aeabi_dsub+0x4f2>
 8001e34:	464b      	mov	r3, r9
 8001e36:	4323      	orrs	r3, r4
 8001e38:	d000      	beq.n	8001e3c <__aeabi_dsub+0x40c>
 8001e3a:	e652      	b.n	8001ae2 <__aeabi_dsub+0xb2>
 8001e3c:	2400      	movs	r4, #0
 8001e3e:	2500      	movs	r5, #0
 8001e40:	e771      	b.n	8001d26 <__aeabi_dsub+0x2f6>
 8001e42:	4339      	orrs	r1, r7
 8001e44:	000c      	movs	r4, r1
 8001e46:	1e62      	subs	r2, r4, #1
 8001e48:	4194      	sbcs	r4, r2
 8001e4a:	18e4      	adds	r4, r4, r3
 8001e4c:	429c      	cmp	r4, r3
 8001e4e:	419b      	sbcs	r3, r3
 8001e50:	425b      	negs	r3, r3
 8001e52:	4463      	add	r3, ip
 8001e54:	4699      	mov	r9, r3
 8001e56:	464b      	mov	r3, r9
 8001e58:	021b      	lsls	r3, r3, #8
 8001e5a:	d400      	bmi.n	8001e5e <__aeabi_dsub+0x42e>
 8001e5c:	e756      	b.n	8001d0c <__aeabi_dsub+0x2dc>
 8001e5e:	2301      	movs	r3, #1
 8001e60:	469c      	mov	ip, r3
 8001e62:	4ba8      	ldr	r3, [pc, #672]	; (8002104 <__aeabi_dsub+0x6d4>)
 8001e64:	44e0      	add	r8, ip
 8001e66:	4598      	cmp	r8, r3
 8001e68:	d038      	beq.n	8001edc <__aeabi_dsub+0x4ac>
 8001e6a:	464b      	mov	r3, r9
 8001e6c:	48a6      	ldr	r0, [pc, #664]	; (8002108 <__aeabi_dsub+0x6d8>)
 8001e6e:	2201      	movs	r2, #1
 8001e70:	4003      	ands	r3, r0
 8001e72:	0018      	movs	r0, r3
 8001e74:	0863      	lsrs	r3, r4, #1
 8001e76:	4014      	ands	r4, r2
 8001e78:	431c      	orrs	r4, r3
 8001e7a:	07c3      	lsls	r3, r0, #31
 8001e7c:	431c      	orrs	r4, r3
 8001e7e:	0843      	lsrs	r3, r0, #1
 8001e80:	4699      	mov	r9, r3
 8001e82:	e657      	b.n	8001b34 <__aeabi_dsub+0x104>
 8001e84:	0010      	movs	r0, r2
 8001e86:	000e      	movs	r6, r1
 8001e88:	3820      	subs	r0, #32
 8001e8a:	40c6      	lsrs	r6, r0
 8001e8c:	2a20      	cmp	r2, #32
 8001e8e:	d004      	beq.n	8001e9a <__aeabi_dsub+0x46a>
 8001e90:	2040      	movs	r0, #64	; 0x40
 8001e92:	1a82      	subs	r2, r0, r2
 8001e94:	4091      	lsls	r1, r2
 8001e96:	430f      	orrs	r7, r1
 8001e98:	46b9      	mov	r9, r7
 8001e9a:	464f      	mov	r7, r9
 8001e9c:	1e7a      	subs	r2, r7, #1
 8001e9e:	4197      	sbcs	r7, r2
 8001ea0:	4337      	orrs	r7, r6
 8001ea2:	e60f      	b.n	8001ac4 <__aeabi_dsub+0x94>
 8001ea4:	4662      	mov	r2, ip
 8001ea6:	431a      	orrs	r2, r3
 8001ea8:	0013      	movs	r3, r2
 8001eaa:	1e5a      	subs	r2, r3, #1
 8001eac:	4193      	sbcs	r3, r2
 8001eae:	1afc      	subs	r4, r7, r3
 8001eb0:	42a7      	cmp	r7, r4
 8001eb2:	41bf      	sbcs	r7, r7
 8001eb4:	427f      	negs	r7, r7
 8001eb6:	1bcb      	subs	r3, r1, r7
 8001eb8:	4699      	mov	r9, r3
 8001eba:	465d      	mov	r5, fp
 8001ebc:	4680      	mov	r8, r0
 8001ebe:	e608      	b.n	8001ad2 <__aeabi_dsub+0xa2>
 8001ec0:	4666      	mov	r6, ip
 8001ec2:	431e      	orrs	r6, r3
 8001ec4:	d100      	bne.n	8001ec8 <__aeabi_dsub+0x498>
 8001ec6:	e0be      	b.n	8002046 <__aeabi_dsub+0x616>
 8001ec8:	1e56      	subs	r6, r2, #1
 8001eca:	2a01      	cmp	r2, #1
 8001ecc:	d100      	bne.n	8001ed0 <__aeabi_dsub+0x4a0>
 8001ece:	e109      	b.n	80020e4 <__aeabi_dsub+0x6b4>
 8001ed0:	4c8c      	ldr	r4, [pc, #560]	; (8002104 <__aeabi_dsub+0x6d4>)
 8001ed2:	42a2      	cmp	r2, r4
 8001ed4:	d100      	bne.n	8001ed8 <__aeabi_dsub+0x4a8>
 8001ed6:	e119      	b.n	800210c <__aeabi_dsub+0x6dc>
 8001ed8:	0032      	movs	r2, r6
 8001eda:	e6c1      	b.n	8001c60 <__aeabi_dsub+0x230>
 8001edc:	4642      	mov	r2, r8
 8001ede:	2400      	movs	r4, #0
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	e648      	b.n	8001b76 <__aeabi_dsub+0x146>
 8001ee4:	2020      	movs	r0, #32
 8001ee6:	000c      	movs	r4, r1
 8001ee8:	1a80      	subs	r0, r0, r2
 8001eea:	003e      	movs	r6, r7
 8001eec:	4087      	lsls	r7, r0
 8001eee:	4084      	lsls	r4, r0
 8001ef0:	40d6      	lsrs	r6, r2
 8001ef2:	1e78      	subs	r0, r7, #1
 8001ef4:	4187      	sbcs	r7, r0
 8001ef6:	40d1      	lsrs	r1, r2
 8001ef8:	4334      	orrs	r4, r6
 8001efa:	433c      	orrs	r4, r7
 8001efc:	448c      	add	ip, r1
 8001efe:	e7a4      	b.n	8001e4a <__aeabi_dsub+0x41a>
 8001f00:	4a80      	ldr	r2, [pc, #512]	; (8002104 <__aeabi_dsub+0x6d4>)
 8001f02:	4290      	cmp	r0, r2
 8001f04:	d100      	bne.n	8001f08 <__aeabi_dsub+0x4d8>
 8001f06:	e0e9      	b.n	80020dc <__aeabi_dsub+0x6ac>
 8001f08:	19df      	adds	r7, r3, r7
 8001f0a:	429f      	cmp	r7, r3
 8001f0c:	419b      	sbcs	r3, r3
 8001f0e:	4461      	add	r1, ip
 8001f10:	425b      	negs	r3, r3
 8001f12:	18c9      	adds	r1, r1, r3
 8001f14:	07cc      	lsls	r4, r1, #31
 8001f16:	087f      	lsrs	r7, r7, #1
 8001f18:	084b      	lsrs	r3, r1, #1
 8001f1a:	4699      	mov	r9, r3
 8001f1c:	4680      	mov	r8, r0
 8001f1e:	433c      	orrs	r4, r7
 8001f20:	e6f4      	b.n	8001d0c <__aeabi_dsub+0x2dc>
 8001f22:	1afc      	subs	r4, r7, r3
 8001f24:	42a7      	cmp	r7, r4
 8001f26:	41bf      	sbcs	r7, r7
 8001f28:	4663      	mov	r3, ip
 8001f2a:	427f      	negs	r7, r7
 8001f2c:	1ac9      	subs	r1, r1, r3
 8001f2e:	1bcb      	subs	r3, r1, r7
 8001f30:	4699      	mov	r9, r3
 8001f32:	465d      	mov	r5, fp
 8001f34:	e5d5      	b.n	8001ae2 <__aeabi_dsub+0xb2>
 8001f36:	08ff      	lsrs	r7, r7, #3
 8001f38:	074b      	lsls	r3, r1, #29
 8001f3a:	465d      	mov	r5, fp
 8001f3c:	433b      	orrs	r3, r7
 8001f3e:	08cc      	lsrs	r4, r1, #3
 8001f40:	e6ee      	b.n	8001d20 <__aeabi_dsub+0x2f0>
 8001f42:	4662      	mov	r2, ip
 8001f44:	431a      	orrs	r2, r3
 8001f46:	d000      	beq.n	8001f4a <__aeabi_dsub+0x51a>
 8001f48:	e082      	b.n	8002050 <__aeabi_dsub+0x620>
 8001f4a:	000b      	movs	r3, r1
 8001f4c:	433b      	orrs	r3, r7
 8001f4e:	d11b      	bne.n	8001f88 <__aeabi_dsub+0x558>
 8001f50:	2480      	movs	r4, #128	; 0x80
 8001f52:	2500      	movs	r5, #0
 8001f54:	0324      	lsls	r4, r4, #12
 8001f56:	e6f9      	b.n	8001d4c <__aeabi_dsub+0x31c>
 8001f58:	19dc      	adds	r4, r3, r7
 8001f5a:	429c      	cmp	r4, r3
 8001f5c:	419b      	sbcs	r3, r3
 8001f5e:	4461      	add	r1, ip
 8001f60:	4689      	mov	r9, r1
 8001f62:	425b      	negs	r3, r3
 8001f64:	4499      	add	r9, r3
 8001f66:	464b      	mov	r3, r9
 8001f68:	021b      	lsls	r3, r3, #8
 8001f6a:	d444      	bmi.n	8001ff6 <__aeabi_dsub+0x5c6>
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	4698      	mov	r8, r3
 8001f70:	e6cc      	b.n	8001d0c <__aeabi_dsub+0x2dc>
 8001f72:	1bdc      	subs	r4, r3, r7
 8001f74:	4662      	mov	r2, ip
 8001f76:	42a3      	cmp	r3, r4
 8001f78:	419b      	sbcs	r3, r3
 8001f7a:	1a51      	subs	r1, r2, r1
 8001f7c:	425b      	negs	r3, r3
 8001f7e:	1acb      	subs	r3, r1, r3
 8001f80:	4699      	mov	r9, r3
 8001f82:	2301      	movs	r3, #1
 8001f84:	4698      	mov	r8, r3
 8001f86:	e5a4      	b.n	8001ad2 <__aeabi_dsub+0xa2>
 8001f88:	08ff      	lsrs	r7, r7, #3
 8001f8a:	074b      	lsls	r3, r1, #29
 8001f8c:	465d      	mov	r5, fp
 8001f8e:	433b      	orrs	r3, r7
 8001f90:	08cc      	lsrs	r4, r1, #3
 8001f92:	e6d7      	b.n	8001d44 <__aeabi_dsub+0x314>
 8001f94:	4662      	mov	r2, ip
 8001f96:	431a      	orrs	r2, r3
 8001f98:	0014      	movs	r4, r2
 8001f9a:	1e63      	subs	r3, r4, #1
 8001f9c:	419c      	sbcs	r4, r3
 8001f9e:	e679      	b.n	8001c94 <__aeabi_dsub+0x264>
 8001fa0:	0015      	movs	r5, r2
 8001fa2:	4664      	mov	r4, ip
 8001fa4:	3d20      	subs	r5, #32
 8001fa6:	40ec      	lsrs	r4, r5
 8001fa8:	46a0      	mov	r8, r4
 8001faa:	2a20      	cmp	r2, #32
 8001fac:	d005      	beq.n	8001fba <__aeabi_dsub+0x58a>
 8001fae:	2540      	movs	r5, #64	; 0x40
 8001fb0:	4664      	mov	r4, ip
 8001fb2:	1aaa      	subs	r2, r5, r2
 8001fb4:	4094      	lsls	r4, r2
 8001fb6:	4323      	orrs	r3, r4
 8001fb8:	469a      	mov	sl, r3
 8001fba:	4654      	mov	r4, sl
 8001fbc:	1e63      	subs	r3, r4, #1
 8001fbe:	419c      	sbcs	r4, r3
 8001fc0:	4643      	mov	r3, r8
 8001fc2:	4323      	orrs	r3, r4
 8001fc4:	e773      	b.n	8001eae <__aeabi_dsub+0x47e>
 8001fc6:	4662      	mov	r2, ip
 8001fc8:	431a      	orrs	r2, r3
 8001fca:	d023      	beq.n	8002014 <__aeabi_dsub+0x5e4>
 8001fcc:	000a      	movs	r2, r1
 8001fce:	433a      	orrs	r2, r7
 8001fd0:	d000      	beq.n	8001fd4 <__aeabi_dsub+0x5a4>
 8001fd2:	e0a0      	b.n	8002116 <__aeabi_dsub+0x6e6>
 8001fd4:	4662      	mov	r2, ip
 8001fd6:	08db      	lsrs	r3, r3, #3
 8001fd8:	0752      	lsls	r2, r2, #29
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	4662      	mov	r2, ip
 8001fde:	08d4      	lsrs	r4, r2, #3
 8001fe0:	e6b0      	b.n	8001d44 <__aeabi_dsub+0x314>
 8001fe2:	000b      	movs	r3, r1
 8001fe4:	433b      	orrs	r3, r7
 8001fe6:	d100      	bne.n	8001fea <__aeabi_dsub+0x5ba>
 8001fe8:	e728      	b.n	8001e3c <__aeabi_dsub+0x40c>
 8001fea:	08ff      	lsrs	r7, r7, #3
 8001fec:	074b      	lsls	r3, r1, #29
 8001fee:	465d      	mov	r5, fp
 8001ff0:	433b      	orrs	r3, r7
 8001ff2:	08cc      	lsrs	r4, r1, #3
 8001ff4:	e697      	b.n	8001d26 <__aeabi_dsub+0x2f6>
 8001ff6:	2302      	movs	r3, #2
 8001ff8:	4698      	mov	r8, r3
 8001ffa:	e736      	b.n	8001e6a <__aeabi_dsub+0x43a>
 8001ffc:	1afc      	subs	r4, r7, r3
 8001ffe:	42a7      	cmp	r7, r4
 8002000:	41bf      	sbcs	r7, r7
 8002002:	4663      	mov	r3, ip
 8002004:	427f      	negs	r7, r7
 8002006:	1ac9      	subs	r1, r1, r3
 8002008:	1bcb      	subs	r3, r1, r7
 800200a:	4699      	mov	r9, r3
 800200c:	2301      	movs	r3, #1
 800200e:	465d      	mov	r5, fp
 8002010:	4698      	mov	r8, r3
 8002012:	e55e      	b.n	8001ad2 <__aeabi_dsub+0xa2>
 8002014:	074b      	lsls	r3, r1, #29
 8002016:	08ff      	lsrs	r7, r7, #3
 8002018:	433b      	orrs	r3, r7
 800201a:	08cc      	lsrs	r4, r1, #3
 800201c:	e692      	b.n	8001d44 <__aeabi_dsub+0x314>
 800201e:	1bdc      	subs	r4, r3, r7
 8002020:	4660      	mov	r0, ip
 8002022:	42a3      	cmp	r3, r4
 8002024:	41b6      	sbcs	r6, r6
 8002026:	1a40      	subs	r0, r0, r1
 8002028:	4276      	negs	r6, r6
 800202a:	1b80      	subs	r0, r0, r6
 800202c:	4681      	mov	r9, r0
 800202e:	0200      	lsls	r0, r0, #8
 8002030:	d560      	bpl.n	80020f4 <__aeabi_dsub+0x6c4>
 8002032:	1afc      	subs	r4, r7, r3
 8002034:	42a7      	cmp	r7, r4
 8002036:	41bf      	sbcs	r7, r7
 8002038:	4663      	mov	r3, ip
 800203a:	427f      	negs	r7, r7
 800203c:	1ac9      	subs	r1, r1, r3
 800203e:	1bcb      	subs	r3, r1, r7
 8002040:	4699      	mov	r9, r3
 8002042:	465d      	mov	r5, fp
 8002044:	e576      	b.n	8001b34 <__aeabi_dsub+0x104>
 8002046:	08ff      	lsrs	r7, r7, #3
 8002048:	074b      	lsls	r3, r1, #29
 800204a:	433b      	orrs	r3, r7
 800204c:	08cc      	lsrs	r4, r1, #3
 800204e:	e667      	b.n	8001d20 <__aeabi_dsub+0x2f0>
 8002050:	000a      	movs	r2, r1
 8002052:	08db      	lsrs	r3, r3, #3
 8002054:	433a      	orrs	r2, r7
 8002056:	d100      	bne.n	800205a <__aeabi_dsub+0x62a>
 8002058:	e66f      	b.n	8001d3a <__aeabi_dsub+0x30a>
 800205a:	4662      	mov	r2, ip
 800205c:	0752      	lsls	r2, r2, #29
 800205e:	4313      	orrs	r3, r2
 8002060:	4662      	mov	r2, ip
 8002062:	08d4      	lsrs	r4, r2, #3
 8002064:	2280      	movs	r2, #128	; 0x80
 8002066:	0312      	lsls	r2, r2, #12
 8002068:	4214      	tst	r4, r2
 800206a:	d007      	beq.n	800207c <__aeabi_dsub+0x64c>
 800206c:	08c8      	lsrs	r0, r1, #3
 800206e:	4210      	tst	r0, r2
 8002070:	d104      	bne.n	800207c <__aeabi_dsub+0x64c>
 8002072:	465d      	mov	r5, fp
 8002074:	0004      	movs	r4, r0
 8002076:	08fb      	lsrs	r3, r7, #3
 8002078:	0749      	lsls	r1, r1, #29
 800207a:	430b      	orrs	r3, r1
 800207c:	0f5a      	lsrs	r2, r3, #29
 800207e:	00db      	lsls	r3, r3, #3
 8002080:	08db      	lsrs	r3, r3, #3
 8002082:	0752      	lsls	r2, r2, #29
 8002084:	4313      	orrs	r3, r2
 8002086:	e65d      	b.n	8001d44 <__aeabi_dsub+0x314>
 8002088:	074b      	lsls	r3, r1, #29
 800208a:	08ff      	lsrs	r7, r7, #3
 800208c:	433b      	orrs	r3, r7
 800208e:	08cc      	lsrs	r4, r1, #3
 8002090:	e649      	b.n	8001d26 <__aeabi_dsub+0x2f6>
 8002092:	19dc      	adds	r4, r3, r7
 8002094:	429c      	cmp	r4, r3
 8002096:	419b      	sbcs	r3, r3
 8002098:	4461      	add	r1, ip
 800209a:	4689      	mov	r9, r1
 800209c:	425b      	negs	r3, r3
 800209e:	4499      	add	r9, r3
 80020a0:	464b      	mov	r3, r9
 80020a2:	021b      	lsls	r3, r3, #8
 80020a4:	d400      	bmi.n	80020a8 <__aeabi_dsub+0x678>
 80020a6:	e631      	b.n	8001d0c <__aeabi_dsub+0x2dc>
 80020a8:	464a      	mov	r2, r9
 80020aa:	4b17      	ldr	r3, [pc, #92]	; (8002108 <__aeabi_dsub+0x6d8>)
 80020ac:	401a      	ands	r2, r3
 80020ae:	2301      	movs	r3, #1
 80020b0:	4691      	mov	r9, r2
 80020b2:	4698      	mov	r8, r3
 80020b4:	e62a      	b.n	8001d0c <__aeabi_dsub+0x2dc>
 80020b6:	0016      	movs	r6, r2
 80020b8:	4664      	mov	r4, ip
 80020ba:	3e20      	subs	r6, #32
 80020bc:	40f4      	lsrs	r4, r6
 80020be:	46a0      	mov	r8, r4
 80020c0:	2a20      	cmp	r2, #32
 80020c2:	d005      	beq.n	80020d0 <__aeabi_dsub+0x6a0>
 80020c4:	2640      	movs	r6, #64	; 0x40
 80020c6:	4664      	mov	r4, ip
 80020c8:	1ab2      	subs	r2, r6, r2
 80020ca:	4094      	lsls	r4, r2
 80020cc:	4323      	orrs	r3, r4
 80020ce:	469a      	mov	sl, r3
 80020d0:	4654      	mov	r4, sl
 80020d2:	1e63      	subs	r3, r4, #1
 80020d4:	419c      	sbcs	r4, r3
 80020d6:	4643      	mov	r3, r8
 80020d8:	431c      	orrs	r4, r3
 80020da:	e5db      	b.n	8001c94 <__aeabi_dsub+0x264>
 80020dc:	0002      	movs	r2, r0
 80020de:	2400      	movs	r4, #0
 80020e0:	2300      	movs	r3, #0
 80020e2:	e548      	b.n	8001b76 <__aeabi_dsub+0x146>
 80020e4:	19dc      	adds	r4, r3, r7
 80020e6:	42bc      	cmp	r4, r7
 80020e8:	41bf      	sbcs	r7, r7
 80020ea:	4461      	add	r1, ip
 80020ec:	4689      	mov	r9, r1
 80020ee:	427f      	negs	r7, r7
 80020f0:	44b9      	add	r9, r7
 80020f2:	e738      	b.n	8001f66 <__aeabi_dsub+0x536>
 80020f4:	464b      	mov	r3, r9
 80020f6:	4323      	orrs	r3, r4
 80020f8:	d100      	bne.n	80020fc <__aeabi_dsub+0x6cc>
 80020fa:	e69f      	b.n	8001e3c <__aeabi_dsub+0x40c>
 80020fc:	e606      	b.n	8001d0c <__aeabi_dsub+0x2dc>
 80020fe:	46c0      	nop			; (mov r8, r8)
 8002100:	000007fe 	.word	0x000007fe
 8002104:	000007ff 	.word	0x000007ff
 8002108:	ff7fffff 	.word	0xff7fffff
 800210c:	08ff      	lsrs	r7, r7, #3
 800210e:	074b      	lsls	r3, r1, #29
 8002110:	433b      	orrs	r3, r7
 8002112:	08cc      	lsrs	r4, r1, #3
 8002114:	e616      	b.n	8001d44 <__aeabi_dsub+0x314>
 8002116:	4662      	mov	r2, ip
 8002118:	08db      	lsrs	r3, r3, #3
 800211a:	0752      	lsls	r2, r2, #29
 800211c:	4313      	orrs	r3, r2
 800211e:	4662      	mov	r2, ip
 8002120:	08d4      	lsrs	r4, r2, #3
 8002122:	2280      	movs	r2, #128	; 0x80
 8002124:	0312      	lsls	r2, r2, #12
 8002126:	4214      	tst	r4, r2
 8002128:	d007      	beq.n	800213a <__aeabi_dsub+0x70a>
 800212a:	08c8      	lsrs	r0, r1, #3
 800212c:	4210      	tst	r0, r2
 800212e:	d104      	bne.n	800213a <__aeabi_dsub+0x70a>
 8002130:	465d      	mov	r5, fp
 8002132:	0004      	movs	r4, r0
 8002134:	08fb      	lsrs	r3, r7, #3
 8002136:	0749      	lsls	r1, r1, #29
 8002138:	430b      	orrs	r3, r1
 800213a:	0f5a      	lsrs	r2, r3, #29
 800213c:	00db      	lsls	r3, r3, #3
 800213e:	0752      	lsls	r2, r2, #29
 8002140:	08db      	lsrs	r3, r3, #3
 8002142:	4313      	orrs	r3, r2
 8002144:	e5fe      	b.n	8001d44 <__aeabi_dsub+0x314>
 8002146:	2300      	movs	r3, #0
 8002148:	4a01      	ldr	r2, [pc, #4]	; (8002150 <__aeabi_dsub+0x720>)
 800214a:	001c      	movs	r4, r3
 800214c:	e513      	b.n	8001b76 <__aeabi_dsub+0x146>
 800214e:	46c0      	nop			; (mov r8, r8)
 8002150:	000007ff 	.word	0x000007ff

08002154 <__aeabi_dcmpun>:
 8002154:	b570      	push	{r4, r5, r6, lr}
 8002156:	0005      	movs	r5, r0
 8002158:	480c      	ldr	r0, [pc, #48]	; (800218c <__aeabi_dcmpun+0x38>)
 800215a:	031c      	lsls	r4, r3, #12
 800215c:	0016      	movs	r6, r2
 800215e:	005b      	lsls	r3, r3, #1
 8002160:	030a      	lsls	r2, r1, #12
 8002162:	0049      	lsls	r1, r1, #1
 8002164:	0b12      	lsrs	r2, r2, #12
 8002166:	0d49      	lsrs	r1, r1, #21
 8002168:	0b24      	lsrs	r4, r4, #12
 800216a:	0d5b      	lsrs	r3, r3, #21
 800216c:	4281      	cmp	r1, r0
 800216e:	d008      	beq.n	8002182 <__aeabi_dcmpun+0x2e>
 8002170:	4a06      	ldr	r2, [pc, #24]	; (800218c <__aeabi_dcmpun+0x38>)
 8002172:	2000      	movs	r0, #0
 8002174:	4293      	cmp	r3, r2
 8002176:	d103      	bne.n	8002180 <__aeabi_dcmpun+0x2c>
 8002178:	0020      	movs	r0, r4
 800217a:	4330      	orrs	r0, r6
 800217c:	1e43      	subs	r3, r0, #1
 800217e:	4198      	sbcs	r0, r3
 8002180:	bd70      	pop	{r4, r5, r6, pc}
 8002182:	2001      	movs	r0, #1
 8002184:	432a      	orrs	r2, r5
 8002186:	d1fb      	bne.n	8002180 <__aeabi_dcmpun+0x2c>
 8002188:	e7f2      	b.n	8002170 <__aeabi_dcmpun+0x1c>
 800218a:	46c0      	nop			; (mov r8, r8)
 800218c:	000007ff 	.word	0x000007ff

08002190 <__aeabi_d2iz>:
 8002190:	000a      	movs	r2, r1
 8002192:	b530      	push	{r4, r5, lr}
 8002194:	4c13      	ldr	r4, [pc, #76]	; (80021e4 <__aeabi_d2iz+0x54>)
 8002196:	0053      	lsls	r3, r2, #1
 8002198:	0309      	lsls	r1, r1, #12
 800219a:	0005      	movs	r5, r0
 800219c:	0b09      	lsrs	r1, r1, #12
 800219e:	2000      	movs	r0, #0
 80021a0:	0d5b      	lsrs	r3, r3, #21
 80021a2:	0fd2      	lsrs	r2, r2, #31
 80021a4:	42a3      	cmp	r3, r4
 80021a6:	dd04      	ble.n	80021b2 <__aeabi_d2iz+0x22>
 80021a8:	480f      	ldr	r0, [pc, #60]	; (80021e8 <__aeabi_d2iz+0x58>)
 80021aa:	4283      	cmp	r3, r0
 80021ac:	dd02      	ble.n	80021b4 <__aeabi_d2iz+0x24>
 80021ae:	4b0f      	ldr	r3, [pc, #60]	; (80021ec <__aeabi_d2iz+0x5c>)
 80021b0:	18d0      	adds	r0, r2, r3
 80021b2:	bd30      	pop	{r4, r5, pc}
 80021b4:	2080      	movs	r0, #128	; 0x80
 80021b6:	0340      	lsls	r0, r0, #13
 80021b8:	4301      	orrs	r1, r0
 80021ba:	480d      	ldr	r0, [pc, #52]	; (80021f0 <__aeabi_d2iz+0x60>)
 80021bc:	1ac0      	subs	r0, r0, r3
 80021be:	281f      	cmp	r0, #31
 80021c0:	dd08      	ble.n	80021d4 <__aeabi_d2iz+0x44>
 80021c2:	480c      	ldr	r0, [pc, #48]	; (80021f4 <__aeabi_d2iz+0x64>)
 80021c4:	1ac3      	subs	r3, r0, r3
 80021c6:	40d9      	lsrs	r1, r3
 80021c8:	000b      	movs	r3, r1
 80021ca:	4258      	negs	r0, r3
 80021cc:	2a00      	cmp	r2, #0
 80021ce:	d1f0      	bne.n	80021b2 <__aeabi_d2iz+0x22>
 80021d0:	0018      	movs	r0, r3
 80021d2:	e7ee      	b.n	80021b2 <__aeabi_d2iz+0x22>
 80021d4:	4c08      	ldr	r4, [pc, #32]	; (80021f8 <__aeabi_d2iz+0x68>)
 80021d6:	40c5      	lsrs	r5, r0
 80021d8:	46a4      	mov	ip, r4
 80021da:	4463      	add	r3, ip
 80021dc:	4099      	lsls	r1, r3
 80021de:	000b      	movs	r3, r1
 80021e0:	432b      	orrs	r3, r5
 80021e2:	e7f2      	b.n	80021ca <__aeabi_d2iz+0x3a>
 80021e4:	000003fe 	.word	0x000003fe
 80021e8:	0000041d 	.word	0x0000041d
 80021ec:	7fffffff 	.word	0x7fffffff
 80021f0:	00000433 	.word	0x00000433
 80021f4:	00000413 	.word	0x00000413
 80021f8:	fffffbed 	.word	0xfffffbed

080021fc <__aeabi_i2d>:
 80021fc:	b570      	push	{r4, r5, r6, lr}
 80021fe:	2800      	cmp	r0, #0
 8002200:	d016      	beq.n	8002230 <__aeabi_i2d+0x34>
 8002202:	17c3      	asrs	r3, r0, #31
 8002204:	18c5      	adds	r5, r0, r3
 8002206:	405d      	eors	r5, r3
 8002208:	0fc4      	lsrs	r4, r0, #31
 800220a:	0028      	movs	r0, r5
 800220c:	f000 f84c 	bl	80022a8 <__clzsi2>
 8002210:	4a11      	ldr	r2, [pc, #68]	; (8002258 <__aeabi_i2d+0x5c>)
 8002212:	1a12      	subs	r2, r2, r0
 8002214:	280a      	cmp	r0, #10
 8002216:	dc16      	bgt.n	8002246 <__aeabi_i2d+0x4a>
 8002218:	0003      	movs	r3, r0
 800221a:	002e      	movs	r6, r5
 800221c:	3315      	adds	r3, #21
 800221e:	409e      	lsls	r6, r3
 8002220:	230b      	movs	r3, #11
 8002222:	1a18      	subs	r0, r3, r0
 8002224:	40c5      	lsrs	r5, r0
 8002226:	0552      	lsls	r2, r2, #21
 8002228:	032d      	lsls	r5, r5, #12
 800222a:	0b2d      	lsrs	r5, r5, #12
 800222c:	0d53      	lsrs	r3, r2, #21
 800222e:	e003      	b.n	8002238 <__aeabi_i2d+0x3c>
 8002230:	2400      	movs	r4, #0
 8002232:	2300      	movs	r3, #0
 8002234:	2500      	movs	r5, #0
 8002236:	2600      	movs	r6, #0
 8002238:	051b      	lsls	r3, r3, #20
 800223a:	432b      	orrs	r3, r5
 800223c:	07e4      	lsls	r4, r4, #31
 800223e:	4323      	orrs	r3, r4
 8002240:	0030      	movs	r0, r6
 8002242:	0019      	movs	r1, r3
 8002244:	bd70      	pop	{r4, r5, r6, pc}
 8002246:	380b      	subs	r0, #11
 8002248:	4085      	lsls	r5, r0
 800224a:	0552      	lsls	r2, r2, #21
 800224c:	032d      	lsls	r5, r5, #12
 800224e:	2600      	movs	r6, #0
 8002250:	0b2d      	lsrs	r5, r5, #12
 8002252:	0d53      	lsrs	r3, r2, #21
 8002254:	e7f0      	b.n	8002238 <__aeabi_i2d+0x3c>
 8002256:	46c0      	nop			; (mov r8, r8)
 8002258:	0000041e 	.word	0x0000041e

0800225c <__aeabi_ui2d>:
 800225c:	b510      	push	{r4, lr}
 800225e:	1e04      	subs	r4, r0, #0
 8002260:	d010      	beq.n	8002284 <__aeabi_ui2d+0x28>
 8002262:	f000 f821 	bl	80022a8 <__clzsi2>
 8002266:	4b0f      	ldr	r3, [pc, #60]	; (80022a4 <__aeabi_ui2d+0x48>)
 8002268:	1a1b      	subs	r3, r3, r0
 800226a:	280a      	cmp	r0, #10
 800226c:	dc11      	bgt.n	8002292 <__aeabi_ui2d+0x36>
 800226e:	220b      	movs	r2, #11
 8002270:	0021      	movs	r1, r4
 8002272:	1a12      	subs	r2, r2, r0
 8002274:	40d1      	lsrs	r1, r2
 8002276:	3015      	adds	r0, #21
 8002278:	030a      	lsls	r2, r1, #12
 800227a:	055b      	lsls	r3, r3, #21
 800227c:	4084      	lsls	r4, r0
 800227e:	0b12      	lsrs	r2, r2, #12
 8002280:	0d5b      	lsrs	r3, r3, #21
 8002282:	e001      	b.n	8002288 <__aeabi_ui2d+0x2c>
 8002284:	2300      	movs	r3, #0
 8002286:	2200      	movs	r2, #0
 8002288:	051b      	lsls	r3, r3, #20
 800228a:	4313      	orrs	r3, r2
 800228c:	0020      	movs	r0, r4
 800228e:	0019      	movs	r1, r3
 8002290:	bd10      	pop	{r4, pc}
 8002292:	0022      	movs	r2, r4
 8002294:	380b      	subs	r0, #11
 8002296:	4082      	lsls	r2, r0
 8002298:	055b      	lsls	r3, r3, #21
 800229a:	0312      	lsls	r2, r2, #12
 800229c:	2400      	movs	r4, #0
 800229e:	0b12      	lsrs	r2, r2, #12
 80022a0:	0d5b      	lsrs	r3, r3, #21
 80022a2:	e7f1      	b.n	8002288 <__aeabi_ui2d+0x2c>
 80022a4:	0000041e 	.word	0x0000041e

080022a8 <__clzsi2>:
 80022a8:	211c      	movs	r1, #28
 80022aa:	2301      	movs	r3, #1
 80022ac:	041b      	lsls	r3, r3, #16
 80022ae:	4298      	cmp	r0, r3
 80022b0:	d301      	bcc.n	80022b6 <__clzsi2+0xe>
 80022b2:	0c00      	lsrs	r0, r0, #16
 80022b4:	3910      	subs	r1, #16
 80022b6:	0a1b      	lsrs	r3, r3, #8
 80022b8:	4298      	cmp	r0, r3
 80022ba:	d301      	bcc.n	80022c0 <__clzsi2+0x18>
 80022bc:	0a00      	lsrs	r0, r0, #8
 80022be:	3908      	subs	r1, #8
 80022c0:	091b      	lsrs	r3, r3, #4
 80022c2:	4298      	cmp	r0, r3
 80022c4:	d301      	bcc.n	80022ca <__clzsi2+0x22>
 80022c6:	0900      	lsrs	r0, r0, #4
 80022c8:	3904      	subs	r1, #4
 80022ca:	a202      	add	r2, pc, #8	; (adr r2, 80022d4 <__clzsi2+0x2c>)
 80022cc:	5c10      	ldrb	r0, [r2, r0]
 80022ce:	1840      	adds	r0, r0, r1
 80022d0:	4770      	bx	lr
 80022d2:	46c0      	nop			; (mov r8, r8)
 80022d4:	02020304 	.word	0x02020304
 80022d8:	01010101 	.word	0x01010101
	...

080022e4 <__clzdi2>:
 80022e4:	b510      	push	{r4, lr}
 80022e6:	2900      	cmp	r1, #0
 80022e8:	d103      	bne.n	80022f2 <__clzdi2+0xe>
 80022ea:	f7ff ffdd 	bl	80022a8 <__clzsi2>
 80022ee:	3020      	adds	r0, #32
 80022f0:	e002      	b.n	80022f8 <__clzdi2+0x14>
 80022f2:	0008      	movs	r0, r1
 80022f4:	f7ff ffd8 	bl	80022a8 <__clzsi2>
 80022f8:	bd10      	pop	{r4, pc}
 80022fa:	46c0      	nop			; (mov r8, r8)

080022fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80022fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022fe:	b097      	sub	sp, #92	; 0x5c
 8002300:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002302:	f000 ff4d 	bl	80031a0 <HAL_Init>

  /* USER CODE BEGIN Init */

  for(int i=0; i<20; i++)
 8002306:	2300      	movs	r3, #0
 8002308:	647b      	str	r3, [r7, #68]	; 0x44
 800230a:	e007      	b.n	800231c <main+0x20>
  {
	  spi_buf[i] = 'a';
 800230c:	4a72      	ldr	r2, [pc, #456]	; (80024d8 <main+0x1dc>)
 800230e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002310:	18d3      	adds	r3, r2, r3
 8002312:	2261      	movs	r2, #97	; 0x61
 8002314:	701a      	strb	r2, [r3, #0]
  for(int i=0; i<20; i++)
 8002316:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002318:	3301      	adds	r3, #1
 800231a:	647b      	str	r3, [r7, #68]	; 0x44
 800231c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800231e:	2b13      	cmp	r3, #19
 8002320:	ddf4      	ble.n	800230c <main+0x10>
  }
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002322:	f000 f8e3 	bl	80024ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002326:	f000 fa5b 	bl	80027e0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800232a:	f000 fa29 	bl	8002780 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 800232e:	f000 f9ef 	bl	8002710 <MX_SPI1_Init>
  MX_ADC_Init();
 8002332:	f000 f949 	bl	80025c8 <MX_ADC_Init>
  MX_I2C1_Init();
 8002336:	f000 f9ab 	bl	8002690 <MX_I2C1_Init>

//  uart_buf_len = sprintf(uart_buf, "/* Oscillator Code ---------*/ \r\n");
//  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);

  // Set oscillator initial values
  osc_init();
 800233a:	f000 fb57 	bl	80029ec <osc_init>

  // Read register values
  osc_print_register_contents();
 800233e:	f000 fbf3 	bl	8002b28 <osc_print_register_contents>
  /* BEGIN ADC SECTION ---------------------------------------------------------*/

//  uart_buf_len = sprintf(uart_buf, "/* ADC Code ---------*/ \r\n");
//  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);

  int num_bins = 36; 						// Number of bins or "chunks"
 8002342:	2324      	movs	r3, #36	; 0x24
 8002344:	63bb      	str	r3, [r7, #56]	; 0x38
  uint16_t N = 494;							// Value of ND[]
 8002346:	2332      	movs	r3, #50	; 0x32
 8002348:	2218      	movs	r2, #24
 800234a:	189b      	adds	r3, r3, r2
 800234c:	19db      	adds	r3, r3, r7
 800234e:	22f7      	movs	r2, #247	; 0xf7
 8002350:	0052      	lsls	r2, r2, #1
 8002352:	801a      	strh	r2, [r3, #0]
  int num_samples = 100; 					// Number of ADC samples
 8002354:	2364      	movs	r3, #100	; 0x64
 8002356:	637b      	str	r3, [r7, #52]	; 0x34
  int adc_value = 0;						// Output of the 12-bit ADC (range: 0 to 4095)
 8002358:	2300      	movs	r3, #0
 800235a:	64fb      	str	r3, [r7, #76]	; 0x4c
  int data_buffer_size = num_bins + 3;
 800235c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800235e:	3303      	adds	r3, #3
 8002360:	633b      	str	r3, [r7, #48]	; 0x30
  int data_buffer[data_buffer_size]; 		// Average of ADC Readings
 8002362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002364:	1e5a      	subs	r2, r3, #1
 8002366:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002368:	001a      	movs	r2, r3
 800236a:	60ba      	str	r2, [r7, #8]
 800236c:	2200      	movs	r2, #0
 800236e:	60fa      	str	r2, [r7, #12]
 8002370:	68b8      	ldr	r0, [r7, #8]
 8002372:	68f9      	ldr	r1, [r7, #12]
 8002374:	0002      	movs	r2, r0
 8002376:	0ed2      	lsrs	r2, r2, #27
 8002378:	000e      	movs	r6, r1
 800237a:	0176      	lsls	r6, r6, #5
 800237c:	617e      	str	r6, [r7, #20]
 800237e:	697e      	ldr	r6, [r7, #20]
 8002380:	4316      	orrs	r6, r2
 8002382:	617e      	str	r6, [r7, #20]
 8002384:	0002      	movs	r2, r0
 8002386:	0152      	lsls	r2, r2, #5
 8002388:	613a      	str	r2, [r7, #16]
 800238a:	001a      	movs	r2, r3
 800238c:	603a      	str	r2, [r7, #0]
 800238e:	2200      	movs	r2, #0
 8002390:	607a      	str	r2, [r7, #4]
 8002392:	6838      	ldr	r0, [r7, #0]
 8002394:	6879      	ldr	r1, [r7, #4]
 8002396:	0002      	movs	r2, r0
 8002398:	0ed2      	lsrs	r2, r2, #27
 800239a:	000e      	movs	r6, r1
 800239c:	0175      	lsls	r5, r6, #5
 800239e:	4315      	orrs	r5, r2
 80023a0:	0002      	movs	r2, r0
 80023a2:	0154      	lsls	r4, r2, #5
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	3307      	adds	r3, #7
 80023a8:	08db      	lsrs	r3, r3, #3
 80023aa:	00db      	lsls	r3, r3, #3
 80023ac:	466a      	mov	r2, sp
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	469d      	mov	sp, r3
 80023b2:	466b      	mov	r3, sp
 80023b4:	3303      	adds	r3, #3
 80023b6:	089b      	lsrs	r3, r3, #2
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	62bb      	str	r3, [r7, #40]	; 0x28

  // Initialize arrays
  for (int i=0; i<data_buffer_size; i++)
 80023bc:	2300      	movs	r3, #0
 80023be:	653b      	str	r3, [r7, #80]	; 0x50
 80023c0:	e00d      	b.n	80023de <main+0xe2>
  {
	  data_buffer[i] = (i==0)? -2 : 0;
 80023c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d102      	bne.n	80023ce <main+0xd2>
 80023c8:	2302      	movs	r3, #2
 80023ca:	425b      	negs	r3, r3
 80023cc:	e000      	b.n	80023d0 <main+0xd4>
 80023ce:	2300      	movs	r3, #0
 80023d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80023d2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80023d4:	0089      	lsls	r1, r1, #2
 80023d6:	508b      	str	r3, [r1, r2]
  for (int i=0; i<data_buffer_size; i++)
 80023d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023da:	3301      	adds	r3, #1
 80023dc:	653b      	str	r3, [r7, #80]	; 0x50
 80023de:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80023e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023e2:	429a      	cmp	r2, r3
 80023e4:	dbed      	blt.n	80023c2 <main+0xc6>
     // -2 is the identifier bit which tells the receiver over serial that (...)
     // the beginning of the data buffer is being transmitter
  }

  // Calibrate ADC
  while(HAL_ADCEx_Calibration_Start(&hadc, ADC_SINGLE_ENDED) != HAL_OK);
 80023e6:	46c0      	nop			; (mov r8, r8)
 80023e8:	4b3c      	ldr	r3, [pc, #240]	; (80024dc <main+0x1e0>)
 80023ea:	2100      	movs	r1, #0
 80023ec:	0018      	movs	r0, r3
 80023ee:	f001 fb03 	bl	80039f8 <HAL_ADCEx_Calibration_Start>
 80023f2:	1e03      	subs	r3, r0, #0
 80023f4:	d1f8      	bne.n	80023e8 <main+0xec>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  /*** Get distance from ToF ***/
	  data_buffer[1] = ToF_distance(i2c_buf);
 80023f6:	241c      	movs	r4, #28
 80023f8:	193b      	adds	r3, r7, r4
 80023fa:	0018      	movs	r0, r3
 80023fc:	f000 fc0a 	bl	8002c14 <ToF_distance>
 8002400:	0002      	movs	r2, r0
 8002402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002404:	605a      	str	r2, [r3, #4]
	  data_buffer[2] = ToF_temperature(i2c_buf);
 8002406:	193b      	adds	r3, r7, r4
 8002408:	0018      	movs	r0, r3
 800240a:	f000 fc45 	bl	8002c98 <ToF_temperature>
 800240e:	0002      	movs	r2, r0
 8002410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002412:	609a      	str	r2, [r3, #8]

	  /*** Sweep the Oscillator ***/
	  N = 494;
 8002414:	2332      	movs	r3, #50	; 0x32
 8002416:	2218      	movs	r2, #24
 8002418:	189b      	adds	r3, r3, r2
 800241a:	19db      	adds	r3, r3, r7
 800241c:	22f7      	movs	r2, #247	; 0xf7
 800241e:	0052      	lsls	r2, r2, #1
 8002420:	801a      	strh	r2, [r3, #0]

	  // Sweep the Oscillator
	  for (int i=3; i<data_buffer_size; i++)
 8002422:	2303      	movs	r3, #3
 8002424:	657b      	str	r3, [r7, #84]	; 0x54
 8002426:	e033      	b.n	8002490 <main+0x194>
	  {
		  osc_config_reg_values(N);
 8002428:	2332      	movs	r3, #50	; 0x32
 800242a:	2218      	movs	r2, #24
 800242c:	189b      	adds	r3, r3, r2
 800242e:	19db      	adds	r3, r3, r7
 8002430:	881b      	ldrh	r3, [r3, #0]
 8002432:	0018      	movs	r0, r3
 8002434:	f000 fb36 	bl	8002aa4 <osc_config_reg_values>
		  adc_value = 0;
 8002438:	2300      	movs	r3, #0
 800243a:	64fb      	str	r3, [r7, #76]	; 0x4c
		  HAL_Delay(1);
 800243c:	2001      	movs	r0, #1
 800243e:	f000 ff1f 	bl	8003280 <HAL_Delay>

		  // Take samples and get the average
	      for (int k=0; k<num_samples; k++)
 8002442:	2300      	movs	r3, #0
 8002444:	643b      	str	r3, [r7, #64]	; 0x40
 8002446:	e009      	b.n	800245c <main+0x160>
	      {
	      	 adc_value += (int)ADC_output();
 8002448:	f000 fc6a 	bl	8002d20 <ADC_output>
 800244c:	0003      	movs	r3, r0
 800244e:	001a      	movs	r2, r3
 8002450:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002452:	189b      	adds	r3, r3, r2
 8002454:	64fb      	str	r3, [r7, #76]	; 0x4c
	      for (int k=0; k<num_samples; k++)
 8002456:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002458:	3301      	adds	r3, #1
 800245a:	643b      	str	r3, [r7, #64]	; 0x40
 800245c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800245e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002460:	429a      	cmp	r2, r3
 8002462:	dbf1      	blt.n	8002448 <main+0x14c>
	      }

	      data_buffer[i] = adc_value/num_samples;
 8002464:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002466:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002468:	f7fd fef4 	bl	8000254 <__divsi3>
 800246c:	0003      	movs	r3, r0
 800246e:	0019      	movs	r1, r3
 8002470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002472:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002474:	0092      	lsls	r2, r2, #2
 8002476:	50d1      	str	r1, [r2, r3]
	      N += 1;
 8002478:	2232      	movs	r2, #50	; 0x32
 800247a:	2118      	movs	r1, #24
 800247c:	1853      	adds	r3, r2, r1
 800247e:	19db      	adds	r3, r3, r7
 8002480:	1852      	adds	r2, r2, r1
 8002482:	19d2      	adds	r2, r2, r7
 8002484:	8812      	ldrh	r2, [r2, #0]
 8002486:	3201      	adds	r2, #1
 8002488:	801a      	strh	r2, [r3, #0]
	  for (int i=3; i<data_buffer_size; i++)
 800248a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800248c:	3301      	adds	r3, #1
 800248e:	657b      	str	r3, [r7, #84]	; 0x54
 8002490:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002494:	429a      	cmp	r2, r3
 8002496:	dbc7      	blt.n	8002428 <main+0x12c>
	  }

	  // Print ADC swept values
	  for (int k=0; k<data_buffer_size; k++)
 8002498:	2300      	movs	r3, #0
 800249a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800249c:	e016      	b.n	80024cc <main+0x1d0>
	  {
		  sprintf(raw_adc_str, "%i\r\n", data_buffer[k]);
 800249e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024a0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80024a2:	0092      	lsls	r2, r2, #2
 80024a4:	58d2      	ldr	r2, [r2, r3]
 80024a6:	490e      	ldr	r1, [pc, #56]	; (80024e0 <main+0x1e4>)
 80024a8:	4b0e      	ldr	r3, [pc, #56]	; (80024e4 <main+0x1e8>)
 80024aa:	0018      	movs	r0, r3
 80024ac:	f005 f8aa 	bl	8007604 <siprintf>
		  HAL_UART_Transmit(&huart2, (uint8_t *)raw_adc_str, strlen(raw_adc_str), 100);
 80024b0:	4b0c      	ldr	r3, [pc, #48]	; (80024e4 <main+0x1e8>)
 80024b2:	0018      	movs	r0, r3
 80024b4:	f7fd fe28 	bl	8000108 <strlen>
 80024b8:	0003      	movs	r3, r0
 80024ba:	b29a      	uxth	r2, r3
 80024bc:	4909      	ldr	r1, [pc, #36]	; (80024e4 <main+0x1e8>)
 80024be:	480a      	ldr	r0, [pc, #40]	; (80024e8 <main+0x1ec>)
 80024c0:	2364      	movs	r3, #100	; 0x64
 80024c2:	f003 fef7 	bl	80062b4 <HAL_UART_Transmit>
	  for (int k=0; k<data_buffer_size; k++)
 80024c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024c8:	3301      	adds	r3, #1
 80024ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024cc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80024ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024d0:	429a      	cmp	r2, r3
 80024d2:	dbe4      	blt.n	800249e <main+0x1a2>
	  data_buffer[1] = ToF_distance(i2c_buf);
 80024d4:	e78f      	b.n	80023f6 <main+0xfa>
 80024d6:	46c0      	nop			; (mov r8, r8)
 80024d8:	20000390 	.word	0x20000390
 80024dc:	200001f8 	.word	0x200001f8
 80024e0:	08009c78 	.word	0x08009c78
 80024e4:	2000037c 	.word	0x2000037c
 80024e8:	200002f8 	.word	0x200002f8

080024ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80024ec:	b590      	push	{r4, r7, lr}
 80024ee:	b09f      	sub	sp, #124	; 0x7c
 80024f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024f2:	2440      	movs	r4, #64	; 0x40
 80024f4:	193b      	adds	r3, r7, r4
 80024f6:	0018      	movs	r0, r3
 80024f8:	2338      	movs	r3, #56	; 0x38
 80024fa:	001a      	movs	r2, r3
 80024fc:	2100      	movs	r1, #0
 80024fe:	f004 fc0b 	bl	8006d18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002502:	232c      	movs	r3, #44	; 0x2c
 8002504:	18fb      	adds	r3, r7, r3
 8002506:	0018      	movs	r0, r3
 8002508:	2314      	movs	r3, #20
 800250a:	001a      	movs	r2, r3
 800250c:	2100      	movs	r1, #0
 800250e:	f004 fc03 	bl	8006d18 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002512:	1d3b      	adds	r3, r7, #4
 8002514:	0018      	movs	r0, r3
 8002516:	2328      	movs	r3, #40	; 0x28
 8002518:	001a      	movs	r2, r3
 800251a:	2100      	movs	r1, #0
 800251c:	f004 fbfc 	bl	8006d18 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002520:	4b27      	ldr	r3, [pc, #156]	; (80025c0 <SystemClock_Config+0xd4>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a27      	ldr	r2, [pc, #156]	; (80025c4 <SystemClock_Config+0xd8>)
 8002526:	401a      	ands	r2, r3
 8002528:	4b25      	ldr	r3, [pc, #148]	; (80025c0 <SystemClock_Config+0xd4>)
 800252a:	2180      	movs	r1, #128	; 0x80
 800252c:	0109      	lsls	r1, r1, #4
 800252e:	430a      	orrs	r2, r1
 8002530:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8002532:	0021      	movs	r1, r4
 8002534:	187b      	adds	r3, r7, r1
 8002536:	2210      	movs	r2, #16
 8002538:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800253a:	187b      	adds	r3, r7, r1
 800253c:	2201      	movs	r2, #1
 800253e:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002540:	187b      	adds	r3, r7, r1
 8002542:	2200      	movs	r2, #0
 8002544:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8002546:	187b      	adds	r3, r7, r1
 8002548:	22a0      	movs	r2, #160	; 0xa0
 800254a:	0212      	lsls	r2, r2, #8
 800254c:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800254e:	187b      	adds	r3, r7, r1
 8002550:	2200      	movs	r2, #0
 8002552:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002554:	187b      	adds	r3, r7, r1
 8002556:	0018      	movs	r0, r3
 8002558:	f002 fa72 	bl	8004a40 <HAL_RCC_OscConfig>
 800255c:	1e03      	subs	r3, r0, #0
 800255e:	d001      	beq.n	8002564 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8002560:	f000 fbf6 	bl	8002d50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002564:	212c      	movs	r1, #44	; 0x2c
 8002566:	187b      	adds	r3, r7, r1
 8002568:	220f      	movs	r2, #15
 800256a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800256c:	187b      	adds	r3, r7, r1
 800256e:	2200      	movs	r2, #0
 8002570:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002572:	187b      	adds	r3, r7, r1
 8002574:	2200      	movs	r2, #0
 8002576:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002578:	187b      	adds	r3, r7, r1
 800257a:	2200      	movs	r2, #0
 800257c:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800257e:	187b      	adds	r3, r7, r1
 8002580:	2200      	movs	r2, #0
 8002582:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002584:	187b      	adds	r3, r7, r1
 8002586:	2100      	movs	r1, #0
 8002588:	0018      	movs	r0, r3
 800258a:	f002 fe2d 	bl	80051e8 <HAL_RCC_ClockConfig>
 800258e:	1e03      	subs	r3, r0, #0
 8002590:	d001      	beq.n	8002596 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8002592:	f000 fbdd 	bl	8002d50 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 8002596:	1d3b      	adds	r3, r7, #4
 8002598:	220a      	movs	r2, #10
 800259a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800259c:	1d3b      	adds	r3, r7, #4
 800259e:	2200      	movs	r2, #0
 80025a0:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80025a2:	1d3b      	adds	r3, r7, #4
 80025a4:	2200      	movs	r2, #0
 80025a6:	619a      	str	r2, [r3, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025a8:	1d3b      	adds	r3, r7, #4
 80025aa:	0018      	movs	r0, r3
 80025ac:	f003 f840 	bl	8005630 <HAL_RCCEx_PeriphCLKConfig>
 80025b0:	1e03      	subs	r3, r0, #0
 80025b2:	d001      	beq.n	80025b8 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80025b4:	f000 fbcc 	bl	8002d50 <Error_Handler>
  }
}
 80025b8:	46c0      	nop			; (mov r8, r8)
 80025ba:	46bd      	mov	sp, r7
 80025bc:	b01f      	add	sp, #124	; 0x7c
 80025be:	bd90      	pop	{r4, r7, pc}
 80025c0:	40007000 	.word	0x40007000
 80025c4:	ffffe7ff 	.word	0xffffe7ff

080025c8 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80025ce:	003b      	movs	r3, r7
 80025d0:	0018      	movs	r0, r3
 80025d2:	2308      	movs	r3, #8
 80025d4:	001a      	movs	r2, r3
 80025d6:	2100      	movs	r1, #0
 80025d8:	f004 fb9e 	bl	8006d18 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80025dc:	4b2a      	ldr	r3, [pc, #168]	; (8002688 <MX_ADC_Init+0xc0>)
 80025de:	4a2b      	ldr	r2, [pc, #172]	; (800268c <MX_ADC_Init+0xc4>)
 80025e0:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 80025e2:	4b29      	ldr	r3, [pc, #164]	; (8002688 <MX_ADC_Init+0xc0>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 80025e8:	4b27      	ldr	r3, [pc, #156]	; (8002688 <MX_ADC_Init+0xc0>)
 80025ea:	22c0      	movs	r2, #192	; 0xc0
 80025ec:	0612      	lsls	r2, r2, #24
 80025ee:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80025f0:	4b25      	ldr	r3, [pc, #148]	; (8002688 <MX_ADC_Init+0xc0>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80025f6:	4b24      	ldr	r3, [pc, #144]	; (8002688 <MX_ADC_Init+0xc0>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80025fc:	4b22      	ldr	r3, [pc, #136]	; (8002688 <MX_ADC_Init+0xc0>)
 80025fe:	2201      	movs	r2, #1
 8002600:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002602:	4b21      	ldr	r3, [pc, #132]	; (8002688 <MX_ADC_Init+0xc0>)
 8002604:	2200      	movs	r2, #0
 8002606:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8002608:	4b1f      	ldr	r3, [pc, #124]	; (8002688 <MX_ADC_Init+0xc0>)
 800260a:	2220      	movs	r2, #32
 800260c:	2100      	movs	r1, #0
 800260e:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8002610:	4b1d      	ldr	r3, [pc, #116]	; (8002688 <MX_ADC_Init+0xc0>)
 8002612:	2221      	movs	r2, #33	; 0x21
 8002614:	2100      	movs	r1, #0
 8002616:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002618:	4b1b      	ldr	r3, [pc, #108]	; (8002688 <MX_ADC_Init+0xc0>)
 800261a:	2200      	movs	r2, #0
 800261c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800261e:	4b1a      	ldr	r3, [pc, #104]	; (8002688 <MX_ADC_Init+0xc0>)
 8002620:	22c2      	movs	r2, #194	; 0xc2
 8002622:	32ff      	adds	r2, #255	; 0xff
 8002624:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8002626:	4b18      	ldr	r3, [pc, #96]	; (8002688 <MX_ADC_Init+0xc0>)
 8002628:	222c      	movs	r2, #44	; 0x2c
 800262a:	2100      	movs	r1, #0
 800262c:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800262e:	4b16      	ldr	r3, [pc, #88]	; (8002688 <MX_ADC_Init+0xc0>)
 8002630:	2204      	movs	r2, #4
 8002632:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002634:	4b14      	ldr	r3, [pc, #80]	; (8002688 <MX_ADC_Init+0xc0>)
 8002636:	2200      	movs	r2, #0
 8002638:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 800263a:	4b13      	ldr	r3, [pc, #76]	; (8002688 <MX_ADC_Init+0xc0>)
 800263c:	2200      	movs	r2, #0
 800263e:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = ENABLE;
 8002640:	4b11      	ldr	r3, [pc, #68]	; (8002688 <MX_ADC_Init+0xc0>)
 8002642:	2201      	movs	r2, #1
 8002644:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8002646:	4b10      	ldr	r3, [pc, #64]	; (8002688 <MX_ADC_Init+0xc0>)
 8002648:	2200      	movs	r2, #0
 800264a:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800264c:	4b0e      	ldr	r3, [pc, #56]	; (8002688 <MX_ADC_Init+0xc0>)
 800264e:	0018      	movs	r0, r3
 8002650:	f000 fe3a 	bl	80032c8 <HAL_ADC_Init>
 8002654:	1e03      	subs	r3, r0, #0
 8002656:	d001      	beq.n	800265c <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8002658:	f000 fb7a 	bl	8002d50 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800265c:	003b      	movs	r3, r7
 800265e:	2201      	movs	r2, #1
 8002660:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8002662:	003b      	movs	r3, r7
 8002664:	2280      	movs	r2, #128	; 0x80
 8002666:	0152      	lsls	r2, r2, #5
 8002668:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800266a:	003a      	movs	r2, r7
 800266c:	4b06      	ldr	r3, [pc, #24]	; (8002688 <MX_ADC_Init+0xc0>)
 800266e:	0011      	movs	r1, r2
 8002670:	0018      	movs	r0, r3
 8002672:	f001 f899 	bl	80037a8 <HAL_ADC_ConfigChannel>
 8002676:	1e03      	subs	r3, r0, #0
 8002678:	d001      	beq.n	800267e <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 800267a:	f000 fb69 	bl	8002d50 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800267e:	46c0      	nop			; (mov r8, r8)
 8002680:	46bd      	mov	sp, r7
 8002682:	b002      	add	sp, #8
 8002684:	bd80      	pop	{r7, pc}
 8002686:	46c0      	nop			; (mov r8, r8)
 8002688:	200001f8 	.word	0x200001f8
 800268c:	40012400 	.word	0x40012400

08002690 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002694:	4b1c      	ldr	r3, [pc, #112]	; (8002708 <MX_I2C1_Init+0x78>)
 8002696:	4a1d      	ldr	r2, [pc, #116]	; (800270c <MX_I2C1_Init+0x7c>)
 8002698:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000708;
 800269a:	4b1b      	ldr	r3, [pc, #108]	; (8002708 <MX_I2C1_Init+0x78>)
 800269c:	22e1      	movs	r2, #225	; 0xe1
 800269e:	00d2      	lsls	r2, r2, #3
 80026a0:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80026a2:	4b19      	ldr	r3, [pc, #100]	; (8002708 <MX_I2C1_Init+0x78>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80026a8:	4b17      	ldr	r3, [pc, #92]	; (8002708 <MX_I2C1_Init+0x78>)
 80026aa:	2201      	movs	r2, #1
 80026ac:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80026ae:	4b16      	ldr	r3, [pc, #88]	; (8002708 <MX_I2C1_Init+0x78>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80026b4:	4b14      	ldr	r3, [pc, #80]	; (8002708 <MX_I2C1_Init+0x78>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80026ba:	4b13      	ldr	r3, [pc, #76]	; (8002708 <MX_I2C1_Init+0x78>)
 80026bc:	2200      	movs	r2, #0
 80026be:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80026c0:	4b11      	ldr	r3, [pc, #68]	; (8002708 <MX_I2C1_Init+0x78>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80026c6:	4b10      	ldr	r3, [pc, #64]	; (8002708 <MX_I2C1_Init+0x78>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80026cc:	4b0e      	ldr	r3, [pc, #56]	; (8002708 <MX_I2C1_Init+0x78>)
 80026ce:	0018      	movs	r0, r3
 80026d0:	f001 fc80 	bl	8003fd4 <HAL_I2C_Init>
 80026d4:	1e03      	subs	r3, r0, #0
 80026d6:	d001      	beq.n	80026dc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80026d8:	f000 fb3a 	bl	8002d50 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80026dc:	4b0a      	ldr	r3, [pc, #40]	; (8002708 <MX_I2C1_Init+0x78>)
 80026de:	2100      	movs	r1, #0
 80026e0:	0018      	movs	r0, r3
 80026e2:	f002 f915 	bl	8004910 <HAL_I2CEx_ConfigAnalogFilter>
 80026e6:	1e03      	subs	r3, r0, #0
 80026e8:	d001      	beq.n	80026ee <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80026ea:	f000 fb31 	bl	8002d50 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80026ee:	4b06      	ldr	r3, [pc, #24]	; (8002708 <MX_I2C1_Init+0x78>)
 80026f0:	2100      	movs	r1, #0
 80026f2:	0018      	movs	r0, r3
 80026f4:	f002 f958 	bl	80049a8 <HAL_I2CEx_ConfigDigitalFilter>
 80026f8:	1e03      	subs	r3, r0, #0
 80026fa:	d001      	beq.n	8002700 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80026fc:	f000 fb28 	bl	8002d50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002700:	46c0      	nop			; (mov r8, r8)
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	46c0      	nop			; (mov r8, r8)
 8002708:	20000254 	.word	0x20000254
 800270c:	40005400 	.word	0x40005400

08002710 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002714:	4b18      	ldr	r3, [pc, #96]	; (8002778 <MX_SPI1_Init+0x68>)
 8002716:	4a19      	ldr	r2, [pc, #100]	; (800277c <MX_SPI1_Init+0x6c>)
 8002718:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800271a:	4b17      	ldr	r3, [pc, #92]	; (8002778 <MX_SPI1_Init+0x68>)
 800271c:	2282      	movs	r2, #130	; 0x82
 800271e:	0052      	lsls	r2, r2, #1
 8002720:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002722:	4b15      	ldr	r3, [pc, #84]	; (8002778 <MX_SPI1_Init+0x68>)
 8002724:	2200      	movs	r2, #0
 8002726:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002728:	4b13      	ldr	r3, [pc, #76]	; (8002778 <MX_SPI1_Init+0x68>)
 800272a:	2200      	movs	r2, #0
 800272c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800272e:	4b12      	ldr	r3, [pc, #72]	; (8002778 <MX_SPI1_Init+0x68>)
 8002730:	2200      	movs	r2, #0
 8002732:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002734:	4b10      	ldr	r3, [pc, #64]	; (8002778 <MX_SPI1_Init+0x68>)
 8002736:	2200      	movs	r2, #0
 8002738:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800273a:	4b0f      	ldr	r3, [pc, #60]	; (8002778 <MX_SPI1_Init+0x68>)
 800273c:	2280      	movs	r2, #128	; 0x80
 800273e:	0092      	lsls	r2, r2, #2
 8002740:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002742:	4b0d      	ldr	r3, [pc, #52]	; (8002778 <MX_SPI1_Init+0x68>)
 8002744:	2200      	movs	r2, #0
 8002746:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002748:	4b0b      	ldr	r3, [pc, #44]	; (8002778 <MX_SPI1_Init+0x68>)
 800274a:	2200      	movs	r2, #0
 800274c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800274e:	4b0a      	ldr	r3, [pc, #40]	; (8002778 <MX_SPI1_Init+0x68>)
 8002750:	2200      	movs	r2, #0
 8002752:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002754:	4b08      	ldr	r3, [pc, #32]	; (8002778 <MX_SPI1_Init+0x68>)
 8002756:	2200      	movs	r2, #0
 8002758:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800275a:	4b07      	ldr	r3, [pc, #28]	; (8002778 <MX_SPI1_Init+0x68>)
 800275c:	2207      	movs	r2, #7
 800275e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002760:	4b05      	ldr	r3, [pc, #20]	; (8002778 <MX_SPI1_Init+0x68>)
 8002762:	0018      	movs	r0, r3
 8002764:	f003 f8d8 	bl	8005918 <HAL_SPI_Init>
 8002768:	1e03      	subs	r3, r0, #0
 800276a:	d001      	beq.n	8002770 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800276c:	f000 faf0 	bl	8002d50 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002770:	46c0      	nop			; (mov r8, r8)
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
 8002776:	46c0      	nop			; (mov r8, r8)
 8002778:	200002a0 	.word	0x200002a0
 800277c:	40013000 	.word	0x40013000

08002780 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002784:	4b14      	ldr	r3, [pc, #80]	; (80027d8 <MX_USART2_UART_Init+0x58>)
 8002786:	4a15      	ldr	r2, [pc, #84]	; (80027dc <MX_USART2_UART_Init+0x5c>)
 8002788:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800278a:	4b13      	ldr	r3, [pc, #76]	; (80027d8 <MX_USART2_UART_Init+0x58>)
 800278c:	22e1      	movs	r2, #225	; 0xe1
 800278e:	0252      	lsls	r2, r2, #9
 8002790:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002792:	4b11      	ldr	r3, [pc, #68]	; (80027d8 <MX_USART2_UART_Init+0x58>)
 8002794:	2200      	movs	r2, #0
 8002796:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002798:	4b0f      	ldr	r3, [pc, #60]	; (80027d8 <MX_USART2_UART_Init+0x58>)
 800279a:	2200      	movs	r2, #0
 800279c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800279e:	4b0e      	ldr	r3, [pc, #56]	; (80027d8 <MX_USART2_UART_Init+0x58>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80027a4:	4b0c      	ldr	r3, [pc, #48]	; (80027d8 <MX_USART2_UART_Init+0x58>)
 80027a6:	220c      	movs	r2, #12
 80027a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027aa:	4b0b      	ldr	r3, [pc, #44]	; (80027d8 <MX_USART2_UART_Init+0x58>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80027b0:	4b09      	ldr	r3, [pc, #36]	; (80027d8 <MX_USART2_UART_Init+0x58>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80027b6:	4b08      	ldr	r3, [pc, #32]	; (80027d8 <MX_USART2_UART_Init+0x58>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80027bc:	4b06      	ldr	r3, [pc, #24]	; (80027d8 <MX_USART2_UART_Init+0x58>)
 80027be:	2200      	movs	r2, #0
 80027c0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80027c2:	4b05      	ldr	r3, [pc, #20]	; (80027d8 <MX_USART2_UART_Init+0x58>)
 80027c4:	0018      	movs	r0, r3
 80027c6:	f003 fd21 	bl	800620c <HAL_UART_Init>
 80027ca:	1e03      	subs	r3, r0, #0
 80027cc:	d001      	beq.n	80027d2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80027ce:	f000 fabf 	bl	8002d50 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80027d2:	46c0      	nop			; (mov r8, r8)
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	200002f8 	.word	0x200002f8
 80027dc:	40004400 	.word	0x40004400

080027e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80027e0:	b590      	push	{r4, r7, lr}
 80027e2:	b08b      	sub	sp, #44	; 0x2c
 80027e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027e6:	2414      	movs	r4, #20
 80027e8:	193b      	adds	r3, r7, r4
 80027ea:	0018      	movs	r0, r3
 80027ec:	2314      	movs	r3, #20
 80027ee:	001a      	movs	r2, r3
 80027f0:	2100      	movs	r1, #0
 80027f2:	f004 fa91 	bl	8006d18 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80027f6:	4b3e      	ldr	r3, [pc, #248]	; (80028f0 <MX_GPIO_Init+0x110>)
 80027f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027fa:	4b3d      	ldr	r3, [pc, #244]	; (80028f0 <MX_GPIO_Init+0x110>)
 80027fc:	2104      	movs	r1, #4
 80027fe:	430a      	orrs	r2, r1
 8002800:	62da      	str	r2, [r3, #44]	; 0x2c
 8002802:	4b3b      	ldr	r3, [pc, #236]	; (80028f0 <MX_GPIO_Init+0x110>)
 8002804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002806:	2204      	movs	r2, #4
 8002808:	4013      	ands	r3, r2
 800280a:	613b      	str	r3, [r7, #16]
 800280c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800280e:	4b38      	ldr	r3, [pc, #224]	; (80028f0 <MX_GPIO_Init+0x110>)
 8002810:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002812:	4b37      	ldr	r3, [pc, #220]	; (80028f0 <MX_GPIO_Init+0x110>)
 8002814:	2180      	movs	r1, #128	; 0x80
 8002816:	430a      	orrs	r2, r1
 8002818:	62da      	str	r2, [r3, #44]	; 0x2c
 800281a:	4b35      	ldr	r3, [pc, #212]	; (80028f0 <MX_GPIO_Init+0x110>)
 800281c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800281e:	2280      	movs	r2, #128	; 0x80
 8002820:	4013      	ands	r3, r2
 8002822:	60fb      	str	r3, [r7, #12]
 8002824:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002826:	4b32      	ldr	r3, [pc, #200]	; (80028f0 <MX_GPIO_Init+0x110>)
 8002828:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800282a:	4b31      	ldr	r3, [pc, #196]	; (80028f0 <MX_GPIO_Init+0x110>)
 800282c:	2101      	movs	r1, #1
 800282e:	430a      	orrs	r2, r1
 8002830:	62da      	str	r2, [r3, #44]	; 0x2c
 8002832:	4b2f      	ldr	r3, [pc, #188]	; (80028f0 <MX_GPIO_Init+0x110>)
 8002834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002836:	2201      	movs	r2, #1
 8002838:	4013      	ands	r3, r2
 800283a:	60bb      	str	r3, [r7, #8]
 800283c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800283e:	4b2c      	ldr	r3, [pc, #176]	; (80028f0 <MX_GPIO_Init+0x110>)
 8002840:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002842:	4b2b      	ldr	r3, [pc, #172]	; (80028f0 <MX_GPIO_Init+0x110>)
 8002844:	2102      	movs	r1, #2
 8002846:	430a      	orrs	r2, r1
 8002848:	62da      	str	r2, [r3, #44]	; 0x2c
 800284a:	4b29      	ldr	r3, [pc, #164]	; (80028f0 <MX_GPIO_Init+0x110>)
 800284c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800284e:	2202      	movs	r2, #2
 8002850:	4013      	ands	r3, r2
 8002852:	607b      	str	r3, [r7, #4]
 8002854:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8002856:	2380      	movs	r3, #128	; 0x80
 8002858:	00d9      	lsls	r1, r3, #3
 800285a:	23a0      	movs	r3, #160	; 0xa0
 800285c:	05db      	lsls	r3, r3, #23
 800285e:	2200      	movs	r2, #0
 8002860:	0018      	movs	r0, r3
 8002862:	f001 fb99 	bl	8003f98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8002866:	4b23      	ldr	r3, [pc, #140]	; (80028f4 <MX_GPIO_Init+0x114>)
 8002868:	2200      	movs	r2, #0
 800286a:	2140      	movs	r1, #64	; 0x40
 800286c:	0018      	movs	r0, r3
 800286e:	f001 fb93 	bl	8003f98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002872:	193b      	adds	r3, r7, r4
 8002874:	2280      	movs	r2, #128	; 0x80
 8002876:	0192      	lsls	r2, r2, #6
 8002878:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800287a:	193b      	adds	r3, r7, r4
 800287c:	2284      	movs	r2, #132	; 0x84
 800287e:	0392      	lsls	r2, r2, #14
 8002880:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002882:	193b      	adds	r3, r7, r4
 8002884:	2200      	movs	r2, #0
 8002886:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002888:	193b      	adds	r3, r7, r4
 800288a:	4a1b      	ldr	r2, [pc, #108]	; (80028f8 <MX_GPIO_Init+0x118>)
 800288c:	0019      	movs	r1, r3
 800288e:	0010      	movs	r0, r2
 8002890:	f001 fa04 	bl	8003c9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002894:	0021      	movs	r1, r4
 8002896:	193b      	adds	r3, r7, r4
 8002898:	2280      	movs	r2, #128	; 0x80
 800289a:	00d2      	lsls	r2, r2, #3
 800289c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800289e:	000c      	movs	r4, r1
 80028a0:	193b      	adds	r3, r7, r4
 80028a2:	2201      	movs	r2, #1
 80028a4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a6:	193b      	adds	r3, r7, r4
 80028a8:	2200      	movs	r2, #0
 80028aa:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ac:	193b      	adds	r3, r7, r4
 80028ae:	2200      	movs	r2, #0
 80028b0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028b2:	193a      	adds	r2, r7, r4
 80028b4:	23a0      	movs	r3, #160	; 0xa0
 80028b6:	05db      	lsls	r3, r3, #23
 80028b8:	0011      	movs	r1, r2
 80028ba:	0018      	movs	r0, r3
 80028bc:	f001 f9ee 	bl	8003c9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80028c0:	0021      	movs	r1, r4
 80028c2:	187b      	adds	r3, r7, r1
 80028c4:	2240      	movs	r2, #64	; 0x40
 80028c6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028c8:	187b      	adds	r3, r7, r1
 80028ca:	2201      	movs	r2, #1
 80028cc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ce:	187b      	adds	r3, r7, r1
 80028d0:	2200      	movs	r2, #0
 80028d2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028d4:	187b      	adds	r3, r7, r1
 80028d6:	2200      	movs	r2, #0
 80028d8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028da:	187b      	adds	r3, r7, r1
 80028dc:	4a05      	ldr	r2, [pc, #20]	; (80028f4 <MX_GPIO_Init+0x114>)
 80028de:	0019      	movs	r1, r3
 80028e0:	0010      	movs	r0, r2
 80028e2:	f001 f9db 	bl	8003c9c <HAL_GPIO_Init>

}
 80028e6:	46c0      	nop			; (mov r8, r8)
 80028e8:	46bd      	mov	sp, r7
 80028ea:	b00b      	add	sp, #44	; 0x2c
 80028ec:	bd90      	pop	{r4, r7, pc}
 80028ee:	46c0      	nop			; (mov r8, r8)
 80028f0:	40021000 	.word	0x40021000
 80028f4:	50000400 	.word	0x50000400
 80028f8:	50000800 	.word	0x50000800

080028fc <osc_write_to_register>:

/* USER CODE BEGIN 4 */

void osc_write_to_register(uint8_t REG, uint8_t VAL)
{
 80028fc:	b590      	push	{r4, r7, lr}
 80028fe:	b085      	sub	sp, #20
 8002900:	af00      	add	r7, sp, #0
 8002902:	0002      	movs	r2, r0
 8002904:	1dfb      	adds	r3, r7, #7
 8002906:	701a      	strb	r2, [r3, #0]
 8002908:	1dbb      	adds	r3, r7, #6
 800290a:	1c0a      	adds	r2, r1, #0
 800290c:	701a      	strb	r2, [r3, #0]
	*
	*/

	uint8_t tx_data[2];

	tx_data[0] = REG;
 800290e:	240c      	movs	r4, #12
 8002910:	193b      	adds	r3, r7, r4
 8002912:	1dfa      	adds	r2, r7, #7
 8002914:	7812      	ldrb	r2, [r2, #0]
 8002916:	701a      	strb	r2, [r3, #0]
	tx_data[1] = VAL;
 8002918:	193b      	adds	r3, r7, r4
 800291a:	1dba      	adds	r2, r7, #6
 800291c:	7812      	ldrb	r2, [r2, #0]
 800291e:	705a      	strb	r2, [r3, #1]

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8002920:	4b0a      	ldr	r3, [pc, #40]	; (800294c <osc_write_to_register+0x50>)
 8002922:	2200      	movs	r2, #0
 8002924:	2140      	movs	r1, #64	; 0x40
 8002926:	0018      	movs	r0, r3
 8002928:	f001 fb36 	bl	8003f98 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)tx_data, 2, 100);
 800292c:	1939      	adds	r1, r7, r4
 800292e:	4808      	ldr	r0, [pc, #32]	; (8002950 <osc_write_to_register+0x54>)
 8002930:	2364      	movs	r3, #100	; 0x64
 8002932:	2202      	movs	r2, #2
 8002934:	f003 f884 	bl	8005a40 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8002938:	4b04      	ldr	r3, [pc, #16]	; (800294c <osc_write_to_register+0x50>)
 800293a:	2201      	movs	r2, #1
 800293c:	2140      	movs	r1, #64	; 0x40
 800293e:	0018      	movs	r0, r3
 8002940:	f001 fb2a 	bl	8003f98 <HAL_GPIO_WritePin>
}
 8002944:	46c0      	nop			; (mov r8, r8)
 8002946:	46bd      	mov	sp, r7
 8002948:	b005      	add	sp, #20
 800294a:	bd90      	pop	{r4, r7, pc}
 800294c:	50000400 	.word	0x50000400
 8002950:	200002a0 	.word	0x200002a0

08002954 <osc_read_register>:

void osc_read_register(uint8_t REG, char NAME[20])
{
 8002954:	b5b0      	push	{r4, r5, r7, lr}
 8002956:	b086      	sub	sp, #24
 8002958:	af02      	add	r7, sp, #8
 800295a:	0002      	movs	r2, r0
 800295c:	6039      	str	r1, [r7, #0]
 800295e:	1dfb      	adds	r3, r7, #7
 8002960:	701a      	strb	r2, [r3, #0]
	*/

	uint8_t tx_data[2];
	uint8_t rx_data[2];

	tx_data[0] = REG;
 8002962:	250c      	movs	r5, #12
 8002964:	197b      	adds	r3, r7, r5
 8002966:	1dfa      	adds	r2, r7, #7
 8002968:	7812      	ldrb	r2, [r2, #0]
 800296a:	701a      	strb	r2, [r3, #0]
	tx_data[1] = 0;
 800296c:	197b      	adds	r3, r7, r5
 800296e:	2200      	movs	r2, #0
 8002970:	705a      	strb	r2, [r3, #1]
	rx_data[0] = 0;
 8002972:	2408      	movs	r4, #8
 8002974:	193b      	adds	r3, r7, r4
 8002976:	2200      	movs	r2, #0
 8002978:	701a      	strb	r2, [r3, #0]
	rx_data[1] = 0;
 800297a:	193b      	adds	r3, r7, r4
 800297c:	2200      	movs	r2, #0
 800297e:	705a      	strb	r2, [r3, #1]

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8002980:	4b14      	ldr	r3, [pc, #80]	; (80029d4 <osc_read_register+0x80>)
 8002982:	2200      	movs	r2, #0
 8002984:	2140      	movs	r1, #64	; 0x40
 8002986:	0018      	movs	r0, r3
 8002988:	f001 fb06 	bl	8003f98 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)tx_data, rx_data, 2, 100);
 800298c:	193a      	adds	r2, r7, r4
 800298e:	1979      	adds	r1, r7, r5
 8002990:	4811      	ldr	r0, [pc, #68]	; (80029d8 <osc_read_register+0x84>)
 8002992:	2364      	movs	r3, #100	; 0x64
 8002994:	9300      	str	r3, [sp, #0]
 8002996:	2302      	movs	r3, #2
 8002998:	f003 f9a8 	bl	8005cec <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 800299c:	4b0d      	ldr	r3, [pc, #52]	; (80029d4 <osc_read_register+0x80>)
 800299e:	2201      	movs	r2, #1
 80029a0:	2140      	movs	r1, #64	; 0x40
 80029a2:	0018      	movs	r0, r3
 80029a4:	f001 faf8 	bl	8003f98 <HAL_GPIO_WritePin>

	uart_buf_len = sprintf(uart_buf, "%s Value: 0x%02x\r\n", NAME, (unsigned int)rx_data[1]);
 80029a8:	193b      	adds	r3, r7, r4
 80029aa:	785b      	ldrb	r3, [r3, #1]
 80029ac:	683a      	ldr	r2, [r7, #0]
 80029ae:	490b      	ldr	r1, [pc, #44]	; (80029dc <osc_read_register+0x88>)
 80029b0:	480b      	ldr	r0, [pc, #44]	; (80029e0 <osc_read_register+0x8c>)
 80029b2:	f004 fe27 	bl	8007604 <siprintf>
 80029b6:	0002      	movs	r2, r0
 80029b8:	4b0a      	ldr	r3, [pc, #40]	; (80029e4 <osc_read_register+0x90>)
 80029ba:	601a      	str	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
 80029bc:	4b09      	ldr	r3, [pc, #36]	; (80029e4 <osc_read_register+0x90>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	b29a      	uxth	r2, r3
 80029c2:	4907      	ldr	r1, [pc, #28]	; (80029e0 <osc_read_register+0x8c>)
 80029c4:	4808      	ldr	r0, [pc, #32]	; (80029e8 <osc_read_register+0x94>)
 80029c6:	2364      	movs	r3, #100	; 0x64
 80029c8:	f003 fc74 	bl	80062b4 <HAL_UART_Transmit>
}
 80029cc:	46c0      	nop			; (mov r8, r8)
 80029ce:	46bd      	mov	sp, r7
 80029d0:	b004      	add	sp, #16
 80029d2:	bdb0      	pop	{r4, r5, r7, pc}
 80029d4:	50000400 	.word	0x50000400
 80029d8:	200002a0 	.word	0x200002a0
 80029dc:	08009c80 	.word	0x08009c80
 80029e0:	200003a4 	.word	0x200003a4
 80029e4:	200003d8 	.word	0x200003d8
 80029e8:	200002f8 	.word	0x200002f8

080029ec <osc_init>:

void osc_init()
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	af00      	add	r7, sp, #0
   /*
	*  This function initializes the register values of the oscillator
	*
	*/

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET); // Sets CS pin high
 80029f0:	4b2b      	ldr	r3, [pc, #172]	; (8002aa0 <osc_init+0xb4>)
 80029f2:	2201      	movs	r2, #1
 80029f4:	2140      	movs	r1, #64	; 0x40
 80029f6:	0018      	movs	r0, r3
 80029f8:	f001 face 	bl	8003f98 <HAL_GPIO_WritePin>

	osc_write_to_register(W_REG1, VAL_REG1);
 80029fc:	2302      	movs	r3, #2
 80029fe:	2204      	movs	r2, #4
 8002a00:	0011      	movs	r1, r2
 8002a02:	0018      	movs	r0, r3
 8002a04:	f7ff ff7a 	bl	80028fc <osc_write_to_register>
	osc_write_to_register(W_REG2, VAL_REG2);
 8002a08:	2304      	movs	r3, #4
 8002a0a:	2204      	movs	r2, #4
 8002a0c:	0011      	movs	r1, r2
 8002a0e:	0018      	movs	r0, r3
 8002a10:	f7ff ff74 	bl	80028fc <osc_write_to_register>
	osc_write_to_register(W_REG4, VAL_REG4);
 8002a14:	2308      	movs	r3, #8
 8002a16:	2257      	movs	r2, #87	; 0x57
 8002a18:	0011      	movs	r1, r2
 8002a1a:	0018      	movs	r0, r3
 8002a1c:	f7ff ff6e 	bl	80028fc <osc_write_to_register>
	osc_write_to_register(W_REG5, VAL_REG5);
 8002a20:	230a      	movs	r3, #10
 8002a22:	2211      	movs	r2, #17
 8002a24:	0011      	movs	r1, r2
 8002a26:	0018      	movs	r0, r3
 8002a28:	f7ff ff68 	bl	80028fc <osc_write_to_register>
	osc_write_to_register(W_REG6, VAL_REG6);
 8002a2c:	230c      	movs	r3, #12
 8002a2e:	2260      	movs	r2, #96	; 0x60
 8002a30:	0011      	movs	r1, r2
 8002a32:	0018      	movs	r0, r3
 8002a34:	f7ff ff62 	bl	80028fc <osc_write_to_register>
	osc_write_to_register(W_REG7, VAL_REG7);
 8002a38:	230e      	movs	r3, #14
 8002a3a:	2250      	movs	r2, #80	; 0x50
 8002a3c:	0011      	movs	r1, r2
 8002a3e:	0018      	movs	r0, r3
 8002a40:	f7ff ff5c 	bl	80028fc <osc_write_to_register>
	osc_write_to_register(W_REG8, VAL_REG8);
 8002a44:	2310      	movs	r3, #16
 8002a46:	223f      	movs	r2, #63	; 0x3f
 8002a48:	0011      	movs	r1, r2
 8002a4a:	0018      	movs	r0, r3
 8002a4c:	f7ff ff56 	bl	80028fc <osc_write_to_register>
	osc_write_to_register(W_REG9, VAL_REG9);
 8002a50:	2312      	movs	r3, #18
 8002a52:	22ff      	movs	r2, #255	; 0xff
 8002a54:	0011      	movs	r1, r2
 8002a56:	0018      	movs	r0, r3
 8002a58:	f7ff ff50 	bl	80028fc <osc_write_to_register>
	osc_write_to_register(W_REGA, VAL_REGA);
 8002a5c:	2314      	movs	r3, #20
 8002a5e:	22f0      	movs	r2, #240	; 0xf0
 8002a60:	0011      	movs	r1, r2
 8002a62:	0018      	movs	r0, r3
 8002a64:	f7ff ff4a 	bl	80028fc <osc_write_to_register>
	osc_write_to_register(W_REGB, VAL_REGB);
 8002a68:	2316      	movs	r3, #22
 8002a6a:	221a      	movs	r2, #26
 8002a6c:	0011      	movs	r1, r2
 8002a6e:	0018      	movs	r0, r3
 8002a70:	f7ff ff44 	bl	80028fc <osc_write_to_register>
	osc_write_to_register(W_REGC, VAL_REGC);
 8002a74:	2318      	movs	r3, #24
 8002a76:	22bf      	movs	r2, #191	; 0xbf
 8002a78:	0011      	movs	r1, r2
 8002a7a:	0018      	movs	r0, r3
 8002a7c:	f7ff ff3e 	bl	80028fc <osc_write_to_register>
	osc_write_to_register(W_REGD, VAL_REGD);
 8002a80:	231a      	movs	r3, #26
 8002a82:	2200      	movs	r2, #0
 8002a84:	0011      	movs	r1, r2
 8002a86:	0018      	movs	r0, r3
 8002a88:	f7ff ff38 	bl	80028fc <osc_write_to_register>
	osc_write_to_register(W_REG3, VAL_REG3); // autocal at the end of rest of registers
 8002a8c:	2306      	movs	r3, #6
 8002a8e:	223f      	movs	r2, #63	; 0x3f
 8002a90:	0011      	movs	r1, r2
 8002a92:	0018      	movs	r0, r3
 8002a94:	f7ff ff32 	bl	80028fc <osc_write_to_register>

}
 8002a98:	46c0      	nop			; (mov r8, r8)
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	46c0      	nop			; (mov r8, r8)
 8002aa0:	50000400 	.word	0x50000400

08002aa4 <osc_config_reg_values>:

void osc_config_reg_values(uint16_t ND) {
 8002aa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002aa6:	b085      	sub	sp, #20
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	0002      	movs	r2, r0
 8002aac:	1dbb      	adds	r3, r7, #6
 8002aae:	801a      	strh	r2, [r3, #0]
	uint16_t VAL_REG6_16BITS = VAL_REG6;
 8002ab0:	2260      	movs	r2, #96	; 0x60
 8002ab2:	210e      	movs	r1, #14
 8002ab4:	187b      	adds	r3, r7, r1
 8002ab6:	801a      	strh	r2, [r3, #0]
	uint8_t VAL_REG6_NEW = 0;
 8002ab8:	240d      	movs	r4, #13
 8002aba:	193b      	adds	r3, r7, r4
 8002abc:	2200      	movs	r2, #0
 8002abe:	701a      	strb	r2, [r3, #0]
	uint8_t VAL_REG7_NEW = 0;
 8002ac0:	250c      	movs	r5, #12
 8002ac2:	197b      	adds	r3, r7, r5
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	701a      	strb	r2, [r3, #0]
	uint16_t ND_9to8 = 0;
 8002ac8:	260a      	movs	r6, #10
 8002aca:	19bb      	adds	r3, r7, r6
 8002acc:	2200      	movs	r2, #0
 8002ace:	801a      	strh	r2, [r3, #0]

	// Extract ND[7:0] and insert into Register 7
	VAL_REG7_NEW = ND & (0b0000000011111111);
 8002ad0:	197b      	adds	r3, r7, r5
 8002ad2:	1dba      	adds	r2, r7, #6
 8002ad4:	8812      	ldrh	r2, [r2, #0]
 8002ad6:	701a      	strb	r2, [r3, #0]

	// Extract ND[9:8] and insert into Register 6
	ND_9to8 = ND >> 8;
 8002ad8:	19bb      	adds	r3, r7, r6
 8002ada:	1dba      	adds	r2, r7, #6
 8002adc:	8812      	ldrh	r2, [r2, #0]
 8002ade:	0a12      	lsrs	r2, r2, #8
 8002ae0:	801a      	strh	r2, [r3, #0]
	VAL_REG6_16BITS = VAL_REG6_16BITS & (0b0000000011111100);
 8002ae2:	187b      	adds	r3, r7, r1
 8002ae4:	0008      	movs	r0, r1
 8002ae6:	187a      	adds	r2, r7, r1
 8002ae8:	8812      	ldrh	r2, [r2, #0]
 8002aea:	21fc      	movs	r1, #252	; 0xfc
 8002aec:	400a      	ands	r2, r1
 8002aee:	801a      	strh	r2, [r3, #0]
	VAL_REG6_NEW = VAL_REG6_16BITS | ND_9to8;
 8002af0:	183b      	adds	r3, r7, r0
 8002af2:	881b      	ldrh	r3, [r3, #0]
 8002af4:	b2d9      	uxtb	r1, r3
 8002af6:	19bb      	adds	r3, r7, r6
 8002af8:	881b      	ldrh	r3, [r3, #0]
 8002afa:	b2da      	uxtb	r2, r3
 8002afc:	193b      	adds	r3, r7, r4
 8002afe:	430a      	orrs	r2, r1
 8002b00:	701a      	strb	r2, [r3, #0]

	// Write new values to registers
	osc_write_to_register(W_REG6, VAL_REG6_NEW);
 8002b02:	220c      	movs	r2, #12
 8002b04:	193b      	adds	r3, r7, r4
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	0019      	movs	r1, r3
 8002b0a:	0010      	movs	r0, r2
 8002b0c:	f7ff fef6 	bl	80028fc <osc_write_to_register>
	osc_write_to_register(W_REG7, VAL_REG7_NEW);
 8002b10:	220e      	movs	r2, #14
 8002b12:	197b      	adds	r3, r7, r5
 8002b14:	781b      	ldrb	r3, [r3, #0]
 8002b16:	0019      	movs	r1, r3
 8002b18:	0010      	movs	r0, r2
 8002b1a:	f7ff feef 	bl	80028fc <osc_write_to_register>
}
 8002b1e:	46c0      	nop			; (mov r8, r8)
 8002b20:	46bd      	mov	sp, r7
 8002b22:	b005      	add	sp, #20
 8002b24:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002b28 <osc_print_register_contents>:

void osc_print_register_contents()
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	af00      	add	r7, sp, #0
   /*
	*  This function prints the contents of ALL registers
	*
	*/

	osc_read_register(R_REG0, "REG0");
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	4b2b      	ldr	r3, [pc, #172]	; (8002bdc <osc_print_register_contents+0xb4>)
 8002b30:	0019      	movs	r1, r3
 8002b32:	0010      	movs	r0, r2
 8002b34:	f7ff ff0e 	bl	8002954 <osc_read_register>
	osc_read_register(R_REG1, "REG1");
 8002b38:	2203      	movs	r2, #3
 8002b3a:	4b29      	ldr	r3, [pc, #164]	; (8002be0 <osc_print_register_contents+0xb8>)
 8002b3c:	0019      	movs	r1, r3
 8002b3e:	0010      	movs	r0, r2
 8002b40:	f7ff ff08 	bl	8002954 <osc_read_register>
	osc_read_register(R_REG2, "REG2");
 8002b44:	2205      	movs	r2, #5
 8002b46:	4b27      	ldr	r3, [pc, #156]	; (8002be4 <osc_print_register_contents+0xbc>)
 8002b48:	0019      	movs	r1, r3
 8002b4a:	0010      	movs	r0, r2
 8002b4c:	f7ff ff02 	bl	8002954 <osc_read_register>
	osc_read_register(R_REG3, "REG3");
 8002b50:	2207      	movs	r2, #7
 8002b52:	4b25      	ldr	r3, [pc, #148]	; (8002be8 <osc_print_register_contents+0xc0>)
 8002b54:	0019      	movs	r1, r3
 8002b56:	0010      	movs	r0, r2
 8002b58:	f7ff fefc 	bl	8002954 <osc_read_register>
	osc_read_register(R_REG4, "REG4");
 8002b5c:	2209      	movs	r2, #9
 8002b5e:	4b23      	ldr	r3, [pc, #140]	; (8002bec <osc_print_register_contents+0xc4>)
 8002b60:	0019      	movs	r1, r3
 8002b62:	0010      	movs	r0, r2
 8002b64:	f7ff fef6 	bl	8002954 <osc_read_register>
	osc_read_register(R_REG5, "REG5");
 8002b68:	220b      	movs	r2, #11
 8002b6a:	4b21      	ldr	r3, [pc, #132]	; (8002bf0 <osc_print_register_contents+0xc8>)
 8002b6c:	0019      	movs	r1, r3
 8002b6e:	0010      	movs	r0, r2
 8002b70:	f7ff fef0 	bl	8002954 <osc_read_register>
	osc_read_register(R_REG6, "REG6");
 8002b74:	220d      	movs	r2, #13
 8002b76:	4b1f      	ldr	r3, [pc, #124]	; (8002bf4 <osc_print_register_contents+0xcc>)
 8002b78:	0019      	movs	r1, r3
 8002b7a:	0010      	movs	r0, r2
 8002b7c:	f7ff feea 	bl	8002954 <osc_read_register>
	osc_read_register(R_REG7, "REG7");
 8002b80:	220f      	movs	r2, #15
 8002b82:	4b1d      	ldr	r3, [pc, #116]	; (8002bf8 <osc_print_register_contents+0xd0>)
 8002b84:	0019      	movs	r1, r3
 8002b86:	0010      	movs	r0, r2
 8002b88:	f7ff fee4 	bl	8002954 <osc_read_register>
	osc_read_register(R_REG8, "REG8");
 8002b8c:	2211      	movs	r2, #17
 8002b8e:	4b1b      	ldr	r3, [pc, #108]	; (8002bfc <osc_print_register_contents+0xd4>)
 8002b90:	0019      	movs	r1, r3
 8002b92:	0010      	movs	r0, r2
 8002b94:	f7ff fede 	bl	8002954 <osc_read_register>
	osc_read_register(R_REG9, "REG9");
 8002b98:	2213      	movs	r2, #19
 8002b9a:	4b19      	ldr	r3, [pc, #100]	; (8002c00 <osc_print_register_contents+0xd8>)
 8002b9c:	0019      	movs	r1, r3
 8002b9e:	0010      	movs	r0, r2
 8002ba0:	f7ff fed8 	bl	8002954 <osc_read_register>
	osc_read_register(R_REGA, "REGA");
 8002ba4:	2215      	movs	r2, #21
 8002ba6:	4b17      	ldr	r3, [pc, #92]	; (8002c04 <osc_print_register_contents+0xdc>)
 8002ba8:	0019      	movs	r1, r3
 8002baa:	0010      	movs	r0, r2
 8002bac:	f7ff fed2 	bl	8002954 <osc_read_register>
	osc_read_register(R_REGB, "REGB");
 8002bb0:	2217      	movs	r2, #23
 8002bb2:	4b15      	ldr	r3, [pc, #84]	; (8002c08 <osc_print_register_contents+0xe0>)
 8002bb4:	0019      	movs	r1, r3
 8002bb6:	0010      	movs	r0, r2
 8002bb8:	f7ff fecc 	bl	8002954 <osc_read_register>
	osc_read_register(R_REGC, "REGC");
 8002bbc:	2219      	movs	r2, #25
 8002bbe:	4b13      	ldr	r3, [pc, #76]	; (8002c0c <osc_print_register_contents+0xe4>)
 8002bc0:	0019      	movs	r1, r3
 8002bc2:	0010      	movs	r0, r2
 8002bc4:	f7ff fec6 	bl	8002954 <osc_read_register>
	osc_read_register(R_REGD, "REGD");
 8002bc8:	221b      	movs	r2, #27
 8002bca:	4b11      	ldr	r3, [pc, #68]	; (8002c10 <osc_print_register_contents+0xe8>)
 8002bcc:	0019      	movs	r1, r3
 8002bce:	0010      	movs	r0, r2
 8002bd0:	f7ff fec0 	bl	8002954 <osc_read_register>
}
 8002bd4:	46c0      	nop			; (mov r8, r8)
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	46c0      	nop			; (mov r8, r8)
 8002bdc:	08009c94 	.word	0x08009c94
 8002be0:	08009c9c 	.word	0x08009c9c
 8002be4:	08009ca4 	.word	0x08009ca4
 8002be8:	08009cac 	.word	0x08009cac
 8002bec:	08009cb4 	.word	0x08009cb4
 8002bf0:	08009cbc 	.word	0x08009cbc
 8002bf4:	08009cc4 	.word	0x08009cc4
 8002bf8:	08009ccc 	.word	0x08009ccc
 8002bfc:	08009cd4 	.word	0x08009cd4
 8002c00:	08009cdc 	.word	0x08009cdc
 8002c04:	08009ce4 	.word	0x08009ce4
 8002c08:	08009cec 	.word	0x08009cec
 8002c0c:	08009cf4 	.word	0x08009cf4
 8002c10:	08009cfc 	.word	0x08009cfc

08002c14 <ToF_distance>:

int ToF_distance(uint8_t *i2c_buf)
{
 8002c14:	b5b0      	push	{r4, r5, r7, lr}
 8002c16:	b086      	sub	sp, #24
 8002c18:	af02      	add	r7, sp, #8
 8002c1a:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef ret;
	i2c_buf[0] = REG_DISTANCE;
 8002c1c:	22db      	movs	r2, #219	; 0xdb
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	701a      	strb	r2, [r3, #0]
	ret = HAL_I2C_Master_Transmit(&hi2c1, TFmini_ADDR_W, TOF_REQ_FRAME, 5, HAL_MAX_DELAY);
 8002c22:	2320      	movs	r3, #32
 8002c24:	b299      	uxth	r1, r3
 8002c26:	250d      	movs	r5, #13
 8002c28:	197c      	adds	r4, r7, r5
 8002c2a:	4a19      	ldr	r2, [pc, #100]	; (8002c90 <ToF_distance+0x7c>)
 8002c2c:	4819      	ldr	r0, [pc, #100]	; (8002c94 <ToF_distance+0x80>)
 8002c2e:	2301      	movs	r3, #1
 8002c30:	425b      	negs	r3, r3
 8002c32:	9300      	str	r3, [sp, #0]
 8002c34:	2305      	movs	r3, #5
 8002c36:	f001 fa63 	bl	8004100 <HAL_I2C_Master_Transmit>
 8002c3a:	0003      	movs	r3, r0
 8002c3c:	7023      	strb	r3, [r4, #0]

	// Read 9 bytes from TFmini
	ret = HAL_I2C_Master_Receive(&hi2c1, TFmini_ADDR_R, i2c_buf, 9, HAL_MAX_DELAY);
 8002c3e:	2321      	movs	r3, #33	; 0x21
 8002c40:	b299      	uxth	r1, r3
 8002c42:	197c      	adds	r4, r7, r5
 8002c44:	687a      	ldr	r2, [r7, #4]
 8002c46:	4813      	ldr	r0, [pc, #76]	; (8002c94 <ToF_distance+0x80>)
 8002c48:	2301      	movs	r3, #1
 8002c4a:	425b      	negs	r3, r3
 8002c4c:	9300      	str	r3, [sp, #0]
 8002c4e:	2309      	movs	r3, #9
 8002c50:	f001 fb5e 	bl	8004310 <HAL_I2C_Master_Receive>
 8002c54:	0003      	movs	r3, r0
 8002c56:	7023      	strb	r3, [r4, #0]

	// Get distance
	uint16_t d = i2c_buf[2] + (i2c_buf[3] << 8);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	3302      	adds	r3, #2
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	b299      	uxth	r1, r3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	3303      	adds	r3, #3
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	021b      	lsls	r3, r3, #8
 8002c6a:	b29a      	uxth	r2, r3
 8002c6c:	200e      	movs	r0, #14
 8002c6e:	183b      	adds	r3, r7, r0
 8002c70:	188a      	adds	r2, r1, r2
 8002c72:	801a      	strh	r2, [r3, #0]

	// if d = 0cm, change it to 1cm to not mess with our EIRP calculations
	if (d == 0)
 8002c74:	183b      	adds	r3, r7, r0
 8002c76:	881b      	ldrh	r3, [r3, #0]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d102      	bne.n	8002c82 <ToF_distance+0x6e>
	{
		d = 1;
 8002c7c:	183b      	adds	r3, r7, r0
 8002c7e:	2201      	movs	r2, #1
 8002c80:	801a      	strh	r2, [r3, #0]
	}

	return ((int)d);
 8002c82:	230e      	movs	r3, #14
 8002c84:	18fb      	adds	r3, r7, r3
 8002c86:	881b      	ldrh	r3, [r3, #0]
}
 8002c88:	0018      	movs	r0, r3
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	b004      	add	sp, #16
 8002c8e:	bdb0      	pop	{r4, r5, r7, pc}
 8002c90:	08009e04 	.word	0x08009e04
 8002c94:	20000254 	.word	0x20000254

08002c98 <ToF_temperature>:

int ToF_temperature(uint8_t *i2c_buf)
{
 8002c98:	b5b0      	push	{r4, r5, r7, lr}
 8002c9a:	b086      	sub	sp, #24
 8002c9c:	af02      	add	r7, sp, #8
 8002c9e:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef ret;
	i2c_buf[0] = REG_DISTANCE;
 8002ca0:	22db      	movs	r2, #219	; 0xdb
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	701a      	strb	r2, [r3, #0]
	ret = HAL_I2C_Master_Transmit(&hi2c1, TFmini_ADDR_W, TOF_REQ_FRAME, 5, HAL_MAX_DELAY);
 8002ca6:	2320      	movs	r3, #32
 8002ca8:	b299      	uxth	r1, r3
 8002caa:	250f      	movs	r5, #15
 8002cac:	197c      	adds	r4, r7, r5
 8002cae:	4a1a      	ldr	r2, [pc, #104]	; (8002d18 <ToF_temperature+0x80>)
 8002cb0:	481a      	ldr	r0, [pc, #104]	; (8002d1c <ToF_temperature+0x84>)
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	425b      	negs	r3, r3
 8002cb6:	9300      	str	r3, [sp, #0]
 8002cb8:	2305      	movs	r3, #5
 8002cba:	f001 fa21 	bl	8004100 <HAL_I2C_Master_Transmit>
 8002cbe:	0003      	movs	r3, r0
 8002cc0:	7023      	strb	r3, [r4, #0]

	// Read 9 bytes from TFmini
	ret = HAL_I2C_Master_Receive(&hi2c1, TFmini_ADDR_R, i2c_buf, 9, HAL_MAX_DELAY);
 8002cc2:	2321      	movs	r3, #33	; 0x21
 8002cc4:	b299      	uxth	r1, r3
 8002cc6:	197c      	adds	r4, r7, r5
 8002cc8:	687a      	ldr	r2, [r7, #4]
 8002cca:	4814      	ldr	r0, [pc, #80]	; (8002d1c <ToF_temperature+0x84>)
 8002ccc:	2301      	movs	r3, #1
 8002cce:	425b      	negs	r3, r3
 8002cd0:	9300      	str	r3, [sp, #0]
 8002cd2:	2309      	movs	r3, #9
 8002cd4:	f001 fb1c 	bl	8004310 <HAL_I2C_Master_Receive>
 8002cd8:	0003      	movs	r3, r0
 8002cda:	7023      	strb	r3, [r4, #0]

	// Get temperature
	uint16_t temp = i2c_buf[ 6] + ( i2c_buf[ 7] << 8);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	3306      	adds	r3, #6
 8002ce0:	781b      	ldrb	r3, [r3, #0]
 8002ce2:	b299      	uxth	r1, r3
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	3307      	adds	r3, #7
 8002ce8:	781b      	ldrb	r3, [r3, #0]
 8002cea:	b29b      	uxth	r3, r3
 8002cec:	021b      	lsls	r3, r3, #8
 8002cee:	b29a      	uxth	r2, r3
 8002cf0:	200c      	movs	r0, #12
 8002cf2:	183b      	adds	r3, r7, r0
 8002cf4:	188a      	adds	r2, r1, r2
 8002cf6:	801a      	strh	r2, [r3, #0]
	temp = ( temp >> 3) - 256;
 8002cf8:	0001      	movs	r1, r0
 8002cfa:	187b      	adds	r3, r7, r1
 8002cfc:	881b      	ldrh	r3, [r3, #0]
 8002cfe:	08db      	lsrs	r3, r3, #3
 8002d00:	b29a      	uxth	r2, r3
 8002d02:	187b      	adds	r3, r7, r1
 8002d04:	3a01      	subs	r2, #1
 8002d06:	3aff      	subs	r2, #255	; 0xff
 8002d08:	801a      	strh	r2, [r3, #0]

	return ((int)temp);
 8002d0a:	187b      	adds	r3, r7, r1
 8002d0c:	881b      	ldrh	r3, [r3, #0]
}
 8002d0e:	0018      	movs	r0, r3
 8002d10:	46bd      	mov	sp, r7
 8002d12:	b004      	add	sp, #16
 8002d14:	bdb0      	pop	{r4, r5, r7, pc}
 8002d16:	46c0      	nop			; (mov r8, r8)
 8002d18:	08009e04 	.word	0x08009e04
 8002d1c:	20000254 	.word	0x20000254

08002d20 <ADC_output>:

uint16_t ADC_output()
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	af00      	add	r7, sp, #0
	 *  The output of the ADC ranges from 0 to 4096 since it has 12-bits of resolution
	 *  V_REF = 3.3 Volts for our Nucleo board
	 *
	 */

	 HAL_ADC_Start(&hadc);
 8002d24:	4b09      	ldr	r3, [pc, #36]	; (8002d4c <ADC_output+0x2c>)
 8002d26:	0018      	movs	r0, r3
 8002d28:	f000 fc42 	bl	80035b0 <HAL_ADC_Start>
	 HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	425a      	negs	r2, r3
 8002d30:	4b06      	ldr	r3, [pc, #24]	; (8002d4c <ADC_output+0x2c>)
 8002d32:	0011      	movs	r1, r2
 8002d34:	0018      	movs	r0, r3
 8002d36:	f000 fc8f 	bl	8003658 <HAL_ADC_PollForConversion>
	 return HAL_ADC_GetValue(&hadc);
 8002d3a:	4b04      	ldr	r3, [pc, #16]	; (8002d4c <ADC_output+0x2c>)
 8002d3c:	0018      	movs	r0, r3
 8002d3e:	f000 fd27 	bl	8003790 <HAL_ADC_GetValue>
 8002d42:	0003      	movs	r3, r0
 8002d44:	b29b      	uxth	r3, r3
}
 8002d46:	0018      	movs	r0, r3
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	200001f8 	.word	0x200001f8

08002d50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002d54:	b672      	cpsid	i
}
 8002d56:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002d58:	e7fe      	b.n	8002d58 <Error_Handler+0x8>
	...

08002d5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d60:	4b07      	ldr	r3, [pc, #28]	; (8002d80 <HAL_MspInit+0x24>)
 8002d62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d64:	4b06      	ldr	r3, [pc, #24]	; (8002d80 <HAL_MspInit+0x24>)
 8002d66:	2101      	movs	r1, #1
 8002d68:	430a      	orrs	r2, r1
 8002d6a:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d6c:	4b04      	ldr	r3, [pc, #16]	; (8002d80 <HAL_MspInit+0x24>)
 8002d6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d70:	4b03      	ldr	r3, [pc, #12]	; (8002d80 <HAL_MspInit+0x24>)
 8002d72:	2180      	movs	r1, #128	; 0x80
 8002d74:	0549      	lsls	r1, r1, #21
 8002d76:	430a      	orrs	r2, r1
 8002d78:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d7a:	46c0      	nop			; (mov r8, r8)
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	40021000 	.word	0x40021000

08002d84 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002d84:	b590      	push	{r4, r7, lr}
 8002d86:	b089      	sub	sp, #36	; 0x24
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d8c:	240c      	movs	r4, #12
 8002d8e:	193b      	adds	r3, r7, r4
 8002d90:	0018      	movs	r0, r3
 8002d92:	2314      	movs	r3, #20
 8002d94:	001a      	movs	r2, r3
 8002d96:	2100      	movs	r1, #0
 8002d98:	f003 ffbe 	bl	8006d18 <memset>
  if(hadc->Instance==ADC1)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a14      	ldr	r2, [pc, #80]	; (8002df4 <HAL_ADC_MspInit+0x70>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d122      	bne.n	8002dec <HAL_ADC_MspInit+0x68>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002da6:	4b14      	ldr	r3, [pc, #80]	; (8002df8 <HAL_ADC_MspInit+0x74>)
 8002da8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002daa:	4b13      	ldr	r3, [pc, #76]	; (8002df8 <HAL_ADC_MspInit+0x74>)
 8002dac:	2180      	movs	r1, #128	; 0x80
 8002dae:	0089      	lsls	r1, r1, #2
 8002db0:	430a      	orrs	r2, r1
 8002db2:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002db4:	4b10      	ldr	r3, [pc, #64]	; (8002df8 <HAL_ADC_MspInit+0x74>)
 8002db6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002db8:	4b0f      	ldr	r3, [pc, #60]	; (8002df8 <HAL_ADC_MspInit+0x74>)
 8002dba:	2101      	movs	r1, #1
 8002dbc:	430a      	orrs	r2, r1
 8002dbe:	62da      	str	r2, [r3, #44]	; 0x2c
 8002dc0:	4b0d      	ldr	r3, [pc, #52]	; (8002df8 <HAL_ADC_MspInit+0x74>)
 8002dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	60bb      	str	r3, [r7, #8]
 8002dca:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002dcc:	193b      	adds	r3, r7, r4
 8002dce:	2201      	movs	r2, #1
 8002dd0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002dd2:	193b      	adds	r3, r7, r4
 8002dd4:	2203      	movs	r2, #3
 8002dd6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dd8:	193b      	adds	r3, r7, r4
 8002dda:	2200      	movs	r2, #0
 8002ddc:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dde:	193a      	adds	r2, r7, r4
 8002de0:	23a0      	movs	r3, #160	; 0xa0
 8002de2:	05db      	lsls	r3, r3, #23
 8002de4:	0011      	movs	r1, r2
 8002de6:	0018      	movs	r0, r3
 8002de8:	f000 ff58 	bl	8003c9c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002dec:	46c0      	nop			; (mov r8, r8)
 8002dee:	46bd      	mov	sp, r7
 8002df0:	b009      	add	sp, #36	; 0x24
 8002df2:	bd90      	pop	{r4, r7, pc}
 8002df4:	40012400 	.word	0x40012400
 8002df8:	40021000 	.word	0x40021000

08002dfc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002dfc:	b590      	push	{r4, r7, lr}
 8002dfe:	b089      	sub	sp, #36	; 0x24
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e04:	240c      	movs	r4, #12
 8002e06:	193b      	adds	r3, r7, r4
 8002e08:	0018      	movs	r0, r3
 8002e0a:	2314      	movs	r3, #20
 8002e0c:	001a      	movs	r2, r3
 8002e0e:	2100      	movs	r1, #0
 8002e10:	f003 ff82 	bl	8006d18 <memset>
  if(hi2c->Instance==I2C1)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a18      	ldr	r2, [pc, #96]	; (8002e7c <HAL_I2C_MspInit+0x80>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d129      	bne.n	8002e72 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e1e:	4b18      	ldr	r3, [pc, #96]	; (8002e80 <HAL_I2C_MspInit+0x84>)
 8002e20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e22:	4b17      	ldr	r3, [pc, #92]	; (8002e80 <HAL_I2C_MspInit+0x84>)
 8002e24:	2102      	movs	r1, #2
 8002e26:	430a      	orrs	r2, r1
 8002e28:	62da      	str	r2, [r3, #44]	; 0x2c
 8002e2a:	4b15      	ldr	r3, [pc, #84]	; (8002e80 <HAL_I2C_MspInit+0x84>)
 8002e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e2e:	2202      	movs	r2, #2
 8002e30:	4013      	ands	r3, r2
 8002e32:	60bb      	str	r3, [r7, #8]
 8002e34:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002e36:	193b      	adds	r3, r7, r4
 8002e38:	22c0      	movs	r2, #192	; 0xc0
 8002e3a:	0092      	lsls	r2, r2, #2
 8002e3c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e3e:	0021      	movs	r1, r4
 8002e40:	187b      	adds	r3, r7, r1
 8002e42:	2212      	movs	r2, #18
 8002e44:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e46:	187b      	adds	r3, r7, r1
 8002e48:	2200      	movs	r2, #0
 8002e4a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e4c:	187b      	adds	r3, r7, r1
 8002e4e:	2203      	movs	r2, #3
 8002e50:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002e52:	187b      	adds	r3, r7, r1
 8002e54:	2204      	movs	r2, #4
 8002e56:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e58:	187b      	adds	r3, r7, r1
 8002e5a:	4a0a      	ldr	r2, [pc, #40]	; (8002e84 <HAL_I2C_MspInit+0x88>)
 8002e5c:	0019      	movs	r1, r3
 8002e5e:	0010      	movs	r0, r2
 8002e60:	f000 ff1c 	bl	8003c9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002e64:	4b06      	ldr	r3, [pc, #24]	; (8002e80 <HAL_I2C_MspInit+0x84>)
 8002e66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e68:	4b05      	ldr	r3, [pc, #20]	; (8002e80 <HAL_I2C_MspInit+0x84>)
 8002e6a:	2180      	movs	r1, #128	; 0x80
 8002e6c:	0389      	lsls	r1, r1, #14
 8002e6e:	430a      	orrs	r2, r1
 8002e70:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002e72:	46c0      	nop			; (mov r8, r8)
 8002e74:	46bd      	mov	sp, r7
 8002e76:	b009      	add	sp, #36	; 0x24
 8002e78:	bd90      	pop	{r4, r7, pc}
 8002e7a:	46c0      	nop			; (mov r8, r8)
 8002e7c:	40005400 	.word	0x40005400
 8002e80:	40021000 	.word	0x40021000
 8002e84:	50000400 	.word	0x50000400

08002e88 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002e88:	b590      	push	{r4, r7, lr}
 8002e8a:	b089      	sub	sp, #36	; 0x24
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e90:	240c      	movs	r4, #12
 8002e92:	193b      	adds	r3, r7, r4
 8002e94:	0018      	movs	r0, r3
 8002e96:	2314      	movs	r3, #20
 8002e98:	001a      	movs	r2, r3
 8002e9a:	2100      	movs	r1, #0
 8002e9c:	f003 ff3c 	bl	8006d18 <memset>
  if(hspi->Instance==SPI1)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a18      	ldr	r2, [pc, #96]	; (8002f08 <HAL_SPI_MspInit+0x80>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d129      	bne.n	8002efe <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002eaa:	4b18      	ldr	r3, [pc, #96]	; (8002f0c <HAL_SPI_MspInit+0x84>)
 8002eac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002eae:	4b17      	ldr	r3, [pc, #92]	; (8002f0c <HAL_SPI_MspInit+0x84>)
 8002eb0:	2180      	movs	r1, #128	; 0x80
 8002eb2:	0149      	lsls	r1, r1, #5
 8002eb4:	430a      	orrs	r2, r1
 8002eb6:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002eb8:	4b14      	ldr	r3, [pc, #80]	; (8002f0c <HAL_SPI_MspInit+0x84>)
 8002eba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ebc:	4b13      	ldr	r3, [pc, #76]	; (8002f0c <HAL_SPI_MspInit+0x84>)
 8002ebe:	2101      	movs	r1, #1
 8002ec0:	430a      	orrs	r2, r1
 8002ec2:	62da      	str	r2, [r3, #44]	; 0x2c
 8002ec4:	4b11      	ldr	r3, [pc, #68]	; (8002f0c <HAL_SPI_MspInit+0x84>)
 8002ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec8:	2201      	movs	r2, #1
 8002eca:	4013      	ands	r3, r2
 8002ecc:	60bb      	str	r3, [r7, #8]
 8002ece:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002ed0:	0021      	movs	r1, r4
 8002ed2:	187b      	adds	r3, r7, r1
 8002ed4:	22e0      	movs	r2, #224	; 0xe0
 8002ed6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ed8:	187b      	adds	r3, r7, r1
 8002eda:	2202      	movs	r2, #2
 8002edc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ede:	187b      	adds	r3, r7, r1
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ee4:	187b      	adds	r3, r7, r1
 8002ee6:	2203      	movs	r2, #3
 8002ee8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002eea:	187b      	adds	r3, r7, r1
 8002eec:	2200      	movs	r2, #0
 8002eee:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ef0:	187a      	adds	r2, r7, r1
 8002ef2:	23a0      	movs	r3, #160	; 0xa0
 8002ef4:	05db      	lsls	r3, r3, #23
 8002ef6:	0011      	movs	r1, r2
 8002ef8:	0018      	movs	r0, r3
 8002efa:	f000 fecf 	bl	8003c9c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002efe:	46c0      	nop			; (mov r8, r8)
 8002f00:	46bd      	mov	sp, r7
 8002f02:	b009      	add	sp, #36	; 0x24
 8002f04:	bd90      	pop	{r4, r7, pc}
 8002f06:	46c0      	nop			; (mov r8, r8)
 8002f08:	40013000 	.word	0x40013000
 8002f0c:	40021000 	.word	0x40021000

08002f10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002f10:	b590      	push	{r4, r7, lr}
 8002f12:	b089      	sub	sp, #36	; 0x24
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f18:	240c      	movs	r4, #12
 8002f1a:	193b      	adds	r3, r7, r4
 8002f1c:	0018      	movs	r0, r3
 8002f1e:	2314      	movs	r3, #20
 8002f20:	001a      	movs	r2, r3
 8002f22:	2100      	movs	r1, #0
 8002f24:	f003 fef8 	bl	8006d18 <memset>
  if(huart->Instance==USART2)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a18      	ldr	r2, [pc, #96]	; (8002f90 <HAL_UART_MspInit+0x80>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d129      	bne.n	8002f86 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002f32:	4b18      	ldr	r3, [pc, #96]	; (8002f94 <HAL_UART_MspInit+0x84>)
 8002f34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f36:	4b17      	ldr	r3, [pc, #92]	; (8002f94 <HAL_UART_MspInit+0x84>)
 8002f38:	2180      	movs	r1, #128	; 0x80
 8002f3a:	0289      	lsls	r1, r1, #10
 8002f3c:	430a      	orrs	r2, r1
 8002f3e:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f40:	4b14      	ldr	r3, [pc, #80]	; (8002f94 <HAL_UART_MspInit+0x84>)
 8002f42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f44:	4b13      	ldr	r3, [pc, #76]	; (8002f94 <HAL_UART_MspInit+0x84>)
 8002f46:	2101      	movs	r1, #1
 8002f48:	430a      	orrs	r2, r1
 8002f4a:	62da      	str	r2, [r3, #44]	; 0x2c
 8002f4c:	4b11      	ldr	r3, [pc, #68]	; (8002f94 <HAL_UART_MspInit+0x84>)
 8002f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f50:	2201      	movs	r2, #1
 8002f52:	4013      	ands	r3, r2
 8002f54:	60bb      	str	r3, [r7, #8]
 8002f56:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002f58:	0021      	movs	r1, r4
 8002f5a:	187b      	adds	r3, r7, r1
 8002f5c:	220c      	movs	r2, #12
 8002f5e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f60:	187b      	adds	r3, r7, r1
 8002f62:	2202      	movs	r2, #2
 8002f64:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f66:	187b      	adds	r3, r7, r1
 8002f68:	2200      	movs	r2, #0
 8002f6a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f6c:	187b      	adds	r3, r7, r1
 8002f6e:	2203      	movs	r2, #3
 8002f70:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8002f72:	187b      	adds	r3, r7, r1
 8002f74:	2204      	movs	r2, #4
 8002f76:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f78:	187a      	adds	r2, r7, r1
 8002f7a:	23a0      	movs	r3, #160	; 0xa0
 8002f7c:	05db      	lsls	r3, r3, #23
 8002f7e:	0011      	movs	r1, r2
 8002f80:	0018      	movs	r0, r3
 8002f82:	f000 fe8b 	bl	8003c9c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002f86:	46c0      	nop			; (mov r8, r8)
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	b009      	add	sp, #36	; 0x24
 8002f8c:	bd90      	pop	{r4, r7, pc}
 8002f8e:	46c0      	nop			; (mov r8, r8)
 8002f90:	40004400 	.word	0x40004400
 8002f94:	40021000 	.word	0x40021000

08002f98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002f9c:	e7fe      	b.n	8002f9c <NMI_Handler+0x4>

08002f9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f9e:	b580      	push	{r7, lr}
 8002fa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002fa2:	e7fe      	b.n	8002fa2 <HardFault_Handler+0x4>

08002fa4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002fa8:	46c0      	nop			; (mov r8, r8)
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}

08002fae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002fae:	b580      	push	{r7, lr}
 8002fb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002fb2:	46c0      	nop			; (mov r8, r8)
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002fbc:	f000 f944 	bl	8003248 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002fc0:	46c0      	nop			; (mov r8, r8)
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}

08002fc6 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002fc6:	b580      	push	{r7, lr}
 8002fc8:	af00      	add	r7, sp, #0
	return 1;
 8002fca:	2301      	movs	r3, #1
}
 8002fcc:	0018      	movs	r0, r3
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}

08002fd2 <_kill>:

int _kill(int pid, int sig)
{
 8002fd2:	b580      	push	{r7, lr}
 8002fd4:	b082      	sub	sp, #8
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	6078      	str	r0, [r7, #4]
 8002fda:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002fdc:	f003 fe72 	bl	8006cc4 <__errno>
 8002fe0:	0003      	movs	r3, r0
 8002fe2:	2216      	movs	r2, #22
 8002fe4:	601a      	str	r2, [r3, #0]
	return -1;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	425b      	negs	r3, r3
}
 8002fea:	0018      	movs	r0, r3
 8002fec:	46bd      	mov	sp, r7
 8002fee:	b002      	add	sp, #8
 8002ff0:	bd80      	pop	{r7, pc}

08002ff2 <_exit>:

void _exit (int status)
{
 8002ff2:	b580      	push	{r7, lr}
 8002ff4:	b082      	sub	sp, #8
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	425a      	negs	r2, r3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	0011      	movs	r1, r2
 8003002:	0018      	movs	r0, r3
 8003004:	f7ff ffe5 	bl	8002fd2 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003008:	e7fe      	b.n	8003008 <_exit+0x16>

0800300a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800300a:	b580      	push	{r7, lr}
 800300c:	b086      	sub	sp, #24
 800300e:	af00      	add	r7, sp, #0
 8003010:	60f8      	str	r0, [r7, #12]
 8003012:	60b9      	str	r1, [r7, #8]
 8003014:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003016:	2300      	movs	r3, #0
 8003018:	617b      	str	r3, [r7, #20]
 800301a:	e00a      	b.n	8003032 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800301c:	e000      	b.n	8003020 <_read+0x16>
 800301e:	bf00      	nop
 8003020:	0001      	movs	r1, r0
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	1c5a      	adds	r2, r3, #1
 8003026:	60ba      	str	r2, [r7, #8]
 8003028:	b2ca      	uxtb	r2, r1
 800302a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	3301      	adds	r3, #1
 8003030:	617b      	str	r3, [r7, #20]
 8003032:	697a      	ldr	r2, [r7, #20]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	429a      	cmp	r2, r3
 8003038:	dbf0      	blt.n	800301c <_read+0x12>
	}

return len;
 800303a:	687b      	ldr	r3, [r7, #4]
}
 800303c:	0018      	movs	r0, r3
 800303e:	46bd      	mov	sp, r7
 8003040:	b006      	add	sp, #24
 8003042:	bd80      	pop	{r7, pc}

08003044 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b086      	sub	sp, #24
 8003048:	af00      	add	r7, sp, #0
 800304a:	60f8      	str	r0, [r7, #12]
 800304c:	60b9      	str	r1, [r7, #8]
 800304e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003050:	2300      	movs	r3, #0
 8003052:	617b      	str	r3, [r7, #20]
 8003054:	e009      	b.n	800306a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	1c5a      	adds	r2, r3, #1
 800305a:	60ba      	str	r2, [r7, #8]
 800305c:	781b      	ldrb	r3, [r3, #0]
 800305e:	0018      	movs	r0, r3
 8003060:	e000      	b.n	8003064 <_write+0x20>
 8003062:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	3301      	adds	r3, #1
 8003068:	617b      	str	r3, [r7, #20]
 800306a:	697a      	ldr	r2, [r7, #20]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	429a      	cmp	r2, r3
 8003070:	dbf1      	blt.n	8003056 <_write+0x12>
	}
	return len;
 8003072:	687b      	ldr	r3, [r7, #4]
}
 8003074:	0018      	movs	r0, r3
 8003076:	46bd      	mov	sp, r7
 8003078:	b006      	add	sp, #24
 800307a:	bd80      	pop	{r7, pc}

0800307c <_close>:

int _close(int file)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b082      	sub	sp, #8
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
	return -1;
 8003084:	2301      	movs	r3, #1
 8003086:	425b      	negs	r3, r3
}
 8003088:	0018      	movs	r0, r3
 800308a:	46bd      	mov	sp, r7
 800308c:	b002      	add	sp, #8
 800308e:	bd80      	pop	{r7, pc}

08003090 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b082      	sub	sp, #8
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
 8003098:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	2280      	movs	r2, #128	; 0x80
 800309e:	0192      	lsls	r2, r2, #6
 80030a0:	605a      	str	r2, [r3, #4]
	return 0;
 80030a2:	2300      	movs	r3, #0
}
 80030a4:	0018      	movs	r0, r3
 80030a6:	46bd      	mov	sp, r7
 80030a8:	b002      	add	sp, #8
 80030aa:	bd80      	pop	{r7, pc}

080030ac <_isatty>:

int _isatty(int file)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b082      	sub	sp, #8
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
	return 1;
 80030b4:	2301      	movs	r3, #1
}
 80030b6:	0018      	movs	r0, r3
 80030b8:	46bd      	mov	sp, r7
 80030ba:	b002      	add	sp, #8
 80030bc:	bd80      	pop	{r7, pc}

080030be <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80030be:	b580      	push	{r7, lr}
 80030c0:	b084      	sub	sp, #16
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	60f8      	str	r0, [r7, #12]
 80030c6:	60b9      	str	r1, [r7, #8]
 80030c8:	607a      	str	r2, [r7, #4]
	return 0;
 80030ca:	2300      	movs	r3, #0
}
 80030cc:	0018      	movs	r0, r3
 80030ce:	46bd      	mov	sp, r7
 80030d0:	b004      	add	sp, #16
 80030d2:	bd80      	pop	{r7, pc}

080030d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b086      	sub	sp, #24
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80030dc:	4a14      	ldr	r2, [pc, #80]	; (8003130 <_sbrk+0x5c>)
 80030de:	4b15      	ldr	r3, [pc, #84]	; (8003134 <_sbrk+0x60>)
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80030e8:	4b13      	ldr	r3, [pc, #76]	; (8003138 <_sbrk+0x64>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d102      	bne.n	80030f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80030f0:	4b11      	ldr	r3, [pc, #68]	; (8003138 <_sbrk+0x64>)
 80030f2:	4a12      	ldr	r2, [pc, #72]	; (800313c <_sbrk+0x68>)
 80030f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80030f6:	4b10      	ldr	r3, [pc, #64]	; (8003138 <_sbrk+0x64>)
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	18d3      	adds	r3, r2, r3
 80030fe:	693a      	ldr	r2, [r7, #16]
 8003100:	429a      	cmp	r2, r3
 8003102:	d207      	bcs.n	8003114 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003104:	f003 fdde 	bl	8006cc4 <__errno>
 8003108:	0003      	movs	r3, r0
 800310a:	220c      	movs	r2, #12
 800310c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800310e:	2301      	movs	r3, #1
 8003110:	425b      	negs	r3, r3
 8003112:	e009      	b.n	8003128 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003114:	4b08      	ldr	r3, [pc, #32]	; (8003138 <_sbrk+0x64>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800311a:	4b07      	ldr	r3, [pc, #28]	; (8003138 <_sbrk+0x64>)
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	18d2      	adds	r2, r2, r3
 8003122:	4b05      	ldr	r3, [pc, #20]	; (8003138 <_sbrk+0x64>)
 8003124:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003126:	68fb      	ldr	r3, [r7, #12]
}
 8003128:	0018      	movs	r0, r3
 800312a:	46bd      	mov	sp, r7
 800312c:	b006      	add	sp, #24
 800312e:	bd80      	pop	{r7, pc}
 8003130:	20005000 	.word	0x20005000
 8003134:	00000400 	.word	0x00000400
 8003138:	200003dc 	.word	0x200003dc
 800313c:	200003f8 	.word	0x200003f8

08003140 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003144:	46c0      	nop			; (mov r8, r8)
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
	...

0800314c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 800314c:	480d      	ldr	r0, [pc, #52]	; (8003184 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800314e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003150:	480d      	ldr	r0, [pc, #52]	; (8003188 <LoopForever+0x6>)
  ldr r1, =_edata
 8003152:	490e      	ldr	r1, [pc, #56]	; (800318c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003154:	4a0e      	ldr	r2, [pc, #56]	; (8003190 <LoopForever+0xe>)
  movs r3, #0
 8003156:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003158:	e002      	b.n	8003160 <LoopCopyDataInit>

0800315a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800315a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800315c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800315e:	3304      	adds	r3, #4

08003160 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003160:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003162:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003164:	d3f9      	bcc.n	800315a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003166:	4a0b      	ldr	r2, [pc, #44]	; (8003194 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003168:	4c0b      	ldr	r4, [pc, #44]	; (8003198 <LoopForever+0x16>)
  movs r3, #0
 800316a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800316c:	e001      	b.n	8003172 <LoopFillZerobss>

0800316e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800316e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003170:	3204      	adds	r2, #4

08003172 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003172:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003174:	d3fb      	bcc.n	800316e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003176:	f7ff ffe3 	bl	8003140 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800317a:	f003 fda9 	bl	8006cd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800317e:	f7ff f8bd 	bl	80022fc <main>

08003182 <LoopForever>:

LoopForever:
    b LoopForever
 8003182:	e7fe      	b.n	8003182 <LoopForever>
   ldr   r0, =_estack
 8003184:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8003188:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800318c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8003190:	0800a264 	.word	0x0800a264
  ldr r2, =_sbss
 8003194:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8003198:	200003f4 	.word	0x200003f4

0800319c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800319c:	e7fe      	b.n	800319c <ADC1_COMP_IRQHandler>
	...

080031a0 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b082      	sub	sp, #8
 80031a4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80031a6:	1dfb      	adds	r3, r7, #7
 80031a8:	2200      	movs	r2, #0
 80031aa:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80031ac:	4b0b      	ldr	r3, [pc, #44]	; (80031dc <HAL_Init+0x3c>)
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	4b0a      	ldr	r3, [pc, #40]	; (80031dc <HAL_Init+0x3c>)
 80031b2:	2140      	movs	r1, #64	; 0x40
 80031b4:	430a      	orrs	r2, r1
 80031b6:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80031b8:	2000      	movs	r0, #0
 80031ba:	f000 f811 	bl	80031e0 <HAL_InitTick>
 80031be:	1e03      	subs	r3, r0, #0
 80031c0:	d003      	beq.n	80031ca <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80031c2:	1dfb      	adds	r3, r7, #7
 80031c4:	2201      	movs	r2, #1
 80031c6:	701a      	strb	r2, [r3, #0]
 80031c8:	e001      	b.n	80031ce <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80031ca:	f7ff fdc7 	bl	8002d5c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80031ce:	1dfb      	adds	r3, r7, #7
 80031d0:	781b      	ldrb	r3, [r3, #0]
}
 80031d2:	0018      	movs	r0, r3
 80031d4:	46bd      	mov	sp, r7
 80031d6:	b002      	add	sp, #8
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	46c0      	nop			; (mov r8, r8)
 80031dc:	40022000 	.word	0x40022000

080031e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80031e0:	b590      	push	{r4, r7, lr}
 80031e2:	b083      	sub	sp, #12
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80031e8:	4b14      	ldr	r3, [pc, #80]	; (800323c <HAL_InitTick+0x5c>)
 80031ea:	681c      	ldr	r4, [r3, #0]
 80031ec:	4b14      	ldr	r3, [pc, #80]	; (8003240 <HAL_InitTick+0x60>)
 80031ee:	781b      	ldrb	r3, [r3, #0]
 80031f0:	0019      	movs	r1, r3
 80031f2:	23fa      	movs	r3, #250	; 0xfa
 80031f4:	0098      	lsls	r0, r3, #2
 80031f6:	f7fc ffa3 	bl	8000140 <__udivsi3>
 80031fa:	0003      	movs	r3, r0
 80031fc:	0019      	movs	r1, r3
 80031fe:	0020      	movs	r0, r4
 8003200:	f7fc ff9e 	bl	8000140 <__udivsi3>
 8003204:	0003      	movs	r3, r0
 8003206:	0018      	movs	r0, r3
 8003208:	f000 fd3b 	bl	8003c82 <HAL_SYSTICK_Config>
 800320c:	1e03      	subs	r3, r0, #0
 800320e:	d001      	beq.n	8003214 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	e00f      	b.n	8003234 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2b03      	cmp	r3, #3
 8003218:	d80b      	bhi.n	8003232 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800321a:	6879      	ldr	r1, [r7, #4]
 800321c:	2301      	movs	r3, #1
 800321e:	425b      	negs	r3, r3
 8003220:	2200      	movs	r2, #0
 8003222:	0018      	movs	r0, r3
 8003224:	f000 fd18 	bl	8003c58 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003228:	4b06      	ldr	r3, [pc, #24]	; (8003244 <HAL_InitTick+0x64>)
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800322e:	2300      	movs	r3, #0
 8003230:	e000      	b.n	8003234 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
}
 8003234:	0018      	movs	r0, r3
 8003236:	46bd      	mov	sp, r7
 8003238:	b003      	add	sp, #12
 800323a:	bd90      	pop	{r4, r7, pc}
 800323c:	20000000 	.word	0x20000000
 8003240:	20000008 	.word	0x20000008
 8003244:	20000004 	.word	0x20000004

08003248 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800324c:	4b05      	ldr	r3, [pc, #20]	; (8003264 <HAL_IncTick+0x1c>)
 800324e:	781b      	ldrb	r3, [r3, #0]
 8003250:	001a      	movs	r2, r3
 8003252:	4b05      	ldr	r3, [pc, #20]	; (8003268 <HAL_IncTick+0x20>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	18d2      	adds	r2, r2, r3
 8003258:	4b03      	ldr	r3, [pc, #12]	; (8003268 <HAL_IncTick+0x20>)
 800325a:	601a      	str	r2, [r3, #0]
}
 800325c:	46c0      	nop			; (mov r8, r8)
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
 8003262:	46c0      	nop			; (mov r8, r8)
 8003264:	20000008 	.word	0x20000008
 8003268:	200003e0 	.word	0x200003e0

0800326c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	af00      	add	r7, sp, #0
  return uwTick;
 8003270:	4b02      	ldr	r3, [pc, #8]	; (800327c <HAL_GetTick+0x10>)
 8003272:	681b      	ldr	r3, [r3, #0]
}
 8003274:	0018      	movs	r0, r3
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
 800327a:	46c0      	nop			; (mov r8, r8)
 800327c:	200003e0 	.word	0x200003e0

08003280 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b084      	sub	sp, #16
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003288:	f7ff fff0 	bl	800326c <HAL_GetTick>
 800328c:	0003      	movs	r3, r0
 800328e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	3301      	adds	r3, #1
 8003298:	d005      	beq.n	80032a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800329a:	4b0a      	ldr	r3, [pc, #40]	; (80032c4 <HAL_Delay+0x44>)
 800329c:	781b      	ldrb	r3, [r3, #0]
 800329e:	001a      	movs	r2, r3
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	189b      	adds	r3, r3, r2
 80032a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80032a6:	46c0      	nop			; (mov r8, r8)
 80032a8:	f7ff ffe0 	bl	800326c <HAL_GetTick>
 80032ac:	0002      	movs	r2, r0
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	68fa      	ldr	r2, [r7, #12]
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d8f7      	bhi.n	80032a8 <HAL_Delay+0x28>
  {
  }
}
 80032b8:	46c0      	nop			; (mov r8, r8)
 80032ba:	46c0      	nop			; (mov r8, r8)
 80032bc:	46bd      	mov	sp, r7
 80032be:	b004      	add	sp, #16
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	46c0      	nop			; (mov r8, r8)
 80032c4:	20000008 	.word	0x20000008

080032c8 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b082      	sub	sp, #8
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d101      	bne.n	80032da <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e159      	b.n	800358e <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d10a      	bne.n	80032f8 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2200      	movs	r2, #0
 80032e6:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2250      	movs	r2, #80	; 0x50
 80032ec:	2100      	movs	r1, #0
 80032ee:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	0018      	movs	r0, r3
 80032f4:	f7ff fd46 	bl	8002d84 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032fc:	2210      	movs	r2, #16
 80032fe:	4013      	ands	r3, r2
 8003300:	2b10      	cmp	r3, #16
 8003302:	d005      	beq.n	8003310 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	2204      	movs	r2, #4
 800330c:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800330e:	d00b      	beq.n	8003328 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003314:	2210      	movs	r2, #16
 8003316:	431a      	orrs	r2, r3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2250      	movs	r2, #80	; 0x50
 8003320:	2100      	movs	r1, #0
 8003322:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e132      	b.n	800358e <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800332c:	4a9a      	ldr	r2, [pc, #616]	; (8003598 <HAL_ADC_Init+0x2d0>)
 800332e:	4013      	ands	r3, r2
 8003330:	2202      	movs	r2, #2
 8003332:	431a      	orrs	r2, r3
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	2203      	movs	r2, #3
 8003340:	4013      	ands	r3, r2
 8003342:	2b01      	cmp	r3, #1
 8003344:	d108      	bne.n	8003358 <HAL_ADC_Init+0x90>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	2201      	movs	r2, #1
 800334e:	4013      	ands	r3, r2
 8003350:	2b01      	cmp	r3, #1
 8003352:	d101      	bne.n	8003358 <HAL_ADC_Init+0x90>
 8003354:	2301      	movs	r3, #1
 8003356:	e000      	b.n	800335a <HAL_ADC_Init+0x92>
 8003358:	2300      	movs	r3, #0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d149      	bne.n	80033f2 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	685a      	ldr	r2, [r3, #4]
 8003362:	23c0      	movs	r3, #192	; 0xc0
 8003364:	061b      	lsls	r3, r3, #24
 8003366:	429a      	cmp	r2, r3
 8003368:	d00b      	beq.n	8003382 <HAL_ADC_Init+0xba>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	685a      	ldr	r2, [r3, #4]
 800336e:	2380      	movs	r3, #128	; 0x80
 8003370:	05db      	lsls	r3, r3, #23
 8003372:	429a      	cmp	r2, r3
 8003374:	d005      	beq.n	8003382 <HAL_ADC_Init+0xba>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	685a      	ldr	r2, [r3, #4]
 800337a:	2380      	movs	r3, #128	; 0x80
 800337c:	061b      	lsls	r3, r3, #24
 800337e:	429a      	cmp	r2, r3
 8003380:	d111      	bne.n	80033a6 <HAL_ADC_Init+0xde>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	691a      	ldr	r2, [r3, #16]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	0092      	lsls	r2, r2, #2
 800338e:	0892      	lsrs	r2, r2, #2
 8003390:	611a      	str	r2, [r3, #16]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	6919      	ldr	r1, [r3, #16]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	685a      	ldr	r2, [r3, #4]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	430a      	orrs	r2, r1
 80033a2:	611a      	str	r2, [r3, #16]
 80033a4:	e014      	b.n	80033d0 <HAL_ADC_Init+0x108>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	691a      	ldr	r2, [r3, #16]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	0092      	lsls	r2, r2, #2
 80033b2:	0892      	lsrs	r2, r2, #2
 80033b4:	611a      	str	r2, [r3, #16]
 80033b6:	4b79      	ldr	r3, [pc, #484]	; (800359c <HAL_ADC_Init+0x2d4>)
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	4b78      	ldr	r3, [pc, #480]	; (800359c <HAL_ADC_Init+0x2d4>)
 80033bc:	4978      	ldr	r1, [pc, #480]	; (80035a0 <HAL_ADC_Init+0x2d8>)
 80033be:	400a      	ands	r2, r1
 80033c0:	601a      	str	r2, [r3, #0]
 80033c2:	4b76      	ldr	r3, [pc, #472]	; (800359c <HAL_ADC_Init+0x2d4>)
 80033c4:	6819      	ldr	r1, [r3, #0]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	685a      	ldr	r2, [r3, #4]
 80033ca:	4b74      	ldr	r3, [pc, #464]	; (800359c <HAL_ADC_Init+0x2d4>)
 80033cc:	430a      	orrs	r2, r1
 80033ce:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	68da      	ldr	r2, [r3, #12]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	2118      	movs	r1, #24
 80033dc:	438a      	bics	r2, r1
 80033de:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	68d9      	ldr	r1, [r3, #12]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	689a      	ldr	r2, [r3, #8]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	430a      	orrs	r2, r1
 80033f0:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 80033f2:	4b6a      	ldr	r3, [pc, #424]	; (800359c <HAL_ADC_Init+0x2d4>)
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	4b69      	ldr	r3, [pc, #420]	; (800359c <HAL_ADC_Init+0x2d4>)
 80033f8:	496a      	ldr	r1, [pc, #424]	; (80035a4 <HAL_ADC_Init+0x2dc>)
 80033fa:	400a      	ands	r2, r1
 80033fc:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 80033fe:	4b67      	ldr	r3, [pc, #412]	; (800359c <HAL_ADC_Init+0x2d4>)
 8003400:	6819      	ldr	r1, [r3, #0]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003406:	065a      	lsls	r2, r3, #25
 8003408:	4b64      	ldr	r3, [pc, #400]	; (800359c <HAL_ADC_Init+0x2d4>)
 800340a:	430a      	orrs	r2, r1
 800340c:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	689a      	ldr	r2, [r3, #8]
 8003414:	2380      	movs	r3, #128	; 0x80
 8003416:	055b      	lsls	r3, r3, #21
 8003418:	4013      	ands	r3, r2
 800341a:	d108      	bne.n	800342e <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	689a      	ldr	r2, [r3, #8]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	2180      	movs	r1, #128	; 0x80
 8003428:	0549      	lsls	r1, r1, #21
 800342a:	430a      	orrs	r2, r1
 800342c:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	68da      	ldr	r2, [r3, #12]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	495b      	ldr	r1, [pc, #364]	; (80035a8 <HAL_ADC_Init+0x2e0>)
 800343a:	400a      	ands	r2, r1
 800343c:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	68d9      	ldr	r1, [r3, #12]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	691b      	ldr	r3, [r3, #16]
 800344c:	2b02      	cmp	r3, #2
 800344e:	d101      	bne.n	8003454 <HAL_ADC_Init+0x18c>
 8003450:	2304      	movs	r3, #4
 8003452:	e000      	b.n	8003456 <HAL_ADC_Init+0x18e>
 8003454:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8003456:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2020      	movs	r0, #32
 800345c:	5c1b      	ldrb	r3, [r3, r0]
 800345e:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8003460:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	202c      	movs	r0, #44	; 0x2c
 8003466:	5c1b      	ldrb	r3, [r3, r0]
 8003468:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800346a:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8003470:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	699b      	ldr	r3, [r3, #24]
 8003476:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8003478:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	69db      	ldr	r3, [r3, #28]
 800347e:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8003480:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	430a      	orrs	r2, r1
 8003488:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800348e:	23c2      	movs	r3, #194	; 0xc2
 8003490:	33ff      	adds	r3, #255	; 0xff
 8003492:	429a      	cmp	r2, r3
 8003494:	d00b      	beq.n	80034ae <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	68d9      	ldr	r1, [r3, #12]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80034a4:	431a      	orrs	r2, r3
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	430a      	orrs	r2, r1
 80034ac:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2221      	movs	r2, #33	; 0x21
 80034b2:	5c9b      	ldrb	r3, [r3, r2]
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d11a      	bne.n	80034ee <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2220      	movs	r2, #32
 80034bc:	5c9b      	ldrb	r3, [r3, r2]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d109      	bne.n	80034d6 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	68da      	ldr	r2, [r3, #12]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	2180      	movs	r1, #128	; 0x80
 80034ce:	0249      	lsls	r1, r1, #9
 80034d0:	430a      	orrs	r2, r1
 80034d2:	60da      	str	r2, [r3, #12]
 80034d4:	e00b      	b.n	80034ee <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034da:	2220      	movs	r2, #32
 80034dc:	431a      	orrs	r2, r3
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034e6:	2201      	movs	r2, #1
 80034e8:	431a      	orrs	r2, r3
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d11f      	bne.n	8003536 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	691a      	ldr	r2, [r3, #16]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	492a      	ldr	r1, [pc, #168]	; (80035ac <HAL_ADC_Init+0x2e4>)
 8003502:	400a      	ands	r2, r1
 8003504:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	6919      	ldr	r1, [r3, #16]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8003514:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 800351a:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	430a      	orrs	r2, r1
 8003522:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	691a      	ldr	r2, [r3, #16]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	2101      	movs	r1, #1
 8003530:	430a      	orrs	r2, r1
 8003532:	611a      	str	r2, [r3, #16]
 8003534:	e00e      	b.n	8003554 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	691b      	ldr	r3, [r3, #16]
 800353c:	2201      	movs	r2, #1
 800353e:	4013      	ands	r3, r2
 8003540:	2b01      	cmp	r3, #1
 8003542:	d107      	bne.n	8003554 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	691a      	ldr	r2, [r3, #16]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	2101      	movs	r1, #1
 8003550:	438a      	bics	r2, r1
 8003552:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	695a      	ldr	r2, [r3, #20]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	2107      	movs	r1, #7
 8003560:	438a      	bics	r2, r1
 8003562:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	6959      	ldr	r1, [r3, #20]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	430a      	orrs	r2, r1
 8003574:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2200      	movs	r2, #0
 800357a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003580:	2203      	movs	r2, #3
 8003582:	4393      	bics	r3, r2
 8003584:	2201      	movs	r2, #1
 8003586:	431a      	orrs	r2, r3
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 800358c:	2300      	movs	r3, #0
}
 800358e:	0018      	movs	r0, r3
 8003590:	46bd      	mov	sp, r7
 8003592:	b002      	add	sp, #8
 8003594:	bd80      	pop	{r7, pc}
 8003596:	46c0      	nop			; (mov r8, r8)
 8003598:	fffffefd 	.word	0xfffffefd
 800359c:	40012708 	.word	0x40012708
 80035a0:	ffc3ffff 	.word	0xffc3ffff
 80035a4:	fdffffff 	.word	0xfdffffff
 80035a8:	fffe0219 	.word	0xfffe0219
 80035ac:	fffffc03 	.word	0xfffffc03

080035b0 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80035b0:	b590      	push	{r4, r7, lr}
 80035b2:	b085      	sub	sp, #20
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035b8:	230f      	movs	r3, #15
 80035ba:	18fb      	adds	r3, r7, r3
 80035bc:	2200      	movs	r2, #0
 80035be:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	2204      	movs	r2, #4
 80035c8:	4013      	ands	r3, r2
 80035ca:	d138      	bne.n	800363e <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2250      	movs	r2, #80	; 0x50
 80035d0:	5c9b      	ldrb	r3, [r3, r2]
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d101      	bne.n	80035da <HAL_ADC_Start+0x2a>
 80035d6:	2302      	movs	r3, #2
 80035d8:	e038      	b.n	800364c <HAL_ADC_Start+0x9c>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2250      	movs	r2, #80	; 0x50
 80035de:	2101      	movs	r1, #1
 80035e0:	5499      	strb	r1, [r3, r2]
    
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	69db      	ldr	r3, [r3, #28]
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d007      	beq.n	80035fa <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80035ea:	230f      	movs	r3, #15
 80035ec:	18fc      	adds	r4, r7, r3
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	0018      	movs	r0, r3
 80035f2:	f000 f979 	bl	80038e8 <ADC_Enable>
 80035f6:	0003      	movs	r3, r0
 80035f8:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80035fa:	230f      	movs	r3, #15
 80035fc:	18fb      	adds	r3, r7, r3
 80035fe:	781b      	ldrb	r3, [r3, #0]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d120      	bne.n	8003646 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003608:	4a12      	ldr	r2, [pc, #72]	; (8003654 <HAL_ADC_Start+0xa4>)
 800360a:	4013      	ands	r3, r2
 800360c:	2280      	movs	r2, #128	; 0x80
 800360e:	0052      	lsls	r2, r2, #1
 8003610:	431a      	orrs	r2, r3
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2200      	movs	r2, #0
 800361a:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2250      	movs	r2, #80	; 0x50
 8003620:	2100      	movs	r1, #0
 8003622:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	221c      	movs	r2, #28
 800362a:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	689a      	ldr	r2, [r3, #8]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	2104      	movs	r1, #4
 8003638:	430a      	orrs	r2, r1
 800363a:	609a      	str	r2, [r3, #8]
 800363c:	e003      	b.n	8003646 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800363e:	230f      	movs	r3, #15
 8003640:	18fb      	adds	r3, r7, r3
 8003642:	2202      	movs	r2, #2
 8003644:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003646:	230f      	movs	r3, #15
 8003648:	18fb      	adds	r3, r7, r3
 800364a:	781b      	ldrb	r3, [r3, #0]
}
 800364c:	0018      	movs	r0, r3
 800364e:	46bd      	mov	sp, r7
 8003650:	b005      	add	sp, #20
 8003652:	bd90      	pop	{r4, r7, pc}
 8003654:	fffff0fe 	.word	0xfffff0fe

08003658 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b084      	sub	sp, #16
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
 8003660:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003662:	2300      	movs	r3, #0
 8003664:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 8003666:	2300      	movs	r3, #0
 8003668:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	695b      	ldr	r3, [r3, #20]
 800366e:	2b08      	cmp	r3, #8
 8003670:	d102      	bne.n	8003678 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8003672:	2308      	movs	r3, #8
 8003674:	60fb      	str	r3, [r7, #12]
 8003676:	e014      	b.n	80036a2 <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	68db      	ldr	r3, [r3, #12]
 800367e:	2201      	movs	r2, #1
 8003680:	4013      	ands	r3, r2
 8003682:	2b01      	cmp	r3, #1
 8003684:	d10b      	bne.n	800369e <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800368a:	2220      	movs	r2, #32
 800368c:	431a      	orrs	r2, r3
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2250      	movs	r2, #80	; 0x50
 8003696:	2100      	movs	r1, #0
 8003698:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e072      	b.n	8003784 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800369e:	230c      	movs	r3, #12
 80036a0:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80036a2:	f7ff fde3 	bl	800326c <HAL_GetTick>
 80036a6:	0003      	movs	r3, r0
 80036a8:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80036aa:	e01f      	b.n	80036ec <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	3301      	adds	r3, #1
 80036b0:	d01c      	beq.n	80036ec <HAL_ADC_PollForConversion+0x94>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d007      	beq.n	80036c8 <HAL_ADC_PollForConversion+0x70>
 80036b8:	f7ff fdd8 	bl	800326c <HAL_GetTick>
 80036bc:	0002      	movs	r2, r0
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	683a      	ldr	r2, [r7, #0]
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d211      	bcs.n	80036ec <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	68fa      	ldr	r2, [r7, #12]
 80036d0:	4013      	ands	r3, r2
 80036d2:	d10b      	bne.n	80036ec <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036d8:	2204      	movs	r2, #4
 80036da:	431a      	orrs	r2, r3
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2250      	movs	r2, #80	; 0x50
 80036e4:	2100      	movs	r1, #0
 80036e6:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80036e8:	2303      	movs	r3, #3
 80036ea:	e04b      	b.n	8003784 <HAL_ADC_PollForConversion+0x12c>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	68fa      	ldr	r2, [r7, #12]
 80036f4:	4013      	ands	r3, r2
 80036f6:	d0d9      	beq.n	80036ac <HAL_ADC_PollForConversion+0x54>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036fc:	2280      	movs	r2, #128	; 0x80
 80036fe:	0092      	lsls	r2, r2, #2
 8003700:	431a      	orrs	r2, r3
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	68da      	ldr	r2, [r3, #12]
 800370c:	23c0      	movs	r3, #192	; 0xc0
 800370e:	011b      	lsls	r3, r3, #4
 8003710:	4013      	ands	r3, r2
 8003712:	d12e      	bne.n	8003772 <HAL_ADC_PollForConversion+0x11a>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2220      	movs	r2, #32
 8003718:	5c9b      	ldrb	r3, [r3, r2]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800371a:	2b00      	cmp	r3, #0
 800371c:	d129      	bne.n	8003772 <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	2208      	movs	r2, #8
 8003726:	4013      	ands	r3, r2
 8003728:	2b08      	cmp	r3, #8
 800372a:	d122      	bne.n	8003772 <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	2204      	movs	r2, #4
 8003734:	4013      	ands	r3, r2
 8003736:	d110      	bne.n	800375a <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	685a      	ldr	r2, [r3, #4]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	210c      	movs	r1, #12
 8003744:	438a      	bics	r2, r1
 8003746:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800374c:	4a0f      	ldr	r2, [pc, #60]	; (800378c <HAL_ADC_PollForConversion+0x134>)
 800374e:	4013      	ands	r3, r2
 8003750:	2201      	movs	r2, #1
 8003752:	431a      	orrs	r2, r3
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	655a      	str	r2, [r3, #84]	; 0x54
 8003758:	e00b      	b.n	8003772 <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800375e:	2220      	movs	r2, #32
 8003760:	431a      	orrs	r2, r3
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800376a:	2201      	movs	r2, #1
 800376c:	431a      	orrs	r2, r3
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	659a      	str	r2, [r3, #88]	; 0x58
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	699b      	ldr	r3, [r3, #24]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d103      	bne.n	8003782 <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	220c      	movs	r2, #12
 8003780:	601a      	str	r2, [r3, #0]
  }
  
  /* Return function status */
  return HAL_OK;
 8003782:	2300      	movs	r3, #0
}
 8003784:	0018      	movs	r0, r3
 8003786:	46bd      	mov	sp, r7
 8003788:	b004      	add	sp, #16
 800378a:	bd80      	pop	{r7, pc}
 800378c:	fffffefe 	.word	0xfffffefe

08003790 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b082      	sub	sp, #8
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800379e:	0018      	movs	r0, r3
 80037a0:	46bd      	mov	sp, r7
 80037a2:	b002      	add	sp, #8
 80037a4:	bd80      	pop	{r7, pc}
	...

080037a8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b082      	sub	sp, #8
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2250      	movs	r2, #80	; 0x50
 80037b6:	5c9b      	ldrb	r3, [r3, r2]
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d101      	bne.n	80037c0 <HAL_ADC_ConfigChannel+0x18>
 80037bc:	2302      	movs	r3, #2
 80037be:	e085      	b.n	80038cc <HAL_ADC_ConfigChannel+0x124>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2250      	movs	r2, #80	; 0x50
 80037c4:	2101      	movs	r1, #1
 80037c6:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	2204      	movs	r2, #4
 80037d0:	4013      	ands	r3, r2
 80037d2:	d00b      	beq.n	80037ec <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037d8:	2220      	movs	r2, #32
 80037da:	431a      	orrs	r2, r3
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2250      	movs	r2, #80	; 0x50
 80037e4:	2100      	movs	r1, #0
 80037e6:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e06f      	b.n	80038cc <HAL_ADC_ConfigChannel+0x124>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	4a38      	ldr	r2, [pc, #224]	; (80038d4 <HAL_ADC_ConfigChannel+0x12c>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d035      	beq.n	8003862 <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	035b      	lsls	r3, r3, #13
 8003802:	0b5a      	lsrs	r2, r3, #13
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	430a      	orrs	r2, r1
 800380a:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	2380      	movs	r3, #128	; 0x80
 8003812:	02db      	lsls	r3, r3, #11
 8003814:	4013      	ands	r3, r2
 8003816:	d009      	beq.n	800382c <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 8003818:	4b2f      	ldr	r3, [pc, #188]	; (80038d8 <HAL_ADC_ConfigChannel+0x130>)
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	4b2e      	ldr	r3, [pc, #184]	; (80038d8 <HAL_ADC_ConfigChannel+0x130>)
 800381e:	2180      	movs	r1, #128	; 0x80
 8003820:	0409      	lsls	r1, r1, #16
 8003822:	430a      	orrs	r2, r1
 8003824:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8003826:	200a      	movs	r0, #10
 8003828:	f000 f8c6 	bl	80039b8 <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	2380      	movs	r3, #128	; 0x80
 8003832:	029b      	lsls	r3, r3, #10
 8003834:	4013      	ands	r3, r2
 8003836:	d006      	beq.n	8003846 <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 8003838:	4b27      	ldr	r3, [pc, #156]	; (80038d8 <HAL_ADC_ConfigChannel+0x130>)
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	4b26      	ldr	r3, [pc, #152]	; (80038d8 <HAL_ADC_ConfigChannel+0x130>)
 800383e:	2180      	movs	r1, #128	; 0x80
 8003840:	03c9      	lsls	r1, r1, #15
 8003842:	430a      	orrs	r2, r1
 8003844:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	2380      	movs	r3, #128	; 0x80
 800384c:	025b      	lsls	r3, r3, #9
 800384e:	4013      	ands	r3, r2
 8003850:	d037      	beq.n	80038c2 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;   
 8003852:	4b21      	ldr	r3, [pc, #132]	; (80038d8 <HAL_ADC_ConfigChannel+0x130>)
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	4b20      	ldr	r3, [pc, #128]	; (80038d8 <HAL_ADC_ConfigChannel+0x130>)
 8003858:	2180      	movs	r1, #128	; 0x80
 800385a:	0449      	lsls	r1, r1, #17
 800385c:	430a      	orrs	r2, r1
 800385e:	601a      	str	r2, [r3, #0]
 8003860:	e02f      	b.n	80038c2 <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	035b      	lsls	r3, r3, #13
 800386e:	0b5b      	lsrs	r3, r3, #13
 8003870:	43d9      	mvns	r1, r3
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	400a      	ands	r2, r1
 8003878:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	2380      	movs	r3, #128	; 0x80
 8003880:	02db      	lsls	r3, r3, #11
 8003882:	4013      	ands	r3, r2
 8003884:	d005      	beq.n	8003892 <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 8003886:	4b14      	ldr	r3, [pc, #80]	; (80038d8 <HAL_ADC_ConfigChannel+0x130>)
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	4b13      	ldr	r3, [pc, #76]	; (80038d8 <HAL_ADC_ConfigChannel+0x130>)
 800388c:	4913      	ldr	r1, [pc, #76]	; (80038dc <HAL_ADC_ConfigChannel+0x134>)
 800388e:	400a      	ands	r2, r1
 8003890:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	2380      	movs	r3, #128	; 0x80
 8003898:	029b      	lsls	r3, r3, #10
 800389a:	4013      	ands	r3, r2
 800389c:	d005      	beq.n	80038aa <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 800389e:	4b0e      	ldr	r3, [pc, #56]	; (80038d8 <HAL_ADC_ConfigChannel+0x130>)
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	4b0d      	ldr	r3, [pc, #52]	; (80038d8 <HAL_ADC_ConfigChannel+0x130>)
 80038a4:	490e      	ldr	r1, [pc, #56]	; (80038e0 <HAL_ADC_ConfigChannel+0x138>)
 80038a6:	400a      	ands	r2, r1
 80038a8:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	2380      	movs	r3, #128	; 0x80
 80038b0:	025b      	lsls	r3, r3, #9
 80038b2:	4013      	ands	r3, r2
 80038b4:	d005      	beq.n	80038c2 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;   
 80038b6:	4b08      	ldr	r3, [pc, #32]	; (80038d8 <HAL_ADC_ConfigChannel+0x130>)
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	4b07      	ldr	r3, [pc, #28]	; (80038d8 <HAL_ADC_ConfigChannel+0x130>)
 80038bc:	4909      	ldr	r1, [pc, #36]	; (80038e4 <HAL_ADC_ConfigChannel+0x13c>)
 80038be:	400a      	ands	r2, r1
 80038c0:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2250      	movs	r2, #80	; 0x50
 80038c6:	2100      	movs	r1, #0
 80038c8:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 80038ca:	2300      	movs	r3, #0
}
 80038cc:	0018      	movs	r0, r3
 80038ce:	46bd      	mov	sp, r7
 80038d0:	b002      	add	sp, #8
 80038d2:	bd80      	pop	{r7, pc}
 80038d4:	00001001 	.word	0x00001001
 80038d8:	40012708 	.word	0x40012708
 80038dc:	ff7fffff 	.word	0xff7fffff
 80038e0:	ffbfffff 	.word	0xffbfffff
 80038e4:	feffffff 	.word	0xfeffffff

080038e8 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b084      	sub	sp, #16
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80038f0:	2300      	movs	r3, #0
 80038f2:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	2203      	movs	r2, #3
 80038fc:	4013      	ands	r3, r2
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d108      	bne.n	8003914 <ADC_Enable+0x2c>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	2201      	movs	r2, #1
 800390a:	4013      	ands	r3, r2
 800390c:	2b01      	cmp	r3, #1
 800390e:	d101      	bne.n	8003914 <ADC_Enable+0x2c>
 8003910:	2301      	movs	r3, #1
 8003912:	e000      	b.n	8003916 <ADC_Enable+0x2e>
 8003914:	2300      	movs	r3, #0
 8003916:	2b00      	cmp	r3, #0
 8003918:	d146      	bne.n	80039a8 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	4a24      	ldr	r2, [pc, #144]	; (80039b4 <ADC_Enable+0xcc>)
 8003922:	4013      	ands	r3, r2
 8003924:	d00d      	beq.n	8003942 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800392a:	2210      	movs	r2, #16
 800392c:	431a      	orrs	r2, r3
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003936:	2201      	movs	r2, #1
 8003938:	431a      	orrs	r2, r3
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	659a      	str	r2, [r3, #88]	; 0x58
      
      return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e033      	b.n	80039aa <ADC_Enable+0xc2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	689a      	ldr	r2, [r3, #8]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	2101      	movs	r1, #1
 800394e:	430a      	orrs	r2, r1
 8003950:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8003952:	2001      	movs	r0, #1
 8003954:	f000 f830 	bl	80039b8 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8003958:	f7ff fc88 	bl	800326c <HAL_GetTick>
 800395c:	0003      	movs	r3, r0
 800395e:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003960:	e01b      	b.n	800399a <ADC_Enable+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003962:	f7ff fc83 	bl	800326c <HAL_GetTick>
 8003966:	0002      	movs	r2, r0
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	1ad3      	subs	r3, r2, r3
 800396c:	2b0a      	cmp	r3, #10
 800396e:	d914      	bls.n	800399a <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	2201      	movs	r2, #1
 8003978:	4013      	ands	r3, r2
 800397a:	2b01      	cmp	r3, #1
 800397c:	d00d      	beq.n	800399a <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003982:	2210      	movs	r2, #16
 8003984:	431a      	orrs	r2, r3
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800398e:	2201      	movs	r2, #1
 8003990:	431a      	orrs	r2, r3
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e007      	b.n	80039aa <ADC_Enable+0xc2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	2201      	movs	r2, #1
 80039a2:	4013      	ands	r3, r2
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d1dc      	bne.n	8003962 <ADC_Enable+0x7a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80039a8:	2300      	movs	r3, #0
}
 80039aa:	0018      	movs	r0, r3
 80039ac:	46bd      	mov	sp, r7
 80039ae:	b004      	add	sp, #16
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	46c0      	nop			; (mov r8, r8)
 80039b4:	80000017 	.word	0x80000017

080039b8 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b084      	sub	sp, #16
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 80039c0:	4b0b      	ldr	r3, [pc, #44]	; (80039f0 <ADC_DelayMicroSecond+0x38>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	490b      	ldr	r1, [pc, #44]	; (80039f4 <ADC_DelayMicroSecond+0x3c>)
 80039c6:	0018      	movs	r0, r3
 80039c8:	f7fc fbba 	bl	8000140 <__udivsi3>
 80039cc:	0003      	movs	r3, r0
 80039ce:	001a      	movs	r2, r3
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	4353      	muls	r3, r2
 80039d4:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 80039d6:	e002      	b.n	80039de <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	3b01      	subs	r3, #1
 80039dc:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d1f9      	bne.n	80039d8 <ADC_DelayMicroSecond+0x20>
  } 
}
 80039e4:	46c0      	nop			; (mov r8, r8)
 80039e6:	46c0      	nop			; (mov r8, r8)
 80039e8:	46bd      	mov	sp, r7
 80039ea:	b004      	add	sp, #16
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	46c0      	nop			; (mov r8, r8)
 80039f0:	20000000 	.word	0x20000000
 80039f4:	000f4240 	.word	0x000f4240

080039f8 <HAL_ADCEx_Calibration_Start>:
  *          This parameter can be only of the following values:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b086      	sub	sp, #24
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
 8003a00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a02:	2317      	movs	r3, #23
 8003a04:	18fb      	adds	r3, r7, r3
 8003a06:	2200      	movs	r2, #0
 8003a08:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0U; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 8003a0e:	2300      	movs	r3, #0
 8003a10:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2250      	movs	r2, #80	; 0x50
 8003a16:	5c9b      	ldrb	r3, [r3, r2]
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d101      	bne.n	8003a20 <HAL_ADCEx_Calibration_Start+0x28>
 8003a1c:	2302      	movs	r3, #2
 8003a1e:	e083      	b.n	8003b28 <HAL_ADCEx_Calibration_Start+0x130>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2250      	movs	r2, #80	; 0x50
 8003a24:	2101      	movs	r1, #1
 8003a26:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	2203      	movs	r2, #3
 8003a30:	4013      	ands	r3, r2
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d108      	bne.n	8003a48 <HAL_ADCEx_Calibration_Start+0x50>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	4013      	ands	r3, r2
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d101      	bne.n	8003a48 <HAL_ADCEx_Calibration_Start+0x50>
 8003a44:	2301      	movs	r3, #1
 8003a46:	e000      	b.n	8003a4a <HAL_ADCEx_Calibration_Start+0x52>
 8003a48:	2300      	movs	r3, #0
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d15b      	bne.n	8003b06 <HAL_ADCEx_Calibration_Start+0x10e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a52:	4a37      	ldr	r2, [pc, #220]	; (8003b30 <HAL_ADCEx_Calibration_Start+0x138>)
 8003a54:	4013      	ands	r3, r2
 8003a56:	2202      	movs	r2, #2
 8003a58:	431a      	orrs	r2, r3
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: Specificity of this STM32 serie: Calibration factor is           */
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	2203      	movs	r2, #3
 8003a66:	4013      	ands	r3, r2
 8003a68:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	68da      	ldr	r2, [r3, #12]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	2103      	movs	r1, #3
 8003a76:	438a      	bics	r2, r1
 8003a78:	60da      	str	r2, [r3, #12]
    
    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	689a      	ldr	r2, [r3, #8]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	2180      	movs	r1, #128	; 0x80
 8003a86:	0609      	lsls	r1, r1, #24
 8003a88:	430a      	orrs	r2, r1
 8003a8a:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8003a8c:	f7ff fbee 	bl	800326c <HAL_GetTick>
 8003a90:	0003      	movs	r3, r0
 8003a92:	613b      	str	r3, [r7, #16]
    
    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8003a94:	e01d      	b.n	8003ad2 <HAL_ADCEx_Calibration_Start+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003a96:	f7ff fbe9 	bl	800326c <HAL_GetTick>
 8003a9a:	0002      	movs	r2, r0
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	1ad3      	subs	r3, r2, r3
 8003aa0:	2b0a      	cmp	r3, #10
 8003aa2:	d916      	bls.n	8003ad2 <HAL_ADCEx_Calibration_Start+0xda>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	0fdb      	lsrs	r3, r3, #31
 8003aac:	07da      	lsls	r2, r3, #31
 8003aae:	2380      	movs	r3, #128	; 0x80
 8003ab0:	061b      	lsls	r3, r3, #24
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	d10d      	bne.n	8003ad2 <HAL_ADCEx_Calibration_Start+0xda>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aba:	2212      	movs	r2, #18
 8003abc:	4393      	bics	r3, r2
 8003abe:	2210      	movs	r2, #16
 8003ac0:	431a      	orrs	r2, r3
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	655a      	str	r2, [r3, #84]	; 0x54
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2250      	movs	r2, #80	; 0x50
 8003aca:	2100      	movs	r1, #0
 8003acc:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e02a      	b.n	8003b28 <HAL_ADCEx_Calibration_Start+0x130>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	0fdb      	lsrs	r3, r3, #31
 8003ada:	07da      	lsls	r2, r3, #31
 8003adc:	2380      	movs	r3, #128	; 0x80
 8003ade:	061b      	lsls	r3, r3, #24
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d0d8      	beq.n	8003a96 <HAL_ADCEx_Calibration_Start+0x9e>
        }
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	68d9      	ldr	r1, [r3, #12]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	68fa      	ldr	r2, [r7, #12]
 8003af0:	430a      	orrs	r2, r1
 8003af2:	60da      	str	r2, [r3, #12]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003af8:	2203      	movs	r2, #3
 8003afa:	4393      	bics	r3, r2
 8003afc:	2201      	movs	r2, #1
 8003afe:	431a      	orrs	r2, r3
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	655a      	str	r2, [r3, #84]	; 0x54
 8003b04:	e009      	b.n	8003b1a <HAL_ADCEx_Calibration_Start+0x122>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b0a:	2220      	movs	r2, #32
 8003b0c:	431a      	orrs	r2, r3
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	655a      	str	r2, [r3, #84]	; 0x54
    
    tmp_hal_status = HAL_ERROR;
 8003b12:	2317      	movs	r3, #23
 8003b14:	18fb      	adds	r3, r7, r3
 8003b16:	2201      	movs	r2, #1
 8003b18:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2250      	movs	r2, #80	; 0x50
 8003b1e:	2100      	movs	r1, #0
 8003b20:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8003b22:	2317      	movs	r3, #23
 8003b24:	18fb      	adds	r3, r7, r3
 8003b26:	781b      	ldrb	r3, [r3, #0]
}
 8003b28:	0018      	movs	r0, r3
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	b006      	add	sp, #24
 8003b2e:	bd80      	pop	{r7, pc}
 8003b30:	fffffefd 	.word	0xfffffefd

08003b34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b34:	b590      	push	{r4, r7, lr}
 8003b36:	b083      	sub	sp, #12
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	0002      	movs	r2, r0
 8003b3c:	6039      	str	r1, [r7, #0]
 8003b3e:	1dfb      	adds	r3, r7, #7
 8003b40:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003b42:	1dfb      	adds	r3, r7, #7
 8003b44:	781b      	ldrb	r3, [r3, #0]
 8003b46:	2b7f      	cmp	r3, #127	; 0x7f
 8003b48:	d828      	bhi.n	8003b9c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003b4a:	4a2f      	ldr	r2, [pc, #188]	; (8003c08 <__NVIC_SetPriority+0xd4>)
 8003b4c:	1dfb      	adds	r3, r7, #7
 8003b4e:	781b      	ldrb	r3, [r3, #0]
 8003b50:	b25b      	sxtb	r3, r3
 8003b52:	089b      	lsrs	r3, r3, #2
 8003b54:	33c0      	adds	r3, #192	; 0xc0
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	589b      	ldr	r3, [r3, r2]
 8003b5a:	1dfa      	adds	r2, r7, #7
 8003b5c:	7812      	ldrb	r2, [r2, #0]
 8003b5e:	0011      	movs	r1, r2
 8003b60:	2203      	movs	r2, #3
 8003b62:	400a      	ands	r2, r1
 8003b64:	00d2      	lsls	r2, r2, #3
 8003b66:	21ff      	movs	r1, #255	; 0xff
 8003b68:	4091      	lsls	r1, r2
 8003b6a:	000a      	movs	r2, r1
 8003b6c:	43d2      	mvns	r2, r2
 8003b6e:	401a      	ands	r2, r3
 8003b70:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	019b      	lsls	r3, r3, #6
 8003b76:	22ff      	movs	r2, #255	; 0xff
 8003b78:	401a      	ands	r2, r3
 8003b7a:	1dfb      	adds	r3, r7, #7
 8003b7c:	781b      	ldrb	r3, [r3, #0]
 8003b7e:	0018      	movs	r0, r3
 8003b80:	2303      	movs	r3, #3
 8003b82:	4003      	ands	r3, r0
 8003b84:	00db      	lsls	r3, r3, #3
 8003b86:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003b88:	481f      	ldr	r0, [pc, #124]	; (8003c08 <__NVIC_SetPriority+0xd4>)
 8003b8a:	1dfb      	adds	r3, r7, #7
 8003b8c:	781b      	ldrb	r3, [r3, #0]
 8003b8e:	b25b      	sxtb	r3, r3
 8003b90:	089b      	lsrs	r3, r3, #2
 8003b92:	430a      	orrs	r2, r1
 8003b94:	33c0      	adds	r3, #192	; 0xc0
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003b9a:	e031      	b.n	8003c00 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003b9c:	4a1b      	ldr	r2, [pc, #108]	; (8003c0c <__NVIC_SetPriority+0xd8>)
 8003b9e:	1dfb      	adds	r3, r7, #7
 8003ba0:	781b      	ldrb	r3, [r3, #0]
 8003ba2:	0019      	movs	r1, r3
 8003ba4:	230f      	movs	r3, #15
 8003ba6:	400b      	ands	r3, r1
 8003ba8:	3b08      	subs	r3, #8
 8003baa:	089b      	lsrs	r3, r3, #2
 8003bac:	3306      	adds	r3, #6
 8003bae:	009b      	lsls	r3, r3, #2
 8003bb0:	18d3      	adds	r3, r2, r3
 8003bb2:	3304      	adds	r3, #4
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	1dfa      	adds	r2, r7, #7
 8003bb8:	7812      	ldrb	r2, [r2, #0]
 8003bba:	0011      	movs	r1, r2
 8003bbc:	2203      	movs	r2, #3
 8003bbe:	400a      	ands	r2, r1
 8003bc0:	00d2      	lsls	r2, r2, #3
 8003bc2:	21ff      	movs	r1, #255	; 0xff
 8003bc4:	4091      	lsls	r1, r2
 8003bc6:	000a      	movs	r2, r1
 8003bc8:	43d2      	mvns	r2, r2
 8003bca:	401a      	ands	r2, r3
 8003bcc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	019b      	lsls	r3, r3, #6
 8003bd2:	22ff      	movs	r2, #255	; 0xff
 8003bd4:	401a      	ands	r2, r3
 8003bd6:	1dfb      	adds	r3, r7, #7
 8003bd8:	781b      	ldrb	r3, [r3, #0]
 8003bda:	0018      	movs	r0, r3
 8003bdc:	2303      	movs	r3, #3
 8003bde:	4003      	ands	r3, r0
 8003be0:	00db      	lsls	r3, r3, #3
 8003be2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003be4:	4809      	ldr	r0, [pc, #36]	; (8003c0c <__NVIC_SetPriority+0xd8>)
 8003be6:	1dfb      	adds	r3, r7, #7
 8003be8:	781b      	ldrb	r3, [r3, #0]
 8003bea:	001c      	movs	r4, r3
 8003bec:	230f      	movs	r3, #15
 8003bee:	4023      	ands	r3, r4
 8003bf0:	3b08      	subs	r3, #8
 8003bf2:	089b      	lsrs	r3, r3, #2
 8003bf4:	430a      	orrs	r2, r1
 8003bf6:	3306      	adds	r3, #6
 8003bf8:	009b      	lsls	r3, r3, #2
 8003bfa:	18c3      	adds	r3, r0, r3
 8003bfc:	3304      	adds	r3, #4
 8003bfe:	601a      	str	r2, [r3, #0]
}
 8003c00:	46c0      	nop			; (mov r8, r8)
 8003c02:	46bd      	mov	sp, r7
 8003c04:	b003      	add	sp, #12
 8003c06:	bd90      	pop	{r4, r7, pc}
 8003c08:	e000e100 	.word	0xe000e100
 8003c0c:	e000ed00 	.word	0xe000ed00

08003c10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b082      	sub	sp, #8
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	1e5a      	subs	r2, r3, #1
 8003c1c:	2380      	movs	r3, #128	; 0x80
 8003c1e:	045b      	lsls	r3, r3, #17
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d301      	bcc.n	8003c28 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c24:	2301      	movs	r3, #1
 8003c26:	e010      	b.n	8003c4a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c28:	4b0a      	ldr	r3, [pc, #40]	; (8003c54 <SysTick_Config+0x44>)
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	3a01      	subs	r2, #1
 8003c2e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c30:	2301      	movs	r3, #1
 8003c32:	425b      	negs	r3, r3
 8003c34:	2103      	movs	r1, #3
 8003c36:	0018      	movs	r0, r3
 8003c38:	f7ff ff7c 	bl	8003b34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c3c:	4b05      	ldr	r3, [pc, #20]	; (8003c54 <SysTick_Config+0x44>)
 8003c3e:	2200      	movs	r2, #0
 8003c40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c42:	4b04      	ldr	r3, [pc, #16]	; (8003c54 <SysTick_Config+0x44>)
 8003c44:	2207      	movs	r2, #7
 8003c46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c48:	2300      	movs	r3, #0
}
 8003c4a:	0018      	movs	r0, r3
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	b002      	add	sp, #8
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	46c0      	nop			; (mov r8, r8)
 8003c54:	e000e010 	.word	0xe000e010

08003c58 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b084      	sub	sp, #16
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	60b9      	str	r1, [r7, #8]
 8003c60:	607a      	str	r2, [r7, #4]
 8003c62:	210f      	movs	r1, #15
 8003c64:	187b      	adds	r3, r7, r1
 8003c66:	1c02      	adds	r2, r0, #0
 8003c68:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003c6a:	68ba      	ldr	r2, [r7, #8]
 8003c6c:	187b      	adds	r3, r7, r1
 8003c6e:	781b      	ldrb	r3, [r3, #0]
 8003c70:	b25b      	sxtb	r3, r3
 8003c72:	0011      	movs	r1, r2
 8003c74:	0018      	movs	r0, r3
 8003c76:	f7ff ff5d 	bl	8003b34 <__NVIC_SetPriority>
}
 8003c7a:	46c0      	nop			; (mov r8, r8)
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	b004      	add	sp, #16
 8003c80:	bd80      	pop	{r7, pc}

08003c82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003c82:	b580      	push	{r7, lr}
 8003c84:	b082      	sub	sp, #8
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	0018      	movs	r0, r3
 8003c8e:	f7ff ffbf 	bl	8003c10 <SysTick_Config>
 8003c92:	0003      	movs	r3, r0
}
 8003c94:	0018      	movs	r0, r3
 8003c96:	46bd      	mov	sp, r7
 8003c98:	b002      	add	sp, #8
 8003c9a:	bd80      	pop	{r7, pc}

08003c9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b086      	sub	sp, #24
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
 8003ca4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003caa:	2300      	movs	r3, #0
 8003cac:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8003cb2:	e155      	b.n	8003f60 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	2101      	movs	r1, #1
 8003cba:	697a      	ldr	r2, [r7, #20]
 8003cbc:	4091      	lsls	r1, r2
 8003cbe:	000a      	movs	r2, r1
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d100      	bne.n	8003ccc <HAL_GPIO_Init+0x30>
 8003cca:	e146      	b.n	8003f5a <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	2203      	movs	r2, #3
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d005      	beq.n	8003ce4 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	2203      	movs	r2, #3
 8003cde:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003ce0:	2b02      	cmp	r3, #2
 8003ce2:	d130      	bne.n	8003d46 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	005b      	lsls	r3, r3, #1
 8003cee:	2203      	movs	r2, #3
 8003cf0:	409a      	lsls	r2, r3
 8003cf2:	0013      	movs	r3, r2
 8003cf4:	43da      	mvns	r2, r3
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	68da      	ldr	r2, [r3, #12]
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	005b      	lsls	r3, r3, #1
 8003d04:	409a      	lsls	r2, r3
 8003d06:	0013      	movs	r3, r2
 8003d08:	693a      	ldr	r2, [r7, #16]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	693a      	ldr	r2, [r7, #16]
 8003d12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	409a      	lsls	r2, r3
 8003d20:	0013      	movs	r3, r2
 8003d22:	43da      	mvns	r2, r3
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	4013      	ands	r3, r2
 8003d28:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	091b      	lsrs	r3, r3, #4
 8003d30:	2201      	movs	r2, #1
 8003d32:	401a      	ands	r2, r3
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	409a      	lsls	r2, r3
 8003d38:	0013      	movs	r3, r2
 8003d3a:	693a      	ldr	r2, [r7, #16]
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	693a      	ldr	r2, [r7, #16]
 8003d44:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	2203      	movs	r2, #3
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	2b03      	cmp	r3, #3
 8003d50:	d017      	beq.n	8003d82 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	68db      	ldr	r3, [r3, #12]
 8003d56:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	005b      	lsls	r3, r3, #1
 8003d5c:	2203      	movs	r2, #3
 8003d5e:	409a      	lsls	r2, r3
 8003d60:	0013      	movs	r3, r2
 8003d62:	43da      	mvns	r2, r3
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	4013      	ands	r3, r2
 8003d68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	689a      	ldr	r2, [r3, #8]
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	005b      	lsls	r3, r3, #1
 8003d72:	409a      	lsls	r2, r3
 8003d74:	0013      	movs	r3, r2
 8003d76:	693a      	ldr	r2, [r7, #16]
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	693a      	ldr	r2, [r7, #16]
 8003d80:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	2203      	movs	r2, #3
 8003d88:	4013      	ands	r3, r2
 8003d8a:	2b02      	cmp	r3, #2
 8003d8c:	d123      	bne.n	8003dd6 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	08da      	lsrs	r2, r3, #3
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	3208      	adds	r2, #8
 8003d96:	0092      	lsls	r2, r2, #2
 8003d98:	58d3      	ldr	r3, [r2, r3]
 8003d9a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	2207      	movs	r2, #7
 8003da0:	4013      	ands	r3, r2
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	220f      	movs	r2, #15
 8003da6:	409a      	lsls	r2, r3
 8003da8:	0013      	movs	r3, r2
 8003daa:	43da      	mvns	r2, r3
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	4013      	ands	r3, r2
 8003db0:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	691a      	ldr	r2, [r3, #16]
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	2107      	movs	r1, #7
 8003dba:	400b      	ands	r3, r1
 8003dbc:	009b      	lsls	r3, r3, #2
 8003dbe:	409a      	lsls	r2, r3
 8003dc0:	0013      	movs	r3, r2
 8003dc2:	693a      	ldr	r2, [r7, #16]
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	08da      	lsrs	r2, r3, #3
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	3208      	adds	r2, #8
 8003dd0:	0092      	lsls	r2, r2, #2
 8003dd2:	6939      	ldr	r1, [r7, #16]
 8003dd4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	005b      	lsls	r3, r3, #1
 8003de0:	2203      	movs	r2, #3
 8003de2:	409a      	lsls	r2, r3
 8003de4:	0013      	movs	r3, r2
 8003de6:	43da      	mvns	r2, r3
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	4013      	ands	r3, r2
 8003dec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	2203      	movs	r2, #3
 8003df4:	401a      	ands	r2, r3
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	005b      	lsls	r3, r3, #1
 8003dfa:	409a      	lsls	r2, r3
 8003dfc:	0013      	movs	r3, r2
 8003dfe:	693a      	ldr	r2, [r7, #16]
 8003e00:	4313      	orrs	r3, r2
 8003e02:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	693a      	ldr	r2, [r7, #16]
 8003e08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	685a      	ldr	r2, [r3, #4]
 8003e0e:	23c0      	movs	r3, #192	; 0xc0
 8003e10:	029b      	lsls	r3, r3, #10
 8003e12:	4013      	ands	r3, r2
 8003e14:	d100      	bne.n	8003e18 <HAL_GPIO_Init+0x17c>
 8003e16:	e0a0      	b.n	8003f5a <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e18:	4b57      	ldr	r3, [pc, #348]	; (8003f78 <HAL_GPIO_Init+0x2dc>)
 8003e1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e1c:	4b56      	ldr	r3, [pc, #344]	; (8003f78 <HAL_GPIO_Init+0x2dc>)
 8003e1e:	2101      	movs	r1, #1
 8003e20:	430a      	orrs	r2, r1
 8003e22:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8003e24:	4a55      	ldr	r2, [pc, #340]	; (8003f7c <HAL_GPIO_Init+0x2e0>)
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	089b      	lsrs	r3, r3, #2
 8003e2a:	3302      	adds	r3, #2
 8003e2c:	009b      	lsls	r3, r3, #2
 8003e2e:	589b      	ldr	r3, [r3, r2]
 8003e30:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	2203      	movs	r2, #3
 8003e36:	4013      	ands	r3, r2
 8003e38:	009b      	lsls	r3, r3, #2
 8003e3a:	220f      	movs	r2, #15
 8003e3c:	409a      	lsls	r2, r3
 8003e3e:	0013      	movs	r3, r2
 8003e40:	43da      	mvns	r2, r3
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	4013      	ands	r3, r2
 8003e46:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003e48:	687a      	ldr	r2, [r7, #4]
 8003e4a:	23a0      	movs	r3, #160	; 0xa0
 8003e4c:	05db      	lsls	r3, r3, #23
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d01f      	beq.n	8003e92 <HAL_GPIO_Init+0x1f6>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	4a4a      	ldr	r2, [pc, #296]	; (8003f80 <HAL_GPIO_Init+0x2e4>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d019      	beq.n	8003e8e <HAL_GPIO_Init+0x1f2>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	4a49      	ldr	r2, [pc, #292]	; (8003f84 <HAL_GPIO_Init+0x2e8>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d013      	beq.n	8003e8a <HAL_GPIO_Init+0x1ee>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	4a48      	ldr	r2, [pc, #288]	; (8003f88 <HAL_GPIO_Init+0x2ec>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d00d      	beq.n	8003e86 <HAL_GPIO_Init+0x1ea>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	4a47      	ldr	r2, [pc, #284]	; (8003f8c <HAL_GPIO_Init+0x2f0>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d007      	beq.n	8003e82 <HAL_GPIO_Init+0x1e6>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	4a46      	ldr	r2, [pc, #280]	; (8003f90 <HAL_GPIO_Init+0x2f4>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d101      	bne.n	8003e7e <HAL_GPIO_Init+0x1e2>
 8003e7a:	2305      	movs	r3, #5
 8003e7c:	e00a      	b.n	8003e94 <HAL_GPIO_Init+0x1f8>
 8003e7e:	2306      	movs	r3, #6
 8003e80:	e008      	b.n	8003e94 <HAL_GPIO_Init+0x1f8>
 8003e82:	2304      	movs	r3, #4
 8003e84:	e006      	b.n	8003e94 <HAL_GPIO_Init+0x1f8>
 8003e86:	2303      	movs	r3, #3
 8003e88:	e004      	b.n	8003e94 <HAL_GPIO_Init+0x1f8>
 8003e8a:	2302      	movs	r3, #2
 8003e8c:	e002      	b.n	8003e94 <HAL_GPIO_Init+0x1f8>
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e000      	b.n	8003e94 <HAL_GPIO_Init+0x1f8>
 8003e92:	2300      	movs	r3, #0
 8003e94:	697a      	ldr	r2, [r7, #20]
 8003e96:	2103      	movs	r1, #3
 8003e98:	400a      	ands	r2, r1
 8003e9a:	0092      	lsls	r2, r2, #2
 8003e9c:	4093      	lsls	r3, r2
 8003e9e:	693a      	ldr	r2, [r7, #16]
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003ea4:	4935      	ldr	r1, [pc, #212]	; (8003f7c <HAL_GPIO_Init+0x2e0>)
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	089b      	lsrs	r3, r3, #2
 8003eaa:	3302      	adds	r3, #2
 8003eac:	009b      	lsls	r3, r3, #2
 8003eae:	693a      	ldr	r2, [r7, #16]
 8003eb0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003eb2:	4b38      	ldr	r3, [pc, #224]	; (8003f94 <HAL_GPIO_Init+0x2f8>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	43da      	mvns	r2, r3
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	4013      	ands	r3, r2
 8003ec0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	685a      	ldr	r2, [r3, #4]
 8003ec6:	2380      	movs	r3, #128	; 0x80
 8003ec8:	025b      	lsls	r3, r3, #9
 8003eca:	4013      	ands	r3, r2
 8003ecc:	d003      	beq.n	8003ed6 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8003ece:	693a      	ldr	r2, [r7, #16]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003ed6:	4b2f      	ldr	r3, [pc, #188]	; (8003f94 <HAL_GPIO_Init+0x2f8>)
 8003ed8:	693a      	ldr	r2, [r7, #16]
 8003eda:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8003edc:	4b2d      	ldr	r3, [pc, #180]	; (8003f94 <HAL_GPIO_Init+0x2f8>)
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	43da      	mvns	r2, r3
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	4013      	ands	r3, r2
 8003eea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	685a      	ldr	r2, [r3, #4]
 8003ef0:	2380      	movs	r3, #128	; 0x80
 8003ef2:	029b      	lsls	r3, r3, #10
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	d003      	beq.n	8003f00 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8003ef8:	693a      	ldr	r2, [r7, #16]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	4313      	orrs	r3, r2
 8003efe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003f00:	4b24      	ldr	r3, [pc, #144]	; (8003f94 <HAL_GPIO_Init+0x2f8>)
 8003f02:	693a      	ldr	r2, [r7, #16]
 8003f04:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003f06:	4b23      	ldr	r3, [pc, #140]	; (8003f94 <HAL_GPIO_Init+0x2f8>)
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	43da      	mvns	r2, r3
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	4013      	ands	r3, r2
 8003f14:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	685a      	ldr	r2, [r3, #4]
 8003f1a:	2380      	movs	r3, #128	; 0x80
 8003f1c:	035b      	lsls	r3, r3, #13
 8003f1e:	4013      	ands	r3, r2
 8003f20:	d003      	beq.n	8003f2a <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8003f22:	693a      	ldr	r2, [r7, #16]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	4313      	orrs	r3, r2
 8003f28:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003f2a:	4b1a      	ldr	r3, [pc, #104]	; (8003f94 <HAL_GPIO_Init+0x2f8>)
 8003f2c:	693a      	ldr	r2, [r7, #16]
 8003f2e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003f30:	4b18      	ldr	r3, [pc, #96]	; (8003f94 <HAL_GPIO_Init+0x2f8>)
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	43da      	mvns	r2, r3
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	4013      	ands	r3, r2
 8003f3e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	685a      	ldr	r2, [r3, #4]
 8003f44:	2380      	movs	r3, #128	; 0x80
 8003f46:	039b      	lsls	r3, r3, #14
 8003f48:	4013      	ands	r3, r2
 8003f4a:	d003      	beq.n	8003f54 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8003f4c:	693a      	ldr	r2, [r7, #16]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	4313      	orrs	r3, r2
 8003f52:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003f54:	4b0f      	ldr	r3, [pc, #60]	; (8003f94 <HAL_GPIO_Init+0x2f8>)
 8003f56:	693a      	ldr	r2, [r7, #16]
 8003f58:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	3301      	adds	r3, #1
 8003f5e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	40da      	lsrs	r2, r3
 8003f68:	1e13      	subs	r3, r2, #0
 8003f6a:	d000      	beq.n	8003f6e <HAL_GPIO_Init+0x2d2>
 8003f6c:	e6a2      	b.n	8003cb4 <HAL_GPIO_Init+0x18>
  }
}
 8003f6e:	46c0      	nop			; (mov r8, r8)
 8003f70:	46c0      	nop			; (mov r8, r8)
 8003f72:	46bd      	mov	sp, r7
 8003f74:	b006      	add	sp, #24
 8003f76:	bd80      	pop	{r7, pc}
 8003f78:	40021000 	.word	0x40021000
 8003f7c:	40010000 	.word	0x40010000
 8003f80:	50000400 	.word	0x50000400
 8003f84:	50000800 	.word	0x50000800
 8003f88:	50000c00 	.word	0x50000c00
 8003f8c:	50001000 	.word	0x50001000
 8003f90:	50001c00 	.word	0x50001c00
 8003f94:	40010400 	.word	0x40010400

08003f98 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b082      	sub	sp, #8
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
 8003fa0:	0008      	movs	r0, r1
 8003fa2:	0011      	movs	r1, r2
 8003fa4:	1cbb      	adds	r3, r7, #2
 8003fa6:	1c02      	adds	r2, r0, #0
 8003fa8:	801a      	strh	r2, [r3, #0]
 8003faa:	1c7b      	adds	r3, r7, #1
 8003fac:	1c0a      	adds	r2, r1, #0
 8003fae:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003fb0:	1c7b      	adds	r3, r7, #1
 8003fb2:	781b      	ldrb	r3, [r3, #0]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d004      	beq.n	8003fc2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003fb8:	1cbb      	adds	r3, r7, #2
 8003fba:	881a      	ldrh	r2, [r3, #0]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8003fc0:	e003      	b.n	8003fca <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8003fc2:	1cbb      	adds	r3, r7, #2
 8003fc4:	881a      	ldrh	r2, [r3, #0]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003fca:	46c0      	nop			; (mov r8, r8)
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	b002      	add	sp, #8
 8003fd0:	bd80      	pop	{r7, pc}
	...

08003fd4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b082      	sub	sp, #8
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d101      	bne.n	8003fe6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e082      	b.n	80040ec <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2241      	movs	r2, #65	; 0x41
 8003fea:	5c9b      	ldrb	r3, [r3, r2]
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d107      	bne.n	8004002 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2240      	movs	r2, #64	; 0x40
 8003ff6:	2100      	movs	r1, #0
 8003ff8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	0018      	movs	r0, r3
 8003ffe:	f7fe fefd 	bl	8002dfc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2241      	movs	r2, #65	; 0x41
 8004006:	2124      	movs	r1, #36	; 0x24
 8004008:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	2101      	movs	r1, #1
 8004016:	438a      	bics	r2, r1
 8004018:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	685a      	ldr	r2, [r3, #4]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4934      	ldr	r1, [pc, #208]	; (80040f4 <HAL_I2C_Init+0x120>)
 8004024:	400a      	ands	r2, r1
 8004026:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	689a      	ldr	r2, [r3, #8]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4931      	ldr	r1, [pc, #196]	; (80040f8 <HAL_I2C_Init+0x124>)
 8004034:	400a      	ands	r2, r1
 8004036:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	68db      	ldr	r3, [r3, #12]
 800403c:	2b01      	cmp	r3, #1
 800403e:	d108      	bne.n	8004052 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	689a      	ldr	r2, [r3, #8]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	2180      	movs	r1, #128	; 0x80
 800404a:	0209      	lsls	r1, r1, #8
 800404c:	430a      	orrs	r2, r1
 800404e:	609a      	str	r2, [r3, #8]
 8004050:	e007      	b.n	8004062 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	689a      	ldr	r2, [r3, #8]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	2184      	movs	r1, #132	; 0x84
 800405c:	0209      	lsls	r1, r1, #8
 800405e:	430a      	orrs	r2, r1
 8004060:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	68db      	ldr	r3, [r3, #12]
 8004066:	2b02      	cmp	r3, #2
 8004068:	d104      	bne.n	8004074 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	2280      	movs	r2, #128	; 0x80
 8004070:	0112      	lsls	r2, r2, #4
 8004072:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	685a      	ldr	r2, [r3, #4]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	491f      	ldr	r1, [pc, #124]	; (80040fc <HAL_I2C_Init+0x128>)
 8004080:	430a      	orrs	r2, r1
 8004082:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	68da      	ldr	r2, [r3, #12]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	491a      	ldr	r1, [pc, #104]	; (80040f8 <HAL_I2C_Init+0x124>)
 8004090:	400a      	ands	r2, r1
 8004092:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	691a      	ldr	r2, [r3, #16]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	695b      	ldr	r3, [r3, #20]
 800409c:	431a      	orrs	r2, r3
 800409e:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	699b      	ldr	r3, [r3, #24]
 80040a4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	430a      	orrs	r2, r1
 80040ac:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	69d9      	ldr	r1, [r3, #28]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6a1a      	ldr	r2, [r3, #32]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	430a      	orrs	r2, r1
 80040bc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	2101      	movs	r1, #1
 80040ca:	430a      	orrs	r2, r1
 80040cc:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2200      	movs	r2, #0
 80040d2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2241      	movs	r2, #65	; 0x41
 80040d8:	2120      	movs	r1, #32
 80040da:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2200      	movs	r2, #0
 80040e0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2242      	movs	r2, #66	; 0x42
 80040e6:	2100      	movs	r1, #0
 80040e8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80040ea:	2300      	movs	r3, #0
}
 80040ec:	0018      	movs	r0, r3
 80040ee:	46bd      	mov	sp, r7
 80040f0:	b002      	add	sp, #8
 80040f2:	bd80      	pop	{r7, pc}
 80040f4:	f0ffffff 	.word	0xf0ffffff
 80040f8:	ffff7fff 	.word	0xffff7fff
 80040fc:	02008000 	.word	0x02008000

08004100 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004100:	b590      	push	{r4, r7, lr}
 8004102:	b089      	sub	sp, #36	; 0x24
 8004104:	af02      	add	r7, sp, #8
 8004106:	60f8      	str	r0, [r7, #12]
 8004108:	0008      	movs	r0, r1
 800410a:	607a      	str	r2, [r7, #4]
 800410c:	0019      	movs	r1, r3
 800410e:	230a      	movs	r3, #10
 8004110:	18fb      	adds	r3, r7, r3
 8004112:	1c02      	adds	r2, r0, #0
 8004114:	801a      	strh	r2, [r3, #0]
 8004116:	2308      	movs	r3, #8
 8004118:	18fb      	adds	r3, r7, r3
 800411a:	1c0a      	adds	r2, r1, #0
 800411c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2241      	movs	r2, #65	; 0x41
 8004122:	5c9b      	ldrb	r3, [r3, r2]
 8004124:	b2db      	uxtb	r3, r3
 8004126:	2b20      	cmp	r3, #32
 8004128:	d000      	beq.n	800412c <HAL_I2C_Master_Transmit+0x2c>
 800412a:	e0e7      	b.n	80042fc <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2240      	movs	r2, #64	; 0x40
 8004130:	5c9b      	ldrb	r3, [r3, r2]
 8004132:	2b01      	cmp	r3, #1
 8004134:	d101      	bne.n	800413a <HAL_I2C_Master_Transmit+0x3a>
 8004136:	2302      	movs	r3, #2
 8004138:	e0e1      	b.n	80042fe <HAL_I2C_Master_Transmit+0x1fe>
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2240      	movs	r2, #64	; 0x40
 800413e:	2101      	movs	r1, #1
 8004140:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004142:	f7ff f893 	bl	800326c <HAL_GetTick>
 8004146:	0003      	movs	r3, r0
 8004148:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800414a:	2380      	movs	r3, #128	; 0x80
 800414c:	0219      	lsls	r1, r3, #8
 800414e:	68f8      	ldr	r0, [r7, #12]
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	9300      	str	r3, [sp, #0]
 8004154:	2319      	movs	r3, #25
 8004156:	2201      	movs	r2, #1
 8004158:	f000 fa04 	bl	8004564 <I2C_WaitOnFlagUntilTimeout>
 800415c:	1e03      	subs	r3, r0, #0
 800415e:	d001      	beq.n	8004164 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	e0cc      	b.n	80042fe <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2241      	movs	r2, #65	; 0x41
 8004168:	2121      	movs	r1, #33	; 0x21
 800416a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2242      	movs	r2, #66	; 0x42
 8004170:	2110      	movs	r1, #16
 8004172:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2200      	movs	r2, #0
 8004178:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	687a      	ldr	r2, [r7, #4]
 800417e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2208      	movs	r2, #8
 8004184:	18ba      	adds	r2, r7, r2
 8004186:	8812      	ldrh	r2, [r2, #0]
 8004188:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2200      	movs	r2, #0
 800418e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004194:	b29b      	uxth	r3, r3
 8004196:	2bff      	cmp	r3, #255	; 0xff
 8004198:	d911      	bls.n	80041be <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	22ff      	movs	r2, #255	; 0xff
 800419e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041a4:	b2da      	uxtb	r2, r3
 80041a6:	2380      	movs	r3, #128	; 0x80
 80041a8:	045c      	lsls	r4, r3, #17
 80041aa:	230a      	movs	r3, #10
 80041ac:	18fb      	adds	r3, r7, r3
 80041ae:	8819      	ldrh	r1, [r3, #0]
 80041b0:	68f8      	ldr	r0, [r7, #12]
 80041b2:	4b55      	ldr	r3, [pc, #340]	; (8004308 <HAL_I2C_Master_Transmit+0x208>)
 80041b4:	9300      	str	r3, [sp, #0]
 80041b6:	0023      	movs	r3, r4
 80041b8:	f000 fb74 	bl	80048a4 <I2C_TransferConfig>
 80041bc:	e075      	b.n	80042aa <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041c2:	b29a      	uxth	r2, r3
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041cc:	b2da      	uxtb	r2, r3
 80041ce:	2380      	movs	r3, #128	; 0x80
 80041d0:	049c      	lsls	r4, r3, #18
 80041d2:	230a      	movs	r3, #10
 80041d4:	18fb      	adds	r3, r7, r3
 80041d6:	8819      	ldrh	r1, [r3, #0]
 80041d8:	68f8      	ldr	r0, [r7, #12]
 80041da:	4b4b      	ldr	r3, [pc, #300]	; (8004308 <HAL_I2C_Master_Transmit+0x208>)
 80041dc:	9300      	str	r3, [sp, #0]
 80041de:	0023      	movs	r3, r4
 80041e0:	f000 fb60 	bl	80048a4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80041e4:	e061      	b.n	80042aa <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041e6:	697a      	ldr	r2, [r7, #20]
 80041e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	0018      	movs	r0, r3
 80041ee:	f000 f9f8 	bl	80045e2 <I2C_WaitOnTXISFlagUntilTimeout>
 80041f2:	1e03      	subs	r3, r0, #0
 80041f4:	d001      	beq.n	80041fa <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e081      	b.n	80042fe <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041fe:	781a      	ldrb	r2, [r3, #0]
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800420a:	1c5a      	adds	r2, r3, #1
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004214:	b29b      	uxth	r3, r3
 8004216:	3b01      	subs	r3, #1
 8004218:	b29a      	uxth	r2, r3
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004222:	3b01      	subs	r3, #1
 8004224:	b29a      	uxth	r2, r3
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800422e:	b29b      	uxth	r3, r3
 8004230:	2b00      	cmp	r3, #0
 8004232:	d03a      	beq.n	80042aa <HAL_I2C_Master_Transmit+0x1aa>
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004238:	2b00      	cmp	r3, #0
 800423a:	d136      	bne.n	80042aa <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800423c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800423e:	68f8      	ldr	r0, [r7, #12]
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	9300      	str	r3, [sp, #0]
 8004244:	0013      	movs	r3, r2
 8004246:	2200      	movs	r2, #0
 8004248:	2180      	movs	r1, #128	; 0x80
 800424a:	f000 f98b 	bl	8004564 <I2C_WaitOnFlagUntilTimeout>
 800424e:	1e03      	subs	r3, r0, #0
 8004250:	d001      	beq.n	8004256 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	e053      	b.n	80042fe <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800425a:	b29b      	uxth	r3, r3
 800425c:	2bff      	cmp	r3, #255	; 0xff
 800425e:	d911      	bls.n	8004284 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	22ff      	movs	r2, #255	; 0xff
 8004264:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800426a:	b2da      	uxtb	r2, r3
 800426c:	2380      	movs	r3, #128	; 0x80
 800426e:	045c      	lsls	r4, r3, #17
 8004270:	230a      	movs	r3, #10
 8004272:	18fb      	adds	r3, r7, r3
 8004274:	8819      	ldrh	r1, [r3, #0]
 8004276:	68f8      	ldr	r0, [r7, #12]
 8004278:	2300      	movs	r3, #0
 800427a:	9300      	str	r3, [sp, #0]
 800427c:	0023      	movs	r3, r4
 800427e:	f000 fb11 	bl	80048a4 <I2C_TransferConfig>
 8004282:	e012      	b.n	80042aa <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004288:	b29a      	uxth	r2, r3
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004292:	b2da      	uxtb	r2, r3
 8004294:	2380      	movs	r3, #128	; 0x80
 8004296:	049c      	lsls	r4, r3, #18
 8004298:	230a      	movs	r3, #10
 800429a:	18fb      	adds	r3, r7, r3
 800429c:	8819      	ldrh	r1, [r3, #0]
 800429e:	68f8      	ldr	r0, [r7, #12]
 80042a0:	2300      	movs	r3, #0
 80042a2:	9300      	str	r3, [sp, #0]
 80042a4:	0023      	movs	r3, r4
 80042a6:	f000 fafd 	bl	80048a4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d198      	bne.n	80041e6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042b4:	697a      	ldr	r2, [r7, #20]
 80042b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	0018      	movs	r0, r3
 80042bc:	f000 f9d0 	bl	8004660 <I2C_WaitOnSTOPFlagUntilTimeout>
 80042c0:	1e03      	subs	r3, r0, #0
 80042c2:	d001      	beq.n	80042c8 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	e01a      	b.n	80042fe <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	2220      	movs	r2, #32
 80042ce:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	685a      	ldr	r2, [r3, #4]
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	490c      	ldr	r1, [pc, #48]	; (800430c <HAL_I2C_Master_Transmit+0x20c>)
 80042dc:	400a      	ands	r2, r1
 80042de:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2241      	movs	r2, #65	; 0x41
 80042e4:	2120      	movs	r1, #32
 80042e6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2242      	movs	r2, #66	; 0x42
 80042ec:	2100      	movs	r1, #0
 80042ee:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2240      	movs	r2, #64	; 0x40
 80042f4:	2100      	movs	r1, #0
 80042f6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80042f8:	2300      	movs	r3, #0
 80042fa:	e000      	b.n	80042fe <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 80042fc:	2302      	movs	r3, #2
  }
}
 80042fe:	0018      	movs	r0, r3
 8004300:	46bd      	mov	sp, r7
 8004302:	b007      	add	sp, #28
 8004304:	bd90      	pop	{r4, r7, pc}
 8004306:	46c0      	nop			; (mov r8, r8)
 8004308:	80002000 	.word	0x80002000
 800430c:	fe00e800 	.word	0xfe00e800

08004310 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8004310:	b590      	push	{r4, r7, lr}
 8004312:	b089      	sub	sp, #36	; 0x24
 8004314:	af02      	add	r7, sp, #8
 8004316:	60f8      	str	r0, [r7, #12]
 8004318:	0008      	movs	r0, r1
 800431a:	607a      	str	r2, [r7, #4]
 800431c:	0019      	movs	r1, r3
 800431e:	230a      	movs	r3, #10
 8004320:	18fb      	adds	r3, r7, r3
 8004322:	1c02      	adds	r2, r0, #0
 8004324:	801a      	strh	r2, [r3, #0]
 8004326:	2308      	movs	r3, #8
 8004328:	18fb      	adds	r3, r7, r3
 800432a:	1c0a      	adds	r2, r1, #0
 800432c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2241      	movs	r2, #65	; 0x41
 8004332:	5c9b      	ldrb	r3, [r3, r2]
 8004334:	b2db      	uxtb	r3, r3
 8004336:	2b20      	cmp	r3, #32
 8004338:	d000      	beq.n	800433c <HAL_I2C_Master_Receive+0x2c>
 800433a:	e0e8      	b.n	800450e <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2240      	movs	r2, #64	; 0x40
 8004340:	5c9b      	ldrb	r3, [r3, r2]
 8004342:	2b01      	cmp	r3, #1
 8004344:	d101      	bne.n	800434a <HAL_I2C_Master_Receive+0x3a>
 8004346:	2302      	movs	r3, #2
 8004348:	e0e2      	b.n	8004510 <HAL_I2C_Master_Receive+0x200>
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2240      	movs	r2, #64	; 0x40
 800434e:	2101      	movs	r1, #1
 8004350:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004352:	f7fe ff8b 	bl	800326c <HAL_GetTick>
 8004356:	0003      	movs	r3, r0
 8004358:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800435a:	2380      	movs	r3, #128	; 0x80
 800435c:	0219      	lsls	r1, r3, #8
 800435e:	68f8      	ldr	r0, [r7, #12]
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	9300      	str	r3, [sp, #0]
 8004364:	2319      	movs	r3, #25
 8004366:	2201      	movs	r2, #1
 8004368:	f000 f8fc 	bl	8004564 <I2C_WaitOnFlagUntilTimeout>
 800436c:	1e03      	subs	r3, r0, #0
 800436e:	d001      	beq.n	8004374 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	e0cd      	b.n	8004510 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2241      	movs	r2, #65	; 0x41
 8004378:	2122      	movs	r1, #34	; 0x22
 800437a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2242      	movs	r2, #66	; 0x42
 8004380:	2110      	movs	r1, #16
 8004382:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2200      	movs	r2, #0
 8004388:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	687a      	ldr	r2, [r7, #4]
 800438e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2208      	movs	r2, #8
 8004394:	18ba      	adds	r2, r7, r2
 8004396:	8812      	ldrh	r2, [r2, #0]
 8004398:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2200      	movs	r2, #0
 800439e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043a4:	b29b      	uxth	r3, r3
 80043a6:	2bff      	cmp	r3, #255	; 0xff
 80043a8:	d911      	bls.n	80043ce <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	22ff      	movs	r2, #255	; 0xff
 80043ae:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043b4:	b2da      	uxtb	r2, r3
 80043b6:	2380      	movs	r3, #128	; 0x80
 80043b8:	045c      	lsls	r4, r3, #17
 80043ba:	230a      	movs	r3, #10
 80043bc:	18fb      	adds	r3, r7, r3
 80043be:	8819      	ldrh	r1, [r3, #0]
 80043c0:	68f8      	ldr	r0, [r7, #12]
 80043c2:	4b55      	ldr	r3, [pc, #340]	; (8004518 <HAL_I2C_Master_Receive+0x208>)
 80043c4:	9300      	str	r3, [sp, #0]
 80043c6:	0023      	movs	r3, r4
 80043c8:	f000 fa6c 	bl	80048a4 <I2C_TransferConfig>
 80043cc:	e076      	b.n	80044bc <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043d2:	b29a      	uxth	r2, r3
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043dc:	b2da      	uxtb	r2, r3
 80043de:	2380      	movs	r3, #128	; 0x80
 80043e0:	049c      	lsls	r4, r3, #18
 80043e2:	230a      	movs	r3, #10
 80043e4:	18fb      	adds	r3, r7, r3
 80043e6:	8819      	ldrh	r1, [r3, #0]
 80043e8:	68f8      	ldr	r0, [r7, #12]
 80043ea:	4b4b      	ldr	r3, [pc, #300]	; (8004518 <HAL_I2C_Master_Receive+0x208>)
 80043ec:	9300      	str	r3, [sp, #0]
 80043ee:	0023      	movs	r3, r4
 80043f0:	f000 fa58 	bl	80048a4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80043f4:	e062      	b.n	80044bc <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043f6:	697a      	ldr	r2, [r7, #20]
 80043f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	0018      	movs	r0, r3
 80043fe:	f000 f96b 	bl	80046d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004402:	1e03      	subs	r3, r0, #0
 8004404:	d001      	beq.n	800440a <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	e082      	b.n	8004510 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004414:	b2d2      	uxtb	r2, r2
 8004416:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800441c:	1c5a      	adds	r2, r3, #1
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004426:	3b01      	subs	r3, #1
 8004428:	b29a      	uxth	r2, r3
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004432:	b29b      	uxth	r3, r3
 8004434:	3b01      	subs	r3, #1
 8004436:	b29a      	uxth	r2, r3
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004440:	b29b      	uxth	r3, r3
 8004442:	2b00      	cmp	r3, #0
 8004444:	d03a      	beq.n	80044bc <HAL_I2C_Master_Receive+0x1ac>
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800444a:	2b00      	cmp	r3, #0
 800444c:	d136      	bne.n	80044bc <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800444e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004450:	68f8      	ldr	r0, [r7, #12]
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	9300      	str	r3, [sp, #0]
 8004456:	0013      	movs	r3, r2
 8004458:	2200      	movs	r2, #0
 800445a:	2180      	movs	r1, #128	; 0x80
 800445c:	f000 f882 	bl	8004564 <I2C_WaitOnFlagUntilTimeout>
 8004460:	1e03      	subs	r3, r0, #0
 8004462:	d001      	beq.n	8004468 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	e053      	b.n	8004510 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800446c:	b29b      	uxth	r3, r3
 800446e:	2bff      	cmp	r3, #255	; 0xff
 8004470:	d911      	bls.n	8004496 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	22ff      	movs	r2, #255	; 0xff
 8004476:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800447c:	b2da      	uxtb	r2, r3
 800447e:	2380      	movs	r3, #128	; 0x80
 8004480:	045c      	lsls	r4, r3, #17
 8004482:	230a      	movs	r3, #10
 8004484:	18fb      	adds	r3, r7, r3
 8004486:	8819      	ldrh	r1, [r3, #0]
 8004488:	68f8      	ldr	r0, [r7, #12]
 800448a:	2300      	movs	r3, #0
 800448c:	9300      	str	r3, [sp, #0]
 800448e:	0023      	movs	r3, r4
 8004490:	f000 fa08 	bl	80048a4 <I2C_TransferConfig>
 8004494:	e012      	b.n	80044bc <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800449a:	b29a      	uxth	r2, r3
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044a4:	b2da      	uxtb	r2, r3
 80044a6:	2380      	movs	r3, #128	; 0x80
 80044a8:	049c      	lsls	r4, r3, #18
 80044aa:	230a      	movs	r3, #10
 80044ac:	18fb      	adds	r3, r7, r3
 80044ae:	8819      	ldrh	r1, [r3, #0]
 80044b0:	68f8      	ldr	r0, [r7, #12]
 80044b2:	2300      	movs	r3, #0
 80044b4:	9300      	str	r3, [sp, #0]
 80044b6:	0023      	movs	r3, r4
 80044b8:	f000 f9f4 	bl	80048a4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d197      	bne.n	80043f6 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044c6:	697a      	ldr	r2, [r7, #20]
 80044c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	0018      	movs	r0, r3
 80044ce:	f000 f8c7 	bl	8004660 <I2C_WaitOnSTOPFlagUntilTimeout>
 80044d2:	1e03      	subs	r3, r0, #0
 80044d4:	d001      	beq.n	80044da <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	e01a      	b.n	8004510 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	2220      	movs	r2, #32
 80044e0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	685a      	ldr	r2, [r3, #4]
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	490b      	ldr	r1, [pc, #44]	; (800451c <HAL_I2C_Master_Receive+0x20c>)
 80044ee:	400a      	ands	r2, r1
 80044f0:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2241      	movs	r2, #65	; 0x41
 80044f6:	2120      	movs	r1, #32
 80044f8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2242      	movs	r2, #66	; 0x42
 80044fe:	2100      	movs	r1, #0
 8004500:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2240      	movs	r2, #64	; 0x40
 8004506:	2100      	movs	r1, #0
 8004508:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800450a:	2300      	movs	r3, #0
 800450c:	e000      	b.n	8004510 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 800450e:	2302      	movs	r3, #2
  }
}
 8004510:	0018      	movs	r0, r3
 8004512:	46bd      	mov	sp, r7
 8004514:	b007      	add	sp, #28
 8004516:	bd90      	pop	{r4, r7, pc}
 8004518:	80002400 	.word	0x80002400
 800451c:	fe00e800 	.word	0xfe00e800

08004520 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b082      	sub	sp, #8
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	699b      	ldr	r3, [r3, #24]
 800452e:	2202      	movs	r2, #2
 8004530:	4013      	ands	r3, r2
 8004532:	2b02      	cmp	r3, #2
 8004534:	d103      	bne.n	800453e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	2200      	movs	r2, #0
 800453c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	699b      	ldr	r3, [r3, #24]
 8004544:	2201      	movs	r2, #1
 8004546:	4013      	ands	r3, r2
 8004548:	2b01      	cmp	r3, #1
 800454a:	d007      	beq.n	800455c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	699a      	ldr	r2, [r3, #24]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	2101      	movs	r1, #1
 8004558:	430a      	orrs	r2, r1
 800455a:	619a      	str	r2, [r3, #24]
  }
}
 800455c:	46c0      	nop			; (mov r8, r8)
 800455e:	46bd      	mov	sp, r7
 8004560:	b002      	add	sp, #8
 8004562:	bd80      	pop	{r7, pc}

08004564 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b084      	sub	sp, #16
 8004568:	af00      	add	r7, sp, #0
 800456a:	60f8      	str	r0, [r7, #12]
 800456c:	60b9      	str	r1, [r7, #8]
 800456e:	603b      	str	r3, [r7, #0]
 8004570:	1dfb      	adds	r3, r7, #7
 8004572:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004574:	e021      	b.n	80045ba <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	3301      	adds	r3, #1
 800457a:	d01e      	beq.n	80045ba <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800457c:	f7fe fe76 	bl	800326c <HAL_GetTick>
 8004580:	0002      	movs	r2, r0
 8004582:	69bb      	ldr	r3, [r7, #24]
 8004584:	1ad3      	subs	r3, r2, r3
 8004586:	683a      	ldr	r2, [r7, #0]
 8004588:	429a      	cmp	r2, r3
 800458a:	d302      	bcc.n	8004592 <I2C_WaitOnFlagUntilTimeout+0x2e>
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d113      	bne.n	80045ba <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004596:	2220      	movs	r2, #32
 8004598:	431a      	orrs	r2, r3
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2241      	movs	r2, #65	; 0x41
 80045a2:	2120      	movs	r1, #32
 80045a4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2242      	movs	r2, #66	; 0x42
 80045aa:	2100      	movs	r1, #0
 80045ac:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2240      	movs	r2, #64	; 0x40
 80045b2:	2100      	movs	r1, #0
 80045b4:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e00f      	b.n	80045da <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	699b      	ldr	r3, [r3, #24]
 80045c0:	68ba      	ldr	r2, [r7, #8]
 80045c2:	4013      	ands	r3, r2
 80045c4:	68ba      	ldr	r2, [r7, #8]
 80045c6:	1ad3      	subs	r3, r2, r3
 80045c8:	425a      	negs	r2, r3
 80045ca:	4153      	adcs	r3, r2
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	001a      	movs	r2, r3
 80045d0:	1dfb      	adds	r3, r7, #7
 80045d2:	781b      	ldrb	r3, [r3, #0]
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d0ce      	beq.n	8004576 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80045d8:	2300      	movs	r3, #0
}
 80045da:	0018      	movs	r0, r3
 80045dc:	46bd      	mov	sp, r7
 80045de:	b004      	add	sp, #16
 80045e0:	bd80      	pop	{r7, pc}

080045e2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80045e2:	b580      	push	{r7, lr}
 80045e4:	b084      	sub	sp, #16
 80045e6:	af00      	add	r7, sp, #0
 80045e8:	60f8      	str	r0, [r7, #12]
 80045ea:	60b9      	str	r1, [r7, #8]
 80045ec:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80045ee:	e02b      	b.n	8004648 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80045f0:	687a      	ldr	r2, [r7, #4]
 80045f2:	68b9      	ldr	r1, [r7, #8]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	0018      	movs	r0, r3
 80045f8:	f000 f8da 	bl	80047b0 <I2C_IsAcknowledgeFailed>
 80045fc:	1e03      	subs	r3, r0, #0
 80045fe:	d001      	beq.n	8004604 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	e029      	b.n	8004658 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	3301      	adds	r3, #1
 8004608:	d01e      	beq.n	8004648 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800460a:	f7fe fe2f 	bl	800326c <HAL_GetTick>
 800460e:	0002      	movs	r2, r0
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	1ad3      	subs	r3, r2, r3
 8004614:	68ba      	ldr	r2, [r7, #8]
 8004616:	429a      	cmp	r2, r3
 8004618:	d302      	bcc.n	8004620 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d113      	bne.n	8004648 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004624:	2220      	movs	r2, #32
 8004626:	431a      	orrs	r2, r3
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2241      	movs	r2, #65	; 0x41
 8004630:	2120      	movs	r1, #32
 8004632:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2242      	movs	r2, #66	; 0x42
 8004638:	2100      	movs	r1, #0
 800463a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2240      	movs	r2, #64	; 0x40
 8004640:	2100      	movs	r1, #0
 8004642:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004644:	2301      	movs	r3, #1
 8004646:	e007      	b.n	8004658 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	699b      	ldr	r3, [r3, #24]
 800464e:	2202      	movs	r2, #2
 8004650:	4013      	ands	r3, r2
 8004652:	2b02      	cmp	r3, #2
 8004654:	d1cc      	bne.n	80045f0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004656:	2300      	movs	r3, #0
}
 8004658:	0018      	movs	r0, r3
 800465a:	46bd      	mov	sp, r7
 800465c:	b004      	add	sp, #16
 800465e:	bd80      	pop	{r7, pc}

08004660 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b084      	sub	sp, #16
 8004664:	af00      	add	r7, sp, #0
 8004666:	60f8      	str	r0, [r7, #12]
 8004668:	60b9      	str	r1, [r7, #8]
 800466a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800466c:	e028      	b.n	80046c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	68b9      	ldr	r1, [r7, #8]
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	0018      	movs	r0, r3
 8004676:	f000 f89b 	bl	80047b0 <I2C_IsAcknowledgeFailed>
 800467a:	1e03      	subs	r3, r0, #0
 800467c:	d001      	beq.n	8004682 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	e026      	b.n	80046d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004682:	f7fe fdf3 	bl	800326c <HAL_GetTick>
 8004686:	0002      	movs	r2, r0
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	1ad3      	subs	r3, r2, r3
 800468c:	68ba      	ldr	r2, [r7, #8]
 800468e:	429a      	cmp	r2, r3
 8004690:	d302      	bcc.n	8004698 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d113      	bne.n	80046c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800469c:	2220      	movs	r2, #32
 800469e:	431a      	orrs	r2, r3
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2241      	movs	r2, #65	; 0x41
 80046a8:	2120      	movs	r1, #32
 80046aa:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2242      	movs	r2, #66	; 0x42
 80046b0:	2100      	movs	r1, #0
 80046b2:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2240      	movs	r2, #64	; 0x40
 80046b8:	2100      	movs	r1, #0
 80046ba:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
 80046be:	e007      	b.n	80046d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	699b      	ldr	r3, [r3, #24]
 80046c6:	2220      	movs	r2, #32
 80046c8:	4013      	ands	r3, r2
 80046ca:	2b20      	cmp	r3, #32
 80046cc:	d1cf      	bne.n	800466e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80046ce:	2300      	movs	r3, #0
}
 80046d0:	0018      	movs	r0, r3
 80046d2:	46bd      	mov	sp, r7
 80046d4:	b004      	add	sp, #16
 80046d6:	bd80      	pop	{r7, pc}

080046d8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b084      	sub	sp, #16
 80046dc:	af00      	add	r7, sp, #0
 80046de:	60f8      	str	r0, [r7, #12]
 80046e0:	60b9      	str	r1, [r7, #8]
 80046e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80046e4:	e055      	b.n	8004792 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80046e6:	687a      	ldr	r2, [r7, #4]
 80046e8:	68b9      	ldr	r1, [r7, #8]
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	0018      	movs	r0, r3
 80046ee:	f000 f85f 	bl	80047b0 <I2C_IsAcknowledgeFailed>
 80046f2:	1e03      	subs	r3, r0, #0
 80046f4:	d001      	beq.n	80046fa <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	e053      	b.n	80047a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	699b      	ldr	r3, [r3, #24]
 8004700:	2220      	movs	r2, #32
 8004702:	4013      	ands	r3, r2
 8004704:	2b20      	cmp	r3, #32
 8004706:	d129      	bne.n	800475c <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	699b      	ldr	r3, [r3, #24]
 800470e:	2204      	movs	r2, #4
 8004710:	4013      	ands	r3, r2
 8004712:	2b04      	cmp	r3, #4
 8004714:	d105      	bne.n	8004722 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800471a:	2b00      	cmp	r3, #0
 800471c:	d001      	beq.n	8004722 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800471e:	2300      	movs	r3, #0
 8004720:	e03f      	b.n	80047a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	2220      	movs	r2, #32
 8004728:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	685a      	ldr	r2, [r3, #4]
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	491d      	ldr	r1, [pc, #116]	; (80047ac <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8004736:	400a      	ands	r2, r1
 8004738:	605a      	str	r2, [r3, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2200      	movs	r2, #0
 800473e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2241      	movs	r2, #65	; 0x41
 8004744:	2120      	movs	r1, #32
 8004746:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2242      	movs	r2, #66	; 0x42
 800474c:	2100      	movs	r1, #0
 800474e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2240      	movs	r2, #64	; 0x40
 8004754:	2100      	movs	r1, #0
 8004756:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	e022      	b.n	80047a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800475c:	f7fe fd86 	bl	800326c <HAL_GetTick>
 8004760:	0002      	movs	r2, r0
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	1ad3      	subs	r3, r2, r3
 8004766:	68ba      	ldr	r2, [r7, #8]
 8004768:	429a      	cmp	r2, r3
 800476a:	d302      	bcc.n	8004772 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d10f      	bne.n	8004792 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004776:	2220      	movs	r2, #32
 8004778:	431a      	orrs	r2, r3
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2241      	movs	r2, #65	; 0x41
 8004782:	2120      	movs	r1, #32
 8004784:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2240      	movs	r2, #64	; 0x40
 800478a:	2100      	movs	r1, #0
 800478c:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	e007      	b.n	80047a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	699b      	ldr	r3, [r3, #24]
 8004798:	2204      	movs	r2, #4
 800479a:	4013      	ands	r3, r2
 800479c:	2b04      	cmp	r3, #4
 800479e:	d1a2      	bne.n	80046e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80047a0:	2300      	movs	r3, #0
}
 80047a2:	0018      	movs	r0, r3
 80047a4:	46bd      	mov	sp, r7
 80047a6:	b004      	add	sp, #16
 80047a8:	bd80      	pop	{r7, pc}
 80047aa:	46c0      	nop			; (mov r8, r8)
 80047ac:	fe00e800 	.word	0xfe00e800

080047b0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b084      	sub	sp, #16
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	60f8      	str	r0, [r7, #12]
 80047b8:	60b9      	str	r1, [r7, #8]
 80047ba:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	699b      	ldr	r3, [r3, #24]
 80047c2:	2210      	movs	r2, #16
 80047c4:	4013      	ands	r3, r2
 80047c6:	2b10      	cmp	r3, #16
 80047c8:	d164      	bne.n	8004894 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	685a      	ldr	r2, [r3, #4]
 80047d0:	2380      	movs	r3, #128	; 0x80
 80047d2:	049b      	lsls	r3, r3, #18
 80047d4:	401a      	ands	r2, r3
 80047d6:	2380      	movs	r3, #128	; 0x80
 80047d8:	049b      	lsls	r3, r3, #18
 80047da:	429a      	cmp	r2, r3
 80047dc:	d02b      	beq.n	8004836 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	685a      	ldr	r2, [r3, #4]
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	2180      	movs	r1, #128	; 0x80
 80047ea:	01c9      	lsls	r1, r1, #7
 80047ec:	430a      	orrs	r2, r1
 80047ee:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80047f0:	e021      	b.n	8004836 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	3301      	adds	r3, #1
 80047f6:	d01e      	beq.n	8004836 <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047f8:	f7fe fd38 	bl	800326c <HAL_GetTick>
 80047fc:	0002      	movs	r2, r0
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	1ad3      	subs	r3, r2, r3
 8004802:	68ba      	ldr	r2, [r7, #8]
 8004804:	429a      	cmp	r2, r3
 8004806:	d302      	bcc.n	800480e <I2C_IsAcknowledgeFailed+0x5e>
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d113      	bne.n	8004836 <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004812:	2220      	movs	r2, #32
 8004814:	431a      	orrs	r2, r3
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2241      	movs	r2, #65	; 0x41
 800481e:	2120      	movs	r1, #32
 8004820:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2242      	movs	r2, #66	; 0x42
 8004826:	2100      	movs	r1, #0
 8004828:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2240      	movs	r2, #64	; 0x40
 800482e:	2100      	movs	r1, #0
 8004830:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	e02f      	b.n	8004896 <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	699b      	ldr	r3, [r3, #24]
 800483c:	2220      	movs	r2, #32
 800483e:	4013      	ands	r3, r2
 8004840:	2b20      	cmp	r3, #32
 8004842:	d1d6      	bne.n	80047f2 <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	2210      	movs	r2, #16
 800484a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	2220      	movs	r2, #32
 8004852:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	0018      	movs	r0, r3
 8004858:	f7ff fe62 	bl	8004520 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	685a      	ldr	r2, [r3, #4]
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	490e      	ldr	r1, [pc, #56]	; (80048a0 <I2C_IsAcknowledgeFailed+0xf0>)
 8004868:	400a      	ands	r2, r1
 800486a:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004870:	2204      	movs	r2, #4
 8004872:	431a      	orrs	r2, r3
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2241      	movs	r2, #65	; 0x41
 800487c:	2120      	movs	r1, #32
 800487e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2242      	movs	r2, #66	; 0x42
 8004884:	2100      	movs	r1, #0
 8004886:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2240      	movs	r2, #64	; 0x40
 800488c:	2100      	movs	r1, #0
 800488e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8004890:	2301      	movs	r3, #1
 8004892:	e000      	b.n	8004896 <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8004894:	2300      	movs	r3, #0
}
 8004896:	0018      	movs	r0, r3
 8004898:	46bd      	mov	sp, r7
 800489a:	b004      	add	sp, #16
 800489c:	bd80      	pop	{r7, pc}
 800489e:	46c0      	nop			; (mov r8, r8)
 80048a0:	fe00e800 	.word	0xfe00e800

080048a4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80048a4:	b590      	push	{r4, r7, lr}
 80048a6:	b085      	sub	sp, #20
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	60f8      	str	r0, [r7, #12]
 80048ac:	0008      	movs	r0, r1
 80048ae:	0011      	movs	r1, r2
 80048b0:	607b      	str	r3, [r7, #4]
 80048b2:	240a      	movs	r4, #10
 80048b4:	193b      	adds	r3, r7, r4
 80048b6:	1c02      	adds	r2, r0, #0
 80048b8:	801a      	strh	r2, [r3, #0]
 80048ba:	2009      	movs	r0, #9
 80048bc:	183b      	adds	r3, r7, r0
 80048be:	1c0a      	adds	r2, r1, #0
 80048c0:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	6a3a      	ldr	r2, [r7, #32]
 80048ca:	0d51      	lsrs	r1, r2, #21
 80048cc:	2280      	movs	r2, #128	; 0x80
 80048ce:	00d2      	lsls	r2, r2, #3
 80048d0:	400a      	ands	r2, r1
 80048d2:	490e      	ldr	r1, [pc, #56]	; (800490c <I2C_TransferConfig+0x68>)
 80048d4:	430a      	orrs	r2, r1
 80048d6:	43d2      	mvns	r2, r2
 80048d8:	401a      	ands	r2, r3
 80048da:	0011      	movs	r1, r2
 80048dc:	193b      	adds	r3, r7, r4
 80048de:	881b      	ldrh	r3, [r3, #0]
 80048e0:	059b      	lsls	r3, r3, #22
 80048e2:	0d9a      	lsrs	r2, r3, #22
 80048e4:	183b      	adds	r3, r7, r0
 80048e6:	781b      	ldrb	r3, [r3, #0]
 80048e8:	0418      	lsls	r0, r3, #16
 80048ea:	23ff      	movs	r3, #255	; 0xff
 80048ec:	041b      	lsls	r3, r3, #16
 80048ee:	4003      	ands	r3, r0
 80048f0:	431a      	orrs	r2, r3
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	431a      	orrs	r2, r3
 80048f6:	6a3b      	ldr	r3, [r7, #32]
 80048f8:	431a      	orrs	r2, r3
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	430a      	orrs	r2, r1
 8004900:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8004902:	46c0      	nop			; (mov r8, r8)
 8004904:	46bd      	mov	sp, r7
 8004906:	b005      	add	sp, #20
 8004908:	bd90      	pop	{r4, r7, pc}
 800490a:	46c0      	nop			; (mov r8, r8)
 800490c:	03ff63ff 	.word	0x03ff63ff

08004910 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b082      	sub	sp, #8
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
 8004918:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2241      	movs	r2, #65	; 0x41
 800491e:	5c9b      	ldrb	r3, [r3, r2]
 8004920:	b2db      	uxtb	r3, r3
 8004922:	2b20      	cmp	r3, #32
 8004924:	d138      	bne.n	8004998 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2240      	movs	r2, #64	; 0x40
 800492a:	5c9b      	ldrb	r3, [r3, r2]
 800492c:	2b01      	cmp	r3, #1
 800492e:	d101      	bne.n	8004934 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004930:	2302      	movs	r3, #2
 8004932:	e032      	b.n	800499a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2240      	movs	r2, #64	; 0x40
 8004938:	2101      	movs	r1, #1
 800493a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2241      	movs	r2, #65	; 0x41
 8004940:	2124      	movs	r1, #36	; 0x24
 8004942:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	2101      	movs	r1, #1
 8004950:	438a      	bics	r2, r1
 8004952:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4911      	ldr	r1, [pc, #68]	; (80049a4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004960:	400a      	ands	r2, r1
 8004962:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	6819      	ldr	r1, [r3, #0]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	683a      	ldr	r2, [r7, #0]
 8004970:	430a      	orrs	r2, r1
 8004972:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	2101      	movs	r1, #1
 8004980:	430a      	orrs	r2, r1
 8004982:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2241      	movs	r2, #65	; 0x41
 8004988:	2120      	movs	r1, #32
 800498a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2240      	movs	r2, #64	; 0x40
 8004990:	2100      	movs	r1, #0
 8004992:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004994:	2300      	movs	r3, #0
 8004996:	e000      	b.n	800499a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004998:	2302      	movs	r3, #2
  }
}
 800499a:	0018      	movs	r0, r3
 800499c:	46bd      	mov	sp, r7
 800499e:	b002      	add	sp, #8
 80049a0:	bd80      	pop	{r7, pc}
 80049a2:	46c0      	nop			; (mov r8, r8)
 80049a4:	ffffefff 	.word	0xffffefff

080049a8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b084      	sub	sp, #16
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
 80049b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2241      	movs	r2, #65	; 0x41
 80049b6:	5c9b      	ldrb	r3, [r3, r2]
 80049b8:	b2db      	uxtb	r3, r3
 80049ba:	2b20      	cmp	r3, #32
 80049bc:	d139      	bne.n	8004a32 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2240      	movs	r2, #64	; 0x40
 80049c2:	5c9b      	ldrb	r3, [r3, r2]
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d101      	bne.n	80049cc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80049c8:	2302      	movs	r3, #2
 80049ca:	e033      	b.n	8004a34 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2240      	movs	r2, #64	; 0x40
 80049d0:	2101      	movs	r1, #1
 80049d2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2241      	movs	r2, #65	; 0x41
 80049d8:	2124      	movs	r1, #36	; 0x24
 80049da:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	2101      	movs	r1, #1
 80049e8:	438a      	bics	r2, r1
 80049ea:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	4a11      	ldr	r2, [pc, #68]	; (8004a3c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80049f8:	4013      	ands	r3, r2
 80049fa:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	021b      	lsls	r3, r3, #8
 8004a00:	68fa      	ldr	r2, [r7, #12]
 8004a02:	4313      	orrs	r3, r2
 8004a04:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	68fa      	ldr	r2, [r7, #12]
 8004a0c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	2101      	movs	r1, #1
 8004a1a:	430a      	orrs	r2, r1
 8004a1c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2241      	movs	r2, #65	; 0x41
 8004a22:	2120      	movs	r1, #32
 8004a24:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2240      	movs	r2, #64	; 0x40
 8004a2a:	2100      	movs	r1, #0
 8004a2c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	e000      	b.n	8004a34 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004a32:	2302      	movs	r3, #2
  }
}
 8004a34:	0018      	movs	r0, r3
 8004a36:	46bd      	mov	sp, r7
 8004a38:	b004      	add	sp, #16
 8004a3a:	bd80      	pop	{r7, pc}
 8004a3c:	fffff0ff 	.word	0xfffff0ff

08004a40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a40:	b5b0      	push	{r4, r5, r7, lr}
 8004a42:	b08a      	sub	sp, #40	; 0x28
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d102      	bne.n	8004a54 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	f000 fbbf 	bl	80051d2 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a54:	4bc9      	ldr	r3, [pc, #804]	; (8004d7c <HAL_RCC_OscConfig+0x33c>)
 8004a56:	68db      	ldr	r3, [r3, #12]
 8004a58:	220c      	movs	r2, #12
 8004a5a:	4013      	ands	r3, r2
 8004a5c:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a5e:	4bc7      	ldr	r3, [pc, #796]	; (8004d7c <HAL_RCC_OscConfig+0x33c>)
 8004a60:	68da      	ldr	r2, [r3, #12]
 8004a62:	2380      	movs	r3, #128	; 0x80
 8004a64:	025b      	lsls	r3, r3, #9
 8004a66:	4013      	ands	r3, r2
 8004a68:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	4013      	ands	r3, r2
 8004a72:	d100      	bne.n	8004a76 <HAL_RCC_OscConfig+0x36>
 8004a74:	e07e      	b.n	8004b74 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a76:	69fb      	ldr	r3, [r7, #28]
 8004a78:	2b08      	cmp	r3, #8
 8004a7a:	d007      	beq.n	8004a8c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004a7c:	69fb      	ldr	r3, [r7, #28]
 8004a7e:	2b0c      	cmp	r3, #12
 8004a80:	d112      	bne.n	8004aa8 <HAL_RCC_OscConfig+0x68>
 8004a82:	69ba      	ldr	r2, [r7, #24]
 8004a84:	2380      	movs	r3, #128	; 0x80
 8004a86:	025b      	lsls	r3, r3, #9
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	d10d      	bne.n	8004aa8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a8c:	4bbb      	ldr	r3, [pc, #748]	; (8004d7c <HAL_RCC_OscConfig+0x33c>)
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	2380      	movs	r3, #128	; 0x80
 8004a92:	029b      	lsls	r3, r3, #10
 8004a94:	4013      	ands	r3, r2
 8004a96:	d100      	bne.n	8004a9a <HAL_RCC_OscConfig+0x5a>
 8004a98:	e06b      	b.n	8004b72 <HAL_RCC_OscConfig+0x132>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d167      	bne.n	8004b72 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	f000 fb95 	bl	80051d2 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	685a      	ldr	r2, [r3, #4]
 8004aac:	2380      	movs	r3, #128	; 0x80
 8004aae:	025b      	lsls	r3, r3, #9
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	d107      	bne.n	8004ac4 <HAL_RCC_OscConfig+0x84>
 8004ab4:	4bb1      	ldr	r3, [pc, #708]	; (8004d7c <HAL_RCC_OscConfig+0x33c>)
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	4bb0      	ldr	r3, [pc, #704]	; (8004d7c <HAL_RCC_OscConfig+0x33c>)
 8004aba:	2180      	movs	r1, #128	; 0x80
 8004abc:	0249      	lsls	r1, r1, #9
 8004abe:	430a      	orrs	r2, r1
 8004ac0:	601a      	str	r2, [r3, #0]
 8004ac2:	e027      	b.n	8004b14 <HAL_RCC_OscConfig+0xd4>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	685a      	ldr	r2, [r3, #4]
 8004ac8:	23a0      	movs	r3, #160	; 0xa0
 8004aca:	02db      	lsls	r3, r3, #11
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d10e      	bne.n	8004aee <HAL_RCC_OscConfig+0xae>
 8004ad0:	4baa      	ldr	r3, [pc, #680]	; (8004d7c <HAL_RCC_OscConfig+0x33c>)
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	4ba9      	ldr	r3, [pc, #676]	; (8004d7c <HAL_RCC_OscConfig+0x33c>)
 8004ad6:	2180      	movs	r1, #128	; 0x80
 8004ad8:	02c9      	lsls	r1, r1, #11
 8004ada:	430a      	orrs	r2, r1
 8004adc:	601a      	str	r2, [r3, #0]
 8004ade:	4ba7      	ldr	r3, [pc, #668]	; (8004d7c <HAL_RCC_OscConfig+0x33c>)
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	4ba6      	ldr	r3, [pc, #664]	; (8004d7c <HAL_RCC_OscConfig+0x33c>)
 8004ae4:	2180      	movs	r1, #128	; 0x80
 8004ae6:	0249      	lsls	r1, r1, #9
 8004ae8:	430a      	orrs	r2, r1
 8004aea:	601a      	str	r2, [r3, #0]
 8004aec:	e012      	b.n	8004b14 <HAL_RCC_OscConfig+0xd4>
 8004aee:	4ba3      	ldr	r3, [pc, #652]	; (8004d7c <HAL_RCC_OscConfig+0x33c>)
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	4ba2      	ldr	r3, [pc, #648]	; (8004d7c <HAL_RCC_OscConfig+0x33c>)
 8004af4:	49a2      	ldr	r1, [pc, #648]	; (8004d80 <HAL_RCC_OscConfig+0x340>)
 8004af6:	400a      	ands	r2, r1
 8004af8:	601a      	str	r2, [r3, #0]
 8004afa:	4ba0      	ldr	r3, [pc, #640]	; (8004d7c <HAL_RCC_OscConfig+0x33c>)
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	2380      	movs	r3, #128	; 0x80
 8004b00:	025b      	lsls	r3, r3, #9
 8004b02:	4013      	ands	r3, r2
 8004b04:	60fb      	str	r3, [r7, #12]
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	4b9c      	ldr	r3, [pc, #624]	; (8004d7c <HAL_RCC_OscConfig+0x33c>)
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	4b9b      	ldr	r3, [pc, #620]	; (8004d7c <HAL_RCC_OscConfig+0x33c>)
 8004b0e:	499d      	ldr	r1, [pc, #628]	; (8004d84 <HAL_RCC_OscConfig+0x344>)
 8004b10:	400a      	ands	r2, r1
 8004b12:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d015      	beq.n	8004b48 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b1c:	f7fe fba6 	bl	800326c <HAL_GetTick>
 8004b20:	0003      	movs	r3, r0
 8004b22:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004b24:	e009      	b.n	8004b3a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b26:	f7fe fba1 	bl	800326c <HAL_GetTick>
 8004b2a:	0002      	movs	r2, r0
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	1ad3      	subs	r3, r2, r3
 8004b30:	2b64      	cmp	r3, #100	; 0x64
 8004b32:	d902      	bls.n	8004b3a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004b34:	2303      	movs	r3, #3
 8004b36:	f000 fb4c 	bl	80051d2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004b3a:	4b90      	ldr	r3, [pc, #576]	; (8004d7c <HAL_RCC_OscConfig+0x33c>)
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	2380      	movs	r3, #128	; 0x80
 8004b40:	029b      	lsls	r3, r3, #10
 8004b42:	4013      	ands	r3, r2
 8004b44:	d0ef      	beq.n	8004b26 <HAL_RCC_OscConfig+0xe6>
 8004b46:	e015      	b.n	8004b74 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b48:	f7fe fb90 	bl	800326c <HAL_GetTick>
 8004b4c:	0003      	movs	r3, r0
 8004b4e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004b50:	e008      	b.n	8004b64 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b52:	f7fe fb8b 	bl	800326c <HAL_GetTick>
 8004b56:	0002      	movs	r2, r0
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	1ad3      	subs	r3, r2, r3
 8004b5c:	2b64      	cmp	r3, #100	; 0x64
 8004b5e:	d901      	bls.n	8004b64 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8004b60:	2303      	movs	r3, #3
 8004b62:	e336      	b.n	80051d2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004b64:	4b85      	ldr	r3, [pc, #532]	; (8004d7c <HAL_RCC_OscConfig+0x33c>)
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	2380      	movs	r3, #128	; 0x80
 8004b6a:	029b      	lsls	r3, r3, #10
 8004b6c:	4013      	ands	r3, r2
 8004b6e:	d1f0      	bne.n	8004b52 <HAL_RCC_OscConfig+0x112>
 8004b70:	e000      	b.n	8004b74 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b72:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	2202      	movs	r2, #2
 8004b7a:	4013      	ands	r3, r2
 8004b7c:	d100      	bne.n	8004b80 <HAL_RCC_OscConfig+0x140>
 8004b7e:	e099      	b.n	8004cb4 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8004b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b88:	2220      	movs	r2, #32
 8004b8a:	4013      	ands	r3, r2
 8004b8c:	d009      	beq.n	8004ba2 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8004b8e:	4b7b      	ldr	r3, [pc, #492]	; (8004d7c <HAL_RCC_OscConfig+0x33c>)
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	4b7a      	ldr	r3, [pc, #488]	; (8004d7c <HAL_RCC_OscConfig+0x33c>)
 8004b94:	2120      	movs	r1, #32
 8004b96:	430a      	orrs	r2, r1
 8004b98:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8004b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b9c:	2220      	movs	r2, #32
 8004b9e:	4393      	bics	r3, r2
 8004ba0:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004ba2:	69fb      	ldr	r3, [r7, #28]
 8004ba4:	2b04      	cmp	r3, #4
 8004ba6:	d005      	beq.n	8004bb4 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004ba8:	69fb      	ldr	r3, [r7, #28]
 8004baa:	2b0c      	cmp	r3, #12
 8004bac:	d13e      	bne.n	8004c2c <HAL_RCC_OscConfig+0x1ec>
 8004bae:	69bb      	ldr	r3, [r7, #24]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d13b      	bne.n	8004c2c <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8004bb4:	4b71      	ldr	r3, [pc, #452]	; (8004d7c <HAL_RCC_OscConfig+0x33c>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	2204      	movs	r2, #4
 8004bba:	4013      	ands	r3, r2
 8004bbc:	d004      	beq.n	8004bc8 <HAL_RCC_OscConfig+0x188>
 8004bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d101      	bne.n	8004bc8 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	e304      	b.n	80051d2 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bc8:	4b6c      	ldr	r3, [pc, #432]	; (8004d7c <HAL_RCC_OscConfig+0x33c>)
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	4a6e      	ldr	r2, [pc, #440]	; (8004d88 <HAL_RCC_OscConfig+0x348>)
 8004bce:	4013      	ands	r3, r2
 8004bd0:	0019      	movs	r1, r3
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	691b      	ldr	r3, [r3, #16]
 8004bd6:	021a      	lsls	r2, r3, #8
 8004bd8:	4b68      	ldr	r3, [pc, #416]	; (8004d7c <HAL_RCC_OscConfig+0x33c>)
 8004bda:	430a      	orrs	r2, r1
 8004bdc:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004bde:	4b67      	ldr	r3, [pc, #412]	; (8004d7c <HAL_RCC_OscConfig+0x33c>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	2209      	movs	r2, #9
 8004be4:	4393      	bics	r3, r2
 8004be6:	0019      	movs	r1, r3
 8004be8:	4b64      	ldr	r3, [pc, #400]	; (8004d7c <HAL_RCC_OscConfig+0x33c>)
 8004bea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bec:	430a      	orrs	r2, r1
 8004bee:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004bf0:	f000 fc42 	bl	8005478 <HAL_RCC_GetSysClockFreq>
 8004bf4:	0001      	movs	r1, r0
 8004bf6:	4b61      	ldr	r3, [pc, #388]	; (8004d7c <HAL_RCC_OscConfig+0x33c>)
 8004bf8:	68db      	ldr	r3, [r3, #12]
 8004bfa:	091b      	lsrs	r3, r3, #4
 8004bfc:	220f      	movs	r2, #15
 8004bfe:	4013      	ands	r3, r2
 8004c00:	4a62      	ldr	r2, [pc, #392]	; (8004d8c <HAL_RCC_OscConfig+0x34c>)
 8004c02:	5cd3      	ldrb	r3, [r2, r3]
 8004c04:	000a      	movs	r2, r1
 8004c06:	40da      	lsrs	r2, r3
 8004c08:	4b61      	ldr	r3, [pc, #388]	; (8004d90 <HAL_RCC_OscConfig+0x350>)
 8004c0a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8004c0c:	4b61      	ldr	r3, [pc, #388]	; (8004d94 <HAL_RCC_OscConfig+0x354>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	2513      	movs	r5, #19
 8004c12:	197c      	adds	r4, r7, r5
 8004c14:	0018      	movs	r0, r3
 8004c16:	f7fe fae3 	bl	80031e0 <HAL_InitTick>
 8004c1a:	0003      	movs	r3, r0
 8004c1c:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8004c1e:	197b      	adds	r3, r7, r5
 8004c20:	781b      	ldrb	r3, [r3, #0]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d046      	beq.n	8004cb4 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8004c26:	197b      	adds	r3, r7, r5
 8004c28:	781b      	ldrb	r3, [r3, #0]
 8004c2a:	e2d2      	b.n	80051d2 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8004c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d027      	beq.n	8004c82 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004c32:	4b52      	ldr	r3, [pc, #328]	; (8004d7c <HAL_RCC_OscConfig+0x33c>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	2209      	movs	r2, #9
 8004c38:	4393      	bics	r3, r2
 8004c3a:	0019      	movs	r1, r3
 8004c3c:	4b4f      	ldr	r3, [pc, #316]	; (8004d7c <HAL_RCC_OscConfig+0x33c>)
 8004c3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c40:	430a      	orrs	r2, r1
 8004c42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c44:	f7fe fb12 	bl	800326c <HAL_GetTick>
 8004c48:	0003      	movs	r3, r0
 8004c4a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004c4c:	e008      	b.n	8004c60 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c4e:	f7fe fb0d 	bl	800326c <HAL_GetTick>
 8004c52:	0002      	movs	r2, r0
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	1ad3      	subs	r3, r2, r3
 8004c58:	2b02      	cmp	r3, #2
 8004c5a:	d901      	bls.n	8004c60 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8004c5c:	2303      	movs	r3, #3
 8004c5e:	e2b8      	b.n	80051d2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004c60:	4b46      	ldr	r3, [pc, #280]	; (8004d7c <HAL_RCC_OscConfig+0x33c>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	2204      	movs	r2, #4
 8004c66:	4013      	ands	r3, r2
 8004c68:	d0f1      	beq.n	8004c4e <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c6a:	4b44      	ldr	r3, [pc, #272]	; (8004d7c <HAL_RCC_OscConfig+0x33c>)
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	4a46      	ldr	r2, [pc, #280]	; (8004d88 <HAL_RCC_OscConfig+0x348>)
 8004c70:	4013      	ands	r3, r2
 8004c72:	0019      	movs	r1, r3
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	691b      	ldr	r3, [r3, #16]
 8004c78:	021a      	lsls	r2, r3, #8
 8004c7a:	4b40      	ldr	r3, [pc, #256]	; (8004d7c <HAL_RCC_OscConfig+0x33c>)
 8004c7c:	430a      	orrs	r2, r1
 8004c7e:	605a      	str	r2, [r3, #4]
 8004c80:	e018      	b.n	8004cb4 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c82:	4b3e      	ldr	r3, [pc, #248]	; (8004d7c <HAL_RCC_OscConfig+0x33c>)
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	4b3d      	ldr	r3, [pc, #244]	; (8004d7c <HAL_RCC_OscConfig+0x33c>)
 8004c88:	2101      	movs	r1, #1
 8004c8a:	438a      	bics	r2, r1
 8004c8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c8e:	f7fe faed 	bl	800326c <HAL_GetTick>
 8004c92:	0003      	movs	r3, r0
 8004c94:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004c96:	e008      	b.n	8004caa <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c98:	f7fe fae8 	bl	800326c <HAL_GetTick>
 8004c9c:	0002      	movs	r2, r0
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	1ad3      	subs	r3, r2, r3
 8004ca2:	2b02      	cmp	r3, #2
 8004ca4:	d901      	bls.n	8004caa <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8004ca6:	2303      	movs	r3, #3
 8004ca8:	e293      	b.n	80051d2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004caa:	4b34      	ldr	r3, [pc, #208]	; (8004d7c <HAL_RCC_OscConfig+0x33c>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	2204      	movs	r2, #4
 8004cb0:	4013      	ands	r3, r2
 8004cb2:	d1f1      	bne.n	8004c98 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	2210      	movs	r2, #16
 8004cba:	4013      	ands	r3, r2
 8004cbc:	d100      	bne.n	8004cc0 <HAL_RCC_OscConfig+0x280>
 8004cbe:	e0a2      	b.n	8004e06 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004cc0:	69fb      	ldr	r3, [r7, #28]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d140      	bne.n	8004d48 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004cc6:	4b2d      	ldr	r3, [pc, #180]	; (8004d7c <HAL_RCC_OscConfig+0x33c>)
 8004cc8:	681a      	ldr	r2, [r3, #0]
 8004cca:	2380      	movs	r3, #128	; 0x80
 8004ccc:	009b      	lsls	r3, r3, #2
 8004cce:	4013      	ands	r3, r2
 8004cd0:	d005      	beq.n	8004cde <HAL_RCC_OscConfig+0x29e>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	69db      	ldr	r3, [r3, #28]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d101      	bne.n	8004cde <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e279      	b.n	80051d2 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004cde:	4b27      	ldr	r3, [pc, #156]	; (8004d7c <HAL_RCC_OscConfig+0x33c>)
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	4a2d      	ldr	r2, [pc, #180]	; (8004d98 <HAL_RCC_OscConfig+0x358>)
 8004ce4:	4013      	ands	r3, r2
 8004ce6:	0019      	movs	r1, r3
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004cec:	4b23      	ldr	r3, [pc, #140]	; (8004d7c <HAL_RCC_OscConfig+0x33c>)
 8004cee:	430a      	orrs	r2, r1
 8004cf0:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004cf2:	4b22      	ldr	r3, [pc, #136]	; (8004d7c <HAL_RCC_OscConfig+0x33c>)
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	021b      	lsls	r3, r3, #8
 8004cf8:	0a19      	lsrs	r1, r3, #8
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6a1b      	ldr	r3, [r3, #32]
 8004cfe:	061a      	lsls	r2, r3, #24
 8004d00:	4b1e      	ldr	r3, [pc, #120]	; (8004d7c <HAL_RCC_OscConfig+0x33c>)
 8004d02:	430a      	orrs	r2, r1
 8004d04:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d0a:	0b5b      	lsrs	r3, r3, #13
 8004d0c:	3301      	adds	r3, #1
 8004d0e:	2280      	movs	r2, #128	; 0x80
 8004d10:	0212      	lsls	r2, r2, #8
 8004d12:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8004d14:	4b19      	ldr	r3, [pc, #100]	; (8004d7c <HAL_RCC_OscConfig+0x33c>)
 8004d16:	68db      	ldr	r3, [r3, #12]
 8004d18:	091b      	lsrs	r3, r3, #4
 8004d1a:	210f      	movs	r1, #15
 8004d1c:	400b      	ands	r3, r1
 8004d1e:	491b      	ldr	r1, [pc, #108]	; (8004d8c <HAL_RCC_OscConfig+0x34c>)
 8004d20:	5ccb      	ldrb	r3, [r1, r3]
 8004d22:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004d24:	4b1a      	ldr	r3, [pc, #104]	; (8004d90 <HAL_RCC_OscConfig+0x350>)
 8004d26:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8004d28:	4b1a      	ldr	r3, [pc, #104]	; (8004d94 <HAL_RCC_OscConfig+0x354>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	2513      	movs	r5, #19
 8004d2e:	197c      	adds	r4, r7, r5
 8004d30:	0018      	movs	r0, r3
 8004d32:	f7fe fa55 	bl	80031e0 <HAL_InitTick>
 8004d36:	0003      	movs	r3, r0
 8004d38:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8004d3a:	197b      	adds	r3, r7, r5
 8004d3c:	781b      	ldrb	r3, [r3, #0]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d061      	beq.n	8004e06 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8004d42:	197b      	adds	r3, r7, r5
 8004d44:	781b      	ldrb	r3, [r3, #0]
 8004d46:	e244      	b.n	80051d2 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	69db      	ldr	r3, [r3, #28]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d040      	beq.n	8004dd2 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004d50:	4b0a      	ldr	r3, [pc, #40]	; (8004d7c <HAL_RCC_OscConfig+0x33c>)
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	4b09      	ldr	r3, [pc, #36]	; (8004d7c <HAL_RCC_OscConfig+0x33c>)
 8004d56:	2180      	movs	r1, #128	; 0x80
 8004d58:	0049      	lsls	r1, r1, #1
 8004d5a:	430a      	orrs	r2, r1
 8004d5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d5e:	f7fe fa85 	bl	800326c <HAL_GetTick>
 8004d62:	0003      	movs	r3, r0
 8004d64:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004d66:	e019      	b.n	8004d9c <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004d68:	f7fe fa80 	bl	800326c <HAL_GetTick>
 8004d6c:	0002      	movs	r2, r0
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	1ad3      	subs	r3, r2, r3
 8004d72:	2b02      	cmp	r3, #2
 8004d74:	d912      	bls.n	8004d9c <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8004d76:	2303      	movs	r3, #3
 8004d78:	e22b      	b.n	80051d2 <HAL_RCC_OscConfig+0x792>
 8004d7a:	46c0      	nop			; (mov r8, r8)
 8004d7c:	40021000 	.word	0x40021000
 8004d80:	fffeffff 	.word	0xfffeffff
 8004d84:	fffbffff 	.word	0xfffbffff
 8004d88:	ffffe0ff 	.word	0xffffe0ff
 8004d8c:	08009e0c 	.word	0x08009e0c
 8004d90:	20000000 	.word	0x20000000
 8004d94:	20000004 	.word	0x20000004
 8004d98:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004d9c:	4bca      	ldr	r3, [pc, #808]	; (80050c8 <HAL_RCC_OscConfig+0x688>)
 8004d9e:	681a      	ldr	r2, [r3, #0]
 8004da0:	2380      	movs	r3, #128	; 0x80
 8004da2:	009b      	lsls	r3, r3, #2
 8004da4:	4013      	ands	r3, r2
 8004da6:	d0df      	beq.n	8004d68 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004da8:	4bc7      	ldr	r3, [pc, #796]	; (80050c8 <HAL_RCC_OscConfig+0x688>)
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	4ac7      	ldr	r2, [pc, #796]	; (80050cc <HAL_RCC_OscConfig+0x68c>)
 8004dae:	4013      	ands	r3, r2
 8004db0:	0019      	movs	r1, r3
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004db6:	4bc4      	ldr	r3, [pc, #784]	; (80050c8 <HAL_RCC_OscConfig+0x688>)
 8004db8:	430a      	orrs	r2, r1
 8004dba:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004dbc:	4bc2      	ldr	r3, [pc, #776]	; (80050c8 <HAL_RCC_OscConfig+0x688>)
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	021b      	lsls	r3, r3, #8
 8004dc2:	0a19      	lsrs	r1, r3, #8
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6a1b      	ldr	r3, [r3, #32]
 8004dc8:	061a      	lsls	r2, r3, #24
 8004dca:	4bbf      	ldr	r3, [pc, #764]	; (80050c8 <HAL_RCC_OscConfig+0x688>)
 8004dcc:	430a      	orrs	r2, r1
 8004dce:	605a      	str	r2, [r3, #4]
 8004dd0:	e019      	b.n	8004e06 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004dd2:	4bbd      	ldr	r3, [pc, #756]	; (80050c8 <HAL_RCC_OscConfig+0x688>)
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	4bbc      	ldr	r3, [pc, #752]	; (80050c8 <HAL_RCC_OscConfig+0x688>)
 8004dd8:	49bd      	ldr	r1, [pc, #756]	; (80050d0 <HAL_RCC_OscConfig+0x690>)
 8004dda:	400a      	ands	r2, r1
 8004ddc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dde:	f7fe fa45 	bl	800326c <HAL_GetTick>
 8004de2:	0003      	movs	r3, r0
 8004de4:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004de6:	e008      	b.n	8004dfa <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004de8:	f7fe fa40 	bl	800326c <HAL_GetTick>
 8004dec:	0002      	movs	r2, r0
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	1ad3      	subs	r3, r2, r3
 8004df2:	2b02      	cmp	r3, #2
 8004df4:	d901      	bls.n	8004dfa <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8004df6:	2303      	movs	r3, #3
 8004df8:	e1eb      	b.n	80051d2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004dfa:	4bb3      	ldr	r3, [pc, #716]	; (80050c8 <HAL_RCC_OscConfig+0x688>)
 8004dfc:	681a      	ldr	r2, [r3, #0]
 8004dfe:	2380      	movs	r3, #128	; 0x80
 8004e00:	009b      	lsls	r3, r3, #2
 8004e02:	4013      	ands	r3, r2
 8004e04:	d1f0      	bne.n	8004de8 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	2208      	movs	r2, #8
 8004e0c:	4013      	ands	r3, r2
 8004e0e:	d036      	beq.n	8004e7e <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	695b      	ldr	r3, [r3, #20]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d019      	beq.n	8004e4c <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e18:	4bab      	ldr	r3, [pc, #684]	; (80050c8 <HAL_RCC_OscConfig+0x688>)
 8004e1a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004e1c:	4baa      	ldr	r3, [pc, #680]	; (80050c8 <HAL_RCC_OscConfig+0x688>)
 8004e1e:	2101      	movs	r1, #1
 8004e20:	430a      	orrs	r2, r1
 8004e22:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e24:	f7fe fa22 	bl	800326c <HAL_GetTick>
 8004e28:	0003      	movs	r3, r0
 8004e2a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004e2c:	e008      	b.n	8004e40 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e2e:	f7fe fa1d 	bl	800326c <HAL_GetTick>
 8004e32:	0002      	movs	r2, r0
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	1ad3      	subs	r3, r2, r3
 8004e38:	2b02      	cmp	r3, #2
 8004e3a:	d901      	bls.n	8004e40 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8004e3c:	2303      	movs	r3, #3
 8004e3e:	e1c8      	b.n	80051d2 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004e40:	4ba1      	ldr	r3, [pc, #644]	; (80050c8 <HAL_RCC_OscConfig+0x688>)
 8004e42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e44:	2202      	movs	r2, #2
 8004e46:	4013      	ands	r3, r2
 8004e48:	d0f1      	beq.n	8004e2e <HAL_RCC_OscConfig+0x3ee>
 8004e4a:	e018      	b.n	8004e7e <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e4c:	4b9e      	ldr	r3, [pc, #632]	; (80050c8 <HAL_RCC_OscConfig+0x688>)
 8004e4e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004e50:	4b9d      	ldr	r3, [pc, #628]	; (80050c8 <HAL_RCC_OscConfig+0x688>)
 8004e52:	2101      	movs	r1, #1
 8004e54:	438a      	bics	r2, r1
 8004e56:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e58:	f7fe fa08 	bl	800326c <HAL_GetTick>
 8004e5c:	0003      	movs	r3, r0
 8004e5e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004e60:	e008      	b.n	8004e74 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e62:	f7fe fa03 	bl	800326c <HAL_GetTick>
 8004e66:	0002      	movs	r2, r0
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	1ad3      	subs	r3, r2, r3
 8004e6c:	2b02      	cmp	r3, #2
 8004e6e:	d901      	bls.n	8004e74 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8004e70:	2303      	movs	r3, #3
 8004e72:	e1ae      	b.n	80051d2 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004e74:	4b94      	ldr	r3, [pc, #592]	; (80050c8 <HAL_RCC_OscConfig+0x688>)
 8004e76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e78:	2202      	movs	r2, #2
 8004e7a:	4013      	ands	r3, r2
 8004e7c:	d1f1      	bne.n	8004e62 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	2204      	movs	r2, #4
 8004e84:	4013      	ands	r3, r2
 8004e86:	d100      	bne.n	8004e8a <HAL_RCC_OscConfig+0x44a>
 8004e88:	e0ae      	b.n	8004fe8 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e8a:	2023      	movs	r0, #35	; 0x23
 8004e8c:	183b      	adds	r3, r7, r0
 8004e8e:	2200      	movs	r2, #0
 8004e90:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e92:	4b8d      	ldr	r3, [pc, #564]	; (80050c8 <HAL_RCC_OscConfig+0x688>)
 8004e94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e96:	2380      	movs	r3, #128	; 0x80
 8004e98:	055b      	lsls	r3, r3, #21
 8004e9a:	4013      	ands	r3, r2
 8004e9c:	d109      	bne.n	8004eb2 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e9e:	4b8a      	ldr	r3, [pc, #552]	; (80050c8 <HAL_RCC_OscConfig+0x688>)
 8004ea0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ea2:	4b89      	ldr	r3, [pc, #548]	; (80050c8 <HAL_RCC_OscConfig+0x688>)
 8004ea4:	2180      	movs	r1, #128	; 0x80
 8004ea6:	0549      	lsls	r1, r1, #21
 8004ea8:	430a      	orrs	r2, r1
 8004eaa:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8004eac:	183b      	adds	r3, r7, r0
 8004eae:	2201      	movs	r2, #1
 8004eb0:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004eb2:	4b88      	ldr	r3, [pc, #544]	; (80050d4 <HAL_RCC_OscConfig+0x694>)
 8004eb4:	681a      	ldr	r2, [r3, #0]
 8004eb6:	2380      	movs	r3, #128	; 0x80
 8004eb8:	005b      	lsls	r3, r3, #1
 8004eba:	4013      	ands	r3, r2
 8004ebc:	d11a      	bne.n	8004ef4 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ebe:	4b85      	ldr	r3, [pc, #532]	; (80050d4 <HAL_RCC_OscConfig+0x694>)
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	4b84      	ldr	r3, [pc, #528]	; (80050d4 <HAL_RCC_OscConfig+0x694>)
 8004ec4:	2180      	movs	r1, #128	; 0x80
 8004ec6:	0049      	lsls	r1, r1, #1
 8004ec8:	430a      	orrs	r2, r1
 8004eca:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ecc:	f7fe f9ce 	bl	800326c <HAL_GetTick>
 8004ed0:	0003      	movs	r3, r0
 8004ed2:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ed4:	e008      	b.n	8004ee8 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ed6:	f7fe f9c9 	bl	800326c <HAL_GetTick>
 8004eda:	0002      	movs	r2, r0
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	1ad3      	subs	r3, r2, r3
 8004ee0:	2b64      	cmp	r3, #100	; 0x64
 8004ee2:	d901      	bls.n	8004ee8 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8004ee4:	2303      	movs	r3, #3
 8004ee6:	e174      	b.n	80051d2 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ee8:	4b7a      	ldr	r3, [pc, #488]	; (80050d4 <HAL_RCC_OscConfig+0x694>)
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	2380      	movs	r3, #128	; 0x80
 8004eee:	005b      	lsls	r3, r3, #1
 8004ef0:	4013      	ands	r3, r2
 8004ef2:	d0f0      	beq.n	8004ed6 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	689a      	ldr	r2, [r3, #8]
 8004ef8:	2380      	movs	r3, #128	; 0x80
 8004efa:	005b      	lsls	r3, r3, #1
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d107      	bne.n	8004f10 <HAL_RCC_OscConfig+0x4d0>
 8004f00:	4b71      	ldr	r3, [pc, #452]	; (80050c8 <HAL_RCC_OscConfig+0x688>)
 8004f02:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004f04:	4b70      	ldr	r3, [pc, #448]	; (80050c8 <HAL_RCC_OscConfig+0x688>)
 8004f06:	2180      	movs	r1, #128	; 0x80
 8004f08:	0049      	lsls	r1, r1, #1
 8004f0a:	430a      	orrs	r2, r1
 8004f0c:	651a      	str	r2, [r3, #80]	; 0x50
 8004f0e:	e031      	b.n	8004f74 <HAL_RCC_OscConfig+0x534>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d10c      	bne.n	8004f32 <HAL_RCC_OscConfig+0x4f2>
 8004f18:	4b6b      	ldr	r3, [pc, #428]	; (80050c8 <HAL_RCC_OscConfig+0x688>)
 8004f1a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004f1c:	4b6a      	ldr	r3, [pc, #424]	; (80050c8 <HAL_RCC_OscConfig+0x688>)
 8004f1e:	496c      	ldr	r1, [pc, #432]	; (80050d0 <HAL_RCC_OscConfig+0x690>)
 8004f20:	400a      	ands	r2, r1
 8004f22:	651a      	str	r2, [r3, #80]	; 0x50
 8004f24:	4b68      	ldr	r3, [pc, #416]	; (80050c8 <HAL_RCC_OscConfig+0x688>)
 8004f26:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004f28:	4b67      	ldr	r3, [pc, #412]	; (80050c8 <HAL_RCC_OscConfig+0x688>)
 8004f2a:	496b      	ldr	r1, [pc, #428]	; (80050d8 <HAL_RCC_OscConfig+0x698>)
 8004f2c:	400a      	ands	r2, r1
 8004f2e:	651a      	str	r2, [r3, #80]	; 0x50
 8004f30:	e020      	b.n	8004f74 <HAL_RCC_OscConfig+0x534>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	689a      	ldr	r2, [r3, #8]
 8004f36:	23a0      	movs	r3, #160	; 0xa0
 8004f38:	00db      	lsls	r3, r3, #3
 8004f3a:	429a      	cmp	r2, r3
 8004f3c:	d10e      	bne.n	8004f5c <HAL_RCC_OscConfig+0x51c>
 8004f3e:	4b62      	ldr	r3, [pc, #392]	; (80050c8 <HAL_RCC_OscConfig+0x688>)
 8004f40:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004f42:	4b61      	ldr	r3, [pc, #388]	; (80050c8 <HAL_RCC_OscConfig+0x688>)
 8004f44:	2180      	movs	r1, #128	; 0x80
 8004f46:	00c9      	lsls	r1, r1, #3
 8004f48:	430a      	orrs	r2, r1
 8004f4a:	651a      	str	r2, [r3, #80]	; 0x50
 8004f4c:	4b5e      	ldr	r3, [pc, #376]	; (80050c8 <HAL_RCC_OscConfig+0x688>)
 8004f4e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004f50:	4b5d      	ldr	r3, [pc, #372]	; (80050c8 <HAL_RCC_OscConfig+0x688>)
 8004f52:	2180      	movs	r1, #128	; 0x80
 8004f54:	0049      	lsls	r1, r1, #1
 8004f56:	430a      	orrs	r2, r1
 8004f58:	651a      	str	r2, [r3, #80]	; 0x50
 8004f5a:	e00b      	b.n	8004f74 <HAL_RCC_OscConfig+0x534>
 8004f5c:	4b5a      	ldr	r3, [pc, #360]	; (80050c8 <HAL_RCC_OscConfig+0x688>)
 8004f5e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004f60:	4b59      	ldr	r3, [pc, #356]	; (80050c8 <HAL_RCC_OscConfig+0x688>)
 8004f62:	495b      	ldr	r1, [pc, #364]	; (80050d0 <HAL_RCC_OscConfig+0x690>)
 8004f64:	400a      	ands	r2, r1
 8004f66:	651a      	str	r2, [r3, #80]	; 0x50
 8004f68:	4b57      	ldr	r3, [pc, #348]	; (80050c8 <HAL_RCC_OscConfig+0x688>)
 8004f6a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004f6c:	4b56      	ldr	r3, [pc, #344]	; (80050c8 <HAL_RCC_OscConfig+0x688>)
 8004f6e:	495a      	ldr	r1, [pc, #360]	; (80050d8 <HAL_RCC_OscConfig+0x698>)
 8004f70:	400a      	ands	r2, r1
 8004f72:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d015      	beq.n	8004fa8 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f7c:	f7fe f976 	bl	800326c <HAL_GetTick>
 8004f80:	0003      	movs	r3, r0
 8004f82:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004f84:	e009      	b.n	8004f9a <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f86:	f7fe f971 	bl	800326c <HAL_GetTick>
 8004f8a:	0002      	movs	r2, r0
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	1ad3      	subs	r3, r2, r3
 8004f90:	4a52      	ldr	r2, [pc, #328]	; (80050dc <HAL_RCC_OscConfig+0x69c>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d901      	bls.n	8004f9a <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8004f96:	2303      	movs	r3, #3
 8004f98:	e11b      	b.n	80051d2 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004f9a:	4b4b      	ldr	r3, [pc, #300]	; (80050c8 <HAL_RCC_OscConfig+0x688>)
 8004f9c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004f9e:	2380      	movs	r3, #128	; 0x80
 8004fa0:	009b      	lsls	r3, r3, #2
 8004fa2:	4013      	ands	r3, r2
 8004fa4:	d0ef      	beq.n	8004f86 <HAL_RCC_OscConfig+0x546>
 8004fa6:	e014      	b.n	8004fd2 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fa8:	f7fe f960 	bl	800326c <HAL_GetTick>
 8004fac:	0003      	movs	r3, r0
 8004fae:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004fb0:	e009      	b.n	8004fc6 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fb2:	f7fe f95b 	bl	800326c <HAL_GetTick>
 8004fb6:	0002      	movs	r2, r0
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	1ad3      	subs	r3, r2, r3
 8004fbc:	4a47      	ldr	r2, [pc, #284]	; (80050dc <HAL_RCC_OscConfig+0x69c>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d901      	bls.n	8004fc6 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8004fc2:	2303      	movs	r3, #3
 8004fc4:	e105      	b.n	80051d2 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004fc6:	4b40      	ldr	r3, [pc, #256]	; (80050c8 <HAL_RCC_OscConfig+0x688>)
 8004fc8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004fca:	2380      	movs	r3, #128	; 0x80
 8004fcc:	009b      	lsls	r3, r3, #2
 8004fce:	4013      	ands	r3, r2
 8004fd0:	d1ef      	bne.n	8004fb2 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004fd2:	2323      	movs	r3, #35	; 0x23
 8004fd4:	18fb      	adds	r3, r7, r3
 8004fd6:	781b      	ldrb	r3, [r3, #0]
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d105      	bne.n	8004fe8 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fdc:	4b3a      	ldr	r3, [pc, #232]	; (80050c8 <HAL_RCC_OscConfig+0x688>)
 8004fde:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004fe0:	4b39      	ldr	r3, [pc, #228]	; (80050c8 <HAL_RCC_OscConfig+0x688>)
 8004fe2:	493f      	ldr	r1, [pc, #252]	; (80050e0 <HAL_RCC_OscConfig+0x6a0>)
 8004fe4:	400a      	ands	r2, r1
 8004fe6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	2220      	movs	r2, #32
 8004fee:	4013      	ands	r3, r2
 8004ff0:	d049      	beq.n	8005086 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	699b      	ldr	r3, [r3, #24]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d026      	beq.n	8005048 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8004ffa:	4b33      	ldr	r3, [pc, #204]	; (80050c8 <HAL_RCC_OscConfig+0x688>)
 8004ffc:	689a      	ldr	r2, [r3, #8]
 8004ffe:	4b32      	ldr	r3, [pc, #200]	; (80050c8 <HAL_RCC_OscConfig+0x688>)
 8005000:	2101      	movs	r1, #1
 8005002:	430a      	orrs	r2, r1
 8005004:	609a      	str	r2, [r3, #8]
 8005006:	4b30      	ldr	r3, [pc, #192]	; (80050c8 <HAL_RCC_OscConfig+0x688>)
 8005008:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800500a:	4b2f      	ldr	r3, [pc, #188]	; (80050c8 <HAL_RCC_OscConfig+0x688>)
 800500c:	2101      	movs	r1, #1
 800500e:	430a      	orrs	r2, r1
 8005010:	635a      	str	r2, [r3, #52]	; 0x34
 8005012:	4b34      	ldr	r3, [pc, #208]	; (80050e4 <HAL_RCC_OscConfig+0x6a4>)
 8005014:	6a1a      	ldr	r2, [r3, #32]
 8005016:	4b33      	ldr	r3, [pc, #204]	; (80050e4 <HAL_RCC_OscConfig+0x6a4>)
 8005018:	2180      	movs	r1, #128	; 0x80
 800501a:	0189      	lsls	r1, r1, #6
 800501c:	430a      	orrs	r2, r1
 800501e:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005020:	f7fe f924 	bl	800326c <HAL_GetTick>
 8005024:	0003      	movs	r3, r0
 8005026:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005028:	e008      	b.n	800503c <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800502a:	f7fe f91f 	bl	800326c <HAL_GetTick>
 800502e:	0002      	movs	r2, r0
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	1ad3      	subs	r3, r2, r3
 8005034:	2b02      	cmp	r3, #2
 8005036:	d901      	bls.n	800503c <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8005038:	2303      	movs	r3, #3
 800503a:	e0ca      	b.n	80051d2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800503c:	4b22      	ldr	r3, [pc, #136]	; (80050c8 <HAL_RCC_OscConfig+0x688>)
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	2202      	movs	r2, #2
 8005042:	4013      	ands	r3, r2
 8005044:	d0f1      	beq.n	800502a <HAL_RCC_OscConfig+0x5ea>
 8005046:	e01e      	b.n	8005086 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8005048:	4b1f      	ldr	r3, [pc, #124]	; (80050c8 <HAL_RCC_OscConfig+0x688>)
 800504a:	689a      	ldr	r2, [r3, #8]
 800504c:	4b1e      	ldr	r3, [pc, #120]	; (80050c8 <HAL_RCC_OscConfig+0x688>)
 800504e:	2101      	movs	r1, #1
 8005050:	438a      	bics	r2, r1
 8005052:	609a      	str	r2, [r3, #8]
 8005054:	4b23      	ldr	r3, [pc, #140]	; (80050e4 <HAL_RCC_OscConfig+0x6a4>)
 8005056:	6a1a      	ldr	r2, [r3, #32]
 8005058:	4b22      	ldr	r3, [pc, #136]	; (80050e4 <HAL_RCC_OscConfig+0x6a4>)
 800505a:	4923      	ldr	r1, [pc, #140]	; (80050e8 <HAL_RCC_OscConfig+0x6a8>)
 800505c:	400a      	ands	r2, r1
 800505e:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005060:	f7fe f904 	bl	800326c <HAL_GetTick>
 8005064:	0003      	movs	r3, r0
 8005066:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005068:	e008      	b.n	800507c <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800506a:	f7fe f8ff 	bl	800326c <HAL_GetTick>
 800506e:	0002      	movs	r2, r0
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	1ad3      	subs	r3, r2, r3
 8005074:	2b02      	cmp	r3, #2
 8005076:	d901      	bls.n	800507c <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8005078:	2303      	movs	r3, #3
 800507a:	e0aa      	b.n	80051d2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800507c:	4b12      	ldr	r3, [pc, #72]	; (80050c8 <HAL_RCC_OscConfig+0x688>)
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	2202      	movs	r2, #2
 8005082:	4013      	ands	r3, r2
 8005084:	d1f1      	bne.n	800506a <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800508a:	2b00      	cmp	r3, #0
 800508c:	d100      	bne.n	8005090 <HAL_RCC_OscConfig+0x650>
 800508e:	e09f      	b.n	80051d0 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005090:	69fb      	ldr	r3, [r7, #28]
 8005092:	2b0c      	cmp	r3, #12
 8005094:	d100      	bne.n	8005098 <HAL_RCC_OscConfig+0x658>
 8005096:	e078      	b.n	800518a <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800509c:	2b02      	cmp	r3, #2
 800509e:	d159      	bne.n	8005154 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050a0:	4b09      	ldr	r3, [pc, #36]	; (80050c8 <HAL_RCC_OscConfig+0x688>)
 80050a2:	681a      	ldr	r2, [r3, #0]
 80050a4:	4b08      	ldr	r3, [pc, #32]	; (80050c8 <HAL_RCC_OscConfig+0x688>)
 80050a6:	4911      	ldr	r1, [pc, #68]	; (80050ec <HAL_RCC_OscConfig+0x6ac>)
 80050a8:	400a      	ands	r2, r1
 80050aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050ac:	f7fe f8de 	bl	800326c <HAL_GetTick>
 80050b0:	0003      	movs	r3, r0
 80050b2:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80050b4:	e01c      	b.n	80050f0 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050b6:	f7fe f8d9 	bl	800326c <HAL_GetTick>
 80050ba:	0002      	movs	r2, r0
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	1ad3      	subs	r3, r2, r3
 80050c0:	2b02      	cmp	r3, #2
 80050c2:	d915      	bls.n	80050f0 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 80050c4:	2303      	movs	r3, #3
 80050c6:	e084      	b.n	80051d2 <HAL_RCC_OscConfig+0x792>
 80050c8:	40021000 	.word	0x40021000
 80050cc:	ffff1fff 	.word	0xffff1fff
 80050d0:	fffffeff 	.word	0xfffffeff
 80050d4:	40007000 	.word	0x40007000
 80050d8:	fffffbff 	.word	0xfffffbff
 80050dc:	00001388 	.word	0x00001388
 80050e0:	efffffff 	.word	0xefffffff
 80050e4:	40010000 	.word	0x40010000
 80050e8:	ffffdfff 	.word	0xffffdfff
 80050ec:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80050f0:	4b3a      	ldr	r3, [pc, #232]	; (80051dc <HAL_RCC_OscConfig+0x79c>)
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	2380      	movs	r3, #128	; 0x80
 80050f6:	049b      	lsls	r3, r3, #18
 80050f8:	4013      	ands	r3, r2
 80050fa:	d1dc      	bne.n	80050b6 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80050fc:	4b37      	ldr	r3, [pc, #220]	; (80051dc <HAL_RCC_OscConfig+0x79c>)
 80050fe:	68db      	ldr	r3, [r3, #12]
 8005100:	4a37      	ldr	r2, [pc, #220]	; (80051e0 <HAL_RCC_OscConfig+0x7a0>)
 8005102:	4013      	ands	r3, r2
 8005104:	0019      	movs	r1, r3
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800510e:	431a      	orrs	r2, r3
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005114:	431a      	orrs	r2, r3
 8005116:	4b31      	ldr	r3, [pc, #196]	; (80051dc <HAL_RCC_OscConfig+0x79c>)
 8005118:	430a      	orrs	r2, r1
 800511a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800511c:	4b2f      	ldr	r3, [pc, #188]	; (80051dc <HAL_RCC_OscConfig+0x79c>)
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	4b2e      	ldr	r3, [pc, #184]	; (80051dc <HAL_RCC_OscConfig+0x79c>)
 8005122:	2180      	movs	r1, #128	; 0x80
 8005124:	0449      	lsls	r1, r1, #17
 8005126:	430a      	orrs	r2, r1
 8005128:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800512a:	f7fe f89f 	bl	800326c <HAL_GetTick>
 800512e:	0003      	movs	r3, r0
 8005130:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8005132:	e008      	b.n	8005146 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005134:	f7fe f89a 	bl	800326c <HAL_GetTick>
 8005138:	0002      	movs	r2, r0
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	1ad3      	subs	r3, r2, r3
 800513e:	2b02      	cmp	r3, #2
 8005140:	d901      	bls.n	8005146 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8005142:	2303      	movs	r3, #3
 8005144:	e045      	b.n	80051d2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8005146:	4b25      	ldr	r3, [pc, #148]	; (80051dc <HAL_RCC_OscConfig+0x79c>)
 8005148:	681a      	ldr	r2, [r3, #0]
 800514a:	2380      	movs	r3, #128	; 0x80
 800514c:	049b      	lsls	r3, r3, #18
 800514e:	4013      	ands	r3, r2
 8005150:	d0f0      	beq.n	8005134 <HAL_RCC_OscConfig+0x6f4>
 8005152:	e03d      	b.n	80051d0 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005154:	4b21      	ldr	r3, [pc, #132]	; (80051dc <HAL_RCC_OscConfig+0x79c>)
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	4b20      	ldr	r3, [pc, #128]	; (80051dc <HAL_RCC_OscConfig+0x79c>)
 800515a:	4922      	ldr	r1, [pc, #136]	; (80051e4 <HAL_RCC_OscConfig+0x7a4>)
 800515c:	400a      	ands	r2, r1
 800515e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005160:	f7fe f884 	bl	800326c <HAL_GetTick>
 8005164:	0003      	movs	r3, r0
 8005166:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005168:	e008      	b.n	800517c <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800516a:	f7fe f87f 	bl	800326c <HAL_GetTick>
 800516e:	0002      	movs	r2, r0
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	1ad3      	subs	r3, r2, r3
 8005174:	2b02      	cmp	r3, #2
 8005176:	d901      	bls.n	800517c <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8005178:	2303      	movs	r3, #3
 800517a:	e02a      	b.n	80051d2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800517c:	4b17      	ldr	r3, [pc, #92]	; (80051dc <HAL_RCC_OscConfig+0x79c>)
 800517e:	681a      	ldr	r2, [r3, #0]
 8005180:	2380      	movs	r3, #128	; 0x80
 8005182:	049b      	lsls	r3, r3, #18
 8005184:	4013      	ands	r3, r2
 8005186:	d1f0      	bne.n	800516a <HAL_RCC_OscConfig+0x72a>
 8005188:	e022      	b.n	80051d0 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800518e:	2b01      	cmp	r3, #1
 8005190:	d101      	bne.n	8005196 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	e01d      	b.n	80051d2 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005196:	4b11      	ldr	r3, [pc, #68]	; (80051dc <HAL_RCC_OscConfig+0x79c>)
 8005198:	68db      	ldr	r3, [r3, #12]
 800519a:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800519c:	69ba      	ldr	r2, [r7, #24]
 800519e:	2380      	movs	r3, #128	; 0x80
 80051a0:	025b      	lsls	r3, r3, #9
 80051a2:	401a      	ands	r2, r3
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051a8:	429a      	cmp	r2, r3
 80051aa:	d10f      	bne.n	80051cc <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80051ac:	69ba      	ldr	r2, [r7, #24]
 80051ae:	23f0      	movs	r3, #240	; 0xf0
 80051b0:	039b      	lsls	r3, r3, #14
 80051b2:	401a      	ands	r2, r3
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051b8:	429a      	cmp	r2, r3
 80051ba:	d107      	bne.n	80051cc <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80051bc:	69ba      	ldr	r2, [r7, #24]
 80051be:	23c0      	movs	r3, #192	; 0xc0
 80051c0:	041b      	lsls	r3, r3, #16
 80051c2:	401a      	ands	r2, r3
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d001      	beq.n	80051d0 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 80051cc:	2301      	movs	r3, #1
 80051ce:	e000      	b.n	80051d2 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 80051d0:	2300      	movs	r3, #0
}
 80051d2:	0018      	movs	r0, r3
 80051d4:	46bd      	mov	sp, r7
 80051d6:	b00a      	add	sp, #40	; 0x28
 80051d8:	bdb0      	pop	{r4, r5, r7, pc}
 80051da:	46c0      	nop			; (mov r8, r8)
 80051dc:	40021000 	.word	0x40021000
 80051e0:	ff02ffff 	.word	0xff02ffff
 80051e4:	feffffff 	.word	0xfeffffff

080051e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80051e8:	b5b0      	push	{r4, r5, r7, lr}
 80051ea:	b084      	sub	sp, #16
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
 80051f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d101      	bne.n	80051fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80051f8:	2301      	movs	r3, #1
 80051fa:	e128      	b.n	800544e <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80051fc:	4b96      	ldr	r3, [pc, #600]	; (8005458 <HAL_RCC_ClockConfig+0x270>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	2201      	movs	r2, #1
 8005202:	4013      	ands	r3, r2
 8005204:	683a      	ldr	r2, [r7, #0]
 8005206:	429a      	cmp	r2, r3
 8005208:	d91e      	bls.n	8005248 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800520a:	4b93      	ldr	r3, [pc, #588]	; (8005458 <HAL_RCC_ClockConfig+0x270>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	2201      	movs	r2, #1
 8005210:	4393      	bics	r3, r2
 8005212:	0019      	movs	r1, r3
 8005214:	4b90      	ldr	r3, [pc, #576]	; (8005458 <HAL_RCC_ClockConfig+0x270>)
 8005216:	683a      	ldr	r2, [r7, #0]
 8005218:	430a      	orrs	r2, r1
 800521a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800521c:	f7fe f826 	bl	800326c <HAL_GetTick>
 8005220:	0003      	movs	r3, r0
 8005222:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005224:	e009      	b.n	800523a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005226:	f7fe f821 	bl	800326c <HAL_GetTick>
 800522a:	0002      	movs	r2, r0
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	1ad3      	subs	r3, r2, r3
 8005230:	4a8a      	ldr	r2, [pc, #552]	; (800545c <HAL_RCC_ClockConfig+0x274>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d901      	bls.n	800523a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8005236:	2303      	movs	r3, #3
 8005238:	e109      	b.n	800544e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800523a:	4b87      	ldr	r3, [pc, #540]	; (8005458 <HAL_RCC_ClockConfig+0x270>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	2201      	movs	r2, #1
 8005240:	4013      	ands	r3, r2
 8005242:	683a      	ldr	r2, [r7, #0]
 8005244:	429a      	cmp	r2, r3
 8005246:	d1ee      	bne.n	8005226 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	2202      	movs	r2, #2
 800524e:	4013      	ands	r3, r2
 8005250:	d009      	beq.n	8005266 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005252:	4b83      	ldr	r3, [pc, #524]	; (8005460 <HAL_RCC_ClockConfig+0x278>)
 8005254:	68db      	ldr	r3, [r3, #12]
 8005256:	22f0      	movs	r2, #240	; 0xf0
 8005258:	4393      	bics	r3, r2
 800525a:	0019      	movs	r1, r3
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	689a      	ldr	r2, [r3, #8]
 8005260:	4b7f      	ldr	r3, [pc, #508]	; (8005460 <HAL_RCC_ClockConfig+0x278>)
 8005262:	430a      	orrs	r2, r1
 8005264:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	2201      	movs	r2, #1
 800526c:	4013      	ands	r3, r2
 800526e:	d100      	bne.n	8005272 <HAL_RCC_ClockConfig+0x8a>
 8005270:	e089      	b.n	8005386 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	2b02      	cmp	r3, #2
 8005278:	d107      	bne.n	800528a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800527a:	4b79      	ldr	r3, [pc, #484]	; (8005460 <HAL_RCC_ClockConfig+0x278>)
 800527c:	681a      	ldr	r2, [r3, #0]
 800527e:	2380      	movs	r3, #128	; 0x80
 8005280:	029b      	lsls	r3, r3, #10
 8005282:	4013      	ands	r3, r2
 8005284:	d120      	bne.n	80052c8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005286:	2301      	movs	r3, #1
 8005288:	e0e1      	b.n	800544e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	2b03      	cmp	r3, #3
 8005290:	d107      	bne.n	80052a2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005292:	4b73      	ldr	r3, [pc, #460]	; (8005460 <HAL_RCC_ClockConfig+0x278>)
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	2380      	movs	r3, #128	; 0x80
 8005298:	049b      	lsls	r3, r3, #18
 800529a:	4013      	ands	r3, r2
 800529c:	d114      	bne.n	80052c8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800529e:	2301      	movs	r3, #1
 80052a0:	e0d5      	b.n	800544e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	2b01      	cmp	r3, #1
 80052a8:	d106      	bne.n	80052b8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80052aa:	4b6d      	ldr	r3, [pc, #436]	; (8005460 <HAL_RCC_ClockConfig+0x278>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	2204      	movs	r2, #4
 80052b0:	4013      	ands	r3, r2
 80052b2:	d109      	bne.n	80052c8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	e0ca      	b.n	800544e <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80052b8:	4b69      	ldr	r3, [pc, #420]	; (8005460 <HAL_RCC_ClockConfig+0x278>)
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	2380      	movs	r3, #128	; 0x80
 80052be:	009b      	lsls	r3, r3, #2
 80052c0:	4013      	ands	r3, r2
 80052c2:	d101      	bne.n	80052c8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80052c4:	2301      	movs	r3, #1
 80052c6:	e0c2      	b.n	800544e <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80052c8:	4b65      	ldr	r3, [pc, #404]	; (8005460 <HAL_RCC_ClockConfig+0x278>)
 80052ca:	68db      	ldr	r3, [r3, #12]
 80052cc:	2203      	movs	r2, #3
 80052ce:	4393      	bics	r3, r2
 80052d0:	0019      	movs	r1, r3
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	685a      	ldr	r2, [r3, #4]
 80052d6:	4b62      	ldr	r3, [pc, #392]	; (8005460 <HAL_RCC_ClockConfig+0x278>)
 80052d8:	430a      	orrs	r2, r1
 80052da:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80052dc:	f7fd ffc6 	bl	800326c <HAL_GetTick>
 80052e0:	0003      	movs	r3, r0
 80052e2:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	2b02      	cmp	r3, #2
 80052ea:	d111      	bne.n	8005310 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80052ec:	e009      	b.n	8005302 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052ee:	f7fd ffbd 	bl	800326c <HAL_GetTick>
 80052f2:	0002      	movs	r2, r0
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	1ad3      	subs	r3, r2, r3
 80052f8:	4a58      	ldr	r2, [pc, #352]	; (800545c <HAL_RCC_ClockConfig+0x274>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d901      	bls.n	8005302 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80052fe:	2303      	movs	r3, #3
 8005300:	e0a5      	b.n	800544e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005302:	4b57      	ldr	r3, [pc, #348]	; (8005460 <HAL_RCC_ClockConfig+0x278>)
 8005304:	68db      	ldr	r3, [r3, #12]
 8005306:	220c      	movs	r2, #12
 8005308:	4013      	ands	r3, r2
 800530a:	2b08      	cmp	r3, #8
 800530c:	d1ef      	bne.n	80052ee <HAL_RCC_ClockConfig+0x106>
 800530e:	e03a      	b.n	8005386 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	2b03      	cmp	r3, #3
 8005316:	d111      	bne.n	800533c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005318:	e009      	b.n	800532e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800531a:	f7fd ffa7 	bl	800326c <HAL_GetTick>
 800531e:	0002      	movs	r2, r0
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	1ad3      	subs	r3, r2, r3
 8005324:	4a4d      	ldr	r2, [pc, #308]	; (800545c <HAL_RCC_ClockConfig+0x274>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d901      	bls.n	800532e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800532a:	2303      	movs	r3, #3
 800532c:	e08f      	b.n	800544e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800532e:	4b4c      	ldr	r3, [pc, #304]	; (8005460 <HAL_RCC_ClockConfig+0x278>)
 8005330:	68db      	ldr	r3, [r3, #12]
 8005332:	220c      	movs	r2, #12
 8005334:	4013      	ands	r3, r2
 8005336:	2b0c      	cmp	r3, #12
 8005338:	d1ef      	bne.n	800531a <HAL_RCC_ClockConfig+0x132>
 800533a:	e024      	b.n	8005386 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	2b01      	cmp	r3, #1
 8005342:	d11b      	bne.n	800537c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005344:	e009      	b.n	800535a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005346:	f7fd ff91 	bl	800326c <HAL_GetTick>
 800534a:	0002      	movs	r2, r0
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	1ad3      	subs	r3, r2, r3
 8005350:	4a42      	ldr	r2, [pc, #264]	; (800545c <HAL_RCC_ClockConfig+0x274>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d901      	bls.n	800535a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8005356:	2303      	movs	r3, #3
 8005358:	e079      	b.n	800544e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800535a:	4b41      	ldr	r3, [pc, #260]	; (8005460 <HAL_RCC_ClockConfig+0x278>)
 800535c:	68db      	ldr	r3, [r3, #12]
 800535e:	220c      	movs	r2, #12
 8005360:	4013      	ands	r3, r2
 8005362:	2b04      	cmp	r3, #4
 8005364:	d1ef      	bne.n	8005346 <HAL_RCC_ClockConfig+0x15e>
 8005366:	e00e      	b.n	8005386 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005368:	f7fd ff80 	bl	800326c <HAL_GetTick>
 800536c:	0002      	movs	r2, r0
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	1ad3      	subs	r3, r2, r3
 8005372:	4a3a      	ldr	r2, [pc, #232]	; (800545c <HAL_RCC_ClockConfig+0x274>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d901      	bls.n	800537c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8005378:	2303      	movs	r3, #3
 800537a:	e068      	b.n	800544e <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800537c:	4b38      	ldr	r3, [pc, #224]	; (8005460 <HAL_RCC_ClockConfig+0x278>)
 800537e:	68db      	ldr	r3, [r3, #12]
 8005380:	220c      	movs	r2, #12
 8005382:	4013      	ands	r3, r2
 8005384:	d1f0      	bne.n	8005368 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005386:	4b34      	ldr	r3, [pc, #208]	; (8005458 <HAL_RCC_ClockConfig+0x270>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	2201      	movs	r2, #1
 800538c:	4013      	ands	r3, r2
 800538e:	683a      	ldr	r2, [r7, #0]
 8005390:	429a      	cmp	r2, r3
 8005392:	d21e      	bcs.n	80053d2 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005394:	4b30      	ldr	r3, [pc, #192]	; (8005458 <HAL_RCC_ClockConfig+0x270>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	2201      	movs	r2, #1
 800539a:	4393      	bics	r3, r2
 800539c:	0019      	movs	r1, r3
 800539e:	4b2e      	ldr	r3, [pc, #184]	; (8005458 <HAL_RCC_ClockConfig+0x270>)
 80053a0:	683a      	ldr	r2, [r7, #0]
 80053a2:	430a      	orrs	r2, r1
 80053a4:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80053a6:	f7fd ff61 	bl	800326c <HAL_GetTick>
 80053aa:	0003      	movs	r3, r0
 80053ac:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80053ae:	e009      	b.n	80053c4 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053b0:	f7fd ff5c 	bl	800326c <HAL_GetTick>
 80053b4:	0002      	movs	r2, r0
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	1ad3      	subs	r3, r2, r3
 80053ba:	4a28      	ldr	r2, [pc, #160]	; (800545c <HAL_RCC_ClockConfig+0x274>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d901      	bls.n	80053c4 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80053c0:	2303      	movs	r3, #3
 80053c2:	e044      	b.n	800544e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80053c4:	4b24      	ldr	r3, [pc, #144]	; (8005458 <HAL_RCC_ClockConfig+0x270>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	2201      	movs	r2, #1
 80053ca:	4013      	ands	r3, r2
 80053cc:	683a      	ldr	r2, [r7, #0]
 80053ce:	429a      	cmp	r2, r3
 80053d0:	d1ee      	bne.n	80053b0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	2204      	movs	r2, #4
 80053d8:	4013      	ands	r3, r2
 80053da:	d009      	beq.n	80053f0 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80053dc:	4b20      	ldr	r3, [pc, #128]	; (8005460 <HAL_RCC_ClockConfig+0x278>)
 80053de:	68db      	ldr	r3, [r3, #12]
 80053e0:	4a20      	ldr	r2, [pc, #128]	; (8005464 <HAL_RCC_ClockConfig+0x27c>)
 80053e2:	4013      	ands	r3, r2
 80053e4:	0019      	movs	r1, r3
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	68da      	ldr	r2, [r3, #12]
 80053ea:	4b1d      	ldr	r3, [pc, #116]	; (8005460 <HAL_RCC_ClockConfig+0x278>)
 80053ec:	430a      	orrs	r2, r1
 80053ee:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	2208      	movs	r2, #8
 80053f6:	4013      	ands	r3, r2
 80053f8:	d00a      	beq.n	8005410 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80053fa:	4b19      	ldr	r3, [pc, #100]	; (8005460 <HAL_RCC_ClockConfig+0x278>)
 80053fc:	68db      	ldr	r3, [r3, #12]
 80053fe:	4a1a      	ldr	r2, [pc, #104]	; (8005468 <HAL_RCC_ClockConfig+0x280>)
 8005400:	4013      	ands	r3, r2
 8005402:	0019      	movs	r1, r3
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	691b      	ldr	r3, [r3, #16]
 8005408:	00da      	lsls	r2, r3, #3
 800540a:	4b15      	ldr	r3, [pc, #84]	; (8005460 <HAL_RCC_ClockConfig+0x278>)
 800540c:	430a      	orrs	r2, r1
 800540e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005410:	f000 f832 	bl	8005478 <HAL_RCC_GetSysClockFreq>
 8005414:	0001      	movs	r1, r0
 8005416:	4b12      	ldr	r3, [pc, #72]	; (8005460 <HAL_RCC_ClockConfig+0x278>)
 8005418:	68db      	ldr	r3, [r3, #12]
 800541a:	091b      	lsrs	r3, r3, #4
 800541c:	220f      	movs	r2, #15
 800541e:	4013      	ands	r3, r2
 8005420:	4a12      	ldr	r2, [pc, #72]	; (800546c <HAL_RCC_ClockConfig+0x284>)
 8005422:	5cd3      	ldrb	r3, [r2, r3]
 8005424:	000a      	movs	r2, r1
 8005426:	40da      	lsrs	r2, r3
 8005428:	4b11      	ldr	r3, [pc, #68]	; (8005470 <HAL_RCC_ClockConfig+0x288>)
 800542a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800542c:	4b11      	ldr	r3, [pc, #68]	; (8005474 <HAL_RCC_ClockConfig+0x28c>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	250b      	movs	r5, #11
 8005432:	197c      	adds	r4, r7, r5
 8005434:	0018      	movs	r0, r3
 8005436:	f7fd fed3 	bl	80031e0 <HAL_InitTick>
 800543a:	0003      	movs	r3, r0
 800543c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800543e:	197b      	adds	r3, r7, r5
 8005440:	781b      	ldrb	r3, [r3, #0]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d002      	beq.n	800544c <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8005446:	197b      	adds	r3, r7, r5
 8005448:	781b      	ldrb	r3, [r3, #0]
 800544a:	e000      	b.n	800544e <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 800544c:	2300      	movs	r3, #0
}
 800544e:	0018      	movs	r0, r3
 8005450:	46bd      	mov	sp, r7
 8005452:	b004      	add	sp, #16
 8005454:	bdb0      	pop	{r4, r5, r7, pc}
 8005456:	46c0      	nop			; (mov r8, r8)
 8005458:	40022000 	.word	0x40022000
 800545c:	00001388 	.word	0x00001388
 8005460:	40021000 	.word	0x40021000
 8005464:	fffff8ff 	.word	0xfffff8ff
 8005468:	ffffc7ff 	.word	0xffffc7ff
 800546c:	08009e0c 	.word	0x08009e0c
 8005470:	20000000 	.word	0x20000000
 8005474:	20000004 	.word	0x20000004

08005478 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005478:	b5b0      	push	{r4, r5, r7, lr}
 800547a:	b08e      	sub	sp, #56	; 0x38
 800547c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800547e:	4b4c      	ldr	r3, [pc, #304]	; (80055b0 <HAL_RCC_GetSysClockFreq+0x138>)
 8005480:	68db      	ldr	r3, [r3, #12]
 8005482:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005484:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005486:	230c      	movs	r3, #12
 8005488:	4013      	ands	r3, r2
 800548a:	2b0c      	cmp	r3, #12
 800548c:	d014      	beq.n	80054b8 <HAL_RCC_GetSysClockFreq+0x40>
 800548e:	d900      	bls.n	8005492 <HAL_RCC_GetSysClockFreq+0x1a>
 8005490:	e07b      	b.n	800558a <HAL_RCC_GetSysClockFreq+0x112>
 8005492:	2b04      	cmp	r3, #4
 8005494:	d002      	beq.n	800549c <HAL_RCC_GetSysClockFreq+0x24>
 8005496:	2b08      	cmp	r3, #8
 8005498:	d00b      	beq.n	80054b2 <HAL_RCC_GetSysClockFreq+0x3a>
 800549a:	e076      	b.n	800558a <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800549c:	4b44      	ldr	r3, [pc, #272]	; (80055b0 <HAL_RCC_GetSysClockFreq+0x138>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	2210      	movs	r2, #16
 80054a2:	4013      	ands	r3, r2
 80054a4:	d002      	beq.n	80054ac <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80054a6:	4b43      	ldr	r3, [pc, #268]	; (80055b4 <HAL_RCC_GetSysClockFreq+0x13c>)
 80054a8:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80054aa:	e07c      	b.n	80055a6 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80054ac:	4b42      	ldr	r3, [pc, #264]	; (80055b8 <HAL_RCC_GetSysClockFreq+0x140>)
 80054ae:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80054b0:	e079      	b.n	80055a6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80054b2:	4b42      	ldr	r3, [pc, #264]	; (80055bc <HAL_RCC_GetSysClockFreq+0x144>)
 80054b4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80054b6:	e076      	b.n	80055a6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80054b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054ba:	0c9a      	lsrs	r2, r3, #18
 80054bc:	230f      	movs	r3, #15
 80054be:	401a      	ands	r2, r3
 80054c0:	4b3f      	ldr	r3, [pc, #252]	; (80055c0 <HAL_RCC_GetSysClockFreq+0x148>)
 80054c2:	5c9b      	ldrb	r3, [r3, r2]
 80054c4:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80054c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054c8:	0d9a      	lsrs	r2, r3, #22
 80054ca:	2303      	movs	r3, #3
 80054cc:	4013      	ands	r3, r2
 80054ce:	3301      	adds	r3, #1
 80054d0:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80054d2:	4b37      	ldr	r3, [pc, #220]	; (80055b0 <HAL_RCC_GetSysClockFreq+0x138>)
 80054d4:	68da      	ldr	r2, [r3, #12]
 80054d6:	2380      	movs	r3, #128	; 0x80
 80054d8:	025b      	lsls	r3, r3, #9
 80054da:	4013      	ands	r3, r2
 80054dc:	d01a      	beq.n	8005514 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80054de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054e0:	61bb      	str	r3, [r7, #24]
 80054e2:	2300      	movs	r3, #0
 80054e4:	61fb      	str	r3, [r7, #28]
 80054e6:	4a35      	ldr	r2, [pc, #212]	; (80055bc <HAL_RCC_GetSysClockFreq+0x144>)
 80054e8:	2300      	movs	r3, #0
 80054ea:	69b8      	ldr	r0, [r7, #24]
 80054ec:	69f9      	ldr	r1, [r7, #28]
 80054ee:	f7fa fffb 	bl	80004e8 <__aeabi_lmul>
 80054f2:	0002      	movs	r2, r0
 80054f4:	000b      	movs	r3, r1
 80054f6:	0010      	movs	r0, r2
 80054f8:	0019      	movs	r1, r3
 80054fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054fc:	613b      	str	r3, [r7, #16]
 80054fe:	2300      	movs	r3, #0
 8005500:	617b      	str	r3, [r7, #20]
 8005502:	693a      	ldr	r2, [r7, #16]
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	f7fa ffcf 	bl	80004a8 <__aeabi_uldivmod>
 800550a:	0002      	movs	r2, r0
 800550c:	000b      	movs	r3, r1
 800550e:	0013      	movs	r3, r2
 8005510:	637b      	str	r3, [r7, #52]	; 0x34
 8005512:	e037      	b.n	8005584 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005514:	4b26      	ldr	r3, [pc, #152]	; (80055b0 <HAL_RCC_GetSysClockFreq+0x138>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	2210      	movs	r2, #16
 800551a:	4013      	ands	r3, r2
 800551c:	d01a      	beq.n	8005554 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800551e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005520:	60bb      	str	r3, [r7, #8]
 8005522:	2300      	movs	r3, #0
 8005524:	60fb      	str	r3, [r7, #12]
 8005526:	4a23      	ldr	r2, [pc, #140]	; (80055b4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8005528:	2300      	movs	r3, #0
 800552a:	68b8      	ldr	r0, [r7, #8]
 800552c:	68f9      	ldr	r1, [r7, #12]
 800552e:	f7fa ffdb 	bl	80004e8 <__aeabi_lmul>
 8005532:	0002      	movs	r2, r0
 8005534:	000b      	movs	r3, r1
 8005536:	0010      	movs	r0, r2
 8005538:	0019      	movs	r1, r3
 800553a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800553c:	603b      	str	r3, [r7, #0]
 800553e:	2300      	movs	r3, #0
 8005540:	607b      	str	r3, [r7, #4]
 8005542:	683a      	ldr	r2, [r7, #0]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	f7fa ffaf 	bl	80004a8 <__aeabi_uldivmod>
 800554a:	0002      	movs	r2, r0
 800554c:	000b      	movs	r3, r1
 800554e:	0013      	movs	r3, r2
 8005550:	637b      	str	r3, [r7, #52]	; 0x34
 8005552:	e017      	b.n	8005584 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005556:	0018      	movs	r0, r3
 8005558:	2300      	movs	r3, #0
 800555a:	0019      	movs	r1, r3
 800555c:	4a16      	ldr	r2, [pc, #88]	; (80055b8 <HAL_RCC_GetSysClockFreq+0x140>)
 800555e:	2300      	movs	r3, #0
 8005560:	f7fa ffc2 	bl	80004e8 <__aeabi_lmul>
 8005564:	0002      	movs	r2, r0
 8005566:	000b      	movs	r3, r1
 8005568:	0010      	movs	r0, r2
 800556a:	0019      	movs	r1, r3
 800556c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800556e:	001c      	movs	r4, r3
 8005570:	2300      	movs	r3, #0
 8005572:	001d      	movs	r5, r3
 8005574:	0022      	movs	r2, r4
 8005576:	002b      	movs	r3, r5
 8005578:	f7fa ff96 	bl	80004a8 <__aeabi_uldivmod>
 800557c:	0002      	movs	r2, r0
 800557e:	000b      	movs	r3, r1
 8005580:	0013      	movs	r3, r2
 8005582:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8005584:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005586:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005588:	e00d      	b.n	80055a6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800558a:	4b09      	ldr	r3, [pc, #36]	; (80055b0 <HAL_RCC_GetSysClockFreq+0x138>)
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	0b5b      	lsrs	r3, r3, #13
 8005590:	2207      	movs	r2, #7
 8005592:	4013      	ands	r3, r2
 8005594:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8005596:	6a3b      	ldr	r3, [r7, #32]
 8005598:	3301      	adds	r3, #1
 800559a:	2280      	movs	r2, #128	; 0x80
 800559c:	0212      	lsls	r2, r2, #8
 800559e:	409a      	lsls	r2, r3
 80055a0:	0013      	movs	r3, r2
 80055a2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80055a4:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80055a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80055a8:	0018      	movs	r0, r3
 80055aa:	46bd      	mov	sp, r7
 80055ac:	b00e      	add	sp, #56	; 0x38
 80055ae:	bdb0      	pop	{r4, r5, r7, pc}
 80055b0:	40021000 	.word	0x40021000
 80055b4:	003d0900 	.word	0x003d0900
 80055b8:	00f42400 	.word	0x00f42400
 80055bc:	007a1200 	.word	0x007a1200
 80055c0:	08009e24 	.word	0x08009e24

080055c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80055c8:	4b02      	ldr	r3, [pc, #8]	; (80055d4 <HAL_RCC_GetHCLKFreq+0x10>)
 80055ca:	681b      	ldr	r3, [r3, #0]
}
 80055cc:	0018      	movs	r0, r3
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}
 80055d2:	46c0      	nop			; (mov r8, r8)
 80055d4:	20000000 	.word	0x20000000

080055d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80055dc:	f7ff fff2 	bl	80055c4 <HAL_RCC_GetHCLKFreq>
 80055e0:	0001      	movs	r1, r0
 80055e2:	4b06      	ldr	r3, [pc, #24]	; (80055fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80055e4:	68db      	ldr	r3, [r3, #12]
 80055e6:	0a1b      	lsrs	r3, r3, #8
 80055e8:	2207      	movs	r2, #7
 80055ea:	4013      	ands	r3, r2
 80055ec:	4a04      	ldr	r2, [pc, #16]	; (8005600 <HAL_RCC_GetPCLK1Freq+0x28>)
 80055ee:	5cd3      	ldrb	r3, [r2, r3]
 80055f0:	40d9      	lsrs	r1, r3
 80055f2:	000b      	movs	r3, r1
}
 80055f4:	0018      	movs	r0, r3
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}
 80055fa:	46c0      	nop			; (mov r8, r8)
 80055fc:	40021000 	.word	0x40021000
 8005600:	08009e1c 	.word	0x08009e1c

08005604 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005608:	f7ff ffdc 	bl	80055c4 <HAL_RCC_GetHCLKFreq>
 800560c:	0001      	movs	r1, r0
 800560e:	4b06      	ldr	r3, [pc, #24]	; (8005628 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005610:	68db      	ldr	r3, [r3, #12]
 8005612:	0adb      	lsrs	r3, r3, #11
 8005614:	2207      	movs	r2, #7
 8005616:	4013      	ands	r3, r2
 8005618:	4a04      	ldr	r2, [pc, #16]	; (800562c <HAL_RCC_GetPCLK2Freq+0x28>)
 800561a:	5cd3      	ldrb	r3, [r2, r3]
 800561c:	40d9      	lsrs	r1, r3
 800561e:	000b      	movs	r3, r1
}
 8005620:	0018      	movs	r0, r3
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}
 8005626:	46c0      	nop			; (mov r8, r8)
 8005628:	40021000 	.word	0x40021000
 800562c:	08009e1c 	.word	0x08009e1c

08005630 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b086      	sub	sp, #24
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8005638:	2317      	movs	r3, #23
 800563a:	18fb      	adds	r3, r7, r3
 800563c:	2200      	movs	r2, #0
 800563e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	2220      	movs	r2, #32
 8005646:	4013      	ands	r3, r2
 8005648:	d106      	bne.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681a      	ldr	r2, [r3, #0]
 800564e:	2380      	movs	r3, #128	; 0x80
 8005650:	011b      	lsls	r3, r3, #4
 8005652:	4013      	ands	r3, r2
 8005654:	d100      	bne.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8005656:	e0d9      	b.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005658:	4ba4      	ldr	r3, [pc, #656]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800565a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800565c:	2380      	movs	r3, #128	; 0x80
 800565e:	055b      	lsls	r3, r3, #21
 8005660:	4013      	ands	r3, r2
 8005662:	d10a      	bne.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005664:	4ba1      	ldr	r3, [pc, #644]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005666:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005668:	4ba0      	ldr	r3, [pc, #640]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800566a:	2180      	movs	r1, #128	; 0x80
 800566c:	0549      	lsls	r1, r1, #21
 800566e:	430a      	orrs	r2, r1
 8005670:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8005672:	2317      	movs	r3, #23
 8005674:	18fb      	adds	r3, r7, r3
 8005676:	2201      	movs	r2, #1
 8005678:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800567a:	4b9d      	ldr	r3, [pc, #628]	; (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800567c:	681a      	ldr	r2, [r3, #0]
 800567e:	2380      	movs	r3, #128	; 0x80
 8005680:	005b      	lsls	r3, r3, #1
 8005682:	4013      	ands	r3, r2
 8005684:	d11a      	bne.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005686:	4b9a      	ldr	r3, [pc, #616]	; (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	4b99      	ldr	r3, [pc, #612]	; (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800568c:	2180      	movs	r1, #128	; 0x80
 800568e:	0049      	lsls	r1, r1, #1
 8005690:	430a      	orrs	r2, r1
 8005692:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005694:	f7fd fdea 	bl	800326c <HAL_GetTick>
 8005698:	0003      	movs	r3, r0
 800569a:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800569c:	e008      	b.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800569e:	f7fd fde5 	bl	800326c <HAL_GetTick>
 80056a2:	0002      	movs	r2, r0
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	1ad3      	subs	r3, r2, r3
 80056a8:	2b64      	cmp	r3, #100	; 0x64
 80056aa:	d901      	bls.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80056ac:	2303      	movs	r3, #3
 80056ae:	e118      	b.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056b0:	4b8f      	ldr	r3, [pc, #572]	; (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80056b2:	681a      	ldr	r2, [r3, #0]
 80056b4:	2380      	movs	r3, #128	; 0x80
 80056b6:	005b      	lsls	r3, r3, #1
 80056b8:	4013      	ands	r3, r2
 80056ba:	d0f0      	beq.n	800569e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80056bc:	4b8b      	ldr	r3, [pc, #556]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80056be:	681a      	ldr	r2, [r3, #0]
 80056c0:	23c0      	movs	r3, #192	; 0xc0
 80056c2:	039b      	lsls	r3, r3, #14
 80056c4:	4013      	ands	r3, r2
 80056c6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	685a      	ldr	r2, [r3, #4]
 80056cc:	23c0      	movs	r3, #192	; 0xc0
 80056ce:	039b      	lsls	r3, r3, #14
 80056d0:	4013      	ands	r3, r2
 80056d2:	68fa      	ldr	r2, [r7, #12]
 80056d4:	429a      	cmp	r2, r3
 80056d6:	d107      	bne.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	689a      	ldr	r2, [r3, #8]
 80056dc:	23c0      	movs	r3, #192	; 0xc0
 80056de:	039b      	lsls	r3, r3, #14
 80056e0:	4013      	ands	r3, r2
 80056e2:	68fa      	ldr	r2, [r7, #12]
 80056e4:	429a      	cmp	r2, r3
 80056e6:	d013      	beq.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	685a      	ldr	r2, [r3, #4]
 80056ec:	23c0      	movs	r3, #192	; 0xc0
 80056ee:	029b      	lsls	r3, r3, #10
 80056f0:	401a      	ands	r2, r3
 80056f2:	23c0      	movs	r3, #192	; 0xc0
 80056f4:	029b      	lsls	r3, r3, #10
 80056f6:	429a      	cmp	r2, r3
 80056f8:	d10a      	bne.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80056fa:	4b7c      	ldr	r3, [pc, #496]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80056fc:	681a      	ldr	r2, [r3, #0]
 80056fe:	2380      	movs	r3, #128	; 0x80
 8005700:	029b      	lsls	r3, r3, #10
 8005702:	401a      	ands	r2, r3
 8005704:	2380      	movs	r3, #128	; 0x80
 8005706:	029b      	lsls	r3, r3, #10
 8005708:	429a      	cmp	r2, r3
 800570a:	d101      	bne.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800570c:	2301      	movs	r3, #1
 800570e:	e0e8      	b.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8005710:	4b76      	ldr	r3, [pc, #472]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005712:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005714:	23c0      	movs	r3, #192	; 0xc0
 8005716:	029b      	lsls	r3, r3, #10
 8005718:	4013      	ands	r3, r2
 800571a:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d049      	beq.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	685a      	ldr	r2, [r3, #4]
 8005726:	23c0      	movs	r3, #192	; 0xc0
 8005728:	029b      	lsls	r3, r3, #10
 800572a:	4013      	ands	r3, r2
 800572c:	68fa      	ldr	r2, [r7, #12]
 800572e:	429a      	cmp	r2, r3
 8005730:	d004      	beq.n	800573c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	2220      	movs	r2, #32
 8005738:	4013      	ands	r3, r2
 800573a:	d10d      	bne.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	689a      	ldr	r2, [r3, #8]
 8005740:	23c0      	movs	r3, #192	; 0xc0
 8005742:	029b      	lsls	r3, r3, #10
 8005744:	4013      	ands	r3, r2
 8005746:	68fa      	ldr	r2, [r7, #12]
 8005748:	429a      	cmp	r2, r3
 800574a:	d034      	beq.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681a      	ldr	r2, [r3, #0]
 8005750:	2380      	movs	r3, #128	; 0x80
 8005752:	011b      	lsls	r3, r3, #4
 8005754:	4013      	ands	r3, r2
 8005756:	d02e      	beq.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8005758:	4b64      	ldr	r3, [pc, #400]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800575a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800575c:	4a65      	ldr	r2, [pc, #404]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800575e:	4013      	ands	r3, r2
 8005760:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005762:	4b62      	ldr	r3, [pc, #392]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005764:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005766:	4b61      	ldr	r3, [pc, #388]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005768:	2180      	movs	r1, #128	; 0x80
 800576a:	0309      	lsls	r1, r1, #12
 800576c:	430a      	orrs	r2, r1
 800576e:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005770:	4b5e      	ldr	r3, [pc, #376]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005772:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005774:	4b5d      	ldr	r3, [pc, #372]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005776:	4960      	ldr	r1, [pc, #384]	; (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8005778:	400a      	ands	r2, r1
 800577a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800577c:	4b5b      	ldr	r3, [pc, #364]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800577e:	68fa      	ldr	r2, [r7, #12]
 8005780:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8005782:	68fa      	ldr	r2, [r7, #12]
 8005784:	2380      	movs	r3, #128	; 0x80
 8005786:	005b      	lsls	r3, r3, #1
 8005788:	4013      	ands	r3, r2
 800578a:	d014      	beq.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800578c:	f7fd fd6e 	bl	800326c <HAL_GetTick>
 8005790:	0003      	movs	r3, r0
 8005792:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005794:	e009      	b.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005796:	f7fd fd69 	bl	800326c <HAL_GetTick>
 800579a:	0002      	movs	r2, r0
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	1ad3      	subs	r3, r2, r3
 80057a0:	4a56      	ldr	r2, [pc, #344]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d901      	bls.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 80057a6:	2303      	movs	r3, #3
 80057a8:	e09b      	b.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80057aa:	4b50      	ldr	r3, [pc, #320]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80057ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80057ae:	2380      	movs	r3, #128	; 0x80
 80057b0:	009b      	lsls	r3, r3, #2
 80057b2:	4013      	ands	r3, r2
 80057b4:	d0ef      	beq.n	8005796 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	685a      	ldr	r2, [r3, #4]
 80057ba:	23c0      	movs	r3, #192	; 0xc0
 80057bc:	029b      	lsls	r3, r3, #10
 80057be:	401a      	ands	r2, r3
 80057c0:	23c0      	movs	r3, #192	; 0xc0
 80057c2:	029b      	lsls	r3, r3, #10
 80057c4:	429a      	cmp	r2, r3
 80057c6:	d10c      	bne.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 80057c8:	4b48      	ldr	r3, [pc, #288]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a4c      	ldr	r2, [pc, #304]	; (8005900 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80057ce:	4013      	ands	r3, r2
 80057d0:	0019      	movs	r1, r3
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	685a      	ldr	r2, [r3, #4]
 80057d6:	23c0      	movs	r3, #192	; 0xc0
 80057d8:	039b      	lsls	r3, r3, #14
 80057da:	401a      	ands	r2, r3
 80057dc:	4b43      	ldr	r3, [pc, #268]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80057de:	430a      	orrs	r2, r1
 80057e0:	601a      	str	r2, [r3, #0]
 80057e2:	4b42      	ldr	r3, [pc, #264]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80057e4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	685a      	ldr	r2, [r3, #4]
 80057ea:	23c0      	movs	r3, #192	; 0xc0
 80057ec:	029b      	lsls	r3, r3, #10
 80057ee:	401a      	ands	r2, r3
 80057f0:	4b3e      	ldr	r3, [pc, #248]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80057f2:	430a      	orrs	r2, r1
 80057f4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80057f6:	2317      	movs	r3, #23
 80057f8:	18fb      	adds	r3, r7, r3
 80057fa:	781b      	ldrb	r3, [r3, #0]
 80057fc:	2b01      	cmp	r3, #1
 80057fe:	d105      	bne.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005800:	4b3a      	ldr	r3, [pc, #232]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005802:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005804:	4b39      	ldr	r3, [pc, #228]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005806:	493f      	ldr	r1, [pc, #252]	; (8005904 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005808:	400a      	ands	r2, r1
 800580a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	2201      	movs	r2, #1
 8005812:	4013      	ands	r3, r2
 8005814:	d009      	beq.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005816:	4b35      	ldr	r3, [pc, #212]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800581a:	2203      	movs	r2, #3
 800581c:	4393      	bics	r3, r2
 800581e:	0019      	movs	r1, r3
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	68da      	ldr	r2, [r3, #12]
 8005824:	4b31      	ldr	r3, [pc, #196]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005826:	430a      	orrs	r2, r1
 8005828:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	2202      	movs	r2, #2
 8005830:	4013      	ands	r3, r2
 8005832:	d009      	beq.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005834:	4b2d      	ldr	r3, [pc, #180]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005836:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005838:	220c      	movs	r2, #12
 800583a:	4393      	bics	r3, r2
 800583c:	0019      	movs	r1, r3
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	691a      	ldr	r2, [r3, #16]
 8005842:	4b2a      	ldr	r3, [pc, #168]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005844:	430a      	orrs	r2, r1
 8005846:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	2204      	movs	r2, #4
 800584e:	4013      	ands	r3, r2
 8005850:	d009      	beq.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005852:	4b26      	ldr	r3, [pc, #152]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005856:	4a2c      	ldr	r2, [pc, #176]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005858:	4013      	ands	r3, r2
 800585a:	0019      	movs	r1, r3
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	695a      	ldr	r2, [r3, #20]
 8005860:	4b22      	ldr	r3, [pc, #136]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005862:	430a      	orrs	r2, r1
 8005864:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	2208      	movs	r2, #8
 800586c:	4013      	ands	r3, r2
 800586e:	d009      	beq.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005870:	4b1e      	ldr	r3, [pc, #120]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005872:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005874:	4a25      	ldr	r2, [pc, #148]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8005876:	4013      	ands	r3, r2
 8005878:	0019      	movs	r1, r3
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	699a      	ldr	r2, [r3, #24]
 800587e:	4b1b      	ldr	r3, [pc, #108]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005880:	430a      	orrs	r2, r1
 8005882:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681a      	ldr	r2, [r3, #0]
 8005888:	2380      	movs	r3, #128	; 0x80
 800588a:	005b      	lsls	r3, r3, #1
 800588c:	4013      	ands	r3, r2
 800588e:	d009      	beq.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005890:	4b16      	ldr	r3, [pc, #88]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005892:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005894:	4a17      	ldr	r2, [pc, #92]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005896:	4013      	ands	r3, r2
 8005898:	0019      	movs	r1, r3
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	69da      	ldr	r2, [r3, #28]
 800589e:	4b13      	ldr	r3, [pc, #76]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80058a0:	430a      	orrs	r2, r1
 80058a2:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	2240      	movs	r2, #64	; 0x40
 80058aa:	4013      	ands	r3, r2
 80058ac:	d009      	beq.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80058ae:	4b0f      	ldr	r3, [pc, #60]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80058b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058b2:	4a17      	ldr	r2, [pc, #92]	; (8005910 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80058b4:	4013      	ands	r3, r2
 80058b6:	0019      	movs	r1, r3
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80058bc:	4b0b      	ldr	r3, [pc, #44]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80058be:	430a      	orrs	r2, r1
 80058c0:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	2280      	movs	r2, #128	; 0x80
 80058c8:	4013      	ands	r3, r2
 80058ca:	d009      	beq.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80058cc:	4b07      	ldr	r3, [pc, #28]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80058ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058d0:	4a10      	ldr	r2, [pc, #64]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80058d2:	4013      	ands	r3, r2
 80058d4:	0019      	movs	r1, r3
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6a1a      	ldr	r2, [r3, #32]
 80058da:	4b04      	ldr	r3, [pc, #16]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80058dc:	430a      	orrs	r2, r1
 80058de:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80058e0:	2300      	movs	r3, #0
}
 80058e2:	0018      	movs	r0, r3
 80058e4:	46bd      	mov	sp, r7
 80058e6:	b006      	add	sp, #24
 80058e8:	bd80      	pop	{r7, pc}
 80058ea:	46c0      	nop			; (mov r8, r8)
 80058ec:	40021000 	.word	0x40021000
 80058f0:	40007000 	.word	0x40007000
 80058f4:	fffcffff 	.word	0xfffcffff
 80058f8:	fff7ffff 	.word	0xfff7ffff
 80058fc:	00001388 	.word	0x00001388
 8005900:	ffcfffff 	.word	0xffcfffff
 8005904:	efffffff 	.word	0xefffffff
 8005908:	fffff3ff 	.word	0xfffff3ff
 800590c:	ffffcfff 	.word	0xffffcfff
 8005910:	fbffffff 	.word	0xfbffffff
 8005914:	fff3ffff 	.word	0xfff3ffff

08005918 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b082      	sub	sp, #8
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d101      	bne.n	800592a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005926:	2301      	movs	r3, #1
 8005928:	e083      	b.n	8005a32 <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800592e:	2b00      	cmp	r3, #0
 8005930:	d109      	bne.n	8005946 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	685a      	ldr	r2, [r3, #4]
 8005936:	2382      	movs	r3, #130	; 0x82
 8005938:	005b      	lsls	r3, r3, #1
 800593a:	429a      	cmp	r2, r3
 800593c:	d009      	beq.n	8005952 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2200      	movs	r2, #0
 8005942:	61da      	str	r2, [r3, #28]
 8005944:	e005      	b.n	8005952 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2200      	movs	r2, #0
 800594a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2200      	movs	r2, #0
 8005950:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2200      	movs	r2, #0
 8005956:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2251      	movs	r2, #81	; 0x51
 800595c:	5c9b      	ldrb	r3, [r3, r2]
 800595e:	b2db      	uxtb	r3, r3
 8005960:	2b00      	cmp	r3, #0
 8005962:	d107      	bne.n	8005974 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2250      	movs	r2, #80	; 0x50
 8005968:	2100      	movs	r1, #0
 800596a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	0018      	movs	r0, r3
 8005970:	f7fd fa8a 	bl	8002e88 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2251      	movs	r2, #81	; 0x51
 8005978:	2102      	movs	r1, #2
 800597a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	681a      	ldr	r2, [r3, #0]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	2140      	movs	r1, #64	; 0x40
 8005988:	438a      	bics	r2, r1
 800598a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	685a      	ldr	r2, [r3, #4]
 8005990:	2382      	movs	r3, #130	; 0x82
 8005992:	005b      	lsls	r3, r3, #1
 8005994:	401a      	ands	r2, r3
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6899      	ldr	r1, [r3, #8]
 800599a:	2384      	movs	r3, #132	; 0x84
 800599c:	021b      	lsls	r3, r3, #8
 800599e:	400b      	ands	r3, r1
 80059a0:	431a      	orrs	r2, r3
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	68d9      	ldr	r1, [r3, #12]
 80059a6:	2380      	movs	r3, #128	; 0x80
 80059a8:	011b      	lsls	r3, r3, #4
 80059aa:	400b      	ands	r3, r1
 80059ac:	431a      	orrs	r2, r3
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	691b      	ldr	r3, [r3, #16]
 80059b2:	2102      	movs	r1, #2
 80059b4:	400b      	ands	r3, r1
 80059b6:	431a      	orrs	r2, r3
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	695b      	ldr	r3, [r3, #20]
 80059bc:	2101      	movs	r1, #1
 80059be:	400b      	ands	r3, r1
 80059c0:	431a      	orrs	r2, r3
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6999      	ldr	r1, [r3, #24]
 80059c6:	2380      	movs	r3, #128	; 0x80
 80059c8:	009b      	lsls	r3, r3, #2
 80059ca:	400b      	ands	r3, r1
 80059cc:	431a      	orrs	r2, r3
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	69db      	ldr	r3, [r3, #28]
 80059d2:	2138      	movs	r1, #56	; 0x38
 80059d4:	400b      	ands	r3, r1
 80059d6:	431a      	orrs	r2, r3
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6a1b      	ldr	r3, [r3, #32]
 80059dc:	2180      	movs	r1, #128	; 0x80
 80059de:	400b      	ands	r3, r1
 80059e0:	431a      	orrs	r2, r3
 80059e2:	0011      	movs	r1, r2
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80059e8:	2380      	movs	r3, #128	; 0x80
 80059ea:	019b      	lsls	r3, r3, #6
 80059ec:	401a      	ands	r2, r3
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	430a      	orrs	r2, r1
 80059f4:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	699b      	ldr	r3, [r3, #24]
 80059fa:	0c1b      	lsrs	r3, r3, #16
 80059fc:	2204      	movs	r2, #4
 80059fe:	4013      	ands	r3, r2
 8005a00:	0019      	movs	r1, r3
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a06:	2210      	movs	r2, #16
 8005a08:	401a      	ands	r2, r3
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	430a      	orrs	r2, r1
 8005a10:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	69da      	ldr	r2, [r3, #28]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4907      	ldr	r1, [pc, #28]	; (8005a3c <HAL_SPI_Init+0x124>)
 8005a1e:	400a      	ands	r2, r1
 8005a20:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2200      	movs	r2, #0
 8005a26:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2251      	movs	r2, #81	; 0x51
 8005a2c:	2101      	movs	r1, #1
 8005a2e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005a30:	2300      	movs	r3, #0
}
 8005a32:	0018      	movs	r0, r3
 8005a34:	46bd      	mov	sp, r7
 8005a36:	b002      	add	sp, #8
 8005a38:	bd80      	pop	{r7, pc}
 8005a3a:	46c0      	nop			; (mov r8, r8)
 8005a3c:	fffff7ff 	.word	0xfffff7ff

08005a40 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b088      	sub	sp, #32
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	60f8      	str	r0, [r7, #12]
 8005a48:	60b9      	str	r1, [r7, #8]
 8005a4a:	603b      	str	r3, [r7, #0]
 8005a4c:	1dbb      	adds	r3, r7, #6
 8005a4e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005a50:	231f      	movs	r3, #31
 8005a52:	18fb      	adds	r3, r7, r3
 8005a54:	2200      	movs	r2, #0
 8005a56:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2250      	movs	r2, #80	; 0x50
 8005a5c:	5c9b      	ldrb	r3, [r3, r2]
 8005a5e:	2b01      	cmp	r3, #1
 8005a60:	d101      	bne.n	8005a66 <HAL_SPI_Transmit+0x26>
 8005a62:	2302      	movs	r3, #2
 8005a64:	e13e      	b.n	8005ce4 <HAL_SPI_Transmit+0x2a4>
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2250      	movs	r2, #80	; 0x50
 8005a6a:	2101      	movs	r1, #1
 8005a6c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a6e:	f7fd fbfd 	bl	800326c <HAL_GetTick>
 8005a72:	0003      	movs	r3, r0
 8005a74:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005a76:	2316      	movs	r3, #22
 8005a78:	18fb      	adds	r3, r7, r3
 8005a7a:	1dba      	adds	r2, r7, #6
 8005a7c:	8812      	ldrh	r2, [r2, #0]
 8005a7e:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2251      	movs	r2, #81	; 0x51
 8005a84:	5c9b      	ldrb	r3, [r3, r2]
 8005a86:	b2db      	uxtb	r3, r3
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	d004      	beq.n	8005a96 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8005a8c:	231f      	movs	r3, #31
 8005a8e:	18fb      	adds	r3, r7, r3
 8005a90:	2202      	movs	r2, #2
 8005a92:	701a      	strb	r2, [r3, #0]
    goto error;
 8005a94:	e11b      	b.n	8005cce <HAL_SPI_Transmit+0x28e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d003      	beq.n	8005aa4 <HAL_SPI_Transmit+0x64>
 8005a9c:	1dbb      	adds	r3, r7, #6
 8005a9e:	881b      	ldrh	r3, [r3, #0]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d104      	bne.n	8005aae <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8005aa4:	231f      	movs	r3, #31
 8005aa6:	18fb      	adds	r3, r7, r3
 8005aa8:	2201      	movs	r2, #1
 8005aaa:	701a      	strb	r2, [r3, #0]
    goto error;
 8005aac:	e10f      	b.n	8005cce <HAL_SPI_Transmit+0x28e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2251      	movs	r2, #81	; 0x51
 8005ab2:	2103      	movs	r1, #3
 8005ab4:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	68ba      	ldr	r2, [r7, #8]
 8005ac0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	1dba      	adds	r2, r7, #6
 8005ac6:	8812      	ldrh	r2, [r2, #0]
 8005ac8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	1dba      	adds	r2, r7, #6
 8005ace:	8812      	ldrh	r2, [r2, #0]
 8005ad0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2200      	movs	r2, #0
 8005adc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2200      	movs	r2, #0
 8005aee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	689a      	ldr	r2, [r3, #8]
 8005af4:	2380      	movs	r3, #128	; 0x80
 8005af6:	021b      	lsls	r3, r3, #8
 8005af8:	429a      	cmp	r2, r3
 8005afa:	d110      	bne.n	8005b1e <HAL_SPI_Transmit+0xde>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	681a      	ldr	r2, [r3, #0]
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	2140      	movs	r1, #64	; 0x40
 8005b08:	438a      	bics	r2, r1
 8005b0a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	681a      	ldr	r2, [r3, #0]
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	2180      	movs	r1, #128	; 0x80
 8005b18:	01c9      	lsls	r1, r1, #7
 8005b1a:	430a      	orrs	r2, r1
 8005b1c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	2240      	movs	r2, #64	; 0x40
 8005b26:	4013      	ands	r3, r2
 8005b28:	2b40      	cmp	r3, #64	; 0x40
 8005b2a:	d007      	beq.n	8005b3c <HAL_SPI_Transmit+0xfc>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	681a      	ldr	r2, [r3, #0]
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	2140      	movs	r1, #64	; 0x40
 8005b38:	430a      	orrs	r2, r1
 8005b3a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	68da      	ldr	r2, [r3, #12]
 8005b40:	2380      	movs	r3, #128	; 0x80
 8005b42:	011b      	lsls	r3, r3, #4
 8005b44:	429a      	cmp	r2, r3
 8005b46:	d14e      	bne.n	8005be6 <HAL_SPI_Transmit+0x1a6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d004      	beq.n	8005b5a <HAL_SPI_Transmit+0x11a>
 8005b50:	2316      	movs	r3, #22
 8005b52:	18fb      	adds	r3, r7, r3
 8005b54:	881b      	ldrh	r3, [r3, #0]
 8005b56:	2b01      	cmp	r3, #1
 8005b58:	d13f      	bne.n	8005bda <HAL_SPI_Transmit+0x19a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b5e:	881a      	ldrh	r2, [r3, #0]
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b6a:	1c9a      	adds	r2, r3, #2
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b74:	b29b      	uxth	r3, r3
 8005b76:	3b01      	subs	r3, #1
 8005b78:	b29a      	uxth	r2, r3
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005b7e:	e02c      	b.n	8005bda <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	689b      	ldr	r3, [r3, #8]
 8005b86:	2202      	movs	r2, #2
 8005b88:	4013      	ands	r3, r2
 8005b8a:	2b02      	cmp	r3, #2
 8005b8c:	d112      	bne.n	8005bb4 <HAL_SPI_Transmit+0x174>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b92:	881a      	ldrh	r2, [r3, #0]
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b9e:	1c9a      	adds	r2, r3, #2
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ba8:	b29b      	uxth	r3, r3
 8005baa:	3b01      	subs	r3, #1
 8005bac:	b29a      	uxth	r2, r3
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	86da      	strh	r2, [r3, #54]	; 0x36
 8005bb2:	e012      	b.n	8005bda <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005bb4:	f7fd fb5a 	bl	800326c <HAL_GetTick>
 8005bb8:	0002      	movs	r2, r0
 8005bba:	69bb      	ldr	r3, [r7, #24]
 8005bbc:	1ad3      	subs	r3, r2, r3
 8005bbe:	683a      	ldr	r2, [r7, #0]
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	d802      	bhi.n	8005bca <HAL_SPI_Transmit+0x18a>
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	3301      	adds	r3, #1
 8005bc8:	d102      	bne.n	8005bd0 <HAL_SPI_Transmit+0x190>
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d104      	bne.n	8005bda <HAL_SPI_Transmit+0x19a>
        {
          errorcode = HAL_TIMEOUT;
 8005bd0:	231f      	movs	r3, #31
 8005bd2:	18fb      	adds	r3, r7, r3
 8005bd4:	2203      	movs	r2, #3
 8005bd6:	701a      	strb	r2, [r3, #0]
          goto error;
 8005bd8:	e079      	b.n	8005cce <HAL_SPI_Transmit+0x28e>
    while (hspi->TxXferCount > 0U)
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005bde:	b29b      	uxth	r3, r3
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d1cd      	bne.n	8005b80 <HAL_SPI_Transmit+0x140>
 8005be4:	e04f      	b.n	8005c86 <HAL_SPI_Transmit+0x246>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d004      	beq.n	8005bf8 <HAL_SPI_Transmit+0x1b8>
 8005bee:	2316      	movs	r3, #22
 8005bf0:	18fb      	adds	r3, r7, r3
 8005bf2:	881b      	ldrh	r3, [r3, #0]
 8005bf4:	2b01      	cmp	r3, #1
 8005bf6:	d141      	bne.n	8005c7c <HAL_SPI_Transmit+0x23c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	330c      	adds	r3, #12
 8005c02:	7812      	ldrb	r2, [r2, #0]
 8005c04:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c0a:	1c5a      	adds	r2, r3, #1
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c14:	b29b      	uxth	r3, r3
 8005c16:	3b01      	subs	r3, #1
 8005c18:	b29a      	uxth	r2, r3
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005c1e:	e02d      	b.n	8005c7c <HAL_SPI_Transmit+0x23c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	689b      	ldr	r3, [r3, #8]
 8005c26:	2202      	movs	r2, #2
 8005c28:	4013      	ands	r3, r2
 8005c2a:	2b02      	cmp	r3, #2
 8005c2c:	d113      	bne.n	8005c56 <HAL_SPI_Transmit+0x216>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	330c      	adds	r3, #12
 8005c38:	7812      	ldrb	r2, [r2, #0]
 8005c3a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c40:	1c5a      	adds	r2, r3, #1
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c4a:	b29b      	uxth	r3, r3
 8005c4c:	3b01      	subs	r3, #1
 8005c4e:	b29a      	uxth	r2, r3
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	86da      	strh	r2, [r3, #54]	; 0x36
 8005c54:	e012      	b.n	8005c7c <HAL_SPI_Transmit+0x23c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c56:	f7fd fb09 	bl	800326c <HAL_GetTick>
 8005c5a:	0002      	movs	r2, r0
 8005c5c:	69bb      	ldr	r3, [r7, #24]
 8005c5e:	1ad3      	subs	r3, r2, r3
 8005c60:	683a      	ldr	r2, [r7, #0]
 8005c62:	429a      	cmp	r2, r3
 8005c64:	d802      	bhi.n	8005c6c <HAL_SPI_Transmit+0x22c>
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	3301      	adds	r3, #1
 8005c6a:	d102      	bne.n	8005c72 <HAL_SPI_Transmit+0x232>
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d104      	bne.n	8005c7c <HAL_SPI_Transmit+0x23c>
        {
          errorcode = HAL_TIMEOUT;
 8005c72:	231f      	movs	r3, #31
 8005c74:	18fb      	adds	r3, r7, r3
 8005c76:	2203      	movs	r2, #3
 8005c78:	701a      	strb	r2, [r3, #0]
          goto error;
 8005c7a:	e028      	b.n	8005cce <HAL_SPI_Transmit+0x28e>
    while (hspi->TxXferCount > 0U)
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c80:	b29b      	uxth	r3, r3
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d1cc      	bne.n	8005c20 <HAL_SPI_Transmit+0x1e0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005c86:	69ba      	ldr	r2, [r7, #24]
 8005c88:	6839      	ldr	r1, [r7, #0]
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	0018      	movs	r0, r3
 8005c8e:	f000 fa77 	bl	8006180 <SPI_EndRxTxTransaction>
 8005c92:	1e03      	subs	r3, r0, #0
 8005c94:	d002      	beq.n	8005c9c <HAL_SPI_Transmit+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	2220      	movs	r2, #32
 8005c9a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	689b      	ldr	r3, [r3, #8]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d10a      	bne.n	8005cba <HAL_SPI_Transmit+0x27a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	613b      	str	r3, [r7, #16]
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	68db      	ldr	r3, [r3, #12]
 8005cae:	613b      	str	r3, [r7, #16]
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	689b      	ldr	r3, [r3, #8]
 8005cb6:	613b      	str	r3, [r7, #16]
 8005cb8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d004      	beq.n	8005ccc <HAL_SPI_Transmit+0x28c>
  {
    errorcode = HAL_ERROR;
 8005cc2:	231f      	movs	r3, #31
 8005cc4:	18fb      	adds	r3, r7, r3
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	701a      	strb	r2, [r3, #0]
 8005cca:	e000      	b.n	8005cce <HAL_SPI_Transmit+0x28e>
  }

error:
 8005ccc:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	2251      	movs	r2, #81	; 0x51
 8005cd2:	2101      	movs	r1, #1
 8005cd4:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2250      	movs	r2, #80	; 0x50
 8005cda:	2100      	movs	r1, #0
 8005cdc:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8005cde:	231f      	movs	r3, #31
 8005ce0:	18fb      	adds	r3, r7, r3
 8005ce2:	781b      	ldrb	r3, [r3, #0]
}
 8005ce4:	0018      	movs	r0, r3
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	b008      	add	sp, #32
 8005cea:	bd80      	pop	{r7, pc}

08005cec <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b08c      	sub	sp, #48	; 0x30
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	60f8      	str	r0, [r7, #12]
 8005cf4:	60b9      	str	r1, [r7, #8]
 8005cf6:	607a      	str	r2, [r7, #4]
 8005cf8:	001a      	movs	r2, r3
 8005cfa:	1cbb      	adds	r3, r7, #2
 8005cfc:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005cfe:	2301      	movs	r3, #1
 8005d00:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005d02:	232b      	movs	r3, #43	; 0x2b
 8005d04:	18fb      	adds	r3, r7, r3
 8005d06:	2200      	movs	r2, #0
 8005d08:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2250      	movs	r2, #80	; 0x50
 8005d0e:	5c9b      	ldrb	r3, [r3, r2]
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	d101      	bne.n	8005d18 <HAL_SPI_TransmitReceive+0x2c>
 8005d14:	2302      	movs	r3, #2
 8005d16:	e1a0      	b.n	800605a <HAL_SPI_TransmitReceive+0x36e>
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	2250      	movs	r2, #80	; 0x50
 8005d1c:	2101      	movs	r1, #1
 8005d1e:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005d20:	f7fd faa4 	bl	800326c <HAL_GetTick>
 8005d24:	0003      	movs	r3, r0
 8005d26:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005d28:	2023      	movs	r0, #35	; 0x23
 8005d2a:	183b      	adds	r3, r7, r0
 8005d2c:	68fa      	ldr	r2, [r7, #12]
 8005d2e:	2151      	movs	r1, #81	; 0x51
 8005d30:	5c52      	ldrb	r2, [r2, r1]
 8005d32:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005d3a:	231a      	movs	r3, #26
 8005d3c:	18fb      	adds	r3, r7, r3
 8005d3e:	1cba      	adds	r2, r7, #2
 8005d40:	8812      	ldrh	r2, [r2, #0]
 8005d42:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005d44:	183b      	adds	r3, r7, r0
 8005d46:	781b      	ldrb	r3, [r3, #0]
 8005d48:	2b01      	cmp	r3, #1
 8005d4a:	d011      	beq.n	8005d70 <HAL_SPI_TransmitReceive+0x84>
 8005d4c:	69fa      	ldr	r2, [r7, #28]
 8005d4e:	2382      	movs	r3, #130	; 0x82
 8005d50:	005b      	lsls	r3, r3, #1
 8005d52:	429a      	cmp	r2, r3
 8005d54:	d107      	bne.n	8005d66 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	689b      	ldr	r3, [r3, #8]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d103      	bne.n	8005d66 <HAL_SPI_TransmitReceive+0x7a>
 8005d5e:	183b      	adds	r3, r7, r0
 8005d60:	781b      	ldrb	r3, [r3, #0]
 8005d62:	2b04      	cmp	r3, #4
 8005d64:	d004      	beq.n	8005d70 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8005d66:	232b      	movs	r3, #43	; 0x2b
 8005d68:	18fb      	adds	r3, r7, r3
 8005d6a:	2202      	movs	r2, #2
 8005d6c:	701a      	strb	r2, [r3, #0]
    goto error;
 8005d6e:	e169      	b.n	8006044 <HAL_SPI_TransmitReceive+0x358>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d006      	beq.n	8005d84 <HAL_SPI_TransmitReceive+0x98>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d003      	beq.n	8005d84 <HAL_SPI_TransmitReceive+0x98>
 8005d7c:	1cbb      	adds	r3, r7, #2
 8005d7e:	881b      	ldrh	r3, [r3, #0]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d104      	bne.n	8005d8e <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8005d84:	232b      	movs	r3, #43	; 0x2b
 8005d86:	18fb      	adds	r3, r7, r3
 8005d88:	2201      	movs	r2, #1
 8005d8a:	701a      	strb	r2, [r3, #0]
    goto error;
 8005d8c:	e15a      	b.n	8006044 <HAL_SPI_TransmitReceive+0x358>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2251      	movs	r2, #81	; 0x51
 8005d92:	5c9b      	ldrb	r3, [r3, r2]
 8005d94:	b2db      	uxtb	r3, r3
 8005d96:	2b04      	cmp	r3, #4
 8005d98:	d003      	beq.n	8005da2 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	2251      	movs	r2, #81	; 0x51
 8005d9e:	2105      	movs	r1, #5
 8005da0:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2200      	movs	r2, #0
 8005da6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	687a      	ldr	r2, [r7, #4]
 8005dac:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	1cba      	adds	r2, r7, #2
 8005db2:	8812      	ldrh	r2, [r2, #0]
 8005db4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	1cba      	adds	r2, r7, #2
 8005dba:	8812      	ldrh	r2, [r2, #0]
 8005dbc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	68ba      	ldr	r2, [r7, #8]
 8005dc2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	1cba      	adds	r2, r7, #2
 8005dc8:	8812      	ldrh	r2, [r2, #0]
 8005dca:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	1cba      	adds	r2, r7, #2
 8005dd0:	8812      	ldrh	r2, [r2, #0]
 8005dd2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	2240      	movs	r2, #64	; 0x40
 8005de8:	4013      	ands	r3, r2
 8005dea:	2b40      	cmp	r3, #64	; 0x40
 8005dec:	d007      	beq.n	8005dfe <HAL_SPI_TransmitReceive+0x112>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	681a      	ldr	r2, [r3, #0]
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	2140      	movs	r1, #64	; 0x40
 8005dfa:	430a      	orrs	r2, r1
 8005dfc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	68da      	ldr	r2, [r3, #12]
 8005e02:	2380      	movs	r3, #128	; 0x80
 8005e04:	011b      	lsls	r3, r3, #4
 8005e06:	429a      	cmp	r2, r3
 8005e08:	d000      	beq.n	8005e0c <HAL_SPI_TransmitReceive+0x120>
 8005e0a:	e07a      	b.n	8005f02 <HAL_SPI_TransmitReceive+0x216>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d004      	beq.n	8005e1e <HAL_SPI_TransmitReceive+0x132>
 8005e14:	231a      	movs	r3, #26
 8005e16:	18fb      	adds	r3, r7, r3
 8005e18:	881b      	ldrh	r3, [r3, #0]
 8005e1a:	2b01      	cmp	r3, #1
 8005e1c:	d166      	bne.n	8005eec <HAL_SPI_TransmitReceive+0x200>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e22:	881a      	ldrh	r2, [r3, #0]
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e2e:	1c9a      	adds	r2, r3, #2
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e38:	b29b      	uxth	r3, r3
 8005e3a:	3b01      	subs	r3, #1
 8005e3c:	b29a      	uxth	r2, r3
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e42:	e053      	b.n	8005eec <HAL_SPI_TransmitReceive+0x200>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	689b      	ldr	r3, [r3, #8]
 8005e4a:	2202      	movs	r2, #2
 8005e4c:	4013      	ands	r3, r2
 8005e4e:	2b02      	cmp	r3, #2
 8005e50:	d11b      	bne.n	8005e8a <HAL_SPI_TransmitReceive+0x19e>
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e56:	b29b      	uxth	r3, r3
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d016      	beq.n	8005e8a <HAL_SPI_TransmitReceive+0x19e>
 8005e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e5e:	2b01      	cmp	r3, #1
 8005e60:	d113      	bne.n	8005e8a <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e66:	881a      	ldrh	r2, [r3, #0]
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e72:	1c9a      	adds	r2, r3, #2
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e7c:	b29b      	uxth	r3, r3
 8005e7e:	3b01      	subs	r3, #1
 8005e80:	b29a      	uxth	r2, r3
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005e86:	2300      	movs	r3, #0
 8005e88:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	689b      	ldr	r3, [r3, #8]
 8005e90:	2201      	movs	r2, #1
 8005e92:	4013      	ands	r3, r2
 8005e94:	2b01      	cmp	r3, #1
 8005e96:	d119      	bne.n	8005ecc <HAL_SPI_TransmitReceive+0x1e0>
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e9c:	b29b      	uxth	r3, r3
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d014      	beq.n	8005ecc <HAL_SPI_TransmitReceive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	68da      	ldr	r2, [r3, #12]
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eac:	b292      	uxth	r2, r2
 8005eae:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eb4:	1c9a      	adds	r2, r3, #2
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ebe:	b29b      	uxth	r3, r3
 8005ec0:	3b01      	subs	r3, #1
 8005ec2:	b29a      	uxth	r2, r3
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005ec8:	2301      	movs	r3, #1
 8005eca:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005ecc:	f7fd f9ce 	bl	800326c <HAL_GetTick>
 8005ed0:	0002      	movs	r2, r0
 8005ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed4:	1ad3      	subs	r3, r2, r3
 8005ed6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005ed8:	429a      	cmp	r2, r3
 8005eda:	d807      	bhi.n	8005eec <HAL_SPI_TransmitReceive+0x200>
 8005edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ede:	3301      	adds	r3, #1
 8005ee0:	d004      	beq.n	8005eec <HAL_SPI_TransmitReceive+0x200>
      {
        errorcode = HAL_TIMEOUT;
 8005ee2:	232b      	movs	r3, #43	; 0x2b
 8005ee4:	18fb      	adds	r3, r7, r3
 8005ee6:	2203      	movs	r2, #3
 8005ee8:	701a      	strb	r2, [r3, #0]
        goto error;
 8005eea:	e0ab      	b.n	8006044 <HAL_SPI_TransmitReceive+0x358>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ef0:	b29b      	uxth	r3, r3
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d1a6      	bne.n	8005e44 <HAL_SPI_TransmitReceive+0x158>
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005efa:	b29b      	uxth	r3, r3
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d1a1      	bne.n	8005e44 <HAL_SPI_TransmitReceive+0x158>
 8005f00:	e07f      	b.n	8006002 <HAL_SPI_TransmitReceive+0x316>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d005      	beq.n	8005f16 <HAL_SPI_TransmitReceive+0x22a>
 8005f0a:	231a      	movs	r3, #26
 8005f0c:	18fb      	adds	r3, r7, r3
 8005f0e:	881b      	ldrh	r3, [r3, #0]
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	d000      	beq.n	8005f16 <HAL_SPI_TransmitReceive+0x22a>
 8005f14:	e06b      	b.n	8005fee <HAL_SPI_TransmitReceive+0x302>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	330c      	adds	r3, #12
 8005f20:	7812      	ldrb	r2, [r2, #0]
 8005f22:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f28:	1c5a      	adds	r2, r3, #1
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f32:	b29b      	uxth	r3, r3
 8005f34:	3b01      	subs	r3, #1
 8005f36:	b29a      	uxth	r2, r3
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f3c:	e057      	b.n	8005fee <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	689b      	ldr	r3, [r3, #8]
 8005f44:	2202      	movs	r2, #2
 8005f46:	4013      	ands	r3, r2
 8005f48:	2b02      	cmp	r3, #2
 8005f4a:	d11c      	bne.n	8005f86 <HAL_SPI_TransmitReceive+0x29a>
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f50:	b29b      	uxth	r3, r3
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d017      	beq.n	8005f86 <HAL_SPI_TransmitReceive+0x29a>
 8005f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f58:	2b01      	cmp	r3, #1
 8005f5a:	d114      	bne.n	8005f86 <HAL_SPI_TransmitReceive+0x29a>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	330c      	adds	r3, #12
 8005f66:	7812      	ldrb	r2, [r2, #0]
 8005f68:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f6e:	1c5a      	adds	r2, r3, #1
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f78:	b29b      	uxth	r3, r3
 8005f7a:	3b01      	subs	r3, #1
 8005f7c:	b29a      	uxth	r2, r3
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005f82:	2300      	movs	r3, #0
 8005f84:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	689b      	ldr	r3, [r3, #8]
 8005f8c:	2201      	movs	r2, #1
 8005f8e:	4013      	ands	r3, r2
 8005f90:	2b01      	cmp	r3, #1
 8005f92:	d119      	bne.n	8005fc8 <HAL_SPI_TransmitReceive+0x2dc>
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f98:	b29b      	uxth	r3, r3
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d014      	beq.n	8005fc8 <HAL_SPI_TransmitReceive+0x2dc>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	68da      	ldr	r2, [r3, #12]
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fa8:	b2d2      	uxtb	r2, r2
 8005faa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fb0:	1c5a      	adds	r2, r3, #1
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fba:	b29b      	uxth	r3, r3
 8005fbc:	3b01      	subs	r3, #1
 8005fbe:	b29a      	uxth	r2, r3
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005fc8:	f7fd f950 	bl	800326c <HAL_GetTick>
 8005fcc:	0002      	movs	r2, r0
 8005fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd0:	1ad3      	subs	r3, r2, r3
 8005fd2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	d802      	bhi.n	8005fde <HAL_SPI_TransmitReceive+0x2f2>
 8005fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fda:	3301      	adds	r3, #1
 8005fdc:	d102      	bne.n	8005fe4 <HAL_SPI_TransmitReceive+0x2f8>
 8005fde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d104      	bne.n	8005fee <HAL_SPI_TransmitReceive+0x302>
      {
        errorcode = HAL_TIMEOUT;
 8005fe4:	232b      	movs	r3, #43	; 0x2b
 8005fe6:	18fb      	adds	r3, r7, r3
 8005fe8:	2203      	movs	r2, #3
 8005fea:	701a      	strb	r2, [r3, #0]
        goto error;
 8005fec:	e02a      	b.n	8006044 <HAL_SPI_TransmitReceive+0x358>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ff2:	b29b      	uxth	r3, r3
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d1a2      	bne.n	8005f3e <HAL_SPI_TransmitReceive+0x252>
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ffc:	b29b      	uxth	r3, r3
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d19d      	bne.n	8005f3e <HAL_SPI_TransmitReceive+0x252>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006002:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006004:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	0018      	movs	r0, r3
 800600a:	f000 f8b9 	bl	8006180 <SPI_EndRxTxTransaction>
 800600e:	1e03      	subs	r3, r0, #0
 8006010:	d007      	beq.n	8006022 <HAL_SPI_TransmitReceive+0x336>
  {
    errorcode = HAL_ERROR;
 8006012:	232b      	movs	r3, #43	; 0x2b
 8006014:	18fb      	adds	r3, r7, r3
 8006016:	2201      	movs	r2, #1
 8006018:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2220      	movs	r2, #32
 800601e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006020:	e010      	b.n	8006044 <HAL_SPI_TransmitReceive+0x358>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	689b      	ldr	r3, [r3, #8]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d10b      	bne.n	8006042 <HAL_SPI_TransmitReceive+0x356>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800602a:	2300      	movs	r3, #0
 800602c:	617b      	str	r3, [r7, #20]
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	68db      	ldr	r3, [r3, #12]
 8006034:	617b      	str	r3, [r7, #20]
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	689b      	ldr	r3, [r3, #8]
 800603c:	617b      	str	r3, [r7, #20]
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	e000      	b.n	8006044 <HAL_SPI_TransmitReceive+0x358>
  }

error :
 8006042:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	2251      	movs	r2, #81	; 0x51
 8006048:	2101      	movs	r1, #1
 800604a:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	2250      	movs	r2, #80	; 0x50
 8006050:	2100      	movs	r1, #0
 8006052:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006054:	232b      	movs	r3, #43	; 0x2b
 8006056:	18fb      	adds	r3, r7, r3
 8006058:	781b      	ldrb	r3, [r3, #0]
}
 800605a:	0018      	movs	r0, r3
 800605c:	46bd      	mov	sp, r7
 800605e:	b00c      	add	sp, #48	; 0x30
 8006060:	bd80      	pop	{r7, pc}
	...

08006064 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b088      	sub	sp, #32
 8006068:	af00      	add	r7, sp, #0
 800606a:	60f8      	str	r0, [r7, #12]
 800606c:	60b9      	str	r1, [r7, #8]
 800606e:	603b      	str	r3, [r7, #0]
 8006070:	1dfb      	adds	r3, r7, #7
 8006072:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006074:	f7fd f8fa 	bl	800326c <HAL_GetTick>
 8006078:	0002      	movs	r2, r0
 800607a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800607c:	1a9b      	subs	r3, r3, r2
 800607e:	683a      	ldr	r2, [r7, #0]
 8006080:	18d3      	adds	r3, r2, r3
 8006082:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006084:	f7fd f8f2 	bl	800326c <HAL_GetTick>
 8006088:	0003      	movs	r3, r0
 800608a:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800608c:	4b3a      	ldr	r3, [pc, #232]	; (8006178 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	015b      	lsls	r3, r3, #5
 8006092:	0d1b      	lsrs	r3, r3, #20
 8006094:	69fa      	ldr	r2, [r7, #28]
 8006096:	4353      	muls	r3, r2
 8006098:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800609a:	e058      	b.n	800614e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	3301      	adds	r3, #1
 80060a0:	d055      	beq.n	800614e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80060a2:	f7fd f8e3 	bl	800326c <HAL_GetTick>
 80060a6:	0002      	movs	r2, r0
 80060a8:	69bb      	ldr	r3, [r7, #24]
 80060aa:	1ad3      	subs	r3, r2, r3
 80060ac:	69fa      	ldr	r2, [r7, #28]
 80060ae:	429a      	cmp	r2, r3
 80060b0:	d902      	bls.n	80060b8 <SPI_WaitFlagStateUntilTimeout+0x54>
 80060b2:	69fb      	ldr	r3, [r7, #28]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d142      	bne.n	800613e <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	685a      	ldr	r2, [r3, #4]
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	21e0      	movs	r1, #224	; 0xe0
 80060c4:	438a      	bics	r2, r1
 80060c6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	685a      	ldr	r2, [r3, #4]
 80060cc:	2382      	movs	r3, #130	; 0x82
 80060ce:	005b      	lsls	r3, r3, #1
 80060d0:	429a      	cmp	r2, r3
 80060d2:	d113      	bne.n	80060fc <SPI_WaitFlagStateUntilTimeout+0x98>
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	689a      	ldr	r2, [r3, #8]
 80060d8:	2380      	movs	r3, #128	; 0x80
 80060da:	021b      	lsls	r3, r3, #8
 80060dc:	429a      	cmp	r2, r3
 80060de:	d005      	beq.n	80060ec <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	689a      	ldr	r2, [r3, #8]
 80060e4:	2380      	movs	r3, #128	; 0x80
 80060e6:	00db      	lsls	r3, r3, #3
 80060e8:	429a      	cmp	r2, r3
 80060ea:	d107      	bne.n	80060fc <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	681a      	ldr	r2, [r3, #0]
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	2140      	movs	r1, #64	; 0x40
 80060f8:	438a      	bics	r2, r1
 80060fa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006100:	2380      	movs	r3, #128	; 0x80
 8006102:	019b      	lsls	r3, r3, #6
 8006104:	429a      	cmp	r2, r3
 8006106:	d110      	bne.n	800612a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	681a      	ldr	r2, [r3, #0]
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	491a      	ldr	r1, [pc, #104]	; (800617c <SPI_WaitFlagStateUntilTimeout+0x118>)
 8006114:	400a      	ands	r2, r1
 8006116:	601a      	str	r2, [r3, #0]
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	681a      	ldr	r2, [r3, #0]
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	2180      	movs	r1, #128	; 0x80
 8006124:	0189      	lsls	r1, r1, #6
 8006126:	430a      	orrs	r2, r1
 8006128:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	2251      	movs	r2, #81	; 0x51
 800612e:	2101      	movs	r1, #1
 8006130:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	2250      	movs	r2, #80	; 0x50
 8006136:	2100      	movs	r1, #0
 8006138:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800613a:	2303      	movs	r3, #3
 800613c:	e017      	b.n	800616e <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d101      	bne.n	8006148 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8006144:	2300      	movs	r3, #0
 8006146:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	3b01      	subs	r3, #1
 800614c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	689b      	ldr	r3, [r3, #8]
 8006154:	68ba      	ldr	r2, [r7, #8]
 8006156:	4013      	ands	r3, r2
 8006158:	68ba      	ldr	r2, [r7, #8]
 800615a:	1ad3      	subs	r3, r2, r3
 800615c:	425a      	negs	r2, r3
 800615e:	4153      	adcs	r3, r2
 8006160:	b2db      	uxtb	r3, r3
 8006162:	001a      	movs	r2, r3
 8006164:	1dfb      	adds	r3, r7, #7
 8006166:	781b      	ldrb	r3, [r3, #0]
 8006168:	429a      	cmp	r2, r3
 800616a:	d197      	bne.n	800609c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800616c:	2300      	movs	r3, #0
}
 800616e:	0018      	movs	r0, r3
 8006170:	46bd      	mov	sp, r7
 8006172:	b008      	add	sp, #32
 8006174:	bd80      	pop	{r7, pc}
 8006176:	46c0      	nop			; (mov r8, r8)
 8006178:	20000000 	.word	0x20000000
 800617c:	ffffdfff 	.word	0xffffdfff

08006180 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b088      	sub	sp, #32
 8006184:	af02      	add	r7, sp, #8
 8006186:	60f8      	str	r0, [r7, #12]
 8006188:	60b9      	str	r1, [r7, #8]
 800618a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800618c:	4b1d      	ldr	r3, [pc, #116]	; (8006204 <SPI_EndRxTxTransaction+0x84>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	491d      	ldr	r1, [pc, #116]	; (8006208 <SPI_EndRxTxTransaction+0x88>)
 8006192:	0018      	movs	r0, r3
 8006194:	f7f9 ffd4 	bl	8000140 <__udivsi3>
 8006198:	0003      	movs	r3, r0
 800619a:	001a      	movs	r2, r3
 800619c:	0013      	movs	r3, r2
 800619e:	015b      	lsls	r3, r3, #5
 80061a0:	1a9b      	subs	r3, r3, r2
 80061a2:	009b      	lsls	r3, r3, #2
 80061a4:	189b      	adds	r3, r3, r2
 80061a6:	00db      	lsls	r3, r3, #3
 80061a8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	685a      	ldr	r2, [r3, #4]
 80061ae:	2382      	movs	r3, #130	; 0x82
 80061b0:	005b      	lsls	r3, r3, #1
 80061b2:	429a      	cmp	r2, r3
 80061b4:	d112      	bne.n	80061dc <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80061b6:	68ba      	ldr	r2, [r7, #8]
 80061b8:	68f8      	ldr	r0, [r7, #12]
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	9300      	str	r3, [sp, #0]
 80061be:	0013      	movs	r3, r2
 80061c0:	2200      	movs	r2, #0
 80061c2:	2180      	movs	r1, #128	; 0x80
 80061c4:	f7ff ff4e 	bl	8006064 <SPI_WaitFlagStateUntilTimeout>
 80061c8:	1e03      	subs	r3, r0, #0
 80061ca:	d016      	beq.n	80061fa <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061d0:	2220      	movs	r2, #32
 80061d2:	431a      	orrs	r2, r3
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80061d8:	2303      	movs	r3, #3
 80061da:	e00f      	b.n	80061fc <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80061dc:	697b      	ldr	r3, [r7, #20]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d00a      	beq.n	80061f8 <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	3b01      	subs	r3, #1
 80061e6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	689b      	ldr	r3, [r3, #8]
 80061ee:	2280      	movs	r2, #128	; 0x80
 80061f0:	4013      	ands	r3, r2
 80061f2:	2b80      	cmp	r3, #128	; 0x80
 80061f4:	d0f2      	beq.n	80061dc <SPI_EndRxTxTransaction+0x5c>
 80061f6:	e000      	b.n	80061fa <SPI_EndRxTxTransaction+0x7a>
        break;
 80061f8:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 80061fa:	2300      	movs	r3, #0
}
 80061fc:	0018      	movs	r0, r3
 80061fe:	46bd      	mov	sp, r7
 8006200:	b006      	add	sp, #24
 8006202:	bd80      	pop	{r7, pc}
 8006204:	20000000 	.word	0x20000000
 8006208:	016e3600 	.word	0x016e3600

0800620c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b082      	sub	sp, #8
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d101      	bne.n	800621e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800621a:	2301      	movs	r3, #1
 800621c:	e044      	b.n	80062a8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006222:	2b00      	cmp	r3, #0
 8006224:	d107      	bne.n	8006236 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2274      	movs	r2, #116	; 0x74
 800622a:	2100      	movs	r1, #0
 800622c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	0018      	movs	r0, r3
 8006232:	f7fc fe6d 	bl	8002f10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2224      	movs	r2, #36	; 0x24
 800623a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	681a      	ldr	r2, [r3, #0]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	2101      	movs	r1, #1
 8006248:	438a      	bics	r2, r1
 800624a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	0018      	movs	r0, r3
 8006250:	f000 f8d8 	bl	8006404 <UART_SetConfig>
 8006254:	0003      	movs	r3, r0
 8006256:	2b01      	cmp	r3, #1
 8006258:	d101      	bne.n	800625e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800625a:	2301      	movs	r3, #1
 800625c:	e024      	b.n	80062a8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006262:	2b00      	cmp	r3, #0
 8006264:	d003      	beq.n	800626e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	0018      	movs	r0, r3
 800626a:	f000 fb6b 	bl	8006944 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	685a      	ldr	r2, [r3, #4]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	490d      	ldr	r1, [pc, #52]	; (80062b0 <HAL_UART_Init+0xa4>)
 800627a:	400a      	ands	r2, r1
 800627c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	689a      	ldr	r2, [r3, #8]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	212a      	movs	r1, #42	; 0x2a
 800628a:	438a      	bics	r2, r1
 800628c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	681a      	ldr	r2, [r3, #0]
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	2101      	movs	r1, #1
 800629a:	430a      	orrs	r2, r1
 800629c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	0018      	movs	r0, r3
 80062a2:	f000 fc03 	bl	8006aac <UART_CheckIdleState>
 80062a6:	0003      	movs	r3, r0
}
 80062a8:	0018      	movs	r0, r3
 80062aa:	46bd      	mov	sp, r7
 80062ac:	b002      	add	sp, #8
 80062ae:	bd80      	pop	{r7, pc}
 80062b0:	ffffb7ff 	.word	0xffffb7ff

080062b4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b08a      	sub	sp, #40	; 0x28
 80062b8:	af02      	add	r7, sp, #8
 80062ba:	60f8      	str	r0, [r7, #12]
 80062bc:	60b9      	str	r1, [r7, #8]
 80062be:	603b      	str	r3, [r7, #0]
 80062c0:	1dbb      	adds	r3, r7, #6
 80062c2:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80062c8:	2b20      	cmp	r3, #32
 80062ca:	d000      	beq.n	80062ce <HAL_UART_Transmit+0x1a>
 80062cc:	e095      	b.n	80063fa <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d003      	beq.n	80062dc <HAL_UART_Transmit+0x28>
 80062d4:	1dbb      	adds	r3, r7, #6
 80062d6:	881b      	ldrh	r3, [r3, #0]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d101      	bne.n	80062e0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80062dc:	2301      	movs	r3, #1
 80062de:	e08d      	b.n	80063fc <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	689a      	ldr	r2, [r3, #8]
 80062e4:	2380      	movs	r3, #128	; 0x80
 80062e6:	015b      	lsls	r3, r3, #5
 80062e8:	429a      	cmp	r2, r3
 80062ea:	d109      	bne.n	8006300 <HAL_UART_Transmit+0x4c>
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	691b      	ldr	r3, [r3, #16]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d105      	bne.n	8006300 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	2201      	movs	r2, #1
 80062f8:	4013      	ands	r3, r2
 80062fa:	d001      	beq.n	8006300 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80062fc:	2301      	movs	r3, #1
 80062fe:	e07d      	b.n	80063fc <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	2274      	movs	r2, #116	; 0x74
 8006304:	5c9b      	ldrb	r3, [r3, r2]
 8006306:	2b01      	cmp	r3, #1
 8006308:	d101      	bne.n	800630e <HAL_UART_Transmit+0x5a>
 800630a:	2302      	movs	r3, #2
 800630c:	e076      	b.n	80063fc <HAL_UART_Transmit+0x148>
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	2274      	movs	r2, #116	; 0x74
 8006312:	2101      	movs	r1, #1
 8006314:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2280      	movs	r2, #128	; 0x80
 800631a:	2100      	movs	r1, #0
 800631c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2221      	movs	r2, #33	; 0x21
 8006322:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006324:	f7fc ffa2 	bl	800326c <HAL_GetTick>
 8006328:	0003      	movs	r3, r0
 800632a:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	1dba      	adds	r2, r7, #6
 8006330:	2150      	movs	r1, #80	; 0x50
 8006332:	8812      	ldrh	r2, [r2, #0]
 8006334:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	1dba      	adds	r2, r7, #6
 800633a:	2152      	movs	r1, #82	; 0x52
 800633c:	8812      	ldrh	r2, [r2, #0]
 800633e:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	689a      	ldr	r2, [r3, #8]
 8006344:	2380      	movs	r3, #128	; 0x80
 8006346:	015b      	lsls	r3, r3, #5
 8006348:	429a      	cmp	r2, r3
 800634a:	d108      	bne.n	800635e <HAL_UART_Transmit+0xaa>
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	691b      	ldr	r3, [r3, #16]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d104      	bne.n	800635e <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8006354:	2300      	movs	r3, #0
 8006356:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	61bb      	str	r3, [r7, #24]
 800635c:	e003      	b.n	8006366 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006362:	2300      	movs	r3, #0
 8006364:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	2274      	movs	r2, #116	; 0x74
 800636a:	2100      	movs	r1, #0
 800636c:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 800636e:	e02c      	b.n	80063ca <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006370:	697a      	ldr	r2, [r7, #20]
 8006372:	68f8      	ldr	r0, [r7, #12]
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	9300      	str	r3, [sp, #0]
 8006378:	0013      	movs	r3, r2
 800637a:	2200      	movs	r2, #0
 800637c:	2180      	movs	r1, #128	; 0x80
 800637e:	f000 fbdd 	bl	8006b3c <UART_WaitOnFlagUntilTimeout>
 8006382:	1e03      	subs	r3, r0, #0
 8006384:	d001      	beq.n	800638a <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8006386:	2303      	movs	r3, #3
 8006388:	e038      	b.n	80063fc <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 800638a:	69fb      	ldr	r3, [r7, #28]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d10b      	bne.n	80063a8 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006390:	69bb      	ldr	r3, [r7, #24]
 8006392:	881b      	ldrh	r3, [r3, #0]
 8006394:	001a      	movs	r2, r3
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	05d2      	lsls	r2, r2, #23
 800639c:	0dd2      	lsrs	r2, r2, #23
 800639e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80063a0:	69bb      	ldr	r3, [r7, #24]
 80063a2:	3302      	adds	r3, #2
 80063a4:	61bb      	str	r3, [r7, #24]
 80063a6:	e007      	b.n	80063b8 <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80063a8:	69fb      	ldr	r3, [r7, #28]
 80063aa:	781a      	ldrb	r2, [r3, #0]
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80063b2:	69fb      	ldr	r3, [r7, #28]
 80063b4:	3301      	adds	r3, #1
 80063b6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	2252      	movs	r2, #82	; 0x52
 80063bc:	5a9b      	ldrh	r3, [r3, r2]
 80063be:	b29b      	uxth	r3, r3
 80063c0:	3b01      	subs	r3, #1
 80063c2:	b299      	uxth	r1, r3
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	2252      	movs	r2, #82	; 0x52
 80063c8:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	2252      	movs	r2, #82	; 0x52
 80063ce:	5a9b      	ldrh	r3, [r3, r2]
 80063d0:	b29b      	uxth	r3, r3
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d1cc      	bne.n	8006370 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80063d6:	697a      	ldr	r2, [r7, #20]
 80063d8:	68f8      	ldr	r0, [r7, #12]
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	9300      	str	r3, [sp, #0]
 80063de:	0013      	movs	r3, r2
 80063e0:	2200      	movs	r2, #0
 80063e2:	2140      	movs	r1, #64	; 0x40
 80063e4:	f000 fbaa 	bl	8006b3c <UART_WaitOnFlagUntilTimeout>
 80063e8:	1e03      	subs	r3, r0, #0
 80063ea:	d001      	beq.n	80063f0 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 80063ec:	2303      	movs	r3, #3
 80063ee:	e005      	b.n	80063fc <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	2220      	movs	r2, #32
 80063f4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80063f6:	2300      	movs	r3, #0
 80063f8:	e000      	b.n	80063fc <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 80063fa:	2302      	movs	r3, #2
  }
}
 80063fc:	0018      	movs	r0, r3
 80063fe:	46bd      	mov	sp, r7
 8006400:	b008      	add	sp, #32
 8006402:	bd80      	pop	{r7, pc}

08006404 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006404:	b5b0      	push	{r4, r5, r7, lr}
 8006406:	b08e      	sub	sp, #56	; 0x38
 8006408:	af00      	add	r7, sp, #0
 800640a:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800640c:	231a      	movs	r3, #26
 800640e:	2218      	movs	r2, #24
 8006410:	189b      	adds	r3, r3, r2
 8006412:	19db      	adds	r3, r3, r7
 8006414:	2200      	movs	r2, #0
 8006416:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006418:	69fb      	ldr	r3, [r7, #28]
 800641a:	689a      	ldr	r2, [r3, #8]
 800641c:	69fb      	ldr	r3, [r7, #28]
 800641e:	691b      	ldr	r3, [r3, #16]
 8006420:	431a      	orrs	r2, r3
 8006422:	69fb      	ldr	r3, [r7, #28]
 8006424:	695b      	ldr	r3, [r3, #20]
 8006426:	431a      	orrs	r2, r3
 8006428:	69fb      	ldr	r3, [r7, #28]
 800642a:	69db      	ldr	r3, [r3, #28]
 800642c:	4313      	orrs	r3, r2
 800642e:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006430:	69fb      	ldr	r3, [r7, #28]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4ac3      	ldr	r2, [pc, #780]	; (8006744 <UART_SetConfig+0x340>)
 8006438:	4013      	ands	r3, r2
 800643a:	0019      	movs	r1, r3
 800643c:	69fb      	ldr	r3, [r7, #28]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006442:	430a      	orrs	r2, r1
 8006444:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006446:	69fb      	ldr	r3, [r7, #28]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	685b      	ldr	r3, [r3, #4]
 800644c:	4abe      	ldr	r2, [pc, #760]	; (8006748 <UART_SetConfig+0x344>)
 800644e:	4013      	ands	r3, r2
 8006450:	0019      	movs	r1, r3
 8006452:	69fb      	ldr	r3, [r7, #28]
 8006454:	68da      	ldr	r2, [r3, #12]
 8006456:	69fb      	ldr	r3, [r7, #28]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	430a      	orrs	r2, r1
 800645c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800645e:	69fb      	ldr	r3, [r7, #28]
 8006460:	699b      	ldr	r3, [r3, #24]
 8006462:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006464:	69fb      	ldr	r3, [r7, #28]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4ab8      	ldr	r2, [pc, #736]	; (800674c <UART_SetConfig+0x348>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d004      	beq.n	8006478 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800646e:	69fb      	ldr	r3, [r7, #28]
 8006470:	6a1b      	ldr	r3, [r3, #32]
 8006472:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006474:	4313      	orrs	r3, r2
 8006476:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006478:	69fb      	ldr	r3, [r7, #28]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	689b      	ldr	r3, [r3, #8]
 800647e:	4ab4      	ldr	r2, [pc, #720]	; (8006750 <UART_SetConfig+0x34c>)
 8006480:	4013      	ands	r3, r2
 8006482:	0019      	movs	r1, r3
 8006484:	69fb      	ldr	r3, [r7, #28]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800648a:	430a      	orrs	r2, r1
 800648c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800648e:	69fb      	ldr	r3, [r7, #28]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4ab0      	ldr	r2, [pc, #704]	; (8006754 <UART_SetConfig+0x350>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d131      	bne.n	80064fc <UART_SetConfig+0xf8>
 8006498:	4baf      	ldr	r3, [pc, #700]	; (8006758 <UART_SetConfig+0x354>)
 800649a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800649c:	2203      	movs	r2, #3
 800649e:	4013      	ands	r3, r2
 80064a0:	2b03      	cmp	r3, #3
 80064a2:	d01d      	beq.n	80064e0 <UART_SetConfig+0xdc>
 80064a4:	d823      	bhi.n	80064ee <UART_SetConfig+0xea>
 80064a6:	2b02      	cmp	r3, #2
 80064a8:	d00c      	beq.n	80064c4 <UART_SetConfig+0xc0>
 80064aa:	d820      	bhi.n	80064ee <UART_SetConfig+0xea>
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d002      	beq.n	80064b6 <UART_SetConfig+0xb2>
 80064b0:	2b01      	cmp	r3, #1
 80064b2:	d00e      	beq.n	80064d2 <UART_SetConfig+0xce>
 80064b4:	e01b      	b.n	80064ee <UART_SetConfig+0xea>
 80064b6:	231b      	movs	r3, #27
 80064b8:	2218      	movs	r2, #24
 80064ba:	189b      	adds	r3, r3, r2
 80064bc:	19db      	adds	r3, r3, r7
 80064be:	2201      	movs	r2, #1
 80064c0:	701a      	strb	r2, [r3, #0]
 80064c2:	e0b4      	b.n	800662e <UART_SetConfig+0x22a>
 80064c4:	231b      	movs	r3, #27
 80064c6:	2218      	movs	r2, #24
 80064c8:	189b      	adds	r3, r3, r2
 80064ca:	19db      	adds	r3, r3, r7
 80064cc:	2202      	movs	r2, #2
 80064ce:	701a      	strb	r2, [r3, #0]
 80064d0:	e0ad      	b.n	800662e <UART_SetConfig+0x22a>
 80064d2:	231b      	movs	r3, #27
 80064d4:	2218      	movs	r2, #24
 80064d6:	189b      	adds	r3, r3, r2
 80064d8:	19db      	adds	r3, r3, r7
 80064da:	2204      	movs	r2, #4
 80064dc:	701a      	strb	r2, [r3, #0]
 80064de:	e0a6      	b.n	800662e <UART_SetConfig+0x22a>
 80064e0:	231b      	movs	r3, #27
 80064e2:	2218      	movs	r2, #24
 80064e4:	189b      	adds	r3, r3, r2
 80064e6:	19db      	adds	r3, r3, r7
 80064e8:	2208      	movs	r2, #8
 80064ea:	701a      	strb	r2, [r3, #0]
 80064ec:	e09f      	b.n	800662e <UART_SetConfig+0x22a>
 80064ee:	231b      	movs	r3, #27
 80064f0:	2218      	movs	r2, #24
 80064f2:	189b      	adds	r3, r3, r2
 80064f4:	19db      	adds	r3, r3, r7
 80064f6:	2210      	movs	r2, #16
 80064f8:	701a      	strb	r2, [r3, #0]
 80064fa:	e098      	b.n	800662e <UART_SetConfig+0x22a>
 80064fc:	69fb      	ldr	r3, [r7, #28]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4a96      	ldr	r2, [pc, #600]	; (800675c <UART_SetConfig+0x358>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d131      	bne.n	800656a <UART_SetConfig+0x166>
 8006506:	4b94      	ldr	r3, [pc, #592]	; (8006758 <UART_SetConfig+0x354>)
 8006508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800650a:	220c      	movs	r2, #12
 800650c:	4013      	ands	r3, r2
 800650e:	2b0c      	cmp	r3, #12
 8006510:	d01d      	beq.n	800654e <UART_SetConfig+0x14a>
 8006512:	d823      	bhi.n	800655c <UART_SetConfig+0x158>
 8006514:	2b08      	cmp	r3, #8
 8006516:	d00c      	beq.n	8006532 <UART_SetConfig+0x12e>
 8006518:	d820      	bhi.n	800655c <UART_SetConfig+0x158>
 800651a:	2b00      	cmp	r3, #0
 800651c:	d002      	beq.n	8006524 <UART_SetConfig+0x120>
 800651e:	2b04      	cmp	r3, #4
 8006520:	d00e      	beq.n	8006540 <UART_SetConfig+0x13c>
 8006522:	e01b      	b.n	800655c <UART_SetConfig+0x158>
 8006524:	231b      	movs	r3, #27
 8006526:	2218      	movs	r2, #24
 8006528:	189b      	adds	r3, r3, r2
 800652a:	19db      	adds	r3, r3, r7
 800652c:	2200      	movs	r2, #0
 800652e:	701a      	strb	r2, [r3, #0]
 8006530:	e07d      	b.n	800662e <UART_SetConfig+0x22a>
 8006532:	231b      	movs	r3, #27
 8006534:	2218      	movs	r2, #24
 8006536:	189b      	adds	r3, r3, r2
 8006538:	19db      	adds	r3, r3, r7
 800653a:	2202      	movs	r2, #2
 800653c:	701a      	strb	r2, [r3, #0]
 800653e:	e076      	b.n	800662e <UART_SetConfig+0x22a>
 8006540:	231b      	movs	r3, #27
 8006542:	2218      	movs	r2, #24
 8006544:	189b      	adds	r3, r3, r2
 8006546:	19db      	adds	r3, r3, r7
 8006548:	2204      	movs	r2, #4
 800654a:	701a      	strb	r2, [r3, #0]
 800654c:	e06f      	b.n	800662e <UART_SetConfig+0x22a>
 800654e:	231b      	movs	r3, #27
 8006550:	2218      	movs	r2, #24
 8006552:	189b      	adds	r3, r3, r2
 8006554:	19db      	adds	r3, r3, r7
 8006556:	2208      	movs	r2, #8
 8006558:	701a      	strb	r2, [r3, #0]
 800655a:	e068      	b.n	800662e <UART_SetConfig+0x22a>
 800655c:	231b      	movs	r3, #27
 800655e:	2218      	movs	r2, #24
 8006560:	189b      	adds	r3, r3, r2
 8006562:	19db      	adds	r3, r3, r7
 8006564:	2210      	movs	r2, #16
 8006566:	701a      	strb	r2, [r3, #0]
 8006568:	e061      	b.n	800662e <UART_SetConfig+0x22a>
 800656a:	69fb      	ldr	r3, [r7, #28]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4a7c      	ldr	r2, [pc, #496]	; (8006760 <UART_SetConfig+0x35c>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d106      	bne.n	8006582 <UART_SetConfig+0x17e>
 8006574:	231b      	movs	r3, #27
 8006576:	2218      	movs	r2, #24
 8006578:	189b      	adds	r3, r3, r2
 800657a:	19db      	adds	r3, r3, r7
 800657c:	2200      	movs	r2, #0
 800657e:	701a      	strb	r2, [r3, #0]
 8006580:	e055      	b.n	800662e <UART_SetConfig+0x22a>
 8006582:	69fb      	ldr	r3, [r7, #28]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a77      	ldr	r2, [pc, #476]	; (8006764 <UART_SetConfig+0x360>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d106      	bne.n	800659a <UART_SetConfig+0x196>
 800658c:	231b      	movs	r3, #27
 800658e:	2218      	movs	r2, #24
 8006590:	189b      	adds	r3, r3, r2
 8006592:	19db      	adds	r3, r3, r7
 8006594:	2200      	movs	r2, #0
 8006596:	701a      	strb	r2, [r3, #0]
 8006598:	e049      	b.n	800662e <UART_SetConfig+0x22a>
 800659a:	69fb      	ldr	r3, [r7, #28]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4a6b      	ldr	r2, [pc, #428]	; (800674c <UART_SetConfig+0x348>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d13e      	bne.n	8006622 <UART_SetConfig+0x21e>
 80065a4:	4b6c      	ldr	r3, [pc, #432]	; (8006758 <UART_SetConfig+0x354>)
 80065a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80065a8:	23c0      	movs	r3, #192	; 0xc0
 80065aa:	011b      	lsls	r3, r3, #4
 80065ac:	4013      	ands	r3, r2
 80065ae:	22c0      	movs	r2, #192	; 0xc0
 80065b0:	0112      	lsls	r2, r2, #4
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d027      	beq.n	8006606 <UART_SetConfig+0x202>
 80065b6:	22c0      	movs	r2, #192	; 0xc0
 80065b8:	0112      	lsls	r2, r2, #4
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d82a      	bhi.n	8006614 <UART_SetConfig+0x210>
 80065be:	2280      	movs	r2, #128	; 0x80
 80065c0:	0112      	lsls	r2, r2, #4
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d011      	beq.n	80065ea <UART_SetConfig+0x1e6>
 80065c6:	2280      	movs	r2, #128	; 0x80
 80065c8:	0112      	lsls	r2, r2, #4
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d822      	bhi.n	8006614 <UART_SetConfig+0x210>
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d004      	beq.n	80065dc <UART_SetConfig+0x1d8>
 80065d2:	2280      	movs	r2, #128	; 0x80
 80065d4:	00d2      	lsls	r2, r2, #3
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d00e      	beq.n	80065f8 <UART_SetConfig+0x1f4>
 80065da:	e01b      	b.n	8006614 <UART_SetConfig+0x210>
 80065dc:	231b      	movs	r3, #27
 80065de:	2218      	movs	r2, #24
 80065e0:	189b      	adds	r3, r3, r2
 80065e2:	19db      	adds	r3, r3, r7
 80065e4:	2200      	movs	r2, #0
 80065e6:	701a      	strb	r2, [r3, #0]
 80065e8:	e021      	b.n	800662e <UART_SetConfig+0x22a>
 80065ea:	231b      	movs	r3, #27
 80065ec:	2218      	movs	r2, #24
 80065ee:	189b      	adds	r3, r3, r2
 80065f0:	19db      	adds	r3, r3, r7
 80065f2:	2202      	movs	r2, #2
 80065f4:	701a      	strb	r2, [r3, #0]
 80065f6:	e01a      	b.n	800662e <UART_SetConfig+0x22a>
 80065f8:	231b      	movs	r3, #27
 80065fa:	2218      	movs	r2, #24
 80065fc:	189b      	adds	r3, r3, r2
 80065fe:	19db      	adds	r3, r3, r7
 8006600:	2204      	movs	r2, #4
 8006602:	701a      	strb	r2, [r3, #0]
 8006604:	e013      	b.n	800662e <UART_SetConfig+0x22a>
 8006606:	231b      	movs	r3, #27
 8006608:	2218      	movs	r2, #24
 800660a:	189b      	adds	r3, r3, r2
 800660c:	19db      	adds	r3, r3, r7
 800660e:	2208      	movs	r2, #8
 8006610:	701a      	strb	r2, [r3, #0]
 8006612:	e00c      	b.n	800662e <UART_SetConfig+0x22a>
 8006614:	231b      	movs	r3, #27
 8006616:	2218      	movs	r2, #24
 8006618:	189b      	adds	r3, r3, r2
 800661a:	19db      	adds	r3, r3, r7
 800661c:	2210      	movs	r2, #16
 800661e:	701a      	strb	r2, [r3, #0]
 8006620:	e005      	b.n	800662e <UART_SetConfig+0x22a>
 8006622:	231b      	movs	r3, #27
 8006624:	2218      	movs	r2, #24
 8006626:	189b      	adds	r3, r3, r2
 8006628:	19db      	adds	r3, r3, r7
 800662a:	2210      	movs	r2, #16
 800662c:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800662e:	69fb      	ldr	r3, [r7, #28]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4a46      	ldr	r2, [pc, #280]	; (800674c <UART_SetConfig+0x348>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d000      	beq.n	800663a <UART_SetConfig+0x236>
 8006638:	e09a      	b.n	8006770 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800663a:	231b      	movs	r3, #27
 800663c:	2218      	movs	r2, #24
 800663e:	189b      	adds	r3, r3, r2
 8006640:	19db      	adds	r3, r3, r7
 8006642:	781b      	ldrb	r3, [r3, #0]
 8006644:	2b08      	cmp	r3, #8
 8006646:	d01d      	beq.n	8006684 <UART_SetConfig+0x280>
 8006648:	dc20      	bgt.n	800668c <UART_SetConfig+0x288>
 800664a:	2b04      	cmp	r3, #4
 800664c:	d015      	beq.n	800667a <UART_SetConfig+0x276>
 800664e:	dc1d      	bgt.n	800668c <UART_SetConfig+0x288>
 8006650:	2b00      	cmp	r3, #0
 8006652:	d002      	beq.n	800665a <UART_SetConfig+0x256>
 8006654:	2b02      	cmp	r3, #2
 8006656:	d005      	beq.n	8006664 <UART_SetConfig+0x260>
 8006658:	e018      	b.n	800668c <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800665a:	f7fe ffbd 	bl	80055d8 <HAL_RCC_GetPCLK1Freq>
 800665e:	0003      	movs	r3, r0
 8006660:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006662:	e01c      	b.n	800669e <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006664:	4b3c      	ldr	r3, [pc, #240]	; (8006758 <UART_SetConfig+0x354>)
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	2210      	movs	r2, #16
 800666a:	4013      	ands	r3, r2
 800666c:	d002      	beq.n	8006674 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800666e:	4b3e      	ldr	r3, [pc, #248]	; (8006768 <UART_SetConfig+0x364>)
 8006670:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006672:	e014      	b.n	800669e <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8006674:	4b3d      	ldr	r3, [pc, #244]	; (800676c <UART_SetConfig+0x368>)
 8006676:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006678:	e011      	b.n	800669e <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800667a:	f7fe fefd 	bl	8005478 <HAL_RCC_GetSysClockFreq>
 800667e:	0003      	movs	r3, r0
 8006680:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006682:	e00c      	b.n	800669e <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006684:	2380      	movs	r3, #128	; 0x80
 8006686:	021b      	lsls	r3, r3, #8
 8006688:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800668a:	e008      	b.n	800669e <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 800668c:	2300      	movs	r3, #0
 800668e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006690:	231a      	movs	r3, #26
 8006692:	2218      	movs	r2, #24
 8006694:	189b      	adds	r3, r3, r2
 8006696:	19db      	adds	r3, r3, r7
 8006698:	2201      	movs	r2, #1
 800669a:	701a      	strb	r2, [r3, #0]
        break;
 800669c:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800669e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d100      	bne.n	80066a6 <UART_SetConfig+0x2a2>
 80066a4:	e134      	b.n	8006910 <UART_SetConfig+0x50c>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80066a6:	69fb      	ldr	r3, [r7, #28]
 80066a8:	685a      	ldr	r2, [r3, #4]
 80066aa:	0013      	movs	r3, r2
 80066ac:	005b      	lsls	r3, r3, #1
 80066ae:	189b      	adds	r3, r3, r2
 80066b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80066b2:	429a      	cmp	r2, r3
 80066b4:	d305      	bcc.n	80066c2 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 80066b6:	69fb      	ldr	r3, [r7, #28]
 80066b8:	685b      	ldr	r3, [r3, #4]
 80066ba:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80066bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80066be:	429a      	cmp	r2, r3
 80066c0:	d906      	bls.n	80066d0 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 80066c2:	231a      	movs	r3, #26
 80066c4:	2218      	movs	r2, #24
 80066c6:	189b      	adds	r3, r3, r2
 80066c8:	19db      	adds	r3, r3, r7
 80066ca:	2201      	movs	r2, #1
 80066cc:	701a      	strb	r2, [r3, #0]
 80066ce:	e11f      	b.n	8006910 <UART_SetConfig+0x50c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80066d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066d2:	613b      	str	r3, [r7, #16]
 80066d4:	2300      	movs	r3, #0
 80066d6:	617b      	str	r3, [r7, #20]
 80066d8:	6939      	ldr	r1, [r7, #16]
 80066da:	697a      	ldr	r2, [r7, #20]
 80066dc:	000b      	movs	r3, r1
 80066de:	0e1b      	lsrs	r3, r3, #24
 80066e0:	0010      	movs	r0, r2
 80066e2:	0205      	lsls	r5, r0, #8
 80066e4:	431d      	orrs	r5, r3
 80066e6:	000b      	movs	r3, r1
 80066e8:	021c      	lsls	r4, r3, #8
 80066ea:	69fb      	ldr	r3, [r7, #28]
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	085b      	lsrs	r3, r3, #1
 80066f0:	60bb      	str	r3, [r7, #8]
 80066f2:	2300      	movs	r3, #0
 80066f4:	60fb      	str	r3, [r7, #12]
 80066f6:	68b8      	ldr	r0, [r7, #8]
 80066f8:	68f9      	ldr	r1, [r7, #12]
 80066fa:	1900      	adds	r0, r0, r4
 80066fc:	4169      	adcs	r1, r5
 80066fe:	69fb      	ldr	r3, [r7, #28]
 8006700:	685b      	ldr	r3, [r3, #4]
 8006702:	603b      	str	r3, [r7, #0]
 8006704:	2300      	movs	r3, #0
 8006706:	607b      	str	r3, [r7, #4]
 8006708:	683a      	ldr	r2, [r7, #0]
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	f7f9 fecc 	bl	80004a8 <__aeabi_uldivmod>
 8006710:	0002      	movs	r2, r0
 8006712:	000b      	movs	r3, r1
 8006714:	0013      	movs	r3, r2
 8006716:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006718:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800671a:	23c0      	movs	r3, #192	; 0xc0
 800671c:	009b      	lsls	r3, r3, #2
 800671e:	429a      	cmp	r2, r3
 8006720:	d309      	bcc.n	8006736 <UART_SetConfig+0x332>
 8006722:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006724:	2380      	movs	r3, #128	; 0x80
 8006726:	035b      	lsls	r3, r3, #13
 8006728:	429a      	cmp	r2, r3
 800672a:	d204      	bcs.n	8006736 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 800672c:	69fb      	ldr	r3, [r7, #28]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006732:	60da      	str	r2, [r3, #12]
 8006734:	e0ec      	b.n	8006910 <UART_SetConfig+0x50c>
        }
        else
        {
          ret = HAL_ERROR;
 8006736:	231a      	movs	r3, #26
 8006738:	2218      	movs	r2, #24
 800673a:	189b      	adds	r3, r3, r2
 800673c:	19db      	adds	r3, r3, r7
 800673e:	2201      	movs	r2, #1
 8006740:	701a      	strb	r2, [r3, #0]
 8006742:	e0e5      	b.n	8006910 <UART_SetConfig+0x50c>
 8006744:	efff69f3 	.word	0xefff69f3
 8006748:	ffffcfff 	.word	0xffffcfff
 800674c:	40004800 	.word	0x40004800
 8006750:	fffff4ff 	.word	0xfffff4ff
 8006754:	40013800 	.word	0x40013800
 8006758:	40021000 	.word	0x40021000
 800675c:	40004400 	.word	0x40004400
 8006760:	40004c00 	.word	0x40004c00
 8006764:	40005000 	.word	0x40005000
 8006768:	003d0900 	.word	0x003d0900
 800676c:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006770:	69fb      	ldr	r3, [r7, #28]
 8006772:	69da      	ldr	r2, [r3, #28]
 8006774:	2380      	movs	r3, #128	; 0x80
 8006776:	021b      	lsls	r3, r3, #8
 8006778:	429a      	cmp	r2, r3
 800677a:	d000      	beq.n	800677e <UART_SetConfig+0x37a>
 800677c:	e071      	b.n	8006862 <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 800677e:	231b      	movs	r3, #27
 8006780:	2218      	movs	r2, #24
 8006782:	189b      	adds	r3, r3, r2
 8006784:	19db      	adds	r3, r3, r7
 8006786:	781b      	ldrb	r3, [r3, #0]
 8006788:	2b08      	cmp	r3, #8
 800678a:	d822      	bhi.n	80067d2 <UART_SetConfig+0x3ce>
 800678c:	009a      	lsls	r2, r3, #2
 800678e:	4b68      	ldr	r3, [pc, #416]	; (8006930 <UART_SetConfig+0x52c>)
 8006790:	18d3      	adds	r3, r2, r3
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006796:	f7fe ff1f 	bl	80055d8 <HAL_RCC_GetPCLK1Freq>
 800679a:	0003      	movs	r3, r0
 800679c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800679e:	e021      	b.n	80067e4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80067a0:	f7fe ff30 	bl	8005604 <HAL_RCC_GetPCLK2Freq>
 80067a4:	0003      	movs	r3, r0
 80067a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80067a8:	e01c      	b.n	80067e4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80067aa:	4b62      	ldr	r3, [pc, #392]	; (8006934 <UART_SetConfig+0x530>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	2210      	movs	r2, #16
 80067b0:	4013      	ands	r3, r2
 80067b2:	d002      	beq.n	80067ba <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80067b4:	4b60      	ldr	r3, [pc, #384]	; (8006938 <UART_SetConfig+0x534>)
 80067b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80067b8:	e014      	b.n	80067e4 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 80067ba:	4b60      	ldr	r3, [pc, #384]	; (800693c <UART_SetConfig+0x538>)
 80067bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80067be:	e011      	b.n	80067e4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80067c0:	f7fe fe5a 	bl	8005478 <HAL_RCC_GetSysClockFreq>
 80067c4:	0003      	movs	r3, r0
 80067c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80067c8:	e00c      	b.n	80067e4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80067ca:	2380      	movs	r3, #128	; 0x80
 80067cc:	021b      	lsls	r3, r3, #8
 80067ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80067d0:	e008      	b.n	80067e4 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 80067d2:	2300      	movs	r3, #0
 80067d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80067d6:	231a      	movs	r3, #26
 80067d8:	2218      	movs	r2, #24
 80067da:	189b      	adds	r3, r3, r2
 80067dc:	19db      	adds	r3, r3, r7
 80067de:	2201      	movs	r2, #1
 80067e0:	701a      	strb	r2, [r3, #0]
        break;
 80067e2:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80067e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d100      	bne.n	80067ec <UART_SetConfig+0x3e8>
 80067ea:	e091      	b.n	8006910 <UART_SetConfig+0x50c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80067ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067ee:	005a      	lsls	r2, r3, #1
 80067f0:	69fb      	ldr	r3, [r7, #28]
 80067f2:	685b      	ldr	r3, [r3, #4]
 80067f4:	085b      	lsrs	r3, r3, #1
 80067f6:	18d2      	adds	r2, r2, r3
 80067f8:	69fb      	ldr	r3, [r7, #28]
 80067fa:	685b      	ldr	r3, [r3, #4]
 80067fc:	0019      	movs	r1, r3
 80067fe:	0010      	movs	r0, r2
 8006800:	f7f9 fc9e 	bl	8000140 <__udivsi3>
 8006804:	0003      	movs	r3, r0
 8006806:	b29b      	uxth	r3, r3
 8006808:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800680a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800680c:	2b0f      	cmp	r3, #15
 800680e:	d921      	bls.n	8006854 <UART_SetConfig+0x450>
 8006810:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006812:	2380      	movs	r3, #128	; 0x80
 8006814:	025b      	lsls	r3, r3, #9
 8006816:	429a      	cmp	r2, r3
 8006818:	d21c      	bcs.n	8006854 <UART_SetConfig+0x450>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800681a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800681c:	b29a      	uxth	r2, r3
 800681e:	200e      	movs	r0, #14
 8006820:	2418      	movs	r4, #24
 8006822:	1903      	adds	r3, r0, r4
 8006824:	19db      	adds	r3, r3, r7
 8006826:	210f      	movs	r1, #15
 8006828:	438a      	bics	r2, r1
 800682a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800682c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800682e:	085b      	lsrs	r3, r3, #1
 8006830:	b29b      	uxth	r3, r3
 8006832:	2207      	movs	r2, #7
 8006834:	4013      	ands	r3, r2
 8006836:	b299      	uxth	r1, r3
 8006838:	1903      	adds	r3, r0, r4
 800683a:	19db      	adds	r3, r3, r7
 800683c:	1902      	adds	r2, r0, r4
 800683e:	19d2      	adds	r2, r2, r7
 8006840:	8812      	ldrh	r2, [r2, #0]
 8006842:	430a      	orrs	r2, r1
 8006844:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006846:	69fb      	ldr	r3, [r7, #28]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	1902      	adds	r2, r0, r4
 800684c:	19d2      	adds	r2, r2, r7
 800684e:	8812      	ldrh	r2, [r2, #0]
 8006850:	60da      	str	r2, [r3, #12]
 8006852:	e05d      	b.n	8006910 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8006854:	231a      	movs	r3, #26
 8006856:	2218      	movs	r2, #24
 8006858:	189b      	adds	r3, r3, r2
 800685a:	19db      	adds	r3, r3, r7
 800685c:	2201      	movs	r2, #1
 800685e:	701a      	strb	r2, [r3, #0]
 8006860:	e056      	b.n	8006910 <UART_SetConfig+0x50c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006862:	231b      	movs	r3, #27
 8006864:	2218      	movs	r2, #24
 8006866:	189b      	adds	r3, r3, r2
 8006868:	19db      	adds	r3, r3, r7
 800686a:	781b      	ldrb	r3, [r3, #0]
 800686c:	2b08      	cmp	r3, #8
 800686e:	d822      	bhi.n	80068b6 <UART_SetConfig+0x4b2>
 8006870:	009a      	lsls	r2, r3, #2
 8006872:	4b33      	ldr	r3, [pc, #204]	; (8006940 <UART_SetConfig+0x53c>)
 8006874:	18d3      	adds	r3, r2, r3
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800687a:	f7fe fead 	bl	80055d8 <HAL_RCC_GetPCLK1Freq>
 800687e:	0003      	movs	r3, r0
 8006880:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006882:	e021      	b.n	80068c8 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006884:	f7fe febe 	bl	8005604 <HAL_RCC_GetPCLK2Freq>
 8006888:	0003      	movs	r3, r0
 800688a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800688c:	e01c      	b.n	80068c8 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800688e:	4b29      	ldr	r3, [pc, #164]	; (8006934 <UART_SetConfig+0x530>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	2210      	movs	r2, #16
 8006894:	4013      	ands	r3, r2
 8006896:	d002      	beq.n	800689e <UART_SetConfig+0x49a>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8006898:	4b27      	ldr	r3, [pc, #156]	; (8006938 <UART_SetConfig+0x534>)
 800689a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800689c:	e014      	b.n	80068c8 <UART_SetConfig+0x4c4>
          pclk = (uint32_t) HSI_VALUE;
 800689e:	4b27      	ldr	r3, [pc, #156]	; (800693c <UART_SetConfig+0x538>)
 80068a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80068a2:	e011      	b.n	80068c8 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80068a4:	f7fe fde8 	bl	8005478 <HAL_RCC_GetSysClockFreq>
 80068a8:	0003      	movs	r3, r0
 80068aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80068ac:	e00c      	b.n	80068c8 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80068ae:	2380      	movs	r3, #128	; 0x80
 80068b0:	021b      	lsls	r3, r3, #8
 80068b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80068b4:	e008      	b.n	80068c8 <UART_SetConfig+0x4c4>
      default:
        pclk = 0U;
 80068b6:	2300      	movs	r3, #0
 80068b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80068ba:	231a      	movs	r3, #26
 80068bc:	2218      	movs	r2, #24
 80068be:	189b      	adds	r3, r3, r2
 80068c0:	19db      	adds	r3, r3, r7
 80068c2:	2201      	movs	r2, #1
 80068c4:	701a      	strb	r2, [r3, #0]
        break;
 80068c6:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80068c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d020      	beq.n	8006910 <UART_SetConfig+0x50c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80068ce:	69fb      	ldr	r3, [r7, #28]
 80068d0:	685b      	ldr	r3, [r3, #4]
 80068d2:	085a      	lsrs	r2, r3, #1
 80068d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068d6:	18d2      	adds	r2, r2, r3
 80068d8:	69fb      	ldr	r3, [r7, #28]
 80068da:	685b      	ldr	r3, [r3, #4]
 80068dc:	0019      	movs	r1, r3
 80068de:	0010      	movs	r0, r2
 80068e0:	f7f9 fc2e 	bl	8000140 <__udivsi3>
 80068e4:	0003      	movs	r3, r0
 80068e6:	b29b      	uxth	r3, r3
 80068e8:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80068ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ec:	2b0f      	cmp	r3, #15
 80068ee:	d909      	bls.n	8006904 <UART_SetConfig+0x500>
 80068f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80068f2:	2380      	movs	r3, #128	; 0x80
 80068f4:	025b      	lsls	r3, r3, #9
 80068f6:	429a      	cmp	r2, r3
 80068f8:	d204      	bcs.n	8006904 <UART_SetConfig+0x500>
      {
        huart->Instance->BRR = usartdiv;
 80068fa:	69fb      	ldr	r3, [r7, #28]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006900:	60da      	str	r2, [r3, #12]
 8006902:	e005      	b.n	8006910 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8006904:	231a      	movs	r3, #26
 8006906:	2218      	movs	r2, #24
 8006908:	189b      	adds	r3, r3, r2
 800690a:	19db      	adds	r3, r3, r7
 800690c:	2201      	movs	r2, #1
 800690e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006910:	69fb      	ldr	r3, [r7, #28]
 8006912:	2200      	movs	r2, #0
 8006914:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006916:	69fb      	ldr	r3, [r7, #28]
 8006918:	2200      	movs	r2, #0
 800691a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800691c:	231a      	movs	r3, #26
 800691e:	2218      	movs	r2, #24
 8006920:	189b      	adds	r3, r3, r2
 8006922:	19db      	adds	r3, r3, r7
 8006924:	781b      	ldrb	r3, [r3, #0]
}
 8006926:	0018      	movs	r0, r3
 8006928:	46bd      	mov	sp, r7
 800692a:	b00e      	add	sp, #56	; 0x38
 800692c:	bdb0      	pop	{r4, r5, r7, pc}
 800692e:	46c0      	nop			; (mov r8, r8)
 8006930:	08009e30 	.word	0x08009e30
 8006934:	40021000 	.word	0x40021000
 8006938:	003d0900 	.word	0x003d0900
 800693c:	00f42400 	.word	0x00f42400
 8006940:	08009e54 	.word	0x08009e54

08006944 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b082      	sub	sp, #8
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006950:	2201      	movs	r2, #1
 8006952:	4013      	ands	r3, r2
 8006954:	d00b      	beq.n	800696e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	685b      	ldr	r3, [r3, #4]
 800695c:	4a4a      	ldr	r2, [pc, #296]	; (8006a88 <UART_AdvFeatureConfig+0x144>)
 800695e:	4013      	ands	r3, r2
 8006960:	0019      	movs	r1, r3
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	430a      	orrs	r2, r1
 800696c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006972:	2202      	movs	r2, #2
 8006974:	4013      	ands	r3, r2
 8006976:	d00b      	beq.n	8006990 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	685b      	ldr	r3, [r3, #4]
 800697e:	4a43      	ldr	r2, [pc, #268]	; (8006a8c <UART_AdvFeatureConfig+0x148>)
 8006980:	4013      	ands	r3, r2
 8006982:	0019      	movs	r1, r3
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	430a      	orrs	r2, r1
 800698e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006994:	2204      	movs	r2, #4
 8006996:	4013      	ands	r3, r2
 8006998:	d00b      	beq.n	80069b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	685b      	ldr	r3, [r3, #4]
 80069a0:	4a3b      	ldr	r2, [pc, #236]	; (8006a90 <UART_AdvFeatureConfig+0x14c>)
 80069a2:	4013      	ands	r3, r2
 80069a4:	0019      	movs	r1, r3
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	430a      	orrs	r2, r1
 80069b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069b6:	2208      	movs	r2, #8
 80069b8:	4013      	ands	r3, r2
 80069ba:	d00b      	beq.n	80069d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	4a34      	ldr	r2, [pc, #208]	; (8006a94 <UART_AdvFeatureConfig+0x150>)
 80069c4:	4013      	ands	r3, r2
 80069c6:	0019      	movs	r1, r3
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	430a      	orrs	r2, r1
 80069d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069d8:	2210      	movs	r2, #16
 80069da:	4013      	ands	r3, r2
 80069dc:	d00b      	beq.n	80069f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	689b      	ldr	r3, [r3, #8]
 80069e4:	4a2c      	ldr	r2, [pc, #176]	; (8006a98 <UART_AdvFeatureConfig+0x154>)
 80069e6:	4013      	ands	r3, r2
 80069e8:	0019      	movs	r1, r3
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	430a      	orrs	r2, r1
 80069f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069fa:	2220      	movs	r2, #32
 80069fc:	4013      	ands	r3, r2
 80069fe:	d00b      	beq.n	8006a18 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	689b      	ldr	r3, [r3, #8]
 8006a06:	4a25      	ldr	r2, [pc, #148]	; (8006a9c <UART_AdvFeatureConfig+0x158>)
 8006a08:	4013      	ands	r3, r2
 8006a0a:	0019      	movs	r1, r3
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	430a      	orrs	r2, r1
 8006a16:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a1c:	2240      	movs	r2, #64	; 0x40
 8006a1e:	4013      	ands	r3, r2
 8006a20:	d01d      	beq.n	8006a5e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	4a1d      	ldr	r2, [pc, #116]	; (8006aa0 <UART_AdvFeatureConfig+0x15c>)
 8006a2a:	4013      	ands	r3, r2
 8006a2c:	0019      	movs	r1, r3
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	430a      	orrs	r2, r1
 8006a38:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a3e:	2380      	movs	r3, #128	; 0x80
 8006a40:	035b      	lsls	r3, r3, #13
 8006a42:	429a      	cmp	r2, r3
 8006a44:	d10b      	bne.n	8006a5e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	685b      	ldr	r3, [r3, #4]
 8006a4c:	4a15      	ldr	r2, [pc, #84]	; (8006aa4 <UART_AdvFeatureConfig+0x160>)
 8006a4e:	4013      	ands	r3, r2
 8006a50:	0019      	movs	r1, r3
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	430a      	orrs	r2, r1
 8006a5c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a62:	2280      	movs	r2, #128	; 0x80
 8006a64:	4013      	ands	r3, r2
 8006a66:	d00b      	beq.n	8006a80 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	685b      	ldr	r3, [r3, #4]
 8006a6e:	4a0e      	ldr	r2, [pc, #56]	; (8006aa8 <UART_AdvFeatureConfig+0x164>)
 8006a70:	4013      	ands	r3, r2
 8006a72:	0019      	movs	r1, r3
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	430a      	orrs	r2, r1
 8006a7e:	605a      	str	r2, [r3, #4]
  }
}
 8006a80:	46c0      	nop			; (mov r8, r8)
 8006a82:	46bd      	mov	sp, r7
 8006a84:	b002      	add	sp, #8
 8006a86:	bd80      	pop	{r7, pc}
 8006a88:	fffdffff 	.word	0xfffdffff
 8006a8c:	fffeffff 	.word	0xfffeffff
 8006a90:	fffbffff 	.word	0xfffbffff
 8006a94:	ffff7fff 	.word	0xffff7fff
 8006a98:	ffffefff 	.word	0xffffefff
 8006a9c:	ffffdfff 	.word	0xffffdfff
 8006aa0:	ffefffff 	.word	0xffefffff
 8006aa4:	ff9fffff 	.word	0xff9fffff
 8006aa8:	fff7ffff 	.word	0xfff7ffff

08006aac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b086      	sub	sp, #24
 8006ab0:	af02      	add	r7, sp, #8
 8006ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2280      	movs	r2, #128	; 0x80
 8006ab8:	2100      	movs	r1, #0
 8006aba:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006abc:	f7fc fbd6 	bl	800326c <HAL_GetTick>
 8006ac0:	0003      	movs	r3, r0
 8006ac2:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	2208      	movs	r2, #8
 8006acc:	4013      	ands	r3, r2
 8006ace:	2b08      	cmp	r3, #8
 8006ad0:	d10c      	bne.n	8006aec <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	2280      	movs	r2, #128	; 0x80
 8006ad6:	0391      	lsls	r1, r2, #14
 8006ad8:	6878      	ldr	r0, [r7, #4]
 8006ada:	4a17      	ldr	r2, [pc, #92]	; (8006b38 <UART_CheckIdleState+0x8c>)
 8006adc:	9200      	str	r2, [sp, #0]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	f000 f82c 	bl	8006b3c <UART_WaitOnFlagUntilTimeout>
 8006ae4:	1e03      	subs	r3, r0, #0
 8006ae6:	d001      	beq.n	8006aec <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ae8:	2303      	movs	r3, #3
 8006aea:	e021      	b.n	8006b30 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	2204      	movs	r2, #4
 8006af4:	4013      	ands	r3, r2
 8006af6:	2b04      	cmp	r3, #4
 8006af8:	d10c      	bne.n	8006b14 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	2280      	movs	r2, #128	; 0x80
 8006afe:	03d1      	lsls	r1, r2, #15
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	4a0d      	ldr	r2, [pc, #52]	; (8006b38 <UART_CheckIdleState+0x8c>)
 8006b04:	9200      	str	r2, [sp, #0]
 8006b06:	2200      	movs	r2, #0
 8006b08:	f000 f818 	bl	8006b3c <UART_WaitOnFlagUntilTimeout>
 8006b0c:	1e03      	subs	r3, r0, #0
 8006b0e:	d001      	beq.n	8006b14 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b10:	2303      	movs	r3, #3
 8006b12:	e00d      	b.n	8006b30 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2220      	movs	r2, #32
 8006b18:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2220      	movs	r2, #32
 8006b1e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2200      	movs	r2, #0
 8006b24:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2274      	movs	r2, #116	; 0x74
 8006b2a:	2100      	movs	r1, #0
 8006b2c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006b2e:	2300      	movs	r3, #0
}
 8006b30:	0018      	movs	r0, r3
 8006b32:	46bd      	mov	sp, r7
 8006b34:	b004      	add	sp, #16
 8006b36:	bd80      	pop	{r7, pc}
 8006b38:	01ffffff 	.word	0x01ffffff

08006b3c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b094      	sub	sp, #80	; 0x50
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	60f8      	str	r0, [r7, #12]
 8006b44:	60b9      	str	r1, [r7, #8]
 8006b46:	603b      	str	r3, [r7, #0]
 8006b48:	1dfb      	adds	r3, r7, #7
 8006b4a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b4c:	e0a3      	b.n	8006c96 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006b50:	3301      	adds	r3, #1
 8006b52:	d100      	bne.n	8006b56 <UART_WaitOnFlagUntilTimeout+0x1a>
 8006b54:	e09f      	b.n	8006c96 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b56:	f7fc fb89 	bl	800326c <HAL_GetTick>
 8006b5a:	0002      	movs	r2, r0
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	1ad3      	subs	r3, r2, r3
 8006b60:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006b62:	429a      	cmp	r2, r3
 8006b64:	d302      	bcc.n	8006b6c <UART_WaitOnFlagUntilTimeout+0x30>
 8006b66:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d13d      	bne.n	8006be8 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b6c:	f3ef 8310 	mrs	r3, PRIMASK
 8006b70:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8006b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006b74:	647b      	str	r3, [r7, #68]	; 0x44
 8006b76:	2301      	movs	r3, #1
 8006b78:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b7c:	f383 8810 	msr	PRIMASK, r3
}
 8006b80:	46c0      	nop			; (mov r8, r8)
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	681a      	ldr	r2, [r3, #0]
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	494c      	ldr	r1, [pc, #304]	; (8006cc0 <UART_WaitOnFlagUntilTimeout+0x184>)
 8006b8e:	400a      	ands	r2, r1
 8006b90:	601a      	str	r2, [r3, #0]
 8006b92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b94:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b98:	f383 8810 	msr	PRIMASK, r3
}
 8006b9c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b9e:	f3ef 8310 	mrs	r3, PRIMASK
 8006ba2:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8006ba4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ba6:	643b      	str	r3, [r7, #64]	; 0x40
 8006ba8:	2301      	movs	r3, #1
 8006baa:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006bac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bae:	f383 8810 	msr	PRIMASK, r3
}
 8006bb2:	46c0      	nop			; (mov r8, r8)
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	689a      	ldr	r2, [r3, #8]
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	2101      	movs	r1, #1
 8006bc0:	438a      	bics	r2, r1
 8006bc2:	609a      	str	r2, [r3, #8]
 8006bc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006bc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bca:	f383 8810 	msr	PRIMASK, r3
}
 8006bce:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	2220      	movs	r2, #32
 8006bd4:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	2220      	movs	r2, #32
 8006bda:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	2274      	movs	r2, #116	; 0x74
 8006be0:	2100      	movs	r1, #0
 8006be2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006be4:	2303      	movs	r3, #3
 8006be6:	e067      	b.n	8006cb8 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	2204      	movs	r2, #4
 8006bf0:	4013      	ands	r3, r2
 8006bf2:	d050      	beq.n	8006c96 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	69da      	ldr	r2, [r3, #28]
 8006bfa:	2380      	movs	r3, #128	; 0x80
 8006bfc:	011b      	lsls	r3, r3, #4
 8006bfe:	401a      	ands	r2, r3
 8006c00:	2380      	movs	r3, #128	; 0x80
 8006c02:	011b      	lsls	r3, r3, #4
 8006c04:	429a      	cmp	r2, r3
 8006c06:	d146      	bne.n	8006c96 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	2280      	movs	r2, #128	; 0x80
 8006c0e:	0112      	lsls	r2, r2, #4
 8006c10:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c12:	f3ef 8310 	mrs	r3, PRIMASK
 8006c16:	613b      	str	r3, [r7, #16]
  return(result);
 8006c18:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006c1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c1c:	2301      	movs	r3, #1
 8006c1e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c20:	697b      	ldr	r3, [r7, #20]
 8006c22:	f383 8810 	msr	PRIMASK, r3
}
 8006c26:	46c0      	nop			; (mov r8, r8)
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	681a      	ldr	r2, [r3, #0]
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4923      	ldr	r1, [pc, #140]	; (8006cc0 <UART_WaitOnFlagUntilTimeout+0x184>)
 8006c34:	400a      	ands	r2, r1
 8006c36:	601a      	str	r2, [r3, #0]
 8006c38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c3a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c3c:	69bb      	ldr	r3, [r7, #24]
 8006c3e:	f383 8810 	msr	PRIMASK, r3
}
 8006c42:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c44:	f3ef 8310 	mrs	r3, PRIMASK
 8006c48:	61fb      	str	r3, [r7, #28]
  return(result);
 8006c4a:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c4c:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c4e:	2301      	movs	r3, #1
 8006c50:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c52:	6a3b      	ldr	r3, [r7, #32]
 8006c54:	f383 8810 	msr	PRIMASK, r3
}
 8006c58:	46c0      	nop			; (mov r8, r8)
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	689a      	ldr	r2, [r3, #8]
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	2101      	movs	r1, #1
 8006c66:	438a      	bics	r2, r1
 8006c68:	609a      	str	r2, [r3, #8]
 8006c6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c6c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c70:	f383 8810 	msr	PRIMASK, r3
}
 8006c74:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	2220      	movs	r2, #32
 8006c7a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	2220      	movs	r2, #32
 8006c80:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	2280      	movs	r2, #128	; 0x80
 8006c86:	2120      	movs	r1, #32
 8006c88:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	2274      	movs	r2, #116	; 0x74
 8006c8e:	2100      	movs	r1, #0
 8006c90:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006c92:	2303      	movs	r3, #3
 8006c94:	e010      	b.n	8006cb8 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	69db      	ldr	r3, [r3, #28]
 8006c9c:	68ba      	ldr	r2, [r7, #8]
 8006c9e:	4013      	ands	r3, r2
 8006ca0:	68ba      	ldr	r2, [r7, #8]
 8006ca2:	1ad3      	subs	r3, r2, r3
 8006ca4:	425a      	negs	r2, r3
 8006ca6:	4153      	adcs	r3, r2
 8006ca8:	b2db      	uxtb	r3, r3
 8006caa:	001a      	movs	r2, r3
 8006cac:	1dfb      	adds	r3, r7, #7
 8006cae:	781b      	ldrb	r3, [r3, #0]
 8006cb0:	429a      	cmp	r2, r3
 8006cb2:	d100      	bne.n	8006cb6 <UART_WaitOnFlagUntilTimeout+0x17a>
 8006cb4:	e74b      	b.n	8006b4e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006cb6:	2300      	movs	r3, #0
}
 8006cb8:	0018      	movs	r0, r3
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	b014      	add	sp, #80	; 0x50
 8006cbe:	bd80      	pop	{r7, pc}
 8006cc0:	fffffe5f 	.word	0xfffffe5f

08006cc4 <__errno>:
 8006cc4:	4b01      	ldr	r3, [pc, #4]	; (8006ccc <__errno+0x8>)
 8006cc6:	6818      	ldr	r0, [r3, #0]
 8006cc8:	4770      	bx	lr
 8006cca:	46c0      	nop			; (mov r8, r8)
 8006ccc:	2000000c 	.word	0x2000000c

08006cd0 <__libc_init_array>:
 8006cd0:	b570      	push	{r4, r5, r6, lr}
 8006cd2:	2600      	movs	r6, #0
 8006cd4:	4d0c      	ldr	r5, [pc, #48]	; (8006d08 <__libc_init_array+0x38>)
 8006cd6:	4c0d      	ldr	r4, [pc, #52]	; (8006d0c <__libc_init_array+0x3c>)
 8006cd8:	1b64      	subs	r4, r4, r5
 8006cda:	10a4      	asrs	r4, r4, #2
 8006cdc:	42a6      	cmp	r6, r4
 8006cde:	d109      	bne.n	8006cf4 <__libc_init_array+0x24>
 8006ce0:	2600      	movs	r6, #0
 8006ce2:	f002 ffbb 	bl	8009c5c <_init>
 8006ce6:	4d0a      	ldr	r5, [pc, #40]	; (8006d10 <__libc_init_array+0x40>)
 8006ce8:	4c0a      	ldr	r4, [pc, #40]	; (8006d14 <__libc_init_array+0x44>)
 8006cea:	1b64      	subs	r4, r4, r5
 8006cec:	10a4      	asrs	r4, r4, #2
 8006cee:	42a6      	cmp	r6, r4
 8006cf0:	d105      	bne.n	8006cfe <__libc_init_array+0x2e>
 8006cf2:	bd70      	pop	{r4, r5, r6, pc}
 8006cf4:	00b3      	lsls	r3, r6, #2
 8006cf6:	58eb      	ldr	r3, [r5, r3]
 8006cf8:	4798      	blx	r3
 8006cfa:	3601      	adds	r6, #1
 8006cfc:	e7ee      	b.n	8006cdc <__libc_init_array+0xc>
 8006cfe:	00b3      	lsls	r3, r6, #2
 8006d00:	58eb      	ldr	r3, [r5, r3]
 8006d02:	4798      	blx	r3
 8006d04:	3601      	adds	r6, #1
 8006d06:	e7f2      	b.n	8006cee <__libc_init_array+0x1e>
 8006d08:	0800a25c 	.word	0x0800a25c
 8006d0c:	0800a25c 	.word	0x0800a25c
 8006d10:	0800a25c 	.word	0x0800a25c
 8006d14:	0800a260 	.word	0x0800a260

08006d18 <memset>:
 8006d18:	0003      	movs	r3, r0
 8006d1a:	1882      	adds	r2, r0, r2
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d100      	bne.n	8006d22 <memset+0xa>
 8006d20:	4770      	bx	lr
 8006d22:	7019      	strb	r1, [r3, #0]
 8006d24:	3301      	adds	r3, #1
 8006d26:	e7f9      	b.n	8006d1c <memset+0x4>

08006d28 <__cvt>:
 8006d28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d2a:	001e      	movs	r6, r3
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	0014      	movs	r4, r2
 8006d30:	b08b      	sub	sp, #44	; 0x2c
 8006d32:	429e      	cmp	r6, r3
 8006d34:	da04      	bge.n	8006d40 <__cvt+0x18>
 8006d36:	2180      	movs	r1, #128	; 0x80
 8006d38:	0609      	lsls	r1, r1, #24
 8006d3a:	1873      	adds	r3, r6, r1
 8006d3c:	001e      	movs	r6, r3
 8006d3e:	232d      	movs	r3, #45	; 0x2d
 8006d40:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006d42:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006d44:	7013      	strb	r3, [r2, #0]
 8006d46:	2320      	movs	r3, #32
 8006d48:	2203      	movs	r2, #3
 8006d4a:	439f      	bics	r7, r3
 8006d4c:	2f46      	cmp	r7, #70	; 0x46
 8006d4e:	d007      	beq.n	8006d60 <__cvt+0x38>
 8006d50:	003b      	movs	r3, r7
 8006d52:	3b45      	subs	r3, #69	; 0x45
 8006d54:	4259      	negs	r1, r3
 8006d56:	414b      	adcs	r3, r1
 8006d58:	9910      	ldr	r1, [sp, #64]	; 0x40
 8006d5a:	3a01      	subs	r2, #1
 8006d5c:	18cb      	adds	r3, r1, r3
 8006d5e:	9310      	str	r3, [sp, #64]	; 0x40
 8006d60:	ab09      	add	r3, sp, #36	; 0x24
 8006d62:	9304      	str	r3, [sp, #16]
 8006d64:	ab08      	add	r3, sp, #32
 8006d66:	9303      	str	r3, [sp, #12]
 8006d68:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006d6a:	9200      	str	r2, [sp, #0]
 8006d6c:	9302      	str	r3, [sp, #8]
 8006d6e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006d70:	0022      	movs	r2, r4
 8006d72:	9301      	str	r3, [sp, #4]
 8006d74:	0033      	movs	r3, r6
 8006d76:	f000 fcf1 	bl	800775c <_dtoa_r>
 8006d7a:	0005      	movs	r5, r0
 8006d7c:	2f47      	cmp	r7, #71	; 0x47
 8006d7e:	d102      	bne.n	8006d86 <__cvt+0x5e>
 8006d80:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006d82:	07db      	lsls	r3, r3, #31
 8006d84:	d528      	bpl.n	8006dd8 <__cvt+0xb0>
 8006d86:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006d88:	18eb      	adds	r3, r5, r3
 8006d8a:	9307      	str	r3, [sp, #28]
 8006d8c:	2f46      	cmp	r7, #70	; 0x46
 8006d8e:	d114      	bne.n	8006dba <__cvt+0x92>
 8006d90:	782b      	ldrb	r3, [r5, #0]
 8006d92:	2b30      	cmp	r3, #48	; 0x30
 8006d94:	d10c      	bne.n	8006db0 <__cvt+0x88>
 8006d96:	2200      	movs	r2, #0
 8006d98:	2300      	movs	r3, #0
 8006d9a:	0020      	movs	r0, r4
 8006d9c:	0031      	movs	r1, r6
 8006d9e:	f7f9 fb55 	bl	800044c <__aeabi_dcmpeq>
 8006da2:	2800      	cmp	r0, #0
 8006da4:	d104      	bne.n	8006db0 <__cvt+0x88>
 8006da6:	2301      	movs	r3, #1
 8006da8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006daa:	1a9b      	subs	r3, r3, r2
 8006dac:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006dae:	6013      	str	r3, [r2, #0]
 8006db0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006db2:	9a07      	ldr	r2, [sp, #28]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	18d3      	adds	r3, r2, r3
 8006db8:	9307      	str	r3, [sp, #28]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	0020      	movs	r0, r4
 8006dc0:	0031      	movs	r1, r6
 8006dc2:	f7f9 fb43 	bl	800044c <__aeabi_dcmpeq>
 8006dc6:	2800      	cmp	r0, #0
 8006dc8:	d001      	beq.n	8006dce <__cvt+0xa6>
 8006dca:	9b07      	ldr	r3, [sp, #28]
 8006dcc:	9309      	str	r3, [sp, #36]	; 0x24
 8006dce:	2230      	movs	r2, #48	; 0x30
 8006dd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dd2:	9907      	ldr	r1, [sp, #28]
 8006dd4:	428b      	cmp	r3, r1
 8006dd6:	d306      	bcc.n	8006de6 <__cvt+0xbe>
 8006dd8:	0028      	movs	r0, r5
 8006dda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ddc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006dde:	1b5b      	subs	r3, r3, r5
 8006de0:	6013      	str	r3, [r2, #0]
 8006de2:	b00b      	add	sp, #44	; 0x2c
 8006de4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006de6:	1c59      	adds	r1, r3, #1
 8006de8:	9109      	str	r1, [sp, #36]	; 0x24
 8006dea:	701a      	strb	r2, [r3, #0]
 8006dec:	e7f0      	b.n	8006dd0 <__cvt+0xa8>

08006dee <__exponent>:
 8006dee:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006df0:	1c83      	adds	r3, r0, #2
 8006df2:	b087      	sub	sp, #28
 8006df4:	9303      	str	r3, [sp, #12]
 8006df6:	0005      	movs	r5, r0
 8006df8:	000c      	movs	r4, r1
 8006dfa:	232b      	movs	r3, #43	; 0x2b
 8006dfc:	7002      	strb	r2, [r0, #0]
 8006dfe:	2900      	cmp	r1, #0
 8006e00:	da01      	bge.n	8006e06 <__exponent+0x18>
 8006e02:	424c      	negs	r4, r1
 8006e04:	3302      	adds	r3, #2
 8006e06:	706b      	strb	r3, [r5, #1]
 8006e08:	2c09      	cmp	r4, #9
 8006e0a:	dd31      	ble.n	8006e70 <__exponent+0x82>
 8006e0c:	270a      	movs	r7, #10
 8006e0e:	ab04      	add	r3, sp, #16
 8006e10:	1dde      	adds	r6, r3, #7
 8006e12:	0020      	movs	r0, r4
 8006e14:	0039      	movs	r1, r7
 8006e16:	9601      	str	r6, [sp, #4]
 8006e18:	f7f9 fb02 	bl	8000420 <__aeabi_idivmod>
 8006e1c:	3e01      	subs	r6, #1
 8006e1e:	3130      	adds	r1, #48	; 0x30
 8006e20:	0020      	movs	r0, r4
 8006e22:	7031      	strb	r1, [r6, #0]
 8006e24:	0039      	movs	r1, r7
 8006e26:	9402      	str	r4, [sp, #8]
 8006e28:	f7f9 fa14 	bl	8000254 <__divsi3>
 8006e2c:	9b02      	ldr	r3, [sp, #8]
 8006e2e:	0004      	movs	r4, r0
 8006e30:	2b63      	cmp	r3, #99	; 0x63
 8006e32:	dcee      	bgt.n	8006e12 <__exponent+0x24>
 8006e34:	9b01      	ldr	r3, [sp, #4]
 8006e36:	3430      	adds	r4, #48	; 0x30
 8006e38:	1e9a      	subs	r2, r3, #2
 8006e3a:	0013      	movs	r3, r2
 8006e3c:	9903      	ldr	r1, [sp, #12]
 8006e3e:	7014      	strb	r4, [r2, #0]
 8006e40:	a804      	add	r0, sp, #16
 8006e42:	3007      	adds	r0, #7
 8006e44:	4298      	cmp	r0, r3
 8006e46:	d80e      	bhi.n	8006e66 <__exponent+0x78>
 8006e48:	ab04      	add	r3, sp, #16
 8006e4a:	3307      	adds	r3, #7
 8006e4c:	2000      	movs	r0, #0
 8006e4e:	429a      	cmp	r2, r3
 8006e50:	d804      	bhi.n	8006e5c <__exponent+0x6e>
 8006e52:	ab04      	add	r3, sp, #16
 8006e54:	3009      	adds	r0, #9
 8006e56:	18c0      	adds	r0, r0, r3
 8006e58:	9b01      	ldr	r3, [sp, #4]
 8006e5a:	1ac0      	subs	r0, r0, r3
 8006e5c:	9b03      	ldr	r3, [sp, #12]
 8006e5e:	1818      	adds	r0, r3, r0
 8006e60:	1b40      	subs	r0, r0, r5
 8006e62:	b007      	add	sp, #28
 8006e64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e66:	7818      	ldrb	r0, [r3, #0]
 8006e68:	3301      	adds	r3, #1
 8006e6a:	7008      	strb	r0, [r1, #0]
 8006e6c:	3101      	adds	r1, #1
 8006e6e:	e7e7      	b.n	8006e40 <__exponent+0x52>
 8006e70:	2330      	movs	r3, #48	; 0x30
 8006e72:	18e4      	adds	r4, r4, r3
 8006e74:	70ab      	strb	r3, [r5, #2]
 8006e76:	1d28      	adds	r0, r5, #4
 8006e78:	70ec      	strb	r4, [r5, #3]
 8006e7a:	e7f1      	b.n	8006e60 <__exponent+0x72>

08006e7c <_printf_float>:
 8006e7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e7e:	b095      	sub	sp, #84	; 0x54
 8006e80:	000c      	movs	r4, r1
 8006e82:	9209      	str	r2, [sp, #36]	; 0x24
 8006e84:	001e      	movs	r6, r3
 8006e86:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8006e88:	0007      	movs	r7, r0
 8006e8a:	f001 fa81 	bl	8008390 <_localeconv_r>
 8006e8e:	6803      	ldr	r3, [r0, #0]
 8006e90:	0018      	movs	r0, r3
 8006e92:	930c      	str	r3, [sp, #48]	; 0x30
 8006e94:	f7f9 f938 	bl	8000108 <strlen>
 8006e98:	2300      	movs	r3, #0
 8006e9a:	9312      	str	r3, [sp, #72]	; 0x48
 8006e9c:	7e23      	ldrb	r3, [r4, #24]
 8006e9e:	2207      	movs	r2, #7
 8006ea0:	930a      	str	r3, [sp, #40]	; 0x28
 8006ea2:	6823      	ldr	r3, [r4, #0]
 8006ea4:	900e      	str	r0, [sp, #56]	; 0x38
 8006ea6:	930d      	str	r3, [sp, #52]	; 0x34
 8006ea8:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006eaa:	682b      	ldr	r3, [r5, #0]
 8006eac:	05c9      	lsls	r1, r1, #23
 8006eae:	d547      	bpl.n	8006f40 <_printf_float+0xc4>
 8006eb0:	189b      	adds	r3, r3, r2
 8006eb2:	4393      	bics	r3, r2
 8006eb4:	001a      	movs	r2, r3
 8006eb6:	3208      	adds	r2, #8
 8006eb8:	602a      	str	r2, [r5, #0]
 8006eba:	681a      	ldr	r2, [r3, #0]
 8006ebc:	685b      	ldr	r3, [r3, #4]
 8006ebe:	64a2      	str	r2, [r4, #72]	; 0x48
 8006ec0:	64e3      	str	r3, [r4, #76]	; 0x4c
 8006ec2:	2201      	movs	r2, #1
 8006ec4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006ec6:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8006ec8:	930b      	str	r3, [sp, #44]	; 0x2c
 8006eca:	006b      	lsls	r3, r5, #1
 8006ecc:	085b      	lsrs	r3, r3, #1
 8006ece:	930f      	str	r3, [sp, #60]	; 0x3c
 8006ed0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006ed2:	4ba7      	ldr	r3, [pc, #668]	; (8007170 <_printf_float+0x2f4>)
 8006ed4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006ed6:	4252      	negs	r2, r2
 8006ed8:	f7fb f93c 	bl	8002154 <__aeabi_dcmpun>
 8006edc:	2800      	cmp	r0, #0
 8006ede:	d131      	bne.n	8006f44 <_printf_float+0xc8>
 8006ee0:	2201      	movs	r2, #1
 8006ee2:	4ba3      	ldr	r3, [pc, #652]	; (8007170 <_printf_float+0x2f4>)
 8006ee4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006ee6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006ee8:	4252      	negs	r2, r2
 8006eea:	f7f9 fabf 	bl	800046c <__aeabi_dcmple>
 8006eee:	2800      	cmp	r0, #0
 8006ef0:	d128      	bne.n	8006f44 <_printf_float+0xc8>
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	0029      	movs	r1, r5
 8006ef8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006efa:	f7f9 faad 	bl	8000458 <__aeabi_dcmplt>
 8006efe:	2800      	cmp	r0, #0
 8006f00:	d003      	beq.n	8006f0a <_printf_float+0x8e>
 8006f02:	0023      	movs	r3, r4
 8006f04:	222d      	movs	r2, #45	; 0x2d
 8006f06:	3343      	adds	r3, #67	; 0x43
 8006f08:	701a      	strb	r2, [r3, #0]
 8006f0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f0c:	4d99      	ldr	r5, [pc, #612]	; (8007174 <_printf_float+0x2f8>)
 8006f0e:	2b47      	cmp	r3, #71	; 0x47
 8006f10:	d900      	bls.n	8006f14 <_printf_float+0x98>
 8006f12:	4d99      	ldr	r5, [pc, #612]	; (8007178 <_printf_float+0x2fc>)
 8006f14:	2303      	movs	r3, #3
 8006f16:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006f18:	6123      	str	r3, [r4, #16]
 8006f1a:	3301      	adds	r3, #1
 8006f1c:	439a      	bics	r2, r3
 8006f1e:	2300      	movs	r3, #0
 8006f20:	6022      	str	r2, [r4, #0]
 8006f22:	930b      	str	r3, [sp, #44]	; 0x2c
 8006f24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f26:	0021      	movs	r1, r4
 8006f28:	0038      	movs	r0, r7
 8006f2a:	9600      	str	r6, [sp, #0]
 8006f2c:	aa13      	add	r2, sp, #76	; 0x4c
 8006f2e:	f000 f9e7 	bl	8007300 <_printf_common>
 8006f32:	1c43      	adds	r3, r0, #1
 8006f34:	d000      	beq.n	8006f38 <_printf_float+0xbc>
 8006f36:	e0a2      	b.n	800707e <_printf_float+0x202>
 8006f38:	2001      	movs	r0, #1
 8006f3a:	4240      	negs	r0, r0
 8006f3c:	b015      	add	sp, #84	; 0x54
 8006f3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f40:	3307      	adds	r3, #7
 8006f42:	e7b6      	b.n	8006eb2 <_printf_float+0x36>
 8006f44:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006f46:	002b      	movs	r3, r5
 8006f48:	0010      	movs	r0, r2
 8006f4a:	0029      	movs	r1, r5
 8006f4c:	f7fb f902 	bl	8002154 <__aeabi_dcmpun>
 8006f50:	2800      	cmp	r0, #0
 8006f52:	d00b      	beq.n	8006f6c <_printf_float+0xf0>
 8006f54:	2d00      	cmp	r5, #0
 8006f56:	da03      	bge.n	8006f60 <_printf_float+0xe4>
 8006f58:	0023      	movs	r3, r4
 8006f5a:	222d      	movs	r2, #45	; 0x2d
 8006f5c:	3343      	adds	r3, #67	; 0x43
 8006f5e:	701a      	strb	r2, [r3, #0]
 8006f60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f62:	4d86      	ldr	r5, [pc, #536]	; (800717c <_printf_float+0x300>)
 8006f64:	2b47      	cmp	r3, #71	; 0x47
 8006f66:	d9d5      	bls.n	8006f14 <_printf_float+0x98>
 8006f68:	4d85      	ldr	r5, [pc, #532]	; (8007180 <_printf_float+0x304>)
 8006f6a:	e7d3      	b.n	8006f14 <_printf_float+0x98>
 8006f6c:	2220      	movs	r2, #32
 8006f6e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006f70:	6863      	ldr	r3, [r4, #4]
 8006f72:	4391      	bics	r1, r2
 8006f74:	910f      	str	r1, [sp, #60]	; 0x3c
 8006f76:	1c5a      	adds	r2, r3, #1
 8006f78:	d149      	bne.n	800700e <_printf_float+0x192>
 8006f7a:	3307      	adds	r3, #7
 8006f7c:	6063      	str	r3, [r4, #4]
 8006f7e:	2380      	movs	r3, #128	; 0x80
 8006f80:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006f82:	00db      	lsls	r3, r3, #3
 8006f84:	4313      	orrs	r3, r2
 8006f86:	2200      	movs	r2, #0
 8006f88:	9206      	str	r2, [sp, #24]
 8006f8a:	aa12      	add	r2, sp, #72	; 0x48
 8006f8c:	9205      	str	r2, [sp, #20]
 8006f8e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006f90:	a908      	add	r1, sp, #32
 8006f92:	9204      	str	r2, [sp, #16]
 8006f94:	aa11      	add	r2, sp, #68	; 0x44
 8006f96:	9203      	str	r2, [sp, #12]
 8006f98:	2223      	movs	r2, #35	; 0x23
 8006f9a:	6023      	str	r3, [r4, #0]
 8006f9c:	9301      	str	r3, [sp, #4]
 8006f9e:	6863      	ldr	r3, [r4, #4]
 8006fa0:	1852      	adds	r2, r2, r1
 8006fa2:	9202      	str	r2, [sp, #8]
 8006fa4:	9300      	str	r3, [sp, #0]
 8006fa6:	0038      	movs	r0, r7
 8006fa8:	002b      	movs	r3, r5
 8006faa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006fac:	f7ff febc 	bl	8006d28 <__cvt>
 8006fb0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006fb2:	0005      	movs	r5, r0
 8006fb4:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006fb6:	2b47      	cmp	r3, #71	; 0x47
 8006fb8:	d108      	bne.n	8006fcc <_printf_float+0x150>
 8006fba:	1ccb      	adds	r3, r1, #3
 8006fbc:	db02      	blt.n	8006fc4 <_printf_float+0x148>
 8006fbe:	6863      	ldr	r3, [r4, #4]
 8006fc0:	4299      	cmp	r1, r3
 8006fc2:	dd48      	ble.n	8007056 <_printf_float+0x1da>
 8006fc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006fc6:	3b02      	subs	r3, #2
 8006fc8:	b2db      	uxtb	r3, r3
 8006fca:	930a      	str	r3, [sp, #40]	; 0x28
 8006fcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006fce:	2b65      	cmp	r3, #101	; 0x65
 8006fd0:	d824      	bhi.n	800701c <_printf_float+0x1a0>
 8006fd2:	0020      	movs	r0, r4
 8006fd4:	001a      	movs	r2, r3
 8006fd6:	3901      	subs	r1, #1
 8006fd8:	3050      	adds	r0, #80	; 0x50
 8006fda:	9111      	str	r1, [sp, #68]	; 0x44
 8006fdc:	f7ff ff07 	bl	8006dee <__exponent>
 8006fe0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006fe2:	900b      	str	r0, [sp, #44]	; 0x2c
 8006fe4:	1813      	adds	r3, r2, r0
 8006fe6:	6123      	str	r3, [r4, #16]
 8006fe8:	2a01      	cmp	r2, #1
 8006fea:	dc02      	bgt.n	8006ff2 <_printf_float+0x176>
 8006fec:	6822      	ldr	r2, [r4, #0]
 8006fee:	07d2      	lsls	r2, r2, #31
 8006ff0:	d501      	bpl.n	8006ff6 <_printf_float+0x17a>
 8006ff2:	3301      	adds	r3, #1
 8006ff4:	6123      	str	r3, [r4, #16]
 8006ff6:	2323      	movs	r3, #35	; 0x23
 8006ff8:	aa08      	add	r2, sp, #32
 8006ffa:	189b      	adds	r3, r3, r2
 8006ffc:	781b      	ldrb	r3, [r3, #0]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d100      	bne.n	8007004 <_printf_float+0x188>
 8007002:	e78f      	b.n	8006f24 <_printf_float+0xa8>
 8007004:	0023      	movs	r3, r4
 8007006:	222d      	movs	r2, #45	; 0x2d
 8007008:	3343      	adds	r3, #67	; 0x43
 800700a:	701a      	strb	r2, [r3, #0]
 800700c:	e78a      	b.n	8006f24 <_printf_float+0xa8>
 800700e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007010:	2a47      	cmp	r2, #71	; 0x47
 8007012:	d1b4      	bne.n	8006f7e <_printf_float+0x102>
 8007014:	2b00      	cmp	r3, #0
 8007016:	d1b2      	bne.n	8006f7e <_printf_float+0x102>
 8007018:	3301      	adds	r3, #1
 800701a:	e7af      	b.n	8006f7c <_printf_float+0x100>
 800701c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800701e:	2b66      	cmp	r3, #102	; 0x66
 8007020:	d11b      	bne.n	800705a <_printf_float+0x1de>
 8007022:	6863      	ldr	r3, [r4, #4]
 8007024:	2900      	cmp	r1, #0
 8007026:	dd0d      	ble.n	8007044 <_printf_float+0x1c8>
 8007028:	6121      	str	r1, [r4, #16]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d102      	bne.n	8007034 <_printf_float+0x1b8>
 800702e:	6822      	ldr	r2, [r4, #0]
 8007030:	07d2      	lsls	r2, r2, #31
 8007032:	d502      	bpl.n	800703a <_printf_float+0x1be>
 8007034:	3301      	adds	r3, #1
 8007036:	1859      	adds	r1, r3, r1
 8007038:	6121      	str	r1, [r4, #16]
 800703a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800703c:	65a3      	str	r3, [r4, #88]	; 0x58
 800703e:	2300      	movs	r3, #0
 8007040:	930b      	str	r3, [sp, #44]	; 0x2c
 8007042:	e7d8      	b.n	8006ff6 <_printf_float+0x17a>
 8007044:	2b00      	cmp	r3, #0
 8007046:	d103      	bne.n	8007050 <_printf_float+0x1d4>
 8007048:	2201      	movs	r2, #1
 800704a:	6821      	ldr	r1, [r4, #0]
 800704c:	4211      	tst	r1, r2
 800704e:	d000      	beq.n	8007052 <_printf_float+0x1d6>
 8007050:	1c9a      	adds	r2, r3, #2
 8007052:	6122      	str	r2, [r4, #16]
 8007054:	e7f1      	b.n	800703a <_printf_float+0x1be>
 8007056:	2367      	movs	r3, #103	; 0x67
 8007058:	930a      	str	r3, [sp, #40]	; 0x28
 800705a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800705c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800705e:	4293      	cmp	r3, r2
 8007060:	db06      	blt.n	8007070 <_printf_float+0x1f4>
 8007062:	6822      	ldr	r2, [r4, #0]
 8007064:	6123      	str	r3, [r4, #16]
 8007066:	07d2      	lsls	r2, r2, #31
 8007068:	d5e7      	bpl.n	800703a <_printf_float+0x1be>
 800706a:	3301      	adds	r3, #1
 800706c:	6123      	str	r3, [r4, #16]
 800706e:	e7e4      	b.n	800703a <_printf_float+0x1be>
 8007070:	2101      	movs	r1, #1
 8007072:	2b00      	cmp	r3, #0
 8007074:	dc01      	bgt.n	800707a <_printf_float+0x1fe>
 8007076:	1849      	adds	r1, r1, r1
 8007078:	1ac9      	subs	r1, r1, r3
 800707a:	1852      	adds	r2, r2, r1
 800707c:	e7e9      	b.n	8007052 <_printf_float+0x1d6>
 800707e:	6822      	ldr	r2, [r4, #0]
 8007080:	0553      	lsls	r3, r2, #21
 8007082:	d407      	bmi.n	8007094 <_printf_float+0x218>
 8007084:	6923      	ldr	r3, [r4, #16]
 8007086:	002a      	movs	r2, r5
 8007088:	0038      	movs	r0, r7
 800708a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800708c:	47b0      	blx	r6
 800708e:	1c43      	adds	r3, r0, #1
 8007090:	d128      	bne.n	80070e4 <_printf_float+0x268>
 8007092:	e751      	b.n	8006f38 <_printf_float+0xbc>
 8007094:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007096:	2b65      	cmp	r3, #101	; 0x65
 8007098:	d800      	bhi.n	800709c <_printf_float+0x220>
 800709a:	e0e1      	b.n	8007260 <_printf_float+0x3e4>
 800709c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800709e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80070a0:	2200      	movs	r2, #0
 80070a2:	2300      	movs	r3, #0
 80070a4:	f7f9 f9d2 	bl	800044c <__aeabi_dcmpeq>
 80070a8:	2800      	cmp	r0, #0
 80070aa:	d031      	beq.n	8007110 <_printf_float+0x294>
 80070ac:	2301      	movs	r3, #1
 80070ae:	0038      	movs	r0, r7
 80070b0:	4a34      	ldr	r2, [pc, #208]	; (8007184 <_printf_float+0x308>)
 80070b2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80070b4:	47b0      	blx	r6
 80070b6:	1c43      	adds	r3, r0, #1
 80070b8:	d100      	bne.n	80070bc <_printf_float+0x240>
 80070ba:	e73d      	b.n	8006f38 <_printf_float+0xbc>
 80070bc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80070be:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80070c0:	4293      	cmp	r3, r2
 80070c2:	db02      	blt.n	80070ca <_printf_float+0x24e>
 80070c4:	6823      	ldr	r3, [r4, #0]
 80070c6:	07db      	lsls	r3, r3, #31
 80070c8:	d50c      	bpl.n	80070e4 <_printf_float+0x268>
 80070ca:	0038      	movs	r0, r7
 80070cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80070ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80070d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80070d2:	47b0      	blx	r6
 80070d4:	2500      	movs	r5, #0
 80070d6:	1c43      	adds	r3, r0, #1
 80070d8:	d100      	bne.n	80070dc <_printf_float+0x260>
 80070da:	e72d      	b.n	8006f38 <_printf_float+0xbc>
 80070dc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80070de:	3b01      	subs	r3, #1
 80070e0:	42ab      	cmp	r3, r5
 80070e2:	dc0a      	bgt.n	80070fa <_printf_float+0x27e>
 80070e4:	6823      	ldr	r3, [r4, #0]
 80070e6:	079b      	lsls	r3, r3, #30
 80070e8:	d500      	bpl.n	80070ec <_printf_float+0x270>
 80070ea:	e106      	b.n	80072fa <_printf_float+0x47e>
 80070ec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80070ee:	68e0      	ldr	r0, [r4, #12]
 80070f0:	4298      	cmp	r0, r3
 80070f2:	db00      	blt.n	80070f6 <_printf_float+0x27a>
 80070f4:	e722      	b.n	8006f3c <_printf_float+0xc0>
 80070f6:	0018      	movs	r0, r3
 80070f8:	e720      	b.n	8006f3c <_printf_float+0xc0>
 80070fa:	0022      	movs	r2, r4
 80070fc:	2301      	movs	r3, #1
 80070fe:	0038      	movs	r0, r7
 8007100:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007102:	321a      	adds	r2, #26
 8007104:	47b0      	blx	r6
 8007106:	1c43      	adds	r3, r0, #1
 8007108:	d100      	bne.n	800710c <_printf_float+0x290>
 800710a:	e715      	b.n	8006f38 <_printf_float+0xbc>
 800710c:	3501      	adds	r5, #1
 800710e:	e7e5      	b.n	80070dc <_printf_float+0x260>
 8007110:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007112:	2b00      	cmp	r3, #0
 8007114:	dc38      	bgt.n	8007188 <_printf_float+0x30c>
 8007116:	2301      	movs	r3, #1
 8007118:	0038      	movs	r0, r7
 800711a:	4a1a      	ldr	r2, [pc, #104]	; (8007184 <_printf_float+0x308>)
 800711c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800711e:	47b0      	blx	r6
 8007120:	1c43      	adds	r3, r0, #1
 8007122:	d100      	bne.n	8007126 <_printf_float+0x2aa>
 8007124:	e708      	b.n	8006f38 <_printf_float+0xbc>
 8007126:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007128:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800712a:	4313      	orrs	r3, r2
 800712c:	d102      	bne.n	8007134 <_printf_float+0x2b8>
 800712e:	6823      	ldr	r3, [r4, #0]
 8007130:	07db      	lsls	r3, r3, #31
 8007132:	d5d7      	bpl.n	80070e4 <_printf_float+0x268>
 8007134:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007136:	0038      	movs	r0, r7
 8007138:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800713a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800713c:	47b0      	blx	r6
 800713e:	1c43      	adds	r3, r0, #1
 8007140:	d100      	bne.n	8007144 <_printf_float+0x2c8>
 8007142:	e6f9      	b.n	8006f38 <_printf_float+0xbc>
 8007144:	2300      	movs	r3, #0
 8007146:	930a      	str	r3, [sp, #40]	; 0x28
 8007148:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800714a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800714c:	425b      	negs	r3, r3
 800714e:	4293      	cmp	r3, r2
 8007150:	dc01      	bgt.n	8007156 <_printf_float+0x2da>
 8007152:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007154:	e797      	b.n	8007086 <_printf_float+0x20a>
 8007156:	0022      	movs	r2, r4
 8007158:	2301      	movs	r3, #1
 800715a:	0038      	movs	r0, r7
 800715c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800715e:	321a      	adds	r2, #26
 8007160:	47b0      	blx	r6
 8007162:	1c43      	adds	r3, r0, #1
 8007164:	d100      	bne.n	8007168 <_printf_float+0x2ec>
 8007166:	e6e7      	b.n	8006f38 <_printf_float+0xbc>
 8007168:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800716a:	3301      	adds	r3, #1
 800716c:	e7eb      	b.n	8007146 <_printf_float+0x2ca>
 800716e:	46c0      	nop			; (mov r8, r8)
 8007170:	7fefffff 	.word	0x7fefffff
 8007174:	08009e7c 	.word	0x08009e7c
 8007178:	08009e80 	.word	0x08009e80
 800717c:	08009e84 	.word	0x08009e84
 8007180:	08009e88 	.word	0x08009e88
 8007184:	08009e8c 	.word	0x08009e8c
 8007188:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800718a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800718c:	920a      	str	r2, [sp, #40]	; 0x28
 800718e:	429a      	cmp	r2, r3
 8007190:	dd00      	ble.n	8007194 <_printf_float+0x318>
 8007192:	930a      	str	r3, [sp, #40]	; 0x28
 8007194:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007196:	2b00      	cmp	r3, #0
 8007198:	dc3c      	bgt.n	8007214 <_printf_float+0x398>
 800719a:	2300      	movs	r3, #0
 800719c:	930d      	str	r3, [sp, #52]	; 0x34
 800719e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071a0:	43db      	mvns	r3, r3
 80071a2:	17db      	asrs	r3, r3, #31
 80071a4:	930f      	str	r3, [sp, #60]	; 0x3c
 80071a6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80071a8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80071aa:	930b      	str	r3, [sp, #44]	; 0x2c
 80071ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071ae:	4013      	ands	r3, r2
 80071b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80071b2:	1ad3      	subs	r3, r2, r3
 80071b4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80071b6:	4293      	cmp	r3, r2
 80071b8:	dc34      	bgt.n	8007224 <_printf_float+0x3a8>
 80071ba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80071bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80071be:	4293      	cmp	r3, r2
 80071c0:	db3d      	blt.n	800723e <_printf_float+0x3c2>
 80071c2:	6823      	ldr	r3, [r4, #0]
 80071c4:	07db      	lsls	r3, r3, #31
 80071c6:	d43a      	bmi.n	800723e <_printf_float+0x3c2>
 80071c8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80071ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80071cc:	9911      	ldr	r1, [sp, #68]	; 0x44
 80071ce:	1ad3      	subs	r3, r2, r3
 80071d0:	1a52      	subs	r2, r2, r1
 80071d2:	920a      	str	r2, [sp, #40]	; 0x28
 80071d4:	429a      	cmp	r2, r3
 80071d6:	dd00      	ble.n	80071da <_printf_float+0x35e>
 80071d8:	930a      	str	r3, [sp, #40]	; 0x28
 80071da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071dc:	2b00      	cmp	r3, #0
 80071de:	dc36      	bgt.n	800724e <_printf_float+0x3d2>
 80071e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071e2:	2500      	movs	r5, #0
 80071e4:	43db      	mvns	r3, r3
 80071e6:	17db      	asrs	r3, r3, #31
 80071e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80071ea:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80071ec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80071ee:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80071f0:	1a9b      	subs	r3, r3, r2
 80071f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80071f4:	400a      	ands	r2, r1
 80071f6:	1a9b      	subs	r3, r3, r2
 80071f8:	42ab      	cmp	r3, r5
 80071fa:	dc00      	bgt.n	80071fe <_printf_float+0x382>
 80071fc:	e772      	b.n	80070e4 <_printf_float+0x268>
 80071fe:	0022      	movs	r2, r4
 8007200:	2301      	movs	r3, #1
 8007202:	0038      	movs	r0, r7
 8007204:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007206:	321a      	adds	r2, #26
 8007208:	47b0      	blx	r6
 800720a:	1c43      	adds	r3, r0, #1
 800720c:	d100      	bne.n	8007210 <_printf_float+0x394>
 800720e:	e693      	b.n	8006f38 <_printf_float+0xbc>
 8007210:	3501      	adds	r5, #1
 8007212:	e7ea      	b.n	80071ea <_printf_float+0x36e>
 8007214:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007216:	002a      	movs	r2, r5
 8007218:	0038      	movs	r0, r7
 800721a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800721c:	47b0      	blx	r6
 800721e:	1c43      	adds	r3, r0, #1
 8007220:	d1bb      	bne.n	800719a <_printf_float+0x31e>
 8007222:	e689      	b.n	8006f38 <_printf_float+0xbc>
 8007224:	0022      	movs	r2, r4
 8007226:	2301      	movs	r3, #1
 8007228:	0038      	movs	r0, r7
 800722a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800722c:	321a      	adds	r2, #26
 800722e:	47b0      	blx	r6
 8007230:	1c43      	adds	r3, r0, #1
 8007232:	d100      	bne.n	8007236 <_printf_float+0x3ba>
 8007234:	e680      	b.n	8006f38 <_printf_float+0xbc>
 8007236:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007238:	3301      	adds	r3, #1
 800723a:	930d      	str	r3, [sp, #52]	; 0x34
 800723c:	e7b3      	b.n	80071a6 <_printf_float+0x32a>
 800723e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007240:	0038      	movs	r0, r7
 8007242:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007244:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007246:	47b0      	blx	r6
 8007248:	1c43      	adds	r3, r0, #1
 800724a:	d1bd      	bne.n	80071c8 <_printf_float+0x34c>
 800724c:	e674      	b.n	8006f38 <_printf_float+0xbc>
 800724e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007250:	0038      	movs	r0, r7
 8007252:	18ea      	adds	r2, r5, r3
 8007254:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007256:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007258:	47b0      	blx	r6
 800725a:	1c43      	adds	r3, r0, #1
 800725c:	d1c0      	bne.n	80071e0 <_printf_float+0x364>
 800725e:	e66b      	b.n	8006f38 <_printf_float+0xbc>
 8007260:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007262:	2b01      	cmp	r3, #1
 8007264:	dc02      	bgt.n	800726c <_printf_float+0x3f0>
 8007266:	2301      	movs	r3, #1
 8007268:	421a      	tst	r2, r3
 800726a:	d034      	beq.n	80072d6 <_printf_float+0x45a>
 800726c:	2301      	movs	r3, #1
 800726e:	002a      	movs	r2, r5
 8007270:	0038      	movs	r0, r7
 8007272:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007274:	47b0      	blx	r6
 8007276:	1c43      	adds	r3, r0, #1
 8007278:	d100      	bne.n	800727c <_printf_float+0x400>
 800727a:	e65d      	b.n	8006f38 <_printf_float+0xbc>
 800727c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800727e:	0038      	movs	r0, r7
 8007280:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007282:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007284:	47b0      	blx	r6
 8007286:	1c43      	adds	r3, r0, #1
 8007288:	d100      	bne.n	800728c <_printf_float+0x410>
 800728a:	e655      	b.n	8006f38 <_printf_float+0xbc>
 800728c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800728e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8007290:	2200      	movs	r2, #0
 8007292:	2300      	movs	r3, #0
 8007294:	f7f9 f8da 	bl	800044c <__aeabi_dcmpeq>
 8007298:	2800      	cmp	r0, #0
 800729a:	d11a      	bne.n	80072d2 <_printf_float+0x456>
 800729c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800729e:	1c6a      	adds	r2, r5, #1
 80072a0:	3b01      	subs	r3, #1
 80072a2:	0038      	movs	r0, r7
 80072a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80072a6:	47b0      	blx	r6
 80072a8:	1c43      	adds	r3, r0, #1
 80072aa:	d10e      	bne.n	80072ca <_printf_float+0x44e>
 80072ac:	e644      	b.n	8006f38 <_printf_float+0xbc>
 80072ae:	0022      	movs	r2, r4
 80072b0:	2301      	movs	r3, #1
 80072b2:	0038      	movs	r0, r7
 80072b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80072b6:	321a      	adds	r2, #26
 80072b8:	47b0      	blx	r6
 80072ba:	1c43      	adds	r3, r0, #1
 80072bc:	d100      	bne.n	80072c0 <_printf_float+0x444>
 80072be:	e63b      	b.n	8006f38 <_printf_float+0xbc>
 80072c0:	3501      	adds	r5, #1
 80072c2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80072c4:	3b01      	subs	r3, #1
 80072c6:	42ab      	cmp	r3, r5
 80072c8:	dcf1      	bgt.n	80072ae <_printf_float+0x432>
 80072ca:	0022      	movs	r2, r4
 80072cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80072ce:	3250      	adds	r2, #80	; 0x50
 80072d0:	e6da      	b.n	8007088 <_printf_float+0x20c>
 80072d2:	2500      	movs	r5, #0
 80072d4:	e7f5      	b.n	80072c2 <_printf_float+0x446>
 80072d6:	002a      	movs	r2, r5
 80072d8:	e7e3      	b.n	80072a2 <_printf_float+0x426>
 80072da:	0022      	movs	r2, r4
 80072dc:	2301      	movs	r3, #1
 80072de:	0038      	movs	r0, r7
 80072e0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80072e2:	3219      	adds	r2, #25
 80072e4:	47b0      	blx	r6
 80072e6:	1c43      	adds	r3, r0, #1
 80072e8:	d100      	bne.n	80072ec <_printf_float+0x470>
 80072ea:	e625      	b.n	8006f38 <_printf_float+0xbc>
 80072ec:	3501      	adds	r5, #1
 80072ee:	68e3      	ldr	r3, [r4, #12]
 80072f0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80072f2:	1a9b      	subs	r3, r3, r2
 80072f4:	42ab      	cmp	r3, r5
 80072f6:	dcf0      	bgt.n	80072da <_printf_float+0x45e>
 80072f8:	e6f8      	b.n	80070ec <_printf_float+0x270>
 80072fa:	2500      	movs	r5, #0
 80072fc:	e7f7      	b.n	80072ee <_printf_float+0x472>
 80072fe:	46c0      	nop			; (mov r8, r8)

08007300 <_printf_common>:
 8007300:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007302:	0015      	movs	r5, r2
 8007304:	9301      	str	r3, [sp, #4]
 8007306:	688a      	ldr	r2, [r1, #8]
 8007308:	690b      	ldr	r3, [r1, #16]
 800730a:	000c      	movs	r4, r1
 800730c:	9000      	str	r0, [sp, #0]
 800730e:	4293      	cmp	r3, r2
 8007310:	da00      	bge.n	8007314 <_printf_common+0x14>
 8007312:	0013      	movs	r3, r2
 8007314:	0022      	movs	r2, r4
 8007316:	602b      	str	r3, [r5, #0]
 8007318:	3243      	adds	r2, #67	; 0x43
 800731a:	7812      	ldrb	r2, [r2, #0]
 800731c:	2a00      	cmp	r2, #0
 800731e:	d001      	beq.n	8007324 <_printf_common+0x24>
 8007320:	3301      	adds	r3, #1
 8007322:	602b      	str	r3, [r5, #0]
 8007324:	6823      	ldr	r3, [r4, #0]
 8007326:	069b      	lsls	r3, r3, #26
 8007328:	d502      	bpl.n	8007330 <_printf_common+0x30>
 800732a:	682b      	ldr	r3, [r5, #0]
 800732c:	3302      	adds	r3, #2
 800732e:	602b      	str	r3, [r5, #0]
 8007330:	6822      	ldr	r2, [r4, #0]
 8007332:	2306      	movs	r3, #6
 8007334:	0017      	movs	r7, r2
 8007336:	401f      	ands	r7, r3
 8007338:	421a      	tst	r2, r3
 800733a:	d027      	beq.n	800738c <_printf_common+0x8c>
 800733c:	0023      	movs	r3, r4
 800733e:	3343      	adds	r3, #67	; 0x43
 8007340:	781b      	ldrb	r3, [r3, #0]
 8007342:	1e5a      	subs	r2, r3, #1
 8007344:	4193      	sbcs	r3, r2
 8007346:	6822      	ldr	r2, [r4, #0]
 8007348:	0692      	lsls	r2, r2, #26
 800734a:	d430      	bmi.n	80073ae <_printf_common+0xae>
 800734c:	0022      	movs	r2, r4
 800734e:	9901      	ldr	r1, [sp, #4]
 8007350:	9800      	ldr	r0, [sp, #0]
 8007352:	9e08      	ldr	r6, [sp, #32]
 8007354:	3243      	adds	r2, #67	; 0x43
 8007356:	47b0      	blx	r6
 8007358:	1c43      	adds	r3, r0, #1
 800735a:	d025      	beq.n	80073a8 <_printf_common+0xa8>
 800735c:	2306      	movs	r3, #6
 800735e:	6820      	ldr	r0, [r4, #0]
 8007360:	682a      	ldr	r2, [r5, #0]
 8007362:	68e1      	ldr	r1, [r4, #12]
 8007364:	2500      	movs	r5, #0
 8007366:	4003      	ands	r3, r0
 8007368:	2b04      	cmp	r3, #4
 800736a:	d103      	bne.n	8007374 <_printf_common+0x74>
 800736c:	1a8d      	subs	r5, r1, r2
 800736e:	43eb      	mvns	r3, r5
 8007370:	17db      	asrs	r3, r3, #31
 8007372:	401d      	ands	r5, r3
 8007374:	68a3      	ldr	r3, [r4, #8]
 8007376:	6922      	ldr	r2, [r4, #16]
 8007378:	4293      	cmp	r3, r2
 800737a:	dd01      	ble.n	8007380 <_printf_common+0x80>
 800737c:	1a9b      	subs	r3, r3, r2
 800737e:	18ed      	adds	r5, r5, r3
 8007380:	2700      	movs	r7, #0
 8007382:	42bd      	cmp	r5, r7
 8007384:	d120      	bne.n	80073c8 <_printf_common+0xc8>
 8007386:	2000      	movs	r0, #0
 8007388:	e010      	b.n	80073ac <_printf_common+0xac>
 800738a:	3701      	adds	r7, #1
 800738c:	68e3      	ldr	r3, [r4, #12]
 800738e:	682a      	ldr	r2, [r5, #0]
 8007390:	1a9b      	subs	r3, r3, r2
 8007392:	42bb      	cmp	r3, r7
 8007394:	ddd2      	ble.n	800733c <_printf_common+0x3c>
 8007396:	0022      	movs	r2, r4
 8007398:	2301      	movs	r3, #1
 800739a:	9901      	ldr	r1, [sp, #4]
 800739c:	9800      	ldr	r0, [sp, #0]
 800739e:	9e08      	ldr	r6, [sp, #32]
 80073a0:	3219      	adds	r2, #25
 80073a2:	47b0      	blx	r6
 80073a4:	1c43      	adds	r3, r0, #1
 80073a6:	d1f0      	bne.n	800738a <_printf_common+0x8a>
 80073a8:	2001      	movs	r0, #1
 80073aa:	4240      	negs	r0, r0
 80073ac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80073ae:	2030      	movs	r0, #48	; 0x30
 80073b0:	18e1      	adds	r1, r4, r3
 80073b2:	3143      	adds	r1, #67	; 0x43
 80073b4:	7008      	strb	r0, [r1, #0]
 80073b6:	0021      	movs	r1, r4
 80073b8:	1c5a      	adds	r2, r3, #1
 80073ba:	3145      	adds	r1, #69	; 0x45
 80073bc:	7809      	ldrb	r1, [r1, #0]
 80073be:	18a2      	adds	r2, r4, r2
 80073c0:	3243      	adds	r2, #67	; 0x43
 80073c2:	3302      	adds	r3, #2
 80073c4:	7011      	strb	r1, [r2, #0]
 80073c6:	e7c1      	b.n	800734c <_printf_common+0x4c>
 80073c8:	0022      	movs	r2, r4
 80073ca:	2301      	movs	r3, #1
 80073cc:	9901      	ldr	r1, [sp, #4]
 80073ce:	9800      	ldr	r0, [sp, #0]
 80073d0:	9e08      	ldr	r6, [sp, #32]
 80073d2:	321a      	adds	r2, #26
 80073d4:	47b0      	blx	r6
 80073d6:	1c43      	adds	r3, r0, #1
 80073d8:	d0e6      	beq.n	80073a8 <_printf_common+0xa8>
 80073da:	3701      	adds	r7, #1
 80073dc:	e7d1      	b.n	8007382 <_printf_common+0x82>
	...

080073e0 <_printf_i>:
 80073e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80073e2:	b08b      	sub	sp, #44	; 0x2c
 80073e4:	9206      	str	r2, [sp, #24]
 80073e6:	000a      	movs	r2, r1
 80073e8:	3243      	adds	r2, #67	; 0x43
 80073ea:	9307      	str	r3, [sp, #28]
 80073ec:	9005      	str	r0, [sp, #20]
 80073ee:	9204      	str	r2, [sp, #16]
 80073f0:	7e0a      	ldrb	r2, [r1, #24]
 80073f2:	000c      	movs	r4, r1
 80073f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80073f6:	2a78      	cmp	r2, #120	; 0x78
 80073f8:	d807      	bhi.n	800740a <_printf_i+0x2a>
 80073fa:	2a62      	cmp	r2, #98	; 0x62
 80073fc:	d809      	bhi.n	8007412 <_printf_i+0x32>
 80073fe:	2a00      	cmp	r2, #0
 8007400:	d100      	bne.n	8007404 <_printf_i+0x24>
 8007402:	e0c1      	b.n	8007588 <_printf_i+0x1a8>
 8007404:	2a58      	cmp	r2, #88	; 0x58
 8007406:	d100      	bne.n	800740a <_printf_i+0x2a>
 8007408:	e08c      	b.n	8007524 <_printf_i+0x144>
 800740a:	0026      	movs	r6, r4
 800740c:	3642      	adds	r6, #66	; 0x42
 800740e:	7032      	strb	r2, [r6, #0]
 8007410:	e022      	b.n	8007458 <_printf_i+0x78>
 8007412:	0010      	movs	r0, r2
 8007414:	3863      	subs	r0, #99	; 0x63
 8007416:	2815      	cmp	r0, #21
 8007418:	d8f7      	bhi.n	800740a <_printf_i+0x2a>
 800741a:	f7f8 fe87 	bl	800012c <__gnu_thumb1_case_shi>
 800741e:	0016      	.short	0x0016
 8007420:	fff6001f 	.word	0xfff6001f
 8007424:	fff6fff6 	.word	0xfff6fff6
 8007428:	001ffff6 	.word	0x001ffff6
 800742c:	fff6fff6 	.word	0xfff6fff6
 8007430:	fff6fff6 	.word	0xfff6fff6
 8007434:	003600a8 	.word	0x003600a8
 8007438:	fff6009a 	.word	0xfff6009a
 800743c:	00b9fff6 	.word	0x00b9fff6
 8007440:	0036fff6 	.word	0x0036fff6
 8007444:	fff6fff6 	.word	0xfff6fff6
 8007448:	009e      	.short	0x009e
 800744a:	0026      	movs	r6, r4
 800744c:	681a      	ldr	r2, [r3, #0]
 800744e:	3642      	adds	r6, #66	; 0x42
 8007450:	1d11      	adds	r1, r2, #4
 8007452:	6019      	str	r1, [r3, #0]
 8007454:	6813      	ldr	r3, [r2, #0]
 8007456:	7033      	strb	r3, [r6, #0]
 8007458:	2301      	movs	r3, #1
 800745a:	e0a7      	b.n	80075ac <_printf_i+0x1cc>
 800745c:	6808      	ldr	r0, [r1, #0]
 800745e:	6819      	ldr	r1, [r3, #0]
 8007460:	1d0a      	adds	r2, r1, #4
 8007462:	0605      	lsls	r5, r0, #24
 8007464:	d50b      	bpl.n	800747e <_printf_i+0x9e>
 8007466:	680d      	ldr	r5, [r1, #0]
 8007468:	601a      	str	r2, [r3, #0]
 800746a:	2d00      	cmp	r5, #0
 800746c:	da03      	bge.n	8007476 <_printf_i+0x96>
 800746e:	232d      	movs	r3, #45	; 0x2d
 8007470:	9a04      	ldr	r2, [sp, #16]
 8007472:	426d      	negs	r5, r5
 8007474:	7013      	strb	r3, [r2, #0]
 8007476:	4b61      	ldr	r3, [pc, #388]	; (80075fc <_printf_i+0x21c>)
 8007478:	270a      	movs	r7, #10
 800747a:	9303      	str	r3, [sp, #12]
 800747c:	e01b      	b.n	80074b6 <_printf_i+0xd6>
 800747e:	680d      	ldr	r5, [r1, #0]
 8007480:	601a      	str	r2, [r3, #0]
 8007482:	0641      	lsls	r1, r0, #25
 8007484:	d5f1      	bpl.n	800746a <_printf_i+0x8a>
 8007486:	b22d      	sxth	r5, r5
 8007488:	e7ef      	b.n	800746a <_printf_i+0x8a>
 800748a:	680d      	ldr	r5, [r1, #0]
 800748c:	6819      	ldr	r1, [r3, #0]
 800748e:	1d08      	adds	r0, r1, #4
 8007490:	6018      	str	r0, [r3, #0]
 8007492:	062e      	lsls	r6, r5, #24
 8007494:	d501      	bpl.n	800749a <_printf_i+0xba>
 8007496:	680d      	ldr	r5, [r1, #0]
 8007498:	e003      	b.n	80074a2 <_printf_i+0xc2>
 800749a:	066d      	lsls	r5, r5, #25
 800749c:	d5fb      	bpl.n	8007496 <_printf_i+0xb6>
 800749e:	680d      	ldr	r5, [r1, #0]
 80074a0:	b2ad      	uxth	r5, r5
 80074a2:	4b56      	ldr	r3, [pc, #344]	; (80075fc <_printf_i+0x21c>)
 80074a4:	2708      	movs	r7, #8
 80074a6:	9303      	str	r3, [sp, #12]
 80074a8:	2a6f      	cmp	r2, #111	; 0x6f
 80074aa:	d000      	beq.n	80074ae <_printf_i+0xce>
 80074ac:	3702      	adds	r7, #2
 80074ae:	0023      	movs	r3, r4
 80074b0:	2200      	movs	r2, #0
 80074b2:	3343      	adds	r3, #67	; 0x43
 80074b4:	701a      	strb	r2, [r3, #0]
 80074b6:	6863      	ldr	r3, [r4, #4]
 80074b8:	60a3      	str	r3, [r4, #8]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	db03      	blt.n	80074c6 <_printf_i+0xe6>
 80074be:	2204      	movs	r2, #4
 80074c0:	6821      	ldr	r1, [r4, #0]
 80074c2:	4391      	bics	r1, r2
 80074c4:	6021      	str	r1, [r4, #0]
 80074c6:	2d00      	cmp	r5, #0
 80074c8:	d102      	bne.n	80074d0 <_printf_i+0xf0>
 80074ca:	9e04      	ldr	r6, [sp, #16]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d00c      	beq.n	80074ea <_printf_i+0x10a>
 80074d0:	9e04      	ldr	r6, [sp, #16]
 80074d2:	0028      	movs	r0, r5
 80074d4:	0039      	movs	r1, r7
 80074d6:	f7f8 feb9 	bl	800024c <__aeabi_uidivmod>
 80074da:	9b03      	ldr	r3, [sp, #12]
 80074dc:	3e01      	subs	r6, #1
 80074de:	5c5b      	ldrb	r3, [r3, r1]
 80074e0:	7033      	strb	r3, [r6, #0]
 80074e2:	002b      	movs	r3, r5
 80074e4:	0005      	movs	r5, r0
 80074e6:	429f      	cmp	r7, r3
 80074e8:	d9f3      	bls.n	80074d2 <_printf_i+0xf2>
 80074ea:	2f08      	cmp	r7, #8
 80074ec:	d109      	bne.n	8007502 <_printf_i+0x122>
 80074ee:	6823      	ldr	r3, [r4, #0]
 80074f0:	07db      	lsls	r3, r3, #31
 80074f2:	d506      	bpl.n	8007502 <_printf_i+0x122>
 80074f4:	6863      	ldr	r3, [r4, #4]
 80074f6:	6922      	ldr	r2, [r4, #16]
 80074f8:	4293      	cmp	r3, r2
 80074fa:	dc02      	bgt.n	8007502 <_printf_i+0x122>
 80074fc:	2330      	movs	r3, #48	; 0x30
 80074fe:	3e01      	subs	r6, #1
 8007500:	7033      	strb	r3, [r6, #0]
 8007502:	9b04      	ldr	r3, [sp, #16]
 8007504:	1b9b      	subs	r3, r3, r6
 8007506:	6123      	str	r3, [r4, #16]
 8007508:	9b07      	ldr	r3, [sp, #28]
 800750a:	0021      	movs	r1, r4
 800750c:	9300      	str	r3, [sp, #0]
 800750e:	9805      	ldr	r0, [sp, #20]
 8007510:	9b06      	ldr	r3, [sp, #24]
 8007512:	aa09      	add	r2, sp, #36	; 0x24
 8007514:	f7ff fef4 	bl	8007300 <_printf_common>
 8007518:	1c43      	adds	r3, r0, #1
 800751a:	d14c      	bne.n	80075b6 <_printf_i+0x1d6>
 800751c:	2001      	movs	r0, #1
 800751e:	4240      	negs	r0, r0
 8007520:	b00b      	add	sp, #44	; 0x2c
 8007522:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007524:	3145      	adds	r1, #69	; 0x45
 8007526:	700a      	strb	r2, [r1, #0]
 8007528:	4a34      	ldr	r2, [pc, #208]	; (80075fc <_printf_i+0x21c>)
 800752a:	9203      	str	r2, [sp, #12]
 800752c:	681a      	ldr	r2, [r3, #0]
 800752e:	6821      	ldr	r1, [r4, #0]
 8007530:	ca20      	ldmia	r2!, {r5}
 8007532:	601a      	str	r2, [r3, #0]
 8007534:	0608      	lsls	r0, r1, #24
 8007536:	d516      	bpl.n	8007566 <_printf_i+0x186>
 8007538:	07cb      	lsls	r3, r1, #31
 800753a:	d502      	bpl.n	8007542 <_printf_i+0x162>
 800753c:	2320      	movs	r3, #32
 800753e:	4319      	orrs	r1, r3
 8007540:	6021      	str	r1, [r4, #0]
 8007542:	2710      	movs	r7, #16
 8007544:	2d00      	cmp	r5, #0
 8007546:	d1b2      	bne.n	80074ae <_printf_i+0xce>
 8007548:	2320      	movs	r3, #32
 800754a:	6822      	ldr	r2, [r4, #0]
 800754c:	439a      	bics	r2, r3
 800754e:	6022      	str	r2, [r4, #0]
 8007550:	e7ad      	b.n	80074ae <_printf_i+0xce>
 8007552:	2220      	movs	r2, #32
 8007554:	6809      	ldr	r1, [r1, #0]
 8007556:	430a      	orrs	r2, r1
 8007558:	6022      	str	r2, [r4, #0]
 800755a:	0022      	movs	r2, r4
 800755c:	2178      	movs	r1, #120	; 0x78
 800755e:	3245      	adds	r2, #69	; 0x45
 8007560:	7011      	strb	r1, [r2, #0]
 8007562:	4a27      	ldr	r2, [pc, #156]	; (8007600 <_printf_i+0x220>)
 8007564:	e7e1      	b.n	800752a <_printf_i+0x14a>
 8007566:	0648      	lsls	r0, r1, #25
 8007568:	d5e6      	bpl.n	8007538 <_printf_i+0x158>
 800756a:	b2ad      	uxth	r5, r5
 800756c:	e7e4      	b.n	8007538 <_printf_i+0x158>
 800756e:	681a      	ldr	r2, [r3, #0]
 8007570:	680d      	ldr	r5, [r1, #0]
 8007572:	1d10      	adds	r0, r2, #4
 8007574:	6949      	ldr	r1, [r1, #20]
 8007576:	6018      	str	r0, [r3, #0]
 8007578:	6813      	ldr	r3, [r2, #0]
 800757a:	062e      	lsls	r6, r5, #24
 800757c:	d501      	bpl.n	8007582 <_printf_i+0x1a2>
 800757e:	6019      	str	r1, [r3, #0]
 8007580:	e002      	b.n	8007588 <_printf_i+0x1a8>
 8007582:	066d      	lsls	r5, r5, #25
 8007584:	d5fb      	bpl.n	800757e <_printf_i+0x19e>
 8007586:	8019      	strh	r1, [r3, #0]
 8007588:	2300      	movs	r3, #0
 800758a:	9e04      	ldr	r6, [sp, #16]
 800758c:	6123      	str	r3, [r4, #16]
 800758e:	e7bb      	b.n	8007508 <_printf_i+0x128>
 8007590:	681a      	ldr	r2, [r3, #0]
 8007592:	1d11      	adds	r1, r2, #4
 8007594:	6019      	str	r1, [r3, #0]
 8007596:	6816      	ldr	r6, [r2, #0]
 8007598:	2100      	movs	r1, #0
 800759a:	0030      	movs	r0, r6
 800759c:	6862      	ldr	r2, [r4, #4]
 800759e:	f000 ff05 	bl	80083ac <memchr>
 80075a2:	2800      	cmp	r0, #0
 80075a4:	d001      	beq.n	80075aa <_printf_i+0x1ca>
 80075a6:	1b80      	subs	r0, r0, r6
 80075a8:	6060      	str	r0, [r4, #4]
 80075aa:	6863      	ldr	r3, [r4, #4]
 80075ac:	6123      	str	r3, [r4, #16]
 80075ae:	2300      	movs	r3, #0
 80075b0:	9a04      	ldr	r2, [sp, #16]
 80075b2:	7013      	strb	r3, [r2, #0]
 80075b4:	e7a8      	b.n	8007508 <_printf_i+0x128>
 80075b6:	6923      	ldr	r3, [r4, #16]
 80075b8:	0032      	movs	r2, r6
 80075ba:	9906      	ldr	r1, [sp, #24]
 80075bc:	9805      	ldr	r0, [sp, #20]
 80075be:	9d07      	ldr	r5, [sp, #28]
 80075c0:	47a8      	blx	r5
 80075c2:	1c43      	adds	r3, r0, #1
 80075c4:	d0aa      	beq.n	800751c <_printf_i+0x13c>
 80075c6:	6823      	ldr	r3, [r4, #0]
 80075c8:	079b      	lsls	r3, r3, #30
 80075ca:	d415      	bmi.n	80075f8 <_printf_i+0x218>
 80075cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075ce:	68e0      	ldr	r0, [r4, #12]
 80075d0:	4298      	cmp	r0, r3
 80075d2:	daa5      	bge.n	8007520 <_printf_i+0x140>
 80075d4:	0018      	movs	r0, r3
 80075d6:	e7a3      	b.n	8007520 <_printf_i+0x140>
 80075d8:	0022      	movs	r2, r4
 80075da:	2301      	movs	r3, #1
 80075dc:	9906      	ldr	r1, [sp, #24]
 80075de:	9805      	ldr	r0, [sp, #20]
 80075e0:	9e07      	ldr	r6, [sp, #28]
 80075e2:	3219      	adds	r2, #25
 80075e4:	47b0      	blx	r6
 80075e6:	1c43      	adds	r3, r0, #1
 80075e8:	d098      	beq.n	800751c <_printf_i+0x13c>
 80075ea:	3501      	adds	r5, #1
 80075ec:	68e3      	ldr	r3, [r4, #12]
 80075ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80075f0:	1a9b      	subs	r3, r3, r2
 80075f2:	42ab      	cmp	r3, r5
 80075f4:	dcf0      	bgt.n	80075d8 <_printf_i+0x1f8>
 80075f6:	e7e9      	b.n	80075cc <_printf_i+0x1ec>
 80075f8:	2500      	movs	r5, #0
 80075fa:	e7f7      	b.n	80075ec <_printf_i+0x20c>
 80075fc:	08009e8e 	.word	0x08009e8e
 8007600:	08009e9f 	.word	0x08009e9f

08007604 <siprintf>:
 8007604:	b40e      	push	{r1, r2, r3}
 8007606:	b500      	push	{lr}
 8007608:	490b      	ldr	r1, [pc, #44]	; (8007638 <siprintf+0x34>)
 800760a:	b09c      	sub	sp, #112	; 0x70
 800760c:	ab1d      	add	r3, sp, #116	; 0x74
 800760e:	9002      	str	r0, [sp, #8]
 8007610:	9006      	str	r0, [sp, #24]
 8007612:	9107      	str	r1, [sp, #28]
 8007614:	9104      	str	r1, [sp, #16]
 8007616:	4809      	ldr	r0, [pc, #36]	; (800763c <siprintf+0x38>)
 8007618:	4909      	ldr	r1, [pc, #36]	; (8007640 <siprintf+0x3c>)
 800761a:	cb04      	ldmia	r3!, {r2}
 800761c:	9105      	str	r1, [sp, #20]
 800761e:	6800      	ldr	r0, [r0, #0]
 8007620:	a902      	add	r1, sp, #8
 8007622:	9301      	str	r3, [sp, #4]
 8007624:	f001 fbe2 	bl	8008dec <_svfiprintf_r>
 8007628:	2300      	movs	r3, #0
 800762a:	9a02      	ldr	r2, [sp, #8]
 800762c:	7013      	strb	r3, [r2, #0]
 800762e:	b01c      	add	sp, #112	; 0x70
 8007630:	bc08      	pop	{r3}
 8007632:	b003      	add	sp, #12
 8007634:	4718      	bx	r3
 8007636:	46c0      	nop			; (mov r8, r8)
 8007638:	7fffffff 	.word	0x7fffffff
 800763c:	2000000c 	.word	0x2000000c
 8007640:	ffff0208 	.word	0xffff0208

08007644 <quorem>:
 8007644:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007646:	0006      	movs	r6, r0
 8007648:	690b      	ldr	r3, [r1, #16]
 800764a:	6932      	ldr	r2, [r6, #16]
 800764c:	b087      	sub	sp, #28
 800764e:	2000      	movs	r0, #0
 8007650:	9103      	str	r1, [sp, #12]
 8007652:	429a      	cmp	r2, r3
 8007654:	db65      	blt.n	8007722 <quorem+0xde>
 8007656:	3b01      	subs	r3, #1
 8007658:	009c      	lsls	r4, r3, #2
 800765a:	9300      	str	r3, [sp, #0]
 800765c:	000b      	movs	r3, r1
 800765e:	3314      	adds	r3, #20
 8007660:	9305      	str	r3, [sp, #20]
 8007662:	191b      	adds	r3, r3, r4
 8007664:	9304      	str	r3, [sp, #16]
 8007666:	0033      	movs	r3, r6
 8007668:	3314      	adds	r3, #20
 800766a:	9302      	str	r3, [sp, #8]
 800766c:	191c      	adds	r4, r3, r4
 800766e:	9b04      	ldr	r3, [sp, #16]
 8007670:	6827      	ldr	r7, [r4, #0]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	0038      	movs	r0, r7
 8007676:	1c5d      	adds	r5, r3, #1
 8007678:	0029      	movs	r1, r5
 800767a:	9301      	str	r3, [sp, #4]
 800767c:	f7f8 fd60 	bl	8000140 <__udivsi3>
 8007680:	9001      	str	r0, [sp, #4]
 8007682:	42af      	cmp	r7, r5
 8007684:	d324      	bcc.n	80076d0 <quorem+0x8c>
 8007686:	2500      	movs	r5, #0
 8007688:	46ac      	mov	ip, r5
 800768a:	9802      	ldr	r0, [sp, #8]
 800768c:	9f05      	ldr	r7, [sp, #20]
 800768e:	cf08      	ldmia	r7!, {r3}
 8007690:	9a01      	ldr	r2, [sp, #4]
 8007692:	b299      	uxth	r1, r3
 8007694:	4351      	muls	r1, r2
 8007696:	0c1b      	lsrs	r3, r3, #16
 8007698:	4353      	muls	r3, r2
 800769a:	1949      	adds	r1, r1, r5
 800769c:	0c0a      	lsrs	r2, r1, #16
 800769e:	189b      	adds	r3, r3, r2
 80076a0:	6802      	ldr	r2, [r0, #0]
 80076a2:	b289      	uxth	r1, r1
 80076a4:	b292      	uxth	r2, r2
 80076a6:	4462      	add	r2, ip
 80076a8:	1a52      	subs	r2, r2, r1
 80076aa:	6801      	ldr	r1, [r0, #0]
 80076ac:	0c1d      	lsrs	r5, r3, #16
 80076ae:	0c09      	lsrs	r1, r1, #16
 80076b0:	b29b      	uxth	r3, r3
 80076b2:	1acb      	subs	r3, r1, r3
 80076b4:	1411      	asrs	r1, r2, #16
 80076b6:	185b      	adds	r3, r3, r1
 80076b8:	1419      	asrs	r1, r3, #16
 80076ba:	b292      	uxth	r2, r2
 80076bc:	041b      	lsls	r3, r3, #16
 80076be:	431a      	orrs	r2, r3
 80076c0:	9b04      	ldr	r3, [sp, #16]
 80076c2:	468c      	mov	ip, r1
 80076c4:	c004      	stmia	r0!, {r2}
 80076c6:	42bb      	cmp	r3, r7
 80076c8:	d2e1      	bcs.n	800768e <quorem+0x4a>
 80076ca:	6823      	ldr	r3, [r4, #0]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d030      	beq.n	8007732 <quorem+0xee>
 80076d0:	0030      	movs	r0, r6
 80076d2:	9903      	ldr	r1, [sp, #12]
 80076d4:	f001 f902 	bl	80088dc <__mcmp>
 80076d8:	2800      	cmp	r0, #0
 80076da:	db21      	blt.n	8007720 <quorem+0xdc>
 80076dc:	0030      	movs	r0, r6
 80076de:	2400      	movs	r4, #0
 80076e0:	9b01      	ldr	r3, [sp, #4]
 80076e2:	9903      	ldr	r1, [sp, #12]
 80076e4:	3301      	adds	r3, #1
 80076e6:	9301      	str	r3, [sp, #4]
 80076e8:	3014      	adds	r0, #20
 80076ea:	3114      	adds	r1, #20
 80076ec:	6803      	ldr	r3, [r0, #0]
 80076ee:	c920      	ldmia	r1!, {r5}
 80076f0:	b29a      	uxth	r2, r3
 80076f2:	1914      	adds	r4, r2, r4
 80076f4:	b2aa      	uxth	r2, r5
 80076f6:	1aa2      	subs	r2, r4, r2
 80076f8:	0c1b      	lsrs	r3, r3, #16
 80076fa:	0c2d      	lsrs	r5, r5, #16
 80076fc:	1414      	asrs	r4, r2, #16
 80076fe:	1b5b      	subs	r3, r3, r5
 8007700:	191b      	adds	r3, r3, r4
 8007702:	141c      	asrs	r4, r3, #16
 8007704:	b292      	uxth	r2, r2
 8007706:	041b      	lsls	r3, r3, #16
 8007708:	4313      	orrs	r3, r2
 800770a:	c008      	stmia	r0!, {r3}
 800770c:	9b04      	ldr	r3, [sp, #16]
 800770e:	428b      	cmp	r3, r1
 8007710:	d2ec      	bcs.n	80076ec <quorem+0xa8>
 8007712:	9b00      	ldr	r3, [sp, #0]
 8007714:	9a02      	ldr	r2, [sp, #8]
 8007716:	009b      	lsls	r3, r3, #2
 8007718:	18d3      	adds	r3, r2, r3
 800771a:	681a      	ldr	r2, [r3, #0]
 800771c:	2a00      	cmp	r2, #0
 800771e:	d015      	beq.n	800774c <quorem+0x108>
 8007720:	9801      	ldr	r0, [sp, #4]
 8007722:	b007      	add	sp, #28
 8007724:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007726:	6823      	ldr	r3, [r4, #0]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d106      	bne.n	800773a <quorem+0xf6>
 800772c:	9b00      	ldr	r3, [sp, #0]
 800772e:	3b01      	subs	r3, #1
 8007730:	9300      	str	r3, [sp, #0]
 8007732:	9b02      	ldr	r3, [sp, #8]
 8007734:	3c04      	subs	r4, #4
 8007736:	42a3      	cmp	r3, r4
 8007738:	d3f5      	bcc.n	8007726 <quorem+0xe2>
 800773a:	9b00      	ldr	r3, [sp, #0]
 800773c:	6133      	str	r3, [r6, #16]
 800773e:	e7c7      	b.n	80076d0 <quorem+0x8c>
 8007740:	681a      	ldr	r2, [r3, #0]
 8007742:	2a00      	cmp	r2, #0
 8007744:	d106      	bne.n	8007754 <quorem+0x110>
 8007746:	9a00      	ldr	r2, [sp, #0]
 8007748:	3a01      	subs	r2, #1
 800774a:	9200      	str	r2, [sp, #0]
 800774c:	9a02      	ldr	r2, [sp, #8]
 800774e:	3b04      	subs	r3, #4
 8007750:	429a      	cmp	r2, r3
 8007752:	d3f5      	bcc.n	8007740 <quorem+0xfc>
 8007754:	9b00      	ldr	r3, [sp, #0]
 8007756:	6133      	str	r3, [r6, #16]
 8007758:	e7e2      	b.n	8007720 <quorem+0xdc>
	...

0800775c <_dtoa_r>:
 800775c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800775e:	b09d      	sub	sp, #116	; 0x74
 8007760:	9202      	str	r2, [sp, #8]
 8007762:	9303      	str	r3, [sp, #12]
 8007764:	9b02      	ldr	r3, [sp, #8]
 8007766:	9c03      	ldr	r4, [sp, #12]
 8007768:	9308      	str	r3, [sp, #32]
 800776a:	9409      	str	r4, [sp, #36]	; 0x24
 800776c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800776e:	0007      	movs	r7, r0
 8007770:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8007772:	2c00      	cmp	r4, #0
 8007774:	d10e      	bne.n	8007794 <_dtoa_r+0x38>
 8007776:	2010      	movs	r0, #16
 8007778:	f000 fe0e 	bl	8008398 <malloc>
 800777c:	1e02      	subs	r2, r0, #0
 800777e:	6278      	str	r0, [r7, #36]	; 0x24
 8007780:	d104      	bne.n	800778c <_dtoa_r+0x30>
 8007782:	21ea      	movs	r1, #234	; 0xea
 8007784:	4bc7      	ldr	r3, [pc, #796]	; (8007aa4 <_dtoa_r+0x348>)
 8007786:	48c8      	ldr	r0, [pc, #800]	; (8007aa8 <_dtoa_r+0x34c>)
 8007788:	f001 fc42 	bl	8009010 <__assert_func>
 800778c:	6044      	str	r4, [r0, #4]
 800778e:	6084      	str	r4, [r0, #8]
 8007790:	6004      	str	r4, [r0, #0]
 8007792:	60c4      	str	r4, [r0, #12]
 8007794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007796:	6819      	ldr	r1, [r3, #0]
 8007798:	2900      	cmp	r1, #0
 800779a:	d00a      	beq.n	80077b2 <_dtoa_r+0x56>
 800779c:	685a      	ldr	r2, [r3, #4]
 800779e:	2301      	movs	r3, #1
 80077a0:	4093      	lsls	r3, r2
 80077a2:	604a      	str	r2, [r1, #4]
 80077a4:	608b      	str	r3, [r1, #8]
 80077a6:	0038      	movs	r0, r7
 80077a8:	f000 fe58 	bl	800845c <_Bfree>
 80077ac:	2200      	movs	r2, #0
 80077ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077b0:	601a      	str	r2, [r3, #0]
 80077b2:	9b03      	ldr	r3, [sp, #12]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	da20      	bge.n	80077fa <_dtoa_r+0x9e>
 80077b8:	2301      	movs	r3, #1
 80077ba:	602b      	str	r3, [r5, #0]
 80077bc:	9b03      	ldr	r3, [sp, #12]
 80077be:	005b      	lsls	r3, r3, #1
 80077c0:	085b      	lsrs	r3, r3, #1
 80077c2:	9309      	str	r3, [sp, #36]	; 0x24
 80077c4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80077c6:	4bb9      	ldr	r3, [pc, #740]	; (8007aac <_dtoa_r+0x350>)
 80077c8:	4ab8      	ldr	r2, [pc, #736]	; (8007aac <_dtoa_r+0x350>)
 80077ca:	402b      	ands	r3, r5
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d117      	bne.n	8007800 <_dtoa_r+0xa4>
 80077d0:	4bb7      	ldr	r3, [pc, #732]	; (8007ab0 <_dtoa_r+0x354>)
 80077d2:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80077d4:	0328      	lsls	r0, r5, #12
 80077d6:	6013      	str	r3, [r2, #0]
 80077d8:	9b02      	ldr	r3, [sp, #8]
 80077da:	0b00      	lsrs	r0, r0, #12
 80077dc:	4318      	orrs	r0, r3
 80077de:	d101      	bne.n	80077e4 <_dtoa_r+0x88>
 80077e0:	f000 fdbf 	bl	8008362 <_dtoa_r+0xc06>
 80077e4:	48b3      	ldr	r0, [pc, #716]	; (8007ab4 <_dtoa_r+0x358>)
 80077e6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80077e8:	9006      	str	r0, [sp, #24]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d002      	beq.n	80077f4 <_dtoa_r+0x98>
 80077ee:	4bb2      	ldr	r3, [pc, #712]	; (8007ab8 <_dtoa_r+0x35c>)
 80077f0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80077f2:	6013      	str	r3, [r2, #0]
 80077f4:	9806      	ldr	r0, [sp, #24]
 80077f6:	b01d      	add	sp, #116	; 0x74
 80077f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80077fa:	2300      	movs	r3, #0
 80077fc:	602b      	str	r3, [r5, #0]
 80077fe:	e7e1      	b.n	80077c4 <_dtoa_r+0x68>
 8007800:	9b08      	ldr	r3, [sp, #32]
 8007802:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8007804:	9312      	str	r3, [sp, #72]	; 0x48
 8007806:	9413      	str	r4, [sp, #76]	; 0x4c
 8007808:	9812      	ldr	r0, [sp, #72]	; 0x48
 800780a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800780c:	2200      	movs	r2, #0
 800780e:	2300      	movs	r3, #0
 8007810:	f7f8 fe1c 	bl	800044c <__aeabi_dcmpeq>
 8007814:	1e04      	subs	r4, r0, #0
 8007816:	d009      	beq.n	800782c <_dtoa_r+0xd0>
 8007818:	2301      	movs	r3, #1
 800781a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800781c:	6013      	str	r3, [r2, #0]
 800781e:	4ba7      	ldr	r3, [pc, #668]	; (8007abc <_dtoa_r+0x360>)
 8007820:	9306      	str	r3, [sp, #24]
 8007822:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007824:	2b00      	cmp	r3, #0
 8007826:	d0e5      	beq.n	80077f4 <_dtoa_r+0x98>
 8007828:	4ba5      	ldr	r3, [pc, #660]	; (8007ac0 <_dtoa_r+0x364>)
 800782a:	e7e1      	b.n	80077f0 <_dtoa_r+0x94>
 800782c:	ab1a      	add	r3, sp, #104	; 0x68
 800782e:	9301      	str	r3, [sp, #4]
 8007830:	ab1b      	add	r3, sp, #108	; 0x6c
 8007832:	9300      	str	r3, [sp, #0]
 8007834:	0038      	movs	r0, r7
 8007836:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007838:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800783a:	f001 f903 	bl	8008a44 <__d2b>
 800783e:	006e      	lsls	r6, r5, #1
 8007840:	9005      	str	r0, [sp, #20]
 8007842:	0d76      	lsrs	r6, r6, #21
 8007844:	d100      	bne.n	8007848 <_dtoa_r+0xec>
 8007846:	e07c      	b.n	8007942 <_dtoa_r+0x1e6>
 8007848:	9812      	ldr	r0, [sp, #72]	; 0x48
 800784a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800784c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800784e:	4a9d      	ldr	r2, [pc, #628]	; (8007ac4 <_dtoa_r+0x368>)
 8007850:	031b      	lsls	r3, r3, #12
 8007852:	0b1b      	lsrs	r3, r3, #12
 8007854:	431a      	orrs	r2, r3
 8007856:	0011      	movs	r1, r2
 8007858:	4b9b      	ldr	r3, [pc, #620]	; (8007ac8 <_dtoa_r+0x36c>)
 800785a:	9418      	str	r4, [sp, #96]	; 0x60
 800785c:	18f6      	adds	r6, r6, r3
 800785e:	2200      	movs	r2, #0
 8007860:	4b9a      	ldr	r3, [pc, #616]	; (8007acc <_dtoa_r+0x370>)
 8007862:	f7fa f8e5 	bl	8001a30 <__aeabi_dsub>
 8007866:	4a9a      	ldr	r2, [pc, #616]	; (8007ad0 <_dtoa_r+0x374>)
 8007868:	4b9a      	ldr	r3, [pc, #616]	; (8007ad4 <_dtoa_r+0x378>)
 800786a:	f7f9 fe75 	bl	8001558 <__aeabi_dmul>
 800786e:	4a9a      	ldr	r2, [pc, #616]	; (8007ad8 <_dtoa_r+0x37c>)
 8007870:	4b9a      	ldr	r3, [pc, #616]	; (8007adc <_dtoa_r+0x380>)
 8007872:	f7f8 ff33 	bl	80006dc <__aeabi_dadd>
 8007876:	0004      	movs	r4, r0
 8007878:	0030      	movs	r0, r6
 800787a:	000d      	movs	r5, r1
 800787c:	f7fa fcbe 	bl	80021fc <__aeabi_i2d>
 8007880:	4a97      	ldr	r2, [pc, #604]	; (8007ae0 <_dtoa_r+0x384>)
 8007882:	4b98      	ldr	r3, [pc, #608]	; (8007ae4 <_dtoa_r+0x388>)
 8007884:	f7f9 fe68 	bl	8001558 <__aeabi_dmul>
 8007888:	0002      	movs	r2, r0
 800788a:	000b      	movs	r3, r1
 800788c:	0020      	movs	r0, r4
 800788e:	0029      	movs	r1, r5
 8007890:	f7f8 ff24 	bl	80006dc <__aeabi_dadd>
 8007894:	0004      	movs	r4, r0
 8007896:	000d      	movs	r5, r1
 8007898:	f7fa fc7a 	bl	8002190 <__aeabi_d2iz>
 800789c:	2200      	movs	r2, #0
 800789e:	9002      	str	r0, [sp, #8]
 80078a0:	2300      	movs	r3, #0
 80078a2:	0020      	movs	r0, r4
 80078a4:	0029      	movs	r1, r5
 80078a6:	f7f8 fdd7 	bl	8000458 <__aeabi_dcmplt>
 80078aa:	2800      	cmp	r0, #0
 80078ac:	d00b      	beq.n	80078c6 <_dtoa_r+0x16a>
 80078ae:	9802      	ldr	r0, [sp, #8]
 80078b0:	f7fa fca4 	bl	80021fc <__aeabi_i2d>
 80078b4:	002b      	movs	r3, r5
 80078b6:	0022      	movs	r2, r4
 80078b8:	f7f8 fdc8 	bl	800044c <__aeabi_dcmpeq>
 80078bc:	4243      	negs	r3, r0
 80078be:	4158      	adcs	r0, r3
 80078c0:	9b02      	ldr	r3, [sp, #8]
 80078c2:	1a1b      	subs	r3, r3, r0
 80078c4:	9302      	str	r3, [sp, #8]
 80078c6:	2301      	movs	r3, #1
 80078c8:	9316      	str	r3, [sp, #88]	; 0x58
 80078ca:	9b02      	ldr	r3, [sp, #8]
 80078cc:	2b16      	cmp	r3, #22
 80078ce:	d80f      	bhi.n	80078f0 <_dtoa_r+0x194>
 80078d0:	9812      	ldr	r0, [sp, #72]	; 0x48
 80078d2:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80078d4:	00da      	lsls	r2, r3, #3
 80078d6:	4b84      	ldr	r3, [pc, #528]	; (8007ae8 <_dtoa_r+0x38c>)
 80078d8:	189b      	adds	r3, r3, r2
 80078da:	681a      	ldr	r2, [r3, #0]
 80078dc:	685b      	ldr	r3, [r3, #4]
 80078de:	f7f8 fdbb 	bl	8000458 <__aeabi_dcmplt>
 80078e2:	2800      	cmp	r0, #0
 80078e4:	d049      	beq.n	800797a <_dtoa_r+0x21e>
 80078e6:	9b02      	ldr	r3, [sp, #8]
 80078e8:	3b01      	subs	r3, #1
 80078ea:	9302      	str	r3, [sp, #8]
 80078ec:	2300      	movs	r3, #0
 80078ee:	9316      	str	r3, [sp, #88]	; 0x58
 80078f0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80078f2:	1b9e      	subs	r6, r3, r6
 80078f4:	2300      	movs	r3, #0
 80078f6:	930a      	str	r3, [sp, #40]	; 0x28
 80078f8:	0033      	movs	r3, r6
 80078fa:	3b01      	subs	r3, #1
 80078fc:	930d      	str	r3, [sp, #52]	; 0x34
 80078fe:	d504      	bpl.n	800790a <_dtoa_r+0x1ae>
 8007900:	2301      	movs	r3, #1
 8007902:	1b9b      	subs	r3, r3, r6
 8007904:	930a      	str	r3, [sp, #40]	; 0x28
 8007906:	2300      	movs	r3, #0
 8007908:	930d      	str	r3, [sp, #52]	; 0x34
 800790a:	9b02      	ldr	r3, [sp, #8]
 800790c:	2b00      	cmp	r3, #0
 800790e:	db36      	blt.n	800797e <_dtoa_r+0x222>
 8007910:	9a02      	ldr	r2, [sp, #8]
 8007912:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007914:	4694      	mov	ip, r2
 8007916:	4463      	add	r3, ip
 8007918:	930d      	str	r3, [sp, #52]	; 0x34
 800791a:	2300      	movs	r3, #0
 800791c:	9215      	str	r2, [sp, #84]	; 0x54
 800791e:	930e      	str	r3, [sp, #56]	; 0x38
 8007920:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007922:	2401      	movs	r4, #1
 8007924:	2b09      	cmp	r3, #9
 8007926:	d864      	bhi.n	80079f2 <_dtoa_r+0x296>
 8007928:	2b05      	cmp	r3, #5
 800792a:	dd02      	ble.n	8007932 <_dtoa_r+0x1d6>
 800792c:	2400      	movs	r4, #0
 800792e:	3b04      	subs	r3, #4
 8007930:	9322      	str	r3, [sp, #136]	; 0x88
 8007932:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007934:	1e98      	subs	r0, r3, #2
 8007936:	2803      	cmp	r0, #3
 8007938:	d864      	bhi.n	8007a04 <_dtoa_r+0x2a8>
 800793a:	f7f8 fbed 	bl	8000118 <__gnu_thumb1_case_uqi>
 800793e:	3829      	.short	0x3829
 8007940:	5836      	.short	0x5836
 8007942:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8007944:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007946:	189e      	adds	r6, r3, r2
 8007948:	4b68      	ldr	r3, [pc, #416]	; (8007aec <_dtoa_r+0x390>)
 800794a:	18f2      	adds	r2, r6, r3
 800794c:	2a20      	cmp	r2, #32
 800794e:	dd0f      	ble.n	8007970 <_dtoa_r+0x214>
 8007950:	2340      	movs	r3, #64	; 0x40
 8007952:	1a9b      	subs	r3, r3, r2
 8007954:	409d      	lsls	r5, r3
 8007956:	4b66      	ldr	r3, [pc, #408]	; (8007af0 <_dtoa_r+0x394>)
 8007958:	9802      	ldr	r0, [sp, #8]
 800795a:	18f3      	adds	r3, r6, r3
 800795c:	40d8      	lsrs	r0, r3
 800795e:	4328      	orrs	r0, r5
 8007960:	f7fa fc7c 	bl	800225c <__aeabi_ui2d>
 8007964:	2301      	movs	r3, #1
 8007966:	4c63      	ldr	r4, [pc, #396]	; (8007af4 <_dtoa_r+0x398>)
 8007968:	3e01      	subs	r6, #1
 800796a:	1909      	adds	r1, r1, r4
 800796c:	9318      	str	r3, [sp, #96]	; 0x60
 800796e:	e776      	b.n	800785e <_dtoa_r+0x102>
 8007970:	2320      	movs	r3, #32
 8007972:	9802      	ldr	r0, [sp, #8]
 8007974:	1a9b      	subs	r3, r3, r2
 8007976:	4098      	lsls	r0, r3
 8007978:	e7f2      	b.n	8007960 <_dtoa_r+0x204>
 800797a:	9016      	str	r0, [sp, #88]	; 0x58
 800797c:	e7b8      	b.n	80078f0 <_dtoa_r+0x194>
 800797e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007980:	9a02      	ldr	r2, [sp, #8]
 8007982:	1a9b      	subs	r3, r3, r2
 8007984:	930a      	str	r3, [sp, #40]	; 0x28
 8007986:	4253      	negs	r3, r2
 8007988:	930e      	str	r3, [sp, #56]	; 0x38
 800798a:	2300      	movs	r3, #0
 800798c:	9315      	str	r3, [sp, #84]	; 0x54
 800798e:	e7c7      	b.n	8007920 <_dtoa_r+0x1c4>
 8007990:	2300      	movs	r3, #0
 8007992:	930f      	str	r3, [sp, #60]	; 0x3c
 8007994:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007996:	930c      	str	r3, [sp, #48]	; 0x30
 8007998:	9307      	str	r3, [sp, #28]
 800799a:	2b00      	cmp	r3, #0
 800799c:	dc13      	bgt.n	80079c6 <_dtoa_r+0x26a>
 800799e:	2301      	movs	r3, #1
 80079a0:	001a      	movs	r2, r3
 80079a2:	930c      	str	r3, [sp, #48]	; 0x30
 80079a4:	9307      	str	r3, [sp, #28]
 80079a6:	9223      	str	r2, [sp, #140]	; 0x8c
 80079a8:	e00d      	b.n	80079c6 <_dtoa_r+0x26a>
 80079aa:	2301      	movs	r3, #1
 80079ac:	e7f1      	b.n	8007992 <_dtoa_r+0x236>
 80079ae:	2300      	movs	r3, #0
 80079b0:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80079b2:	930f      	str	r3, [sp, #60]	; 0x3c
 80079b4:	4694      	mov	ip, r2
 80079b6:	9b02      	ldr	r3, [sp, #8]
 80079b8:	4463      	add	r3, ip
 80079ba:	930c      	str	r3, [sp, #48]	; 0x30
 80079bc:	3301      	adds	r3, #1
 80079be:	9307      	str	r3, [sp, #28]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	dc00      	bgt.n	80079c6 <_dtoa_r+0x26a>
 80079c4:	2301      	movs	r3, #1
 80079c6:	2200      	movs	r2, #0
 80079c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80079ca:	6042      	str	r2, [r0, #4]
 80079cc:	3204      	adds	r2, #4
 80079ce:	0015      	movs	r5, r2
 80079d0:	3514      	adds	r5, #20
 80079d2:	6841      	ldr	r1, [r0, #4]
 80079d4:	429d      	cmp	r5, r3
 80079d6:	d919      	bls.n	8007a0c <_dtoa_r+0x2b0>
 80079d8:	0038      	movs	r0, r7
 80079da:	f000 fcfb 	bl	80083d4 <_Balloc>
 80079de:	9006      	str	r0, [sp, #24]
 80079e0:	2800      	cmp	r0, #0
 80079e2:	d117      	bne.n	8007a14 <_dtoa_r+0x2b8>
 80079e4:	21d5      	movs	r1, #213	; 0xd5
 80079e6:	0002      	movs	r2, r0
 80079e8:	4b43      	ldr	r3, [pc, #268]	; (8007af8 <_dtoa_r+0x39c>)
 80079ea:	0049      	lsls	r1, r1, #1
 80079ec:	e6cb      	b.n	8007786 <_dtoa_r+0x2a>
 80079ee:	2301      	movs	r3, #1
 80079f0:	e7de      	b.n	80079b0 <_dtoa_r+0x254>
 80079f2:	2300      	movs	r3, #0
 80079f4:	940f      	str	r4, [sp, #60]	; 0x3c
 80079f6:	9322      	str	r3, [sp, #136]	; 0x88
 80079f8:	3b01      	subs	r3, #1
 80079fa:	930c      	str	r3, [sp, #48]	; 0x30
 80079fc:	9307      	str	r3, [sp, #28]
 80079fe:	2200      	movs	r2, #0
 8007a00:	3313      	adds	r3, #19
 8007a02:	e7d0      	b.n	80079a6 <_dtoa_r+0x24a>
 8007a04:	2301      	movs	r3, #1
 8007a06:	930f      	str	r3, [sp, #60]	; 0x3c
 8007a08:	3b02      	subs	r3, #2
 8007a0a:	e7f6      	b.n	80079fa <_dtoa_r+0x29e>
 8007a0c:	3101      	adds	r1, #1
 8007a0e:	6041      	str	r1, [r0, #4]
 8007a10:	0052      	lsls	r2, r2, #1
 8007a12:	e7dc      	b.n	80079ce <_dtoa_r+0x272>
 8007a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a16:	9a06      	ldr	r2, [sp, #24]
 8007a18:	601a      	str	r2, [r3, #0]
 8007a1a:	9b07      	ldr	r3, [sp, #28]
 8007a1c:	2b0e      	cmp	r3, #14
 8007a1e:	d900      	bls.n	8007a22 <_dtoa_r+0x2c6>
 8007a20:	e0eb      	b.n	8007bfa <_dtoa_r+0x49e>
 8007a22:	2c00      	cmp	r4, #0
 8007a24:	d100      	bne.n	8007a28 <_dtoa_r+0x2cc>
 8007a26:	e0e8      	b.n	8007bfa <_dtoa_r+0x49e>
 8007a28:	9b02      	ldr	r3, [sp, #8]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	dd68      	ble.n	8007b00 <_dtoa_r+0x3a4>
 8007a2e:	001a      	movs	r2, r3
 8007a30:	210f      	movs	r1, #15
 8007a32:	4b2d      	ldr	r3, [pc, #180]	; (8007ae8 <_dtoa_r+0x38c>)
 8007a34:	400a      	ands	r2, r1
 8007a36:	00d2      	lsls	r2, r2, #3
 8007a38:	189b      	adds	r3, r3, r2
 8007a3a:	681d      	ldr	r5, [r3, #0]
 8007a3c:	685e      	ldr	r6, [r3, #4]
 8007a3e:	9b02      	ldr	r3, [sp, #8]
 8007a40:	111c      	asrs	r4, r3, #4
 8007a42:	2302      	movs	r3, #2
 8007a44:	9310      	str	r3, [sp, #64]	; 0x40
 8007a46:	9b02      	ldr	r3, [sp, #8]
 8007a48:	05db      	lsls	r3, r3, #23
 8007a4a:	d50b      	bpl.n	8007a64 <_dtoa_r+0x308>
 8007a4c:	4b2b      	ldr	r3, [pc, #172]	; (8007afc <_dtoa_r+0x3a0>)
 8007a4e:	400c      	ands	r4, r1
 8007a50:	6a1a      	ldr	r2, [r3, #32]
 8007a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a54:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007a56:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007a58:	f7f9 f97c 	bl	8000d54 <__aeabi_ddiv>
 8007a5c:	2303      	movs	r3, #3
 8007a5e:	9008      	str	r0, [sp, #32]
 8007a60:	9109      	str	r1, [sp, #36]	; 0x24
 8007a62:	9310      	str	r3, [sp, #64]	; 0x40
 8007a64:	4b25      	ldr	r3, [pc, #148]	; (8007afc <_dtoa_r+0x3a0>)
 8007a66:	9314      	str	r3, [sp, #80]	; 0x50
 8007a68:	2c00      	cmp	r4, #0
 8007a6a:	d108      	bne.n	8007a7e <_dtoa_r+0x322>
 8007a6c:	9808      	ldr	r0, [sp, #32]
 8007a6e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007a70:	002a      	movs	r2, r5
 8007a72:	0033      	movs	r3, r6
 8007a74:	f7f9 f96e 	bl	8000d54 <__aeabi_ddiv>
 8007a78:	9008      	str	r0, [sp, #32]
 8007a7a:	9109      	str	r1, [sp, #36]	; 0x24
 8007a7c:	e05c      	b.n	8007b38 <_dtoa_r+0x3dc>
 8007a7e:	2301      	movs	r3, #1
 8007a80:	421c      	tst	r4, r3
 8007a82:	d00b      	beq.n	8007a9c <_dtoa_r+0x340>
 8007a84:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007a86:	0028      	movs	r0, r5
 8007a88:	3301      	adds	r3, #1
 8007a8a:	9310      	str	r3, [sp, #64]	; 0x40
 8007a8c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007a8e:	0031      	movs	r1, r6
 8007a90:	681a      	ldr	r2, [r3, #0]
 8007a92:	685b      	ldr	r3, [r3, #4]
 8007a94:	f7f9 fd60 	bl	8001558 <__aeabi_dmul>
 8007a98:	0005      	movs	r5, r0
 8007a9a:	000e      	movs	r6, r1
 8007a9c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007a9e:	1064      	asrs	r4, r4, #1
 8007aa0:	3308      	adds	r3, #8
 8007aa2:	e7e0      	b.n	8007a66 <_dtoa_r+0x30a>
 8007aa4:	08009ebd 	.word	0x08009ebd
 8007aa8:	08009ed4 	.word	0x08009ed4
 8007aac:	7ff00000 	.word	0x7ff00000
 8007ab0:	0000270f 	.word	0x0000270f
 8007ab4:	08009eb9 	.word	0x08009eb9
 8007ab8:	08009ebc 	.word	0x08009ebc
 8007abc:	08009e8c 	.word	0x08009e8c
 8007ac0:	08009e8d 	.word	0x08009e8d
 8007ac4:	3ff00000 	.word	0x3ff00000
 8007ac8:	fffffc01 	.word	0xfffffc01
 8007acc:	3ff80000 	.word	0x3ff80000
 8007ad0:	636f4361 	.word	0x636f4361
 8007ad4:	3fd287a7 	.word	0x3fd287a7
 8007ad8:	8b60c8b3 	.word	0x8b60c8b3
 8007adc:	3fc68a28 	.word	0x3fc68a28
 8007ae0:	509f79fb 	.word	0x509f79fb
 8007ae4:	3fd34413 	.word	0x3fd34413
 8007ae8:	08009fc8 	.word	0x08009fc8
 8007aec:	00000432 	.word	0x00000432
 8007af0:	00000412 	.word	0x00000412
 8007af4:	fe100000 	.word	0xfe100000
 8007af8:	08009f2f 	.word	0x08009f2f
 8007afc:	08009fa0 	.word	0x08009fa0
 8007b00:	2302      	movs	r3, #2
 8007b02:	9310      	str	r3, [sp, #64]	; 0x40
 8007b04:	9b02      	ldr	r3, [sp, #8]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d016      	beq.n	8007b38 <_dtoa_r+0x3dc>
 8007b0a:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007b0c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007b0e:	425c      	negs	r4, r3
 8007b10:	230f      	movs	r3, #15
 8007b12:	4ab6      	ldr	r2, [pc, #728]	; (8007dec <_dtoa_r+0x690>)
 8007b14:	4023      	ands	r3, r4
 8007b16:	00db      	lsls	r3, r3, #3
 8007b18:	18d3      	adds	r3, r2, r3
 8007b1a:	681a      	ldr	r2, [r3, #0]
 8007b1c:	685b      	ldr	r3, [r3, #4]
 8007b1e:	f7f9 fd1b 	bl	8001558 <__aeabi_dmul>
 8007b22:	2601      	movs	r6, #1
 8007b24:	2300      	movs	r3, #0
 8007b26:	9008      	str	r0, [sp, #32]
 8007b28:	9109      	str	r1, [sp, #36]	; 0x24
 8007b2a:	4db1      	ldr	r5, [pc, #708]	; (8007df0 <_dtoa_r+0x694>)
 8007b2c:	1124      	asrs	r4, r4, #4
 8007b2e:	2c00      	cmp	r4, #0
 8007b30:	d000      	beq.n	8007b34 <_dtoa_r+0x3d8>
 8007b32:	e094      	b.n	8007c5e <_dtoa_r+0x502>
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d19f      	bne.n	8007a78 <_dtoa_r+0x31c>
 8007b38:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d100      	bne.n	8007b40 <_dtoa_r+0x3e4>
 8007b3e:	e09b      	b.n	8007c78 <_dtoa_r+0x51c>
 8007b40:	9c08      	ldr	r4, [sp, #32]
 8007b42:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007b44:	2200      	movs	r2, #0
 8007b46:	0020      	movs	r0, r4
 8007b48:	0029      	movs	r1, r5
 8007b4a:	4baa      	ldr	r3, [pc, #680]	; (8007df4 <_dtoa_r+0x698>)
 8007b4c:	f7f8 fc84 	bl	8000458 <__aeabi_dcmplt>
 8007b50:	2800      	cmp	r0, #0
 8007b52:	d100      	bne.n	8007b56 <_dtoa_r+0x3fa>
 8007b54:	e090      	b.n	8007c78 <_dtoa_r+0x51c>
 8007b56:	9b07      	ldr	r3, [sp, #28]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d100      	bne.n	8007b5e <_dtoa_r+0x402>
 8007b5c:	e08c      	b.n	8007c78 <_dtoa_r+0x51c>
 8007b5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	dd46      	ble.n	8007bf2 <_dtoa_r+0x496>
 8007b64:	9b02      	ldr	r3, [sp, #8]
 8007b66:	2200      	movs	r2, #0
 8007b68:	0020      	movs	r0, r4
 8007b6a:	0029      	movs	r1, r5
 8007b6c:	1e5e      	subs	r6, r3, #1
 8007b6e:	4ba2      	ldr	r3, [pc, #648]	; (8007df8 <_dtoa_r+0x69c>)
 8007b70:	f7f9 fcf2 	bl	8001558 <__aeabi_dmul>
 8007b74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007b76:	9008      	str	r0, [sp, #32]
 8007b78:	9109      	str	r1, [sp, #36]	; 0x24
 8007b7a:	3301      	adds	r3, #1
 8007b7c:	9310      	str	r3, [sp, #64]	; 0x40
 8007b7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b80:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007b82:	9c08      	ldr	r4, [sp, #32]
 8007b84:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007b86:	9314      	str	r3, [sp, #80]	; 0x50
 8007b88:	f7fa fb38 	bl	80021fc <__aeabi_i2d>
 8007b8c:	0022      	movs	r2, r4
 8007b8e:	002b      	movs	r3, r5
 8007b90:	f7f9 fce2 	bl	8001558 <__aeabi_dmul>
 8007b94:	2200      	movs	r2, #0
 8007b96:	4b99      	ldr	r3, [pc, #612]	; (8007dfc <_dtoa_r+0x6a0>)
 8007b98:	f7f8 fda0 	bl	80006dc <__aeabi_dadd>
 8007b9c:	9010      	str	r0, [sp, #64]	; 0x40
 8007b9e:	9111      	str	r1, [sp, #68]	; 0x44
 8007ba0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007ba2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007ba4:	9208      	str	r2, [sp, #32]
 8007ba6:	9309      	str	r3, [sp, #36]	; 0x24
 8007ba8:	4a95      	ldr	r2, [pc, #596]	; (8007e00 <_dtoa_r+0x6a4>)
 8007baa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007bac:	4694      	mov	ip, r2
 8007bae:	4463      	add	r3, ip
 8007bb0:	9317      	str	r3, [sp, #92]	; 0x5c
 8007bb2:	9309      	str	r3, [sp, #36]	; 0x24
 8007bb4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d161      	bne.n	8007c7e <_dtoa_r+0x522>
 8007bba:	2200      	movs	r2, #0
 8007bbc:	0020      	movs	r0, r4
 8007bbe:	0029      	movs	r1, r5
 8007bc0:	4b90      	ldr	r3, [pc, #576]	; (8007e04 <_dtoa_r+0x6a8>)
 8007bc2:	f7f9 ff35 	bl	8001a30 <__aeabi_dsub>
 8007bc6:	9a08      	ldr	r2, [sp, #32]
 8007bc8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007bca:	0004      	movs	r4, r0
 8007bcc:	000d      	movs	r5, r1
 8007bce:	f7f8 fc57 	bl	8000480 <__aeabi_dcmpgt>
 8007bd2:	2800      	cmp	r0, #0
 8007bd4:	d000      	beq.n	8007bd8 <_dtoa_r+0x47c>
 8007bd6:	e2af      	b.n	8008138 <_dtoa_r+0x9dc>
 8007bd8:	488b      	ldr	r0, [pc, #556]	; (8007e08 <_dtoa_r+0x6ac>)
 8007bda:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007bdc:	4684      	mov	ip, r0
 8007bde:	4461      	add	r1, ip
 8007be0:	000b      	movs	r3, r1
 8007be2:	0020      	movs	r0, r4
 8007be4:	0029      	movs	r1, r5
 8007be6:	9a08      	ldr	r2, [sp, #32]
 8007be8:	f7f8 fc36 	bl	8000458 <__aeabi_dcmplt>
 8007bec:	2800      	cmp	r0, #0
 8007bee:	d000      	beq.n	8007bf2 <_dtoa_r+0x496>
 8007bf0:	e29f      	b.n	8008132 <_dtoa_r+0x9d6>
 8007bf2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007bf4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8007bf6:	9308      	str	r3, [sp, #32]
 8007bf8:	9409      	str	r4, [sp, #36]	; 0x24
 8007bfa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	da00      	bge.n	8007c02 <_dtoa_r+0x4a6>
 8007c00:	e172      	b.n	8007ee8 <_dtoa_r+0x78c>
 8007c02:	9a02      	ldr	r2, [sp, #8]
 8007c04:	2a0e      	cmp	r2, #14
 8007c06:	dd00      	ble.n	8007c0a <_dtoa_r+0x4ae>
 8007c08:	e16e      	b.n	8007ee8 <_dtoa_r+0x78c>
 8007c0a:	4b78      	ldr	r3, [pc, #480]	; (8007dec <_dtoa_r+0x690>)
 8007c0c:	00d2      	lsls	r2, r2, #3
 8007c0e:	189b      	adds	r3, r3, r2
 8007c10:	685c      	ldr	r4, [r3, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	930a      	str	r3, [sp, #40]	; 0x28
 8007c16:	940b      	str	r4, [sp, #44]	; 0x2c
 8007c18:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	db00      	blt.n	8007c20 <_dtoa_r+0x4c4>
 8007c1e:	e0f7      	b.n	8007e10 <_dtoa_r+0x6b4>
 8007c20:	9b07      	ldr	r3, [sp, #28]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	dd00      	ble.n	8007c28 <_dtoa_r+0x4cc>
 8007c26:	e0f3      	b.n	8007e10 <_dtoa_r+0x6b4>
 8007c28:	d000      	beq.n	8007c2c <_dtoa_r+0x4d0>
 8007c2a:	e282      	b.n	8008132 <_dtoa_r+0x9d6>
 8007c2c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007c2e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007c30:	2200      	movs	r2, #0
 8007c32:	4b74      	ldr	r3, [pc, #464]	; (8007e04 <_dtoa_r+0x6a8>)
 8007c34:	f7f9 fc90 	bl	8001558 <__aeabi_dmul>
 8007c38:	9a08      	ldr	r2, [sp, #32]
 8007c3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c3c:	f7f8 fc2a 	bl	8000494 <__aeabi_dcmpge>
 8007c40:	9e07      	ldr	r6, [sp, #28]
 8007c42:	0035      	movs	r5, r6
 8007c44:	2800      	cmp	r0, #0
 8007c46:	d000      	beq.n	8007c4a <_dtoa_r+0x4ee>
 8007c48:	e259      	b.n	80080fe <_dtoa_r+0x9a2>
 8007c4a:	9b06      	ldr	r3, [sp, #24]
 8007c4c:	9a06      	ldr	r2, [sp, #24]
 8007c4e:	3301      	adds	r3, #1
 8007c50:	9308      	str	r3, [sp, #32]
 8007c52:	2331      	movs	r3, #49	; 0x31
 8007c54:	7013      	strb	r3, [r2, #0]
 8007c56:	9b02      	ldr	r3, [sp, #8]
 8007c58:	3301      	adds	r3, #1
 8007c5a:	9302      	str	r3, [sp, #8]
 8007c5c:	e254      	b.n	8008108 <_dtoa_r+0x9ac>
 8007c5e:	4234      	tst	r4, r6
 8007c60:	d007      	beq.n	8007c72 <_dtoa_r+0x516>
 8007c62:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007c64:	3301      	adds	r3, #1
 8007c66:	9310      	str	r3, [sp, #64]	; 0x40
 8007c68:	682a      	ldr	r2, [r5, #0]
 8007c6a:	686b      	ldr	r3, [r5, #4]
 8007c6c:	f7f9 fc74 	bl	8001558 <__aeabi_dmul>
 8007c70:	0033      	movs	r3, r6
 8007c72:	1064      	asrs	r4, r4, #1
 8007c74:	3508      	adds	r5, #8
 8007c76:	e75a      	b.n	8007b2e <_dtoa_r+0x3d2>
 8007c78:	9e02      	ldr	r6, [sp, #8]
 8007c7a:	9b07      	ldr	r3, [sp, #28]
 8007c7c:	e780      	b.n	8007b80 <_dtoa_r+0x424>
 8007c7e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007c80:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007c82:	1e5a      	subs	r2, r3, #1
 8007c84:	4b59      	ldr	r3, [pc, #356]	; (8007dec <_dtoa_r+0x690>)
 8007c86:	00d2      	lsls	r2, r2, #3
 8007c88:	189b      	adds	r3, r3, r2
 8007c8a:	681a      	ldr	r2, [r3, #0]
 8007c8c:	685b      	ldr	r3, [r3, #4]
 8007c8e:	2900      	cmp	r1, #0
 8007c90:	d051      	beq.n	8007d36 <_dtoa_r+0x5da>
 8007c92:	2000      	movs	r0, #0
 8007c94:	495d      	ldr	r1, [pc, #372]	; (8007e0c <_dtoa_r+0x6b0>)
 8007c96:	f7f9 f85d 	bl	8000d54 <__aeabi_ddiv>
 8007c9a:	9a08      	ldr	r2, [sp, #32]
 8007c9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c9e:	f7f9 fec7 	bl	8001a30 <__aeabi_dsub>
 8007ca2:	9a06      	ldr	r2, [sp, #24]
 8007ca4:	9b06      	ldr	r3, [sp, #24]
 8007ca6:	4694      	mov	ip, r2
 8007ca8:	9317      	str	r3, [sp, #92]	; 0x5c
 8007caa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007cac:	9010      	str	r0, [sp, #64]	; 0x40
 8007cae:	9111      	str	r1, [sp, #68]	; 0x44
 8007cb0:	4463      	add	r3, ip
 8007cb2:	9319      	str	r3, [sp, #100]	; 0x64
 8007cb4:	0029      	movs	r1, r5
 8007cb6:	0020      	movs	r0, r4
 8007cb8:	f7fa fa6a 	bl	8002190 <__aeabi_d2iz>
 8007cbc:	9014      	str	r0, [sp, #80]	; 0x50
 8007cbe:	f7fa fa9d 	bl	80021fc <__aeabi_i2d>
 8007cc2:	0002      	movs	r2, r0
 8007cc4:	000b      	movs	r3, r1
 8007cc6:	0020      	movs	r0, r4
 8007cc8:	0029      	movs	r1, r5
 8007cca:	f7f9 feb1 	bl	8001a30 <__aeabi_dsub>
 8007cce:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007cd0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007cd2:	3301      	adds	r3, #1
 8007cd4:	9308      	str	r3, [sp, #32]
 8007cd6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007cd8:	0004      	movs	r4, r0
 8007cda:	3330      	adds	r3, #48	; 0x30
 8007cdc:	7013      	strb	r3, [r2, #0]
 8007cde:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007ce0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007ce2:	000d      	movs	r5, r1
 8007ce4:	f7f8 fbb8 	bl	8000458 <__aeabi_dcmplt>
 8007ce8:	2800      	cmp	r0, #0
 8007cea:	d175      	bne.n	8007dd8 <_dtoa_r+0x67c>
 8007cec:	0022      	movs	r2, r4
 8007cee:	002b      	movs	r3, r5
 8007cf0:	2000      	movs	r0, #0
 8007cf2:	4940      	ldr	r1, [pc, #256]	; (8007df4 <_dtoa_r+0x698>)
 8007cf4:	f7f9 fe9c 	bl	8001a30 <__aeabi_dsub>
 8007cf8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007cfa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007cfc:	f7f8 fbac 	bl	8000458 <__aeabi_dcmplt>
 8007d00:	2800      	cmp	r0, #0
 8007d02:	d000      	beq.n	8007d06 <_dtoa_r+0x5aa>
 8007d04:	e0d2      	b.n	8007eac <_dtoa_r+0x750>
 8007d06:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007d08:	9a08      	ldr	r2, [sp, #32]
 8007d0a:	4293      	cmp	r3, r2
 8007d0c:	d100      	bne.n	8007d10 <_dtoa_r+0x5b4>
 8007d0e:	e770      	b.n	8007bf2 <_dtoa_r+0x496>
 8007d10:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007d12:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007d14:	2200      	movs	r2, #0
 8007d16:	4b38      	ldr	r3, [pc, #224]	; (8007df8 <_dtoa_r+0x69c>)
 8007d18:	f7f9 fc1e 	bl	8001558 <__aeabi_dmul>
 8007d1c:	4b36      	ldr	r3, [pc, #216]	; (8007df8 <_dtoa_r+0x69c>)
 8007d1e:	9010      	str	r0, [sp, #64]	; 0x40
 8007d20:	9111      	str	r1, [sp, #68]	; 0x44
 8007d22:	2200      	movs	r2, #0
 8007d24:	0020      	movs	r0, r4
 8007d26:	0029      	movs	r1, r5
 8007d28:	f7f9 fc16 	bl	8001558 <__aeabi_dmul>
 8007d2c:	9b08      	ldr	r3, [sp, #32]
 8007d2e:	0004      	movs	r4, r0
 8007d30:	000d      	movs	r5, r1
 8007d32:	9317      	str	r3, [sp, #92]	; 0x5c
 8007d34:	e7be      	b.n	8007cb4 <_dtoa_r+0x558>
 8007d36:	9808      	ldr	r0, [sp, #32]
 8007d38:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007d3a:	f7f9 fc0d 	bl	8001558 <__aeabi_dmul>
 8007d3e:	9a06      	ldr	r2, [sp, #24]
 8007d40:	9b06      	ldr	r3, [sp, #24]
 8007d42:	4694      	mov	ip, r2
 8007d44:	9308      	str	r3, [sp, #32]
 8007d46:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007d48:	9010      	str	r0, [sp, #64]	; 0x40
 8007d4a:	9111      	str	r1, [sp, #68]	; 0x44
 8007d4c:	4463      	add	r3, ip
 8007d4e:	9319      	str	r3, [sp, #100]	; 0x64
 8007d50:	0029      	movs	r1, r5
 8007d52:	0020      	movs	r0, r4
 8007d54:	f7fa fa1c 	bl	8002190 <__aeabi_d2iz>
 8007d58:	9017      	str	r0, [sp, #92]	; 0x5c
 8007d5a:	f7fa fa4f 	bl	80021fc <__aeabi_i2d>
 8007d5e:	0002      	movs	r2, r0
 8007d60:	000b      	movs	r3, r1
 8007d62:	0020      	movs	r0, r4
 8007d64:	0029      	movs	r1, r5
 8007d66:	f7f9 fe63 	bl	8001a30 <__aeabi_dsub>
 8007d6a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007d6c:	9a08      	ldr	r2, [sp, #32]
 8007d6e:	3330      	adds	r3, #48	; 0x30
 8007d70:	7013      	strb	r3, [r2, #0]
 8007d72:	0013      	movs	r3, r2
 8007d74:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007d76:	3301      	adds	r3, #1
 8007d78:	0004      	movs	r4, r0
 8007d7a:	000d      	movs	r5, r1
 8007d7c:	9308      	str	r3, [sp, #32]
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	d12c      	bne.n	8007ddc <_dtoa_r+0x680>
 8007d82:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007d84:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007d86:	9a06      	ldr	r2, [sp, #24]
 8007d88:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007d8a:	4694      	mov	ip, r2
 8007d8c:	4463      	add	r3, ip
 8007d8e:	2200      	movs	r2, #0
 8007d90:	9308      	str	r3, [sp, #32]
 8007d92:	4b1e      	ldr	r3, [pc, #120]	; (8007e0c <_dtoa_r+0x6b0>)
 8007d94:	f7f8 fca2 	bl	80006dc <__aeabi_dadd>
 8007d98:	0002      	movs	r2, r0
 8007d9a:	000b      	movs	r3, r1
 8007d9c:	0020      	movs	r0, r4
 8007d9e:	0029      	movs	r1, r5
 8007da0:	f7f8 fb6e 	bl	8000480 <__aeabi_dcmpgt>
 8007da4:	2800      	cmp	r0, #0
 8007da6:	d000      	beq.n	8007daa <_dtoa_r+0x64e>
 8007da8:	e080      	b.n	8007eac <_dtoa_r+0x750>
 8007daa:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007dac:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007dae:	2000      	movs	r0, #0
 8007db0:	4916      	ldr	r1, [pc, #88]	; (8007e0c <_dtoa_r+0x6b0>)
 8007db2:	f7f9 fe3d 	bl	8001a30 <__aeabi_dsub>
 8007db6:	0002      	movs	r2, r0
 8007db8:	000b      	movs	r3, r1
 8007dba:	0020      	movs	r0, r4
 8007dbc:	0029      	movs	r1, r5
 8007dbe:	f7f8 fb4b 	bl	8000458 <__aeabi_dcmplt>
 8007dc2:	2800      	cmp	r0, #0
 8007dc4:	d100      	bne.n	8007dc8 <_dtoa_r+0x66c>
 8007dc6:	e714      	b.n	8007bf2 <_dtoa_r+0x496>
 8007dc8:	9b08      	ldr	r3, [sp, #32]
 8007dca:	001a      	movs	r2, r3
 8007dcc:	3a01      	subs	r2, #1
 8007dce:	9208      	str	r2, [sp, #32]
 8007dd0:	7812      	ldrb	r2, [r2, #0]
 8007dd2:	2a30      	cmp	r2, #48	; 0x30
 8007dd4:	d0f8      	beq.n	8007dc8 <_dtoa_r+0x66c>
 8007dd6:	9308      	str	r3, [sp, #32]
 8007dd8:	9602      	str	r6, [sp, #8]
 8007dda:	e055      	b.n	8007e88 <_dtoa_r+0x72c>
 8007ddc:	2200      	movs	r2, #0
 8007dde:	4b06      	ldr	r3, [pc, #24]	; (8007df8 <_dtoa_r+0x69c>)
 8007de0:	f7f9 fbba 	bl	8001558 <__aeabi_dmul>
 8007de4:	0004      	movs	r4, r0
 8007de6:	000d      	movs	r5, r1
 8007de8:	e7b2      	b.n	8007d50 <_dtoa_r+0x5f4>
 8007dea:	46c0      	nop			; (mov r8, r8)
 8007dec:	08009fc8 	.word	0x08009fc8
 8007df0:	08009fa0 	.word	0x08009fa0
 8007df4:	3ff00000 	.word	0x3ff00000
 8007df8:	40240000 	.word	0x40240000
 8007dfc:	401c0000 	.word	0x401c0000
 8007e00:	fcc00000 	.word	0xfcc00000
 8007e04:	40140000 	.word	0x40140000
 8007e08:	7cc00000 	.word	0x7cc00000
 8007e0c:	3fe00000 	.word	0x3fe00000
 8007e10:	9b07      	ldr	r3, [sp, #28]
 8007e12:	9e06      	ldr	r6, [sp, #24]
 8007e14:	3b01      	subs	r3, #1
 8007e16:	199b      	adds	r3, r3, r6
 8007e18:	930c      	str	r3, [sp, #48]	; 0x30
 8007e1a:	9c08      	ldr	r4, [sp, #32]
 8007e1c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007e1e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007e20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e22:	0020      	movs	r0, r4
 8007e24:	0029      	movs	r1, r5
 8007e26:	f7f8 ff95 	bl	8000d54 <__aeabi_ddiv>
 8007e2a:	f7fa f9b1 	bl	8002190 <__aeabi_d2iz>
 8007e2e:	9007      	str	r0, [sp, #28]
 8007e30:	f7fa f9e4 	bl	80021fc <__aeabi_i2d>
 8007e34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007e36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e38:	f7f9 fb8e 	bl	8001558 <__aeabi_dmul>
 8007e3c:	0002      	movs	r2, r0
 8007e3e:	000b      	movs	r3, r1
 8007e40:	0020      	movs	r0, r4
 8007e42:	0029      	movs	r1, r5
 8007e44:	f7f9 fdf4 	bl	8001a30 <__aeabi_dsub>
 8007e48:	0033      	movs	r3, r6
 8007e4a:	9a07      	ldr	r2, [sp, #28]
 8007e4c:	3601      	adds	r6, #1
 8007e4e:	3230      	adds	r2, #48	; 0x30
 8007e50:	701a      	strb	r2, [r3, #0]
 8007e52:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007e54:	9608      	str	r6, [sp, #32]
 8007e56:	429a      	cmp	r2, r3
 8007e58:	d139      	bne.n	8007ece <_dtoa_r+0x772>
 8007e5a:	0002      	movs	r2, r0
 8007e5c:	000b      	movs	r3, r1
 8007e5e:	f7f8 fc3d 	bl	80006dc <__aeabi_dadd>
 8007e62:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007e64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e66:	0004      	movs	r4, r0
 8007e68:	000d      	movs	r5, r1
 8007e6a:	f7f8 fb09 	bl	8000480 <__aeabi_dcmpgt>
 8007e6e:	2800      	cmp	r0, #0
 8007e70:	d11b      	bne.n	8007eaa <_dtoa_r+0x74e>
 8007e72:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007e74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e76:	0020      	movs	r0, r4
 8007e78:	0029      	movs	r1, r5
 8007e7a:	f7f8 fae7 	bl	800044c <__aeabi_dcmpeq>
 8007e7e:	2800      	cmp	r0, #0
 8007e80:	d002      	beq.n	8007e88 <_dtoa_r+0x72c>
 8007e82:	9b07      	ldr	r3, [sp, #28]
 8007e84:	07db      	lsls	r3, r3, #31
 8007e86:	d410      	bmi.n	8007eaa <_dtoa_r+0x74e>
 8007e88:	0038      	movs	r0, r7
 8007e8a:	9905      	ldr	r1, [sp, #20]
 8007e8c:	f000 fae6 	bl	800845c <_Bfree>
 8007e90:	2300      	movs	r3, #0
 8007e92:	9a08      	ldr	r2, [sp, #32]
 8007e94:	9802      	ldr	r0, [sp, #8]
 8007e96:	7013      	strb	r3, [r2, #0]
 8007e98:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007e9a:	3001      	adds	r0, #1
 8007e9c:	6018      	str	r0, [r3, #0]
 8007e9e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d100      	bne.n	8007ea6 <_dtoa_r+0x74a>
 8007ea4:	e4a6      	b.n	80077f4 <_dtoa_r+0x98>
 8007ea6:	601a      	str	r2, [r3, #0]
 8007ea8:	e4a4      	b.n	80077f4 <_dtoa_r+0x98>
 8007eaa:	9e02      	ldr	r6, [sp, #8]
 8007eac:	9b08      	ldr	r3, [sp, #32]
 8007eae:	9308      	str	r3, [sp, #32]
 8007eb0:	3b01      	subs	r3, #1
 8007eb2:	781a      	ldrb	r2, [r3, #0]
 8007eb4:	2a39      	cmp	r2, #57	; 0x39
 8007eb6:	d106      	bne.n	8007ec6 <_dtoa_r+0x76a>
 8007eb8:	9a06      	ldr	r2, [sp, #24]
 8007eba:	429a      	cmp	r2, r3
 8007ebc:	d1f7      	bne.n	8007eae <_dtoa_r+0x752>
 8007ebe:	2230      	movs	r2, #48	; 0x30
 8007ec0:	9906      	ldr	r1, [sp, #24]
 8007ec2:	3601      	adds	r6, #1
 8007ec4:	700a      	strb	r2, [r1, #0]
 8007ec6:	781a      	ldrb	r2, [r3, #0]
 8007ec8:	3201      	adds	r2, #1
 8007eca:	701a      	strb	r2, [r3, #0]
 8007ecc:	e784      	b.n	8007dd8 <_dtoa_r+0x67c>
 8007ece:	2200      	movs	r2, #0
 8007ed0:	4baa      	ldr	r3, [pc, #680]	; (800817c <_dtoa_r+0xa20>)
 8007ed2:	f7f9 fb41 	bl	8001558 <__aeabi_dmul>
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	2300      	movs	r3, #0
 8007eda:	0004      	movs	r4, r0
 8007edc:	000d      	movs	r5, r1
 8007ede:	f7f8 fab5 	bl	800044c <__aeabi_dcmpeq>
 8007ee2:	2800      	cmp	r0, #0
 8007ee4:	d09b      	beq.n	8007e1e <_dtoa_r+0x6c2>
 8007ee6:	e7cf      	b.n	8007e88 <_dtoa_r+0x72c>
 8007ee8:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007eea:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8007eec:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007eee:	2d00      	cmp	r5, #0
 8007ef0:	d012      	beq.n	8007f18 <_dtoa_r+0x7bc>
 8007ef2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007ef4:	2a01      	cmp	r2, #1
 8007ef6:	dc66      	bgt.n	8007fc6 <_dtoa_r+0x86a>
 8007ef8:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007efa:	2a00      	cmp	r2, #0
 8007efc:	d05d      	beq.n	8007fba <_dtoa_r+0x85e>
 8007efe:	4aa0      	ldr	r2, [pc, #640]	; (8008180 <_dtoa_r+0xa24>)
 8007f00:	189b      	adds	r3, r3, r2
 8007f02:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007f04:	2101      	movs	r1, #1
 8007f06:	18d2      	adds	r2, r2, r3
 8007f08:	920a      	str	r2, [sp, #40]	; 0x28
 8007f0a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007f0c:	0038      	movs	r0, r7
 8007f0e:	18d3      	adds	r3, r2, r3
 8007f10:	930d      	str	r3, [sp, #52]	; 0x34
 8007f12:	f000 fb53 	bl	80085bc <__i2b>
 8007f16:	0005      	movs	r5, r0
 8007f18:	2c00      	cmp	r4, #0
 8007f1a:	dd0e      	ble.n	8007f3a <_dtoa_r+0x7de>
 8007f1c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	dd0b      	ble.n	8007f3a <_dtoa_r+0x7de>
 8007f22:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007f24:	0023      	movs	r3, r4
 8007f26:	4294      	cmp	r4, r2
 8007f28:	dd00      	ble.n	8007f2c <_dtoa_r+0x7d0>
 8007f2a:	0013      	movs	r3, r2
 8007f2c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007f2e:	1ae4      	subs	r4, r4, r3
 8007f30:	1ad2      	subs	r2, r2, r3
 8007f32:	920a      	str	r2, [sp, #40]	; 0x28
 8007f34:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007f36:	1ad3      	subs	r3, r2, r3
 8007f38:	930d      	str	r3, [sp, #52]	; 0x34
 8007f3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d01f      	beq.n	8007f80 <_dtoa_r+0x824>
 8007f40:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d054      	beq.n	8007ff0 <_dtoa_r+0x894>
 8007f46:	2e00      	cmp	r6, #0
 8007f48:	dd11      	ble.n	8007f6e <_dtoa_r+0x812>
 8007f4a:	0029      	movs	r1, r5
 8007f4c:	0032      	movs	r2, r6
 8007f4e:	0038      	movs	r0, r7
 8007f50:	f000 fbfa 	bl	8008748 <__pow5mult>
 8007f54:	9a05      	ldr	r2, [sp, #20]
 8007f56:	0001      	movs	r1, r0
 8007f58:	0005      	movs	r5, r0
 8007f5a:	0038      	movs	r0, r7
 8007f5c:	f000 fb44 	bl	80085e8 <__multiply>
 8007f60:	9905      	ldr	r1, [sp, #20]
 8007f62:	9014      	str	r0, [sp, #80]	; 0x50
 8007f64:	0038      	movs	r0, r7
 8007f66:	f000 fa79 	bl	800845c <_Bfree>
 8007f6a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007f6c:	9305      	str	r3, [sp, #20]
 8007f6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007f70:	1b9a      	subs	r2, r3, r6
 8007f72:	42b3      	cmp	r3, r6
 8007f74:	d004      	beq.n	8007f80 <_dtoa_r+0x824>
 8007f76:	0038      	movs	r0, r7
 8007f78:	9905      	ldr	r1, [sp, #20]
 8007f7a:	f000 fbe5 	bl	8008748 <__pow5mult>
 8007f7e:	9005      	str	r0, [sp, #20]
 8007f80:	2101      	movs	r1, #1
 8007f82:	0038      	movs	r0, r7
 8007f84:	f000 fb1a 	bl	80085bc <__i2b>
 8007f88:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007f8a:	0006      	movs	r6, r0
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	dd31      	ble.n	8007ff4 <_dtoa_r+0x898>
 8007f90:	001a      	movs	r2, r3
 8007f92:	0001      	movs	r1, r0
 8007f94:	0038      	movs	r0, r7
 8007f96:	f000 fbd7 	bl	8008748 <__pow5mult>
 8007f9a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007f9c:	0006      	movs	r6, r0
 8007f9e:	2b01      	cmp	r3, #1
 8007fa0:	dd2d      	ble.n	8007ffe <_dtoa_r+0x8a2>
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	930e      	str	r3, [sp, #56]	; 0x38
 8007fa6:	6933      	ldr	r3, [r6, #16]
 8007fa8:	3303      	adds	r3, #3
 8007faa:	009b      	lsls	r3, r3, #2
 8007fac:	18f3      	adds	r3, r6, r3
 8007fae:	6858      	ldr	r0, [r3, #4]
 8007fb0:	f000 fabc 	bl	800852c <__hi0bits>
 8007fb4:	2320      	movs	r3, #32
 8007fb6:	1a18      	subs	r0, r3, r0
 8007fb8:	e039      	b.n	800802e <_dtoa_r+0x8d2>
 8007fba:	2336      	movs	r3, #54	; 0x36
 8007fbc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007fbe:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8007fc0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007fc2:	1a9b      	subs	r3, r3, r2
 8007fc4:	e79d      	b.n	8007f02 <_dtoa_r+0x7a6>
 8007fc6:	9b07      	ldr	r3, [sp, #28]
 8007fc8:	1e5e      	subs	r6, r3, #1
 8007fca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007fcc:	42b3      	cmp	r3, r6
 8007fce:	db07      	blt.n	8007fe0 <_dtoa_r+0x884>
 8007fd0:	1b9e      	subs	r6, r3, r6
 8007fd2:	9b07      	ldr	r3, [sp, #28]
 8007fd4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	da93      	bge.n	8007f02 <_dtoa_r+0x7a6>
 8007fda:	1ae4      	subs	r4, r4, r3
 8007fdc:	2300      	movs	r3, #0
 8007fde:	e790      	b.n	8007f02 <_dtoa_r+0x7a6>
 8007fe0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007fe2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007fe4:	1af3      	subs	r3, r6, r3
 8007fe6:	18d3      	adds	r3, r2, r3
 8007fe8:	960e      	str	r6, [sp, #56]	; 0x38
 8007fea:	9315      	str	r3, [sp, #84]	; 0x54
 8007fec:	2600      	movs	r6, #0
 8007fee:	e7f0      	b.n	8007fd2 <_dtoa_r+0x876>
 8007ff0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007ff2:	e7c0      	b.n	8007f76 <_dtoa_r+0x81a>
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	930e      	str	r3, [sp, #56]	; 0x38
 8007ff8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007ffa:	2b01      	cmp	r3, #1
 8007ffc:	dc13      	bgt.n	8008026 <_dtoa_r+0x8ca>
 8007ffe:	2300      	movs	r3, #0
 8008000:	930e      	str	r3, [sp, #56]	; 0x38
 8008002:	9b08      	ldr	r3, [sp, #32]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d10e      	bne.n	8008026 <_dtoa_r+0x8ca>
 8008008:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800800a:	031b      	lsls	r3, r3, #12
 800800c:	d10b      	bne.n	8008026 <_dtoa_r+0x8ca>
 800800e:	4b5d      	ldr	r3, [pc, #372]	; (8008184 <_dtoa_r+0xa28>)
 8008010:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008012:	4213      	tst	r3, r2
 8008014:	d007      	beq.n	8008026 <_dtoa_r+0x8ca>
 8008016:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008018:	3301      	adds	r3, #1
 800801a:	930a      	str	r3, [sp, #40]	; 0x28
 800801c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800801e:	3301      	adds	r3, #1
 8008020:	930d      	str	r3, [sp, #52]	; 0x34
 8008022:	2301      	movs	r3, #1
 8008024:	930e      	str	r3, [sp, #56]	; 0x38
 8008026:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008028:	2001      	movs	r0, #1
 800802a:	2b00      	cmp	r3, #0
 800802c:	d1bb      	bne.n	8007fa6 <_dtoa_r+0x84a>
 800802e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008030:	221f      	movs	r2, #31
 8008032:	1818      	adds	r0, r3, r0
 8008034:	0003      	movs	r3, r0
 8008036:	4013      	ands	r3, r2
 8008038:	4210      	tst	r0, r2
 800803a:	d046      	beq.n	80080ca <_dtoa_r+0x96e>
 800803c:	3201      	adds	r2, #1
 800803e:	1ad2      	subs	r2, r2, r3
 8008040:	2a04      	cmp	r2, #4
 8008042:	dd3f      	ble.n	80080c4 <_dtoa_r+0x968>
 8008044:	221c      	movs	r2, #28
 8008046:	1ad3      	subs	r3, r2, r3
 8008048:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800804a:	18e4      	adds	r4, r4, r3
 800804c:	18d2      	adds	r2, r2, r3
 800804e:	920a      	str	r2, [sp, #40]	; 0x28
 8008050:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008052:	18d3      	adds	r3, r2, r3
 8008054:	930d      	str	r3, [sp, #52]	; 0x34
 8008056:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008058:	2b00      	cmp	r3, #0
 800805a:	dd05      	ble.n	8008068 <_dtoa_r+0x90c>
 800805c:	001a      	movs	r2, r3
 800805e:	0038      	movs	r0, r7
 8008060:	9905      	ldr	r1, [sp, #20]
 8008062:	f000 fbcd 	bl	8008800 <__lshift>
 8008066:	9005      	str	r0, [sp, #20]
 8008068:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800806a:	2b00      	cmp	r3, #0
 800806c:	dd05      	ble.n	800807a <_dtoa_r+0x91e>
 800806e:	0031      	movs	r1, r6
 8008070:	001a      	movs	r2, r3
 8008072:	0038      	movs	r0, r7
 8008074:	f000 fbc4 	bl	8008800 <__lshift>
 8008078:	0006      	movs	r6, r0
 800807a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800807c:	2b00      	cmp	r3, #0
 800807e:	d026      	beq.n	80080ce <_dtoa_r+0x972>
 8008080:	0031      	movs	r1, r6
 8008082:	9805      	ldr	r0, [sp, #20]
 8008084:	f000 fc2a 	bl	80088dc <__mcmp>
 8008088:	2800      	cmp	r0, #0
 800808a:	da20      	bge.n	80080ce <_dtoa_r+0x972>
 800808c:	9b02      	ldr	r3, [sp, #8]
 800808e:	220a      	movs	r2, #10
 8008090:	3b01      	subs	r3, #1
 8008092:	9302      	str	r3, [sp, #8]
 8008094:	0038      	movs	r0, r7
 8008096:	2300      	movs	r3, #0
 8008098:	9905      	ldr	r1, [sp, #20]
 800809a:	f000 fa03 	bl	80084a4 <__multadd>
 800809e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80080a0:	9005      	str	r0, [sp, #20]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d100      	bne.n	80080a8 <_dtoa_r+0x94c>
 80080a6:	e166      	b.n	8008376 <_dtoa_r+0xc1a>
 80080a8:	2300      	movs	r3, #0
 80080aa:	0029      	movs	r1, r5
 80080ac:	220a      	movs	r2, #10
 80080ae:	0038      	movs	r0, r7
 80080b0:	f000 f9f8 	bl	80084a4 <__multadd>
 80080b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80080b6:	0005      	movs	r5, r0
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	dc47      	bgt.n	800814c <_dtoa_r+0x9f0>
 80080bc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80080be:	2b02      	cmp	r3, #2
 80080c0:	dc0d      	bgt.n	80080de <_dtoa_r+0x982>
 80080c2:	e043      	b.n	800814c <_dtoa_r+0x9f0>
 80080c4:	2a04      	cmp	r2, #4
 80080c6:	d0c6      	beq.n	8008056 <_dtoa_r+0x8fa>
 80080c8:	0013      	movs	r3, r2
 80080ca:	331c      	adds	r3, #28
 80080cc:	e7bc      	b.n	8008048 <_dtoa_r+0x8ec>
 80080ce:	9b07      	ldr	r3, [sp, #28]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	dc35      	bgt.n	8008140 <_dtoa_r+0x9e4>
 80080d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80080d6:	2b02      	cmp	r3, #2
 80080d8:	dd32      	ble.n	8008140 <_dtoa_r+0x9e4>
 80080da:	9b07      	ldr	r3, [sp, #28]
 80080dc:	930c      	str	r3, [sp, #48]	; 0x30
 80080de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d10c      	bne.n	80080fe <_dtoa_r+0x9a2>
 80080e4:	0031      	movs	r1, r6
 80080e6:	2205      	movs	r2, #5
 80080e8:	0038      	movs	r0, r7
 80080ea:	f000 f9db 	bl	80084a4 <__multadd>
 80080ee:	0006      	movs	r6, r0
 80080f0:	0001      	movs	r1, r0
 80080f2:	9805      	ldr	r0, [sp, #20]
 80080f4:	f000 fbf2 	bl	80088dc <__mcmp>
 80080f8:	2800      	cmp	r0, #0
 80080fa:	dd00      	ble.n	80080fe <_dtoa_r+0x9a2>
 80080fc:	e5a5      	b.n	8007c4a <_dtoa_r+0x4ee>
 80080fe:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008100:	43db      	mvns	r3, r3
 8008102:	9302      	str	r3, [sp, #8]
 8008104:	9b06      	ldr	r3, [sp, #24]
 8008106:	9308      	str	r3, [sp, #32]
 8008108:	2400      	movs	r4, #0
 800810a:	0031      	movs	r1, r6
 800810c:	0038      	movs	r0, r7
 800810e:	f000 f9a5 	bl	800845c <_Bfree>
 8008112:	2d00      	cmp	r5, #0
 8008114:	d100      	bne.n	8008118 <_dtoa_r+0x9bc>
 8008116:	e6b7      	b.n	8007e88 <_dtoa_r+0x72c>
 8008118:	2c00      	cmp	r4, #0
 800811a:	d005      	beq.n	8008128 <_dtoa_r+0x9cc>
 800811c:	42ac      	cmp	r4, r5
 800811e:	d003      	beq.n	8008128 <_dtoa_r+0x9cc>
 8008120:	0021      	movs	r1, r4
 8008122:	0038      	movs	r0, r7
 8008124:	f000 f99a 	bl	800845c <_Bfree>
 8008128:	0029      	movs	r1, r5
 800812a:	0038      	movs	r0, r7
 800812c:	f000 f996 	bl	800845c <_Bfree>
 8008130:	e6aa      	b.n	8007e88 <_dtoa_r+0x72c>
 8008132:	2600      	movs	r6, #0
 8008134:	0035      	movs	r5, r6
 8008136:	e7e2      	b.n	80080fe <_dtoa_r+0x9a2>
 8008138:	9602      	str	r6, [sp, #8]
 800813a:	9e14      	ldr	r6, [sp, #80]	; 0x50
 800813c:	0035      	movs	r5, r6
 800813e:	e584      	b.n	8007c4a <_dtoa_r+0x4ee>
 8008140:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008142:	2b00      	cmp	r3, #0
 8008144:	d100      	bne.n	8008148 <_dtoa_r+0x9ec>
 8008146:	e0ce      	b.n	80082e6 <_dtoa_r+0xb8a>
 8008148:	9b07      	ldr	r3, [sp, #28]
 800814a:	930c      	str	r3, [sp, #48]	; 0x30
 800814c:	2c00      	cmp	r4, #0
 800814e:	dd05      	ble.n	800815c <_dtoa_r+0xa00>
 8008150:	0029      	movs	r1, r5
 8008152:	0022      	movs	r2, r4
 8008154:	0038      	movs	r0, r7
 8008156:	f000 fb53 	bl	8008800 <__lshift>
 800815a:	0005      	movs	r5, r0
 800815c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800815e:	0028      	movs	r0, r5
 8008160:	2b00      	cmp	r3, #0
 8008162:	d022      	beq.n	80081aa <_dtoa_r+0xa4e>
 8008164:	0038      	movs	r0, r7
 8008166:	6869      	ldr	r1, [r5, #4]
 8008168:	f000 f934 	bl	80083d4 <_Balloc>
 800816c:	1e04      	subs	r4, r0, #0
 800816e:	d10f      	bne.n	8008190 <_dtoa_r+0xa34>
 8008170:	0002      	movs	r2, r0
 8008172:	4b05      	ldr	r3, [pc, #20]	; (8008188 <_dtoa_r+0xa2c>)
 8008174:	4905      	ldr	r1, [pc, #20]	; (800818c <_dtoa_r+0xa30>)
 8008176:	f7ff fb06 	bl	8007786 <_dtoa_r+0x2a>
 800817a:	46c0      	nop			; (mov r8, r8)
 800817c:	40240000 	.word	0x40240000
 8008180:	00000433 	.word	0x00000433
 8008184:	7ff00000 	.word	0x7ff00000
 8008188:	08009f2f 	.word	0x08009f2f
 800818c:	000002ea 	.word	0x000002ea
 8008190:	0029      	movs	r1, r5
 8008192:	692b      	ldr	r3, [r5, #16]
 8008194:	310c      	adds	r1, #12
 8008196:	1c9a      	adds	r2, r3, #2
 8008198:	0092      	lsls	r2, r2, #2
 800819a:	300c      	adds	r0, #12
 800819c:	f000 f911 	bl	80083c2 <memcpy>
 80081a0:	2201      	movs	r2, #1
 80081a2:	0021      	movs	r1, r4
 80081a4:	0038      	movs	r0, r7
 80081a6:	f000 fb2b 	bl	8008800 <__lshift>
 80081aa:	9b06      	ldr	r3, [sp, #24]
 80081ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80081ae:	930a      	str	r3, [sp, #40]	; 0x28
 80081b0:	3b01      	subs	r3, #1
 80081b2:	189b      	adds	r3, r3, r2
 80081b4:	2201      	movs	r2, #1
 80081b6:	002c      	movs	r4, r5
 80081b8:	0005      	movs	r5, r0
 80081ba:	9314      	str	r3, [sp, #80]	; 0x50
 80081bc:	9b08      	ldr	r3, [sp, #32]
 80081be:	4013      	ands	r3, r2
 80081c0:	930f      	str	r3, [sp, #60]	; 0x3c
 80081c2:	0031      	movs	r1, r6
 80081c4:	9805      	ldr	r0, [sp, #20]
 80081c6:	f7ff fa3d 	bl	8007644 <quorem>
 80081ca:	0003      	movs	r3, r0
 80081cc:	0021      	movs	r1, r4
 80081ce:	3330      	adds	r3, #48	; 0x30
 80081d0:	900d      	str	r0, [sp, #52]	; 0x34
 80081d2:	9805      	ldr	r0, [sp, #20]
 80081d4:	9307      	str	r3, [sp, #28]
 80081d6:	f000 fb81 	bl	80088dc <__mcmp>
 80081da:	002a      	movs	r2, r5
 80081dc:	900e      	str	r0, [sp, #56]	; 0x38
 80081de:	0031      	movs	r1, r6
 80081e0:	0038      	movs	r0, r7
 80081e2:	f000 fb97 	bl	8008914 <__mdiff>
 80081e6:	68c3      	ldr	r3, [r0, #12]
 80081e8:	9008      	str	r0, [sp, #32]
 80081ea:	9310      	str	r3, [sp, #64]	; 0x40
 80081ec:	2301      	movs	r3, #1
 80081ee:	930c      	str	r3, [sp, #48]	; 0x30
 80081f0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d104      	bne.n	8008200 <_dtoa_r+0xaa4>
 80081f6:	0001      	movs	r1, r0
 80081f8:	9805      	ldr	r0, [sp, #20]
 80081fa:	f000 fb6f 	bl	80088dc <__mcmp>
 80081fe:	900c      	str	r0, [sp, #48]	; 0x30
 8008200:	0038      	movs	r0, r7
 8008202:	9908      	ldr	r1, [sp, #32]
 8008204:	f000 f92a 	bl	800845c <_Bfree>
 8008208:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800820a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800820c:	3301      	adds	r3, #1
 800820e:	9308      	str	r3, [sp, #32]
 8008210:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008212:	4313      	orrs	r3, r2
 8008214:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008216:	4313      	orrs	r3, r2
 8008218:	d10c      	bne.n	8008234 <_dtoa_r+0xad8>
 800821a:	9b07      	ldr	r3, [sp, #28]
 800821c:	2b39      	cmp	r3, #57	; 0x39
 800821e:	d026      	beq.n	800826e <_dtoa_r+0xb12>
 8008220:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008222:	2b00      	cmp	r3, #0
 8008224:	dd02      	ble.n	800822c <_dtoa_r+0xad0>
 8008226:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008228:	3331      	adds	r3, #49	; 0x31
 800822a:	9307      	str	r3, [sp, #28]
 800822c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800822e:	9a07      	ldr	r2, [sp, #28]
 8008230:	701a      	strb	r2, [r3, #0]
 8008232:	e76a      	b.n	800810a <_dtoa_r+0x9ae>
 8008234:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008236:	2b00      	cmp	r3, #0
 8008238:	db04      	blt.n	8008244 <_dtoa_r+0xae8>
 800823a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800823c:	4313      	orrs	r3, r2
 800823e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008240:	4313      	orrs	r3, r2
 8008242:	d11f      	bne.n	8008284 <_dtoa_r+0xb28>
 8008244:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008246:	2b00      	cmp	r3, #0
 8008248:	ddf0      	ble.n	800822c <_dtoa_r+0xad0>
 800824a:	9905      	ldr	r1, [sp, #20]
 800824c:	2201      	movs	r2, #1
 800824e:	0038      	movs	r0, r7
 8008250:	f000 fad6 	bl	8008800 <__lshift>
 8008254:	0031      	movs	r1, r6
 8008256:	9005      	str	r0, [sp, #20]
 8008258:	f000 fb40 	bl	80088dc <__mcmp>
 800825c:	2800      	cmp	r0, #0
 800825e:	dc03      	bgt.n	8008268 <_dtoa_r+0xb0c>
 8008260:	d1e4      	bne.n	800822c <_dtoa_r+0xad0>
 8008262:	9b07      	ldr	r3, [sp, #28]
 8008264:	07db      	lsls	r3, r3, #31
 8008266:	d5e1      	bpl.n	800822c <_dtoa_r+0xad0>
 8008268:	9b07      	ldr	r3, [sp, #28]
 800826a:	2b39      	cmp	r3, #57	; 0x39
 800826c:	d1db      	bne.n	8008226 <_dtoa_r+0xaca>
 800826e:	2339      	movs	r3, #57	; 0x39
 8008270:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008272:	7013      	strb	r3, [r2, #0]
 8008274:	9b08      	ldr	r3, [sp, #32]
 8008276:	9308      	str	r3, [sp, #32]
 8008278:	3b01      	subs	r3, #1
 800827a:	781a      	ldrb	r2, [r3, #0]
 800827c:	2a39      	cmp	r2, #57	; 0x39
 800827e:	d068      	beq.n	8008352 <_dtoa_r+0xbf6>
 8008280:	3201      	adds	r2, #1
 8008282:	e7d5      	b.n	8008230 <_dtoa_r+0xad4>
 8008284:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008286:	2b00      	cmp	r3, #0
 8008288:	dd07      	ble.n	800829a <_dtoa_r+0xb3e>
 800828a:	9b07      	ldr	r3, [sp, #28]
 800828c:	2b39      	cmp	r3, #57	; 0x39
 800828e:	d0ee      	beq.n	800826e <_dtoa_r+0xb12>
 8008290:	9b07      	ldr	r3, [sp, #28]
 8008292:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008294:	3301      	adds	r3, #1
 8008296:	7013      	strb	r3, [r2, #0]
 8008298:	e737      	b.n	800810a <_dtoa_r+0x9ae>
 800829a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800829c:	9a07      	ldr	r2, [sp, #28]
 800829e:	701a      	strb	r2, [r3, #0]
 80082a0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80082a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80082a4:	4293      	cmp	r3, r2
 80082a6:	d03e      	beq.n	8008326 <_dtoa_r+0xbca>
 80082a8:	2300      	movs	r3, #0
 80082aa:	220a      	movs	r2, #10
 80082ac:	9905      	ldr	r1, [sp, #20]
 80082ae:	0038      	movs	r0, r7
 80082b0:	f000 f8f8 	bl	80084a4 <__multadd>
 80082b4:	2300      	movs	r3, #0
 80082b6:	9005      	str	r0, [sp, #20]
 80082b8:	220a      	movs	r2, #10
 80082ba:	0021      	movs	r1, r4
 80082bc:	0038      	movs	r0, r7
 80082be:	42ac      	cmp	r4, r5
 80082c0:	d106      	bne.n	80082d0 <_dtoa_r+0xb74>
 80082c2:	f000 f8ef 	bl	80084a4 <__multadd>
 80082c6:	0004      	movs	r4, r0
 80082c8:	0005      	movs	r5, r0
 80082ca:	9b08      	ldr	r3, [sp, #32]
 80082cc:	930a      	str	r3, [sp, #40]	; 0x28
 80082ce:	e778      	b.n	80081c2 <_dtoa_r+0xa66>
 80082d0:	f000 f8e8 	bl	80084a4 <__multadd>
 80082d4:	0029      	movs	r1, r5
 80082d6:	0004      	movs	r4, r0
 80082d8:	2300      	movs	r3, #0
 80082da:	220a      	movs	r2, #10
 80082dc:	0038      	movs	r0, r7
 80082de:	f000 f8e1 	bl	80084a4 <__multadd>
 80082e2:	0005      	movs	r5, r0
 80082e4:	e7f1      	b.n	80082ca <_dtoa_r+0xb6e>
 80082e6:	9b07      	ldr	r3, [sp, #28]
 80082e8:	930c      	str	r3, [sp, #48]	; 0x30
 80082ea:	2400      	movs	r4, #0
 80082ec:	0031      	movs	r1, r6
 80082ee:	9805      	ldr	r0, [sp, #20]
 80082f0:	f7ff f9a8 	bl	8007644 <quorem>
 80082f4:	9b06      	ldr	r3, [sp, #24]
 80082f6:	3030      	adds	r0, #48	; 0x30
 80082f8:	5518      	strb	r0, [r3, r4]
 80082fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80082fc:	3401      	adds	r4, #1
 80082fe:	9007      	str	r0, [sp, #28]
 8008300:	42a3      	cmp	r3, r4
 8008302:	dd07      	ble.n	8008314 <_dtoa_r+0xbb8>
 8008304:	2300      	movs	r3, #0
 8008306:	220a      	movs	r2, #10
 8008308:	0038      	movs	r0, r7
 800830a:	9905      	ldr	r1, [sp, #20]
 800830c:	f000 f8ca 	bl	80084a4 <__multadd>
 8008310:	9005      	str	r0, [sp, #20]
 8008312:	e7eb      	b.n	80082ec <_dtoa_r+0xb90>
 8008314:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008316:	2001      	movs	r0, #1
 8008318:	2b00      	cmp	r3, #0
 800831a:	dd00      	ble.n	800831e <_dtoa_r+0xbc2>
 800831c:	0018      	movs	r0, r3
 800831e:	2400      	movs	r4, #0
 8008320:	9b06      	ldr	r3, [sp, #24]
 8008322:	181b      	adds	r3, r3, r0
 8008324:	9308      	str	r3, [sp, #32]
 8008326:	9905      	ldr	r1, [sp, #20]
 8008328:	2201      	movs	r2, #1
 800832a:	0038      	movs	r0, r7
 800832c:	f000 fa68 	bl	8008800 <__lshift>
 8008330:	0031      	movs	r1, r6
 8008332:	9005      	str	r0, [sp, #20]
 8008334:	f000 fad2 	bl	80088dc <__mcmp>
 8008338:	2800      	cmp	r0, #0
 800833a:	dc9b      	bgt.n	8008274 <_dtoa_r+0xb18>
 800833c:	d102      	bne.n	8008344 <_dtoa_r+0xbe8>
 800833e:	9b07      	ldr	r3, [sp, #28]
 8008340:	07db      	lsls	r3, r3, #31
 8008342:	d497      	bmi.n	8008274 <_dtoa_r+0xb18>
 8008344:	9b08      	ldr	r3, [sp, #32]
 8008346:	9308      	str	r3, [sp, #32]
 8008348:	3b01      	subs	r3, #1
 800834a:	781a      	ldrb	r2, [r3, #0]
 800834c:	2a30      	cmp	r2, #48	; 0x30
 800834e:	d0fa      	beq.n	8008346 <_dtoa_r+0xbea>
 8008350:	e6db      	b.n	800810a <_dtoa_r+0x9ae>
 8008352:	9a06      	ldr	r2, [sp, #24]
 8008354:	429a      	cmp	r2, r3
 8008356:	d18e      	bne.n	8008276 <_dtoa_r+0xb1a>
 8008358:	9b02      	ldr	r3, [sp, #8]
 800835a:	3301      	adds	r3, #1
 800835c:	9302      	str	r3, [sp, #8]
 800835e:	2331      	movs	r3, #49	; 0x31
 8008360:	e799      	b.n	8008296 <_dtoa_r+0xb3a>
 8008362:	4b09      	ldr	r3, [pc, #36]	; (8008388 <_dtoa_r+0xc2c>)
 8008364:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008366:	9306      	str	r3, [sp, #24]
 8008368:	4b08      	ldr	r3, [pc, #32]	; (800838c <_dtoa_r+0xc30>)
 800836a:	2a00      	cmp	r2, #0
 800836c:	d001      	beq.n	8008372 <_dtoa_r+0xc16>
 800836e:	f7ff fa3f 	bl	80077f0 <_dtoa_r+0x94>
 8008372:	f7ff fa3f 	bl	80077f4 <_dtoa_r+0x98>
 8008376:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008378:	2b00      	cmp	r3, #0
 800837a:	dcb6      	bgt.n	80082ea <_dtoa_r+0xb8e>
 800837c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800837e:	2b02      	cmp	r3, #2
 8008380:	dd00      	ble.n	8008384 <_dtoa_r+0xc28>
 8008382:	e6ac      	b.n	80080de <_dtoa_r+0x982>
 8008384:	e7b1      	b.n	80082ea <_dtoa_r+0xb8e>
 8008386:	46c0      	nop			; (mov r8, r8)
 8008388:	08009eb0 	.word	0x08009eb0
 800838c:	08009eb8 	.word	0x08009eb8

08008390 <_localeconv_r>:
 8008390:	4800      	ldr	r0, [pc, #0]	; (8008394 <_localeconv_r+0x4>)
 8008392:	4770      	bx	lr
 8008394:	20000160 	.word	0x20000160

08008398 <malloc>:
 8008398:	b510      	push	{r4, lr}
 800839a:	4b03      	ldr	r3, [pc, #12]	; (80083a8 <malloc+0x10>)
 800839c:	0001      	movs	r1, r0
 800839e:	6818      	ldr	r0, [r3, #0]
 80083a0:	f000 fc4c 	bl	8008c3c <_malloc_r>
 80083a4:	bd10      	pop	{r4, pc}
 80083a6:	46c0      	nop			; (mov r8, r8)
 80083a8:	2000000c 	.word	0x2000000c

080083ac <memchr>:
 80083ac:	b2c9      	uxtb	r1, r1
 80083ae:	1882      	adds	r2, r0, r2
 80083b0:	4290      	cmp	r0, r2
 80083b2:	d101      	bne.n	80083b8 <memchr+0xc>
 80083b4:	2000      	movs	r0, #0
 80083b6:	4770      	bx	lr
 80083b8:	7803      	ldrb	r3, [r0, #0]
 80083ba:	428b      	cmp	r3, r1
 80083bc:	d0fb      	beq.n	80083b6 <memchr+0xa>
 80083be:	3001      	adds	r0, #1
 80083c0:	e7f6      	b.n	80083b0 <memchr+0x4>

080083c2 <memcpy>:
 80083c2:	2300      	movs	r3, #0
 80083c4:	b510      	push	{r4, lr}
 80083c6:	429a      	cmp	r2, r3
 80083c8:	d100      	bne.n	80083cc <memcpy+0xa>
 80083ca:	bd10      	pop	{r4, pc}
 80083cc:	5ccc      	ldrb	r4, [r1, r3]
 80083ce:	54c4      	strb	r4, [r0, r3]
 80083d0:	3301      	adds	r3, #1
 80083d2:	e7f8      	b.n	80083c6 <memcpy+0x4>

080083d4 <_Balloc>:
 80083d4:	b570      	push	{r4, r5, r6, lr}
 80083d6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80083d8:	0006      	movs	r6, r0
 80083da:	000c      	movs	r4, r1
 80083dc:	2d00      	cmp	r5, #0
 80083de:	d10e      	bne.n	80083fe <_Balloc+0x2a>
 80083e0:	2010      	movs	r0, #16
 80083e2:	f7ff ffd9 	bl	8008398 <malloc>
 80083e6:	1e02      	subs	r2, r0, #0
 80083e8:	6270      	str	r0, [r6, #36]	; 0x24
 80083ea:	d104      	bne.n	80083f6 <_Balloc+0x22>
 80083ec:	2166      	movs	r1, #102	; 0x66
 80083ee:	4b19      	ldr	r3, [pc, #100]	; (8008454 <_Balloc+0x80>)
 80083f0:	4819      	ldr	r0, [pc, #100]	; (8008458 <_Balloc+0x84>)
 80083f2:	f000 fe0d 	bl	8009010 <__assert_func>
 80083f6:	6045      	str	r5, [r0, #4]
 80083f8:	6085      	str	r5, [r0, #8]
 80083fa:	6005      	str	r5, [r0, #0]
 80083fc:	60c5      	str	r5, [r0, #12]
 80083fe:	6a75      	ldr	r5, [r6, #36]	; 0x24
 8008400:	68eb      	ldr	r3, [r5, #12]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d013      	beq.n	800842e <_Balloc+0x5a>
 8008406:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008408:	00a2      	lsls	r2, r4, #2
 800840a:	68db      	ldr	r3, [r3, #12]
 800840c:	189b      	adds	r3, r3, r2
 800840e:	6818      	ldr	r0, [r3, #0]
 8008410:	2800      	cmp	r0, #0
 8008412:	d118      	bne.n	8008446 <_Balloc+0x72>
 8008414:	2101      	movs	r1, #1
 8008416:	000d      	movs	r5, r1
 8008418:	40a5      	lsls	r5, r4
 800841a:	1d6a      	adds	r2, r5, #5
 800841c:	0030      	movs	r0, r6
 800841e:	0092      	lsls	r2, r2, #2
 8008420:	f000 fb74 	bl	8008b0c <_calloc_r>
 8008424:	2800      	cmp	r0, #0
 8008426:	d00c      	beq.n	8008442 <_Balloc+0x6e>
 8008428:	6044      	str	r4, [r0, #4]
 800842a:	6085      	str	r5, [r0, #8]
 800842c:	e00d      	b.n	800844a <_Balloc+0x76>
 800842e:	2221      	movs	r2, #33	; 0x21
 8008430:	2104      	movs	r1, #4
 8008432:	0030      	movs	r0, r6
 8008434:	f000 fb6a 	bl	8008b0c <_calloc_r>
 8008438:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800843a:	60e8      	str	r0, [r5, #12]
 800843c:	68db      	ldr	r3, [r3, #12]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d1e1      	bne.n	8008406 <_Balloc+0x32>
 8008442:	2000      	movs	r0, #0
 8008444:	bd70      	pop	{r4, r5, r6, pc}
 8008446:	6802      	ldr	r2, [r0, #0]
 8008448:	601a      	str	r2, [r3, #0]
 800844a:	2300      	movs	r3, #0
 800844c:	6103      	str	r3, [r0, #16]
 800844e:	60c3      	str	r3, [r0, #12]
 8008450:	e7f8      	b.n	8008444 <_Balloc+0x70>
 8008452:	46c0      	nop			; (mov r8, r8)
 8008454:	08009ebd 	.word	0x08009ebd
 8008458:	08009f40 	.word	0x08009f40

0800845c <_Bfree>:
 800845c:	b570      	push	{r4, r5, r6, lr}
 800845e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008460:	0005      	movs	r5, r0
 8008462:	000c      	movs	r4, r1
 8008464:	2e00      	cmp	r6, #0
 8008466:	d10e      	bne.n	8008486 <_Bfree+0x2a>
 8008468:	2010      	movs	r0, #16
 800846a:	f7ff ff95 	bl	8008398 <malloc>
 800846e:	1e02      	subs	r2, r0, #0
 8008470:	6268      	str	r0, [r5, #36]	; 0x24
 8008472:	d104      	bne.n	800847e <_Bfree+0x22>
 8008474:	218a      	movs	r1, #138	; 0x8a
 8008476:	4b09      	ldr	r3, [pc, #36]	; (800849c <_Bfree+0x40>)
 8008478:	4809      	ldr	r0, [pc, #36]	; (80084a0 <_Bfree+0x44>)
 800847a:	f000 fdc9 	bl	8009010 <__assert_func>
 800847e:	6046      	str	r6, [r0, #4]
 8008480:	6086      	str	r6, [r0, #8]
 8008482:	6006      	str	r6, [r0, #0]
 8008484:	60c6      	str	r6, [r0, #12]
 8008486:	2c00      	cmp	r4, #0
 8008488:	d007      	beq.n	800849a <_Bfree+0x3e>
 800848a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800848c:	6862      	ldr	r2, [r4, #4]
 800848e:	68db      	ldr	r3, [r3, #12]
 8008490:	0092      	lsls	r2, r2, #2
 8008492:	189b      	adds	r3, r3, r2
 8008494:	681a      	ldr	r2, [r3, #0]
 8008496:	6022      	str	r2, [r4, #0]
 8008498:	601c      	str	r4, [r3, #0]
 800849a:	bd70      	pop	{r4, r5, r6, pc}
 800849c:	08009ebd 	.word	0x08009ebd
 80084a0:	08009f40 	.word	0x08009f40

080084a4 <__multadd>:
 80084a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80084a6:	000e      	movs	r6, r1
 80084a8:	9001      	str	r0, [sp, #4]
 80084aa:	000c      	movs	r4, r1
 80084ac:	001d      	movs	r5, r3
 80084ae:	2000      	movs	r0, #0
 80084b0:	690f      	ldr	r7, [r1, #16]
 80084b2:	3614      	adds	r6, #20
 80084b4:	6833      	ldr	r3, [r6, #0]
 80084b6:	3001      	adds	r0, #1
 80084b8:	b299      	uxth	r1, r3
 80084ba:	4351      	muls	r1, r2
 80084bc:	0c1b      	lsrs	r3, r3, #16
 80084be:	4353      	muls	r3, r2
 80084c0:	1949      	adds	r1, r1, r5
 80084c2:	0c0d      	lsrs	r5, r1, #16
 80084c4:	195b      	adds	r3, r3, r5
 80084c6:	0c1d      	lsrs	r5, r3, #16
 80084c8:	b289      	uxth	r1, r1
 80084ca:	041b      	lsls	r3, r3, #16
 80084cc:	185b      	adds	r3, r3, r1
 80084ce:	c608      	stmia	r6!, {r3}
 80084d0:	4287      	cmp	r7, r0
 80084d2:	dcef      	bgt.n	80084b4 <__multadd+0x10>
 80084d4:	2d00      	cmp	r5, #0
 80084d6:	d022      	beq.n	800851e <__multadd+0x7a>
 80084d8:	68a3      	ldr	r3, [r4, #8]
 80084da:	42bb      	cmp	r3, r7
 80084dc:	dc19      	bgt.n	8008512 <__multadd+0x6e>
 80084de:	6863      	ldr	r3, [r4, #4]
 80084e0:	9801      	ldr	r0, [sp, #4]
 80084e2:	1c59      	adds	r1, r3, #1
 80084e4:	f7ff ff76 	bl	80083d4 <_Balloc>
 80084e8:	1e06      	subs	r6, r0, #0
 80084ea:	d105      	bne.n	80084f8 <__multadd+0x54>
 80084ec:	0002      	movs	r2, r0
 80084ee:	21b5      	movs	r1, #181	; 0xb5
 80084f0:	4b0c      	ldr	r3, [pc, #48]	; (8008524 <__multadd+0x80>)
 80084f2:	480d      	ldr	r0, [pc, #52]	; (8008528 <__multadd+0x84>)
 80084f4:	f000 fd8c 	bl	8009010 <__assert_func>
 80084f8:	0021      	movs	r1, r4
 80084fa:	6923      	ldr	r3, [r4, #16]
 80084fc:	310c      	adds	r1, #12
 80084fe:	1c9a      	adds	r2, r3, #2
 8008500:	0092      	lsls	r2, r2, #2
 8008502:	300c      	adds	r0, #12
 8008504:	f7ff ff5d 	bl	80083c2 <memcpy>
 8008508:	0021      	movs	r1, r4
 800850a:	9801      	ldr	r0, [sp, #4]
 800850c:	f7ff ffa6 	bl	800845c <_Bfree>
 8008510:	0034      	movs	r4, r6
 8008512:	1d3b      	adds	r3, r7, #4
 8008514:	009b      	lsls	r3, r3, #2
 8008516:	18e3      	adds	r3, r4, r3
 8008518:	605d      	str	r5, [r3, #4]
 800851a:	1c7b      	adds	r3, r7, #1
 800851c:	6123      	str	r3, [r4, #16]
 800851e:	0020      	movs	r0, r4
 8008520:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008522:	46c0      	nop			; (mov r8, r8)
 8008524:	08009f2f 	.word	0x08009f2f
 8008528:	08009f40 	.word	0x08009f40

0800852c <__hi0bits>:
 800852c:	0003      	movs	r3, r0
 800852e:	0c02      	lsrs	r2, r0, #16
 8008530:	2000      	movs	r0, #0
 8008532:	4282      	cmp	r2, r0
 8008534:	d101      	bne.n	800853a <__hi0bits+0xe>
 8008536:	041b      	lsls	r3, r3, #16
 8008538:	3010      	adds	r0, #16
 800853a:	0e1a      	lsrs	r2, r3, #24
 800853c:	d101      	bne.n	8008542 <__hi0bits+0x16>
 800853e:	3008      	adds	r0, #8
 8008540:	021b      	lsls	r3, r3, #8
 8008542:	0f1a      	lsrs	r2, r3, #28
 8008544:	d101      	bne.n	800854a <__hi0bits+0x1e>
 8008546:	3004      	adds	r0, #4
 8008548:	011b      	lsls	r3, r3, #4
 800854a:	0f9a      	lsrs	r2, r3, #30
 800854c:	d101      	bne.n	8008552 <__hi0bits+0x26>
 800854e:	3002      	adds	r0, #2
 8008550:	009b      	lsls	r3, r3, #2
 8008552:	2b00      	cmp	r3, #0
 8008554:	db03      	blt.n	800855e <__hi0bits+0x32>
 8008556:	3001      	adds	r0, #1
 8008558:	005b      	lsls	r3, r3, #1
 800855a:	d400      	bmi.n	800855e <__hi0bits+0x32>
 800855c:	2020      	movs	r0, #32
 800855e:	4770      	bx	lr

08008560 <__lo0bits>:
 8008560:	6803      	ldr	r3, [r0, #0]
 8008562:	0002      	movs	r2, r0
 8008564:	2107      	movs	r1, #7
 8008566:	0018      	movs	r0, r3
 8008568:	4008      	ands	r0, r1
 800856a:	420b      	tst	r3, r1
 800856c:	d00d      	beq.n	800858a <__lo0bits+0x2a>
 800856e:	3906      	subs	r1, #6
 8008570:	2000      	movs	r0, #0
 8008572:	420b      	tst	r3, r1
 8008574:	d105      	bne.n	8008582 <__lo0bits+0x22>
 8008576:	3002      	adds	r0, #2
 8008578:	4203      	tst	r3, r0
 800857a:	d003      	beq.n	8008584 <__lo0bits+0x24>
 800857c:	40cb      	lsrs	r3, r1
 800857e:	0008      	movs	r0, r1
 8008580:	6013      	str	r3, [r2, #0]
 8008582:	4770      	bx	lr
 8008584:	089b      	lsrs	r3, r3, #2
 8008586:	6013      	str	r3, [r2, #0]
 8008588:	e7fb      	b.n	8008582 <__lo0bits+0x22>
 800858a:	b299      	uxth	r1, r3
 800858c:	2900      	cmp	r1, #0
 800858e:	d101      	bne.n	8008594 <__lo0bits+0x34>
 8008590:	2010      	movs	r0, #16
 8008592:	0c1b      	lsrs	r3, r3, #16
 8008594:	b2d9      	uxtb	r1, r3
 8008596:	2900      	cmp	r1, #0
 8008598:	d101      	bne.n	800859e <__lo0bits+0x3e>
 800859a:	3008      	adds	r0, #8
 800859c:	0a1b      	lsrs	r3, r3, #8
 800859e:	0719      	lsls	r1, r3, #28
 80085a0:	d101      	bne.n	80085a6 <__lo0bits+0x46>
 80085a2:	3004      	adds	r0, #4
 80085a4:	091b      	lsrs	r3, r3, #4
 80085a6:	0799      	lsls	r1, r3, #30
 80085a8:	d101      	bne.n	80085ae <__lo0bits+0x4e>
 80085aa:	3002      	adds	r0, #2
 80085ac:	089b      	lsrs	r3, r3, #2
 80085ae:	07d9      	lsls	r1, r3, #31
 80085b0:	d4e9      	bmi.n	8008586 <__lo0bits+0x26>
 80085b2:	3001      	adds	r0, #1
 80085b4:	085b      	lsrs	r3, r3, #1
 80085b6:	d1e6      	bne.n	8008586 <__lo0bits+0x26>
 80085b8:	2020      	movs	r0, #32
 80085ba:	e7e2      	b.n	8008582 <__lo0bits+0x22>

080085bc <__i2b>:
 80085bc:	b510      	push	{r4, lr}
 80085be:	000c      	movs	r4, r1
 80085c0:	2101      	movs	r1, #1
 80085c2:	f7ff ff07 	bl	80083d4 <_Balloc>
 80085c6:	2800      	cmp	r0, #0
 80085c8:	d106      	bne.n	80085d8 <__i2b+0x1c>
 80085ca:	21a0      	movs	r1, #160	; 0xa0
 80085cc:	0002      	movs	r2, r0
 80085ce:	4b04      	ldr	r3, [pc, #16]	; (80085e0 <__i2b+0x24>)
 80085d0:	4804      	ldr	r0, [pc, #16]	; (80085e4 <__i2b+0x28>)
 80085d2:	0049      	lsls	r1, r1, #1
 80085d4:	f000 fd1c 	bl	8009010 <__assert_func>
 80085d8:	2301      	movs	r3, #1
 80085da:	6144      	str	r4, [r0, #20]
 80085dc:	6103      	str	r3, [r0, #16]
 80085de:	bd10      	pop	{r4, pc}
 80085e0:	08009f2f 	.word	0x08009f2f
 80085e4:	08009f40 	.word	0x08009f40

080085e8 <__multiply>:
 80085e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80085ea:	690b      	ldr	r3, [r1, #16]
 80085ec:	0014      	movs	r4, r2
 80085ee:	6912      	ldr	r2, [r2, #16]
 80085f0:	000d      	movs	r5, r1
 80085f2:	b089      	sub	sp, #36	; 0x24
 80085f4:	4293      	cmp	r3, r2
 80085f6:	da01      	bge.n	80085fc <__multiply+0x14>
 80085f8:	0025      	movs	r5, r4
 80085fa:	000c      	movs	r4, r1
 80085fc:	692f      	ldr	r7, [r5, #16]
 80085fe:	6926      	ldr	r6, [r4, #16]
 8008600:	6869      	ldr	r1, [r5, #4]
 8008602:	19bb      	adds	r3, r7, r6
 8008604:	9302      	str	r3, [sp, #8]
 8008606:	68ab      	ldr	r3, [r5, #8]
 8008608:	19ba      	adds	r2, r7, r6
 800860a:	4293      	cmp	r3, r2
 800860c:	da00      	bge.n	8008610 <__multiply+0x28>
 800860e:	3101      	adds	r1, #1
 8008610:	f7ff fee0 	bl	80083d4 <_Balloc>
 8008614:	9001      	str	r0, [sp, #4]
 8008616:	2800      	cmp	r0, #0
 8008618:	d106      	bne.n	8008628 <__multiply+0x40>
 800861a:	215e      	movs	r1, #94	; 0x5e
 800861c:	0002      	movs	r2, r0
 800861e:	4b48      	ldr	r3, [pc, #288]	; (8008740 <__multiply+0x158>)
 8008620:	4848      	ldr	r0, [pc, #288]	; (8008744 <__multiply+0x15c>)
 8008622:	31ff      	adds	r1, #255	; 0xff
 8008624:	f000 fcf4 	bl	8009010 <__assert_func>
 8008628:	9b01      	ldr	r3, [sp, #4]
 800862a:	2200      	movs	r2, #0
 800862c:	3314      	adds	r3, #20
 800862e:	469c      	mov	ip, r3
 8008630:	19bb      	adds	r3, r7, r6
 8008632:	009b      	lsls	r3, r3, #2
 8008634:	4463      	add	r3, ip
 8008636:	9303      	str	r3, [sp, #12]
 8008638:	4663      	mov	r3, ip
 800863a:	9903      	ldr	r1, [sp, #12]
 800863c:	428b      	cmp	r3, r1
 800863e:	d32c      	bcc.n	800869a <__multiply+0xb2>
 8008640:	002b      	movs	r3, r5
 8008642:	0022      	movs	r2, r4
 8008644:	3314      	adds	r3, #20
 8008646:	00bf      	lsls	r7, r7, #2
 8008648:	3214      	adds	r2, #20
 800864a:	9306      	str	r3, [sp, #24]
 800864c:	00b6      	lsls	r6, r6, #2
 800864e:	19db      	adds	r3, r3, r7
 8008650:	9304      	str	r3, [sp, #16]
 8008652:	1993      	adds	r3, r2, r6
 8008654:	9307      	str	r3, [sp, #28]
 8008656:	2304      	movs	r3, #4
 8008658:	9305      	str	r3, [sp, #20]
 800865a:	002b      	movs	r3, r5
 800865c:	9904      	ldr	r1, [sp, #16]
 800865e:	3315      	adds	r3, #21
 8008660:	9200      	str	r2, [sp, #0]
 8008662:	4299      	cmp	r1, r3
 8008664:	d305      	bcc.n	8008672 <__multiply+0x8a>
 8008666:	1b4b      	subs	r3, r1, r5
 8008668:	3b15      	subs	r3, #21
 800866a:	089b      	lsrs	r3, r3, #2
 800866c:	3301      	adds	r3, #1
 800866e:	009b      	lsls	r3, r3, #2
 8008670:	9305      	str	r3, [sp, #20]
 8008672:	9b07      	ldr	r3, [sp, #28]
 8008674:	9a00      	ldr	r2, [sp, #0]
 8008676:	429a      	cmp	r2, r3
 8008678:	d311      	bcc.n	800869e <__multiply+0xb6>
 800867a:	9b02      	ldr	r3, [sp, #8]
 800867c:	2b00      	cmp	r3, #0
 800867e:	dd06      	ble.n	800868e <__multiply+0xa6>
 8008680:	9b03      	ldr	r3, [sp, #12]
 8008682:	3b04      	subs	r3, #4
 8008684:	9303      	str	r3, [sp, #12]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	9300      	str	r3, [sp, #0]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d053      	beq.n	8008736 <__multiply+0x14e>
 800868e:	9b01      	ldr	r3, [sp, #4]
 8008690:	9a02      	ldr	r2, [sp, #8]
 8008692:	0018      	movs	r0, r3
 8008694:	611a      	str	r2, [r3, #16]
 8008696:	b009      	add	sp, #36	; 0x24
 8008698:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800869a:	c304      	stmia	r3!, {r2}
 800869c:	e7cd      	b.n	800863a <__multiply+0x52>
 800869e:	9b00      	ldr	r3, [sp, #0]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	b298      	uxth	r0, r3
 80086a4:	2800      	cmp	r0, #0
 80086a6:	d01b      	beq.n	80086e0 <__multiply+0xf8>
 80086a8:	4667      	mov	r7, ip
 80086aa:	2400      	movs	r4, #0
 80086ac:	9e06      	ldr	r6, [sp, #24]
 80086ae:	ce02      	ldmia	r6!, {r1}
 80086b0:	683a      	ldr	r2, [r7, #0]
 80086b2:	b28b      	uxth	r3, r1
 80086b4:	4343      	muls	r3, r0
 80086b6:	b292      	uxth	r2, r2
 80086b8:	189b      	adds	r3, r3, r2
 80086ba:	191b      	adds	r3, r3, r4
 80086bc:	0c0c      	lsrs	r4, r1, #16
 80086be:	4344      	muls	r4, r0
 80086c0:	683a      	ldr	r2, [r7, #0]
 80086c2:	0c11      	lsrs	r1, r2, #16
 80086c4:	1861      	adds	r1, r4, r1
 80086c6:	0c1c      	lsrs	r4, r3, #16
 80086c8:	1909      	adds	r1, r1, r4
 80086ca:	0c0c      	lsrs	r4, r1, #16
 80086cc:	b29b      	uxth	r3, r3
 80086ce:	0409      	lsls	r1, r1, #16
 80086d0:	430b      	orrs	r3, r1
 80086d2:	c708      	stmia	r7!, {r3}
 80086d4:	9b04      	ldr	r3, [sp, #16]
 80086d6:	42b3      	cmp	r3, r6
 80086d8:	d8e9      	bhi.n	80086ae <__multiply+0xc6>
 80086da:	4663      	mov	r3, ip
 80086dc:	9a05      	ldr	r2, [sp, #20]
 80086de:	509c      	str	r4, [r3, r2]
 80086e0:	9b00      	ldr	r3, [sp, #0]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	0c1e      	lsrs	r6, r3, #16
 80086e6:	d020      	beq.n	800872a <__multiply+0x142>
 80086e8:	4663      	mov	r3, ip
 80086ea:	002c      	movs	r4, r5
 80086ec:	4660      	mov	r0, ip
 80086ee:	2700      	movs	r7, #0
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	3414      	adds	r4, #20
 80086f4:	6822      	ldr	r2, [r4, #0]
 80086f6:	b29b      	uxth	r3, r3
 80086f8:	b291      	uxth	r1, r2
 80086fa:	4371      	muls	r1, r6
 80086fc:	6802      	ldr	r2, [r0, #0]
 80086fe:	0c12      	lsrs	r2, r2, #16
 8008700:	1889      	adds	r1, r1, r2
 8008702:	19cf      	adds	r7, r1, r7
 8008704:	0439      	lsls	r1, r7, #16
 8008706:	430b      	orrs	r3, r1
 8008708:	6003      	str	r3, [r0, #0]
 800870a:	cc02      	ldmia	r4!, {r1}
 800870c:	6843      	ldr	r3, [r0, #4]
 800870e:	0c09      	lsrs	r1, r1, #16
 8008710:	4371      	muls	r1, r6
 8008712:	b29b      	uxth	r3, r3
 8008714:	0c3f      	lsrs	r7, r7, #16
 8008716:	18cb      	adds	r3, r1, r3
 8008718:	9a04      	ldr	r2, [sp, #16]
 800871a:	19db      	adds	r3, r3, r7
 800871c:	0c1f      	lsrs	r7, r3, #16
 800871e:	3004      	adds	r0, #4
 8008720:	42a2      	cmp	r2, r4
 8008722:	d8e7      	bhi.n	80086f4 <__multiply+0x10c>
 8008724:	4662      	mov	r2, ip
 8008726:	9905      	ldr	r1, [sp, #20]
 8008728:	5053      	str	r3, [r2, r1]
 800872a:	9b00      	ldr	r3, [sp, #0]
 800872c:	3304      	adds	r3, #4
 800872e:	9300      	str	r3, [sp, #0]
 8008730:	2304      	movs	r3, #4
 8008732:	449c      	add	ip, r3
 8008734:	e79d      	b.n	8008672 <__multiply+0x8a>
 8008736:	9b02      	ldr	r3, [sp, #8]
 8008738:	3b01      	subs	r3, #1
 800873a:	9302      	str	r3, [sp, #8]
 800873c:	e79d      	b.n	800867a <__multiply+0x92>
 800873e:	46c0      	nop			; (mov r8, r8)
 8008740:	08009f2f 	.word	0x08009f2f
 8008744:	08009f40 	.word	0x08009f40

08008748 <__pow5mult>:
 8008748:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800874a:	2303      	movs	r3, #3
 800874c:	0015      	movs	r5, r2
 800874e:	0007      	movs	r7, r0
 8008750:	000e      	movs	r6, r1
 8008752:	401a      	ands	r2, r3
 8008754:	421d      	tst	r5, r3
 8008756:	d008      	beq.n	800876a <__pow5mult+0x22>
 8008758:	4925      	ldr	r1, [pc, #148]	; (80087f0 <__pow5mult+0xa8>)
 800875a:	3a01      	subs	r2, #1
 800875c:	0092      	lsls	r2, r2, #2
 800875e:	5852      	ldr	r2, [r2, r1]
 8008760:	2300      	movs	r3, #0
 8008762:	0031      	movs	r1, r6
 8008764:	f7ff fe9e 	bl	80084a4 <__multadd>
 8008768:	0006      	movs	r6, r0
 800876a:	10ad      	asrs	r5, r5, #2
 800876c:	d03d      	beq.n	80087ea <__pow5mult+0xa2>
 800876e:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8008770:	2c00      	cmp	r4, #0
 8008772:	d10f      	bne.n	8008794 <__pow5mult+0x4c>
 8008774:	2010      	movs	r0, #16
 8008776:	f7ff fe0f 	bl	8008398 <malloc>
 800877a:	1e02      	subs	r2, r0, #0
 800877c:	6278      	str	r0, [r7, #36]	; 0x24
 800877e:	d105      	bne.n	800878c <__pow5mult+0x44>
 8008780:	21d7      	movs	r1, #215	; 0xd7
 8008782:	4b1c      	ldr	r3, [pc, #112]	; (80087f4 <__pow5mult+0xac>)
 8008784:	481c      	ldr	r0, [pc, #112]	; (80087f8 <__pow5mult+0xb0>)
 8008786:	0049      	lsls	r1, r1, #1
 8008788:	f000 fc42 	bl	8009010 <__assert_func>
 800878c:	6044      	str	r4, [r0, #4]
 800878e:	6084      	str	r4, [r0, #8]
 8008790:	6004      	str	r4, [r0, #0]
 8008792:	60c4      	str	r4, [r0, #12]
 8008794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008796:	689c      	ldr	r4, [r3, #8]
 8008798:	9301      	str	r3, [sp, #4]
 800879a:	2c00      	cmp	r4, #0
 800879c:	d108      	bne.n	80087b0 <__pow5mult+0x68>
 800879e:	0038      	movs	r0, r7
 80087a0:	4916      	ldr	r1, [pc, #88]	; (80087fc <__pow5mult+0xb4>)
 80087a2:	f7ff ff0b 	bl	80085bc <__i2b>
 80087a6:	9b01      	ldr	r3, [sp, #4]
 80087a8:	0004      	movs	r4, r0
 80087aa:	6098      	str	r0, [r3, #8]
 80087ac:	2300      	movs	r3, #0
 80087ae:	6003      	str	r3, [r0, #0]
 80087b0:	2301      	movs	r3, #1
 80087b2:	421d      	tst	r5, r3
 80087b4:	d00a      	beq.n	80087cc <__pow5mult+0x84>
 80087b6:	0031      	movs	r1, r6
 80087b8:	0022      	movs	r2, r4
 80087ba:	0038      	movs	r0, r7
 80087bc:	f7ff ff14 	bl	80085e8 <__multiply>
 80087c0:	0031      	movs	r1, r6
 80087c2:	9001      	str	r0, [sp, #4]
 80087c4:	0038      	movs	r0, r7
 80087c6:	f7ff fe49 	bl	800845c <_Bfree>
 80087ca:	9e01      	ldr	r6, [sp, #4]
 80087cc:	106d      	asrs	r5, r5, #1
 80087ce:	d00c      	beq.n	80087ea <__pow5mult+0xa2>
 80087d0:	6820      	ldr	r0, [r4, #0]
 80087d2:	2800      	cmp	r0, #0
 80087d4:	d107      	bne.n	80087e6 <__pow5mult+0x9e>
 80087d6:	0022      	movs	r2, r4
 80087d8:	0021      	movs	r1, r4
 80087da:	0038      	movs	r0, r7
 80087dc:	f7ff ff04 	bl	80085e8 <__multiply>
 80087e0:	2300      	movs	r3, #0
 80087e2:	6020      	str	r0, [r4, #0]
 80087e4:	6003      	str	r3, [r0, #0]
 80087e6:	0004      	movs	r4, r0
 80087e8:	e7e2      	b.n	80087b0 <__pow5mult+0x68>
 80087ea:	0030      	movs	r0, r6
 80087ec:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80087ee:	46c0      	nop			; (mov r8, r8)
 80087f0:	0800a090 	.word	0x0800a090
 80087f4:	08009ebd 	.word	0x08009ebd
 80087f8:	08009f40 	.word	0x08009f40
 80087fc:	00000271 	.word	0x00000271

08008800 <__lshift>:
 8008800:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008802:	000c      	movs	r4, r1
 8008804:	0017      	movs	r7, r2
 8008806:	6923      	ldr	r3, [r4, #16]
 8008808:	1155      	asrs	r5, r2, #5
 800880a:	b087      	sub	sp, #28
 800880c:	18eb      	adds	r3, r5, r3
 800880e:	9302      	str	r3, [sp, #8]
 8008810:	3301      	adds	r3, #1
 8008812:	9301      	str	r3, [sp, #4]
 8008814:	6849      	ldr	r1, [r1, #4]
 8008816:	68a3      	ldr	r3, [r4, #8]
 8008818:	9004      	str	r0, [sp, #16]
 800881a:	9a01      	ldr	r2, [sp, #4]
 800881c:	4293      	cmp	r3, r2
 800881e:	db10      	blt.n	8008842 <__lshift+0x42>
 8008820:	9804      	ldr	r0, [sp, #16]
 8008822:	f7ff fdd7 	bl	80083d4 <_Balloc>
 8008826:	2300      	movs	r3, #0
 8008828:	0002      	movs	r2, r0
 800882a:	0006      	movs	r6, r0
 800882c:	0019      	movs	r1, r3
 800882e:	3214      	adds	r2, #20
 8008830:	4298      	cmp	r0, r3
 8008832:	d10c      	bne.n	800884e <__lshift+0x4e>
 8008834:	21da      	movs	r1, #218	; 0xda
 8008836:	0002      	movs	r2, r0
 8008838:	4b26      	ldr	r3, [pc, #152]	; (80088d4 <__lshift+0xd4>)
 800883a:	4827      	ldr	r0, [pc, #156]	; (80088d8 <__lshift+0xd8>)
 800883c:	31ff      	adds	r1, #255	; 0xff
 800883e:	f000 fbe7 	bl	8009010 <__assert_func>
 8008842:	3101      	adds	r1, #1
 8008844:	005b      	lsls	r3, r3, #1
 8008846:	e7e8      	b.n	800881a <__lshift+0x1a>
 8008848:	0098      	lsls	r0, r3, #2
 800884a:	5011      	str	r1, [r2, r0]
 800884c:	3301      	adds	r3, #1
 800884e:	42ab      	cmp	r3, r5
 8008850:	dbfa      	blt.n	8008848 <__lshift+0x48>
 8008852:	43eb      	mvns	r3, r5
 8008854:	17db      	asrs	r3, r3, #31
 8008856:	401d      	ands	r5, r3
 8008858:	211f      	movs	r1, #31
 800885a:	0023      	movs	r3, r4
 800885c:	0038      	movs	r0, r7
 800885e:	00ad      	lsls	r5, r5, #2
 8008860:	1955      	adds	r5, r2, r5
 8008862:	6922      	ldr	r2, [r4, #16]
 8008864:	3314      	adds	r3, #20
 8008866:	0092      	lsls	r2, r2, #2
 8008868:	4008      	ands	r0, r1
 800886a:	4684      	mov	ip, r0
 800886c:	189a      	adds	r2, r3, r2
 800886e:	420f      	tst	r7, r1
 8008870:	d02a      	beq.n	80088c8 <__lshift+0xc8>
 8008872:	3101      	adds	r1, #1
 8008874:	1a09      	subs	r1, r1, r0
 8008876:	9105      	str	r1, [sp, #20]
 8008878:	2100      	movs	r1, #0
 800887a:	9503      	str	r5, [sp, #12]
 800887c:	4667      	mov	r7, ip
 800887e:	6818      	ldr	r0, [r3, #0]
 8008880:	40b8      	lsls	r0, r7
 8008882:	4301      	orrs	r1, r0
 8008884:	9803      	ldr	r0, [sp, #12]
 8008886:	c002      	stmia	r0!, {r1}
 8008888:	cb02      	ldmia	r3!, {r1}
 800888a:	9003      	str	r0, [sp, #12]
 800888c:	9805      	ldr	r0, [sp, #20]
 800888e:	40c1      	lsrs	r1, r0
 8008890:	429a      	cmp	r2, r3
 8008892:	d8f3      	bhi.n	800887c <__lshift+0x7c>
 8008894:	0020      	movs	r0, r4
 8008896:	3015      	adds	r0, #21
 8008898:	2304      	movs	r3, #4
 800889a:	4282      	cmp	r2, r0
 800889c:	d304      	bcc.n	80088a8 <__lshift+0xa8>
 800889e:	1b13      	subs	r3, r2, r4
 80088a0:	3b15      	subs	r3, #21
 80088a2:	089b      	lsrs	r3, r3, #2
 80088a4:	3301      	adds	r3, #1
 80088a6:	009b      	lsls	r3, r3, #2
 80088a8:	50e9      	str	r1, [r5, r3]
 80088aa:	2900      	cmp	r1, #0
 80088ac:	d002      	beq.n	80088b4 <__lshift+0xb4>
 80088ae:	9b02      	ldr	r3, [sp, #8]
 80088b0:	3302      	adds	r3, #2
 80088b2:	9301      	str	r3, [sp, #4]
 80088b4:	9b01      	ldr	r3, [sp, #4]
 80088b6:	9804      	ldr	r0, [sp, #16]
 80088b8:	3b01      	subs	r3, #1
 80088ba:	0021      	movs	r1, r4
 80088bc:	6133      	str	r3, [r6, #16]
 80088be:	f7ff fdcd 	bl	800845c <_Bfree>
 80088c2:	0030      	movs	r0, r6
 80088c4:	b007      	add	sp, #28
 80088c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80088c8:	cb02      	ldmia	r3!, {r1}
 80088ca:	c502      	stmia	r5!, {r1}
 80088cc:	429a      	cmp	r2, r3
 80088ce:	d8fb      	bhi.n	80088c8 <__lshift+0xc8>
 80088d0:	e7f0      	b.n	80088b4 <__lshift+0xb4>
 80088d2:	46c0      	nop			; (mov r8, r8)
 80088d4:	08009f2f 	.word	0x08009f2f
 80088d8:	08009f40 	.word	0x08009f40

080088dc <__mcmp>:
 80088dc:	6902      	ldr	r2, [r0, #16]
 80088de:	690b      	ldr	r3, [r1, #16]
 80088e0:	b530      	push	{r4, r5, lr}
 80088e2:	0004      	movs	r4, r0
 80088e4:	1ad0      	subs	r0, r2, r3
 80088e6:	429a      	cmp	r2, r3
 80088e8:	d10d      	bne.n	8008906 <__mcmp+0x2a>
 80088ea:	009b      	lsls	r3, r3, #2
 80088ec:	3414      	adds	r4, #20
 80088ee:	3114      	adds	r1, #20
 80088f0:	18e2      	adds	r2, r4, r3
 80088f2:	18c9      	adds	r1, r1, r3
 80088f4:	3a04      	subs	r2, #4
 80088f6:	3904      	subs	r1, #4
 80088f8:	6815      	ldr	r5, [r2, #0]
 80088fa:	680b      	ldr	r3, [r1, #0]
 80088fc:	429d      	cmp	r5, r3
 80088fe:	d003      	beq.n	8008908 <__mcmp+0x2c>
 8008900:	2001      	movs	r0, #1
 8008902:	429d      	cmp	r5, r3
 8008904:	d303      	bcc.n	800890e <__mcmp+0x32>
 8008906:	bd30      	pop	{r4, r5, pc}
 8008908:	4294      	cmp	r4, r2
 800890a:	d3f3      	bcc.n	80088f4 <__mcmp+0x18>
 800890c:	e7fb      	b.n	8008906 <__mcmp+0x2a>
 800890e:	4240      	negs	r0, r0
 8008910:	e7f9      	b.n	8008906 <__mcmp+0x2a>
	...

08008914 <__mdiff>:
 8008914:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008916:	000e      	movs	r6, r1
 8008918:	0007      	movs	r7, r0
 800891a:	0011      	movs	r1, r2
 800891c:	0030      	movs	r0, r6
 800891e:	b087      	sub	sp, #28
 8008920:	0014      	movs	r4, r2
 8008922:	f7ff ffdb 	bl	80088dc <__mcmp>
 8008926:	1e05      	subs	r5, r0, #0
 8008928:	d110      	bne.n	800894c <__mdiff+0x38>
 800892a:	0001      	movs	r1, r0
 800892c:	0038      	movs	r0, r7
 800892e:	f7ff fd51 	bl	80083d4 <_Balloc>
 8008932:	1e02      	subs	r2, r0, #0
 8008934:	d104      	bne.n	8008940 <__mdiff+0x2c>
 8008936:	4b40      	ldr	r3, [pc, #256]	; (8008a38 <__mdiff+0x124>)
 8008938:	4940      	ldr	r1, [pc, #256]	; (8008a3c <__mdiff+0x128>)
 800893a:	4841      	ldr	r0, [pc, #260]	; (8008a40 <__mdiff+0x12c>)
 800893c:	f000 fb68 	bl	8009010 <__assert_func>
 8008940:	2301      	movs	r3, #1
 8008942:	6145      	str	r5, [r0, #20]
 8008944:	6103      	str	r3, [r0, #16]
 8008946:	0010      	movs	r0, r2
 8008948:	b007      	add	sp, #28
 800894a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800894c:	2301      	movs	r3, #1
 800894e:	9301      	str	r3, [sp, #4]
 8008950:	2800      	cmp	r0, #0
 8008952:	db04      	blt.n	800895e <__mdiff+0x4a>
 8008954:	0023      	movs	r3, r4
 8008956:	0034      	movs	r4, r6
 8008958:	001e      	movs	r6, r3
 800895a:	2300      	movs	r3, #0
 800895c:	9301      	str	r3, [sp, #4]
 800895e:	0038      	movs	r0, r7
 8008960:	6861      	ldr	r1, [r4, #4]
 8008962:	f7ff fd37 	bl	80083d4 <_Balloc>
 8008966:	1e02      	subs	r2, r0, #0
 8008968:	d103      	bne.n	8008972 <__mdiff+0x5e>
 800896a:	2190      	movs	r1, #144	; 0x90
 800896c:	4b32      	ldr	r3, [pc, #200]	; (8008a38 <__mdiff+0x124>)
 800896e:	0089      	lsls	r1, r1, #2
 8008970:	e7e3      	b.n	800893a <__mdiff+0x26>
 8008972:	9b01      	ldr	r3, [sp, #4]
 8008974:	2700      	movs	r7, #0
 8008976:	60c3      	str	r3, [r0, #12]
 8008978:	6920      	ldr	r0, [r4, #16]
 800897a:	3414      	adds	r4, #20
 800897c:	9401      	str	r4, [sp, #4]
 800897e:	9b01      	ldr	r3, [sp, #4]
 8008980:	0084      	lsls	r4, r0, #2
 8008982:	191b      	adds	r3, r3, r4
 8008984:	0034      	movs	r4, r6
 8008986:	9302      	str	r3, [sp, #8]
 8008988:	6933      	ldr	r3, [r6, #16]
 800898a:	3414      	adds	r4, #20
 800898c:	0099      	lsls	r1, r3, #2
 800898e:	1863      	adds	r3, r4, r1
 8008990:	9303      	str	r3, [sp, #12]
 8008992:	0013      	movs	r3, r2
 8008994:	3314      	adds	r3, #20
 8008996:	469c      	mov	ip, r3
 8008998:	9305      	str	r3, [sp, #20]
 800899a:	9b01      	ldr	r3, [sp, #4]
 800899c:	9304      	str	r3, [sp, #16]
 800899e:	9b04      	ldr	r3, [sp, #16]
 80089a0:	cc02      	ldmia	r4!, {r1}
 80089a2:	cb20      	ldmia	r3!, {r5}
 80089a4:	9304      	str	r3, [sp, #16]
 80089a6:	b2ab      	uxth	r3, r5
 80089a8:	19df      	adds	r7, r3, r7
 80089aa:	b28b      	uxth	r3, r1
 80089ac:	1afb      	subs	r3, r7, r3
 80089ae:	0c09      	lsrs	r1, r1, #16
 80089b0:	0c2d      	lsrs	r5, r5, #16
 80089b2:	1a6d      	subs	r5, r5, r1
 80089b4:	1419      	asrs	r1, r3, #16
 80089b6:	186d      	adds	r5, r5, r1
 80089b8:	4661      	mov	r1, ip
 80089ba:	142f      	asrs	r7, r5, #16
 80089bc:	b29b      	uxth	r3, r3
 80089be:	042d      	lsls	r5, r5, #16
 80089c0:	432b      	orrs	r3, r5
 80089c2:	c108      	stmia	r1!, {r3}
 80089c4:	9b03      	ldr	r3, [sp, #12]
 80089c6:	468c      	mov	ip, r1
 80089c8:	42a3      	cmp	r3, r4
 80089ca:	d8e8      	bhi.n	800899e <__mdiff+0x8a>
 80089cc:	0031      	movs	r1, r6
 80089ce:	9c03      	ldr	r4, [sp, #12]
 80089d0:	3115      	adds	r1, #21
 80089d2:	2304      	movs	r3, #4
 80089d4:	428c      	cmp	r4, r1
 80089d6:	d304      	bcc.n	80089e2 <__mdiff+0xce>
 80089d8:	1ba3      	subs	r3, r4, r6
 80089da:	3b15      	subs	r3, #21
 80089dc:	089b      	lsrs	r3, r3, #2
 80089de:	3301      	adds	r3, #1
 80089e0:	009b      	lsls	r3, r3, #2
 80089e2:	9901      	ldr	r1, [sp, #4]
 80089e4:	18cc      	adds	r4, r1, r3
 80089e6:	9905      	ldr	r1, [sp, #20]
 80089e8:	0026      	movs	r6, r4
 80089ea:	18cb      	adds	r3, r1, r3
 80089ec:	469c      	mov	ip, r3
 80089ee:	9902      	ldr	r1, [sp, #8]
 80089f0:	428e      	cmp	r6, r1
 80089f2:	d310      	bcc.n	8008a16 <__mdiff+0x102>
 80089f4:	9e02      	ldr	r6, [sp, #8]
 80089f6:	1ee1      	subs	r1, r4, #3
 80089f8:	2500      	movs	r5, #0
 80089fa:	428e      	cmp	r6, r1
 80089fc:	d304      	bcc.n	8008a08 <__mdiff+0xf4>
 80089fe:	0031      	movs	r1, r6
 8008a00:	3103      	adds	r1, #3
 8008a02:	1b0c      	subs	r4, r1, r4
 8008a04:	08a4      	lsrs	r4, r4, #2
 8008a06:	00a5      	lsls	r5, r4, #2
 8008a08:	195b      	adds	r3, r3, r5
 8008a0a:	3b04      	subs	r3, #4
 8008a0c:	6819      	ldr	r1, [r3, #0]
 8008a0e:	2900      	cmp	r1, #0
 8008a10:	d00f      	beq.n	8008a32 <__mdiff+0x11e>
 8008a12:	6110      	str	r0, [r2, #16]
 8008a14:	e797      	b.n	8008946 <__mdiff+0x32>
 8008a16:	ce02      	ldmia	r6!, {r1}
 8008a18:	b28d      	uxth	r5, r1
 8008a1a:	19ed      	adds	r5, r5, r7
 8008a1c:	0c0f      	lsrs	r7, r1, #16
 8008a1e:	1429      	asrs	r1, r5, #16
 8008a20:	1879      	adds	r1, r7, r1
 8008a22:	140f      	asrs	r7, r1, #16
 8008a24:	b2ad      	uxth	r5, r5
 8008a26:	0409      	lsls	r1, r1, #16
 8008a28:	430d      	orrs	r5, r1
 8008a2a:	4661      	mov	r1, ip
 8008a2c:	c120      	stmia	r1!, {r5}
 8008a2e:	468c      	mov	ip, r1
 8008a30:	e7dd      	b.n	80089ee <__mdiff+0xda>
 8008a32:	3801      	subs	r0, #1
 8008a34:	e7e9      	b.n	8008a0a <__mdiff+0xf6>
 8008a36:	46c0      	nop			; (mov r8, r8)
 8008a38:	08009f2f 	.word	0x08009f2f
 8008a3c:	00000232 	.word	0x00000232
 8008a40:	08009f40 	.word	0x08009f40

08008a44 <__d2b>:
 8008a44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008a46:	2101      	movs	r1, #1
 8008a48:	0014      	movs	r4, r2
 8008a4a:	001e      	movs	r6, r3
 8008a4c:	9f08      	ldr	r7, [sp, #32]
 8008a4e:	f7ff fcc1 	bl	80083d4 <_Balloc>
 8008a52:	1e05      	subs	r5, r0, #0
 8008a54:	d105      	bne.n	8008a62 <__d2b+0x1e>
 8008a56:	0002      	movs	r2, r0
 8008a58:	4b26      	ldr	r3, [pc, #152]	; (8008af4 <__d2b+0xb0>)
 8008a5a:	4927      	ldr	r1, [pc, #156]	; (8008af8 <__d2b+0xb4>)
 8008a5c:	4827      	ldr	r0, [pc, #156]	; (8008afc <__d2b+0xb8>)
 8008a5e:	f000 fad7 	bl	8009010 <__assert_func>
 8008a62:	0333      	lsls	r3, r6, #12
 8008a64:	0076      	lsls	r6, r6, #1
 8008a66:	0b1b      	lsrs	r3, r3, #12
 8008a68:	0d76      	lsrs	r6, r6, #21
 8008a6a:	d124      	bne.n	8008ab6 <__d2b+0x72>
 8008a6c:	9301      	str	r3, [sp, #4]
 8008a6e:	2c00      	cmp	r4, #0
 8008a70:	d027      	beq.n	8008ac2 <__d2b+0x7e>
 8008a72:	4668      	mov	r0, sp
 8008a74:	9400      	str	r4, [sp, #0]
 8008a76:	f7ff fd73 	bl	8008560 <__lo0bits>
 8008a7a:	9c00      	ldr	r4, [sp, #0]
 8008a7c:	2800      	cmp	r0, #0
 8008a7e:	d01e      	beq.n	8008abe <__d2b+0x7a>
 8008a80:	9b01      	ldr	r3, [sp, #4]
 8008a82:	2120      	movs	r1, #32
 8008a84:	001a      	movs	r2, r3
 8008a86:	1a09      	subs	r1, r1, r0
 8008a88:	408a      	lsls	r2, r1
 8008a8a:	40c3      	lsrs	r3, r0
 8008a8c:	4322      	orrs	r2, r4
 8008a8e:	616a      	str	r2, [r5, #20]
 8008a90:	9301      	str	r3, [sp, #4]
 8008a92:	9c01      	ldr	r4, [sp, #4]
 8008a94:	61ac      	str	r4, [r5, #24]
 8008a96:	1e63      	subs	r3, r4, #1
 8008a98:	419c      	sbcs	r4, r3
 8008a9a:	3401      	adds	r4, #1
 8008a9c:	612c      	str	r4, [r5, #16]
 8008a9e:	2e00      	cmp	r6, #0
 8008aa0:	d018      	beq.n	8008ad4 <__d2b+0x90>
 8008aa2:	4b17      	ldr	r3, [pc, #92]	; (8008b00 <__d2b+0xbc>)
 8008aa4:	18f6      	adds	r6, r6, r3
 8008aa6:	2335      	movs	r3, #53	; 0x35
 8008aa8:	1836      	adds	r6, r6, r0
 8008aaa:	1a18      	subs	r0, r3, r0
 8008aac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008aae:	603e      	str	r6, [r7, #0]
 8008ab0:	6018      	str	r0, [r3, #0]
 8008ab2:	0028      	movs	r0, r5
 8008ab4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008ab6:	2280      	movs	r2, #128	; 0x80
 8008ab8:	0352      	lsls	r2, r2, #13
 8008aba:	4313      	orrs	r3, r2
 8008abc:	e7d6      	b.n	8008a6c <__d2b+0x28>
 8008abe:	616c      	str	r4, [r5, #20]
 8008ac0:	e7e7      	b.n	8008a92 <__d2b+0x4e>
 8008ac2:	a801      	add	r0, sp, #4
 8008ac4:	f7ff fd4c 	bl	8008560 <__lo0bits>
 8008ac8:	2401      	movs	r4, #1
 8008aca:	9b01      	ldr	r3, [sp, #4]
 8008acc:	612c      	str	r4, [r5, #16]
 8008ace:	616b      	str	r3, [r5, #20]
 8008ad0:	3020      	adds	r0, #32
 8008ad2:	e7e4      	b.n	8008a9e <__d2b+0x5a>
 8008ad4:	4b0b      	ldr	r3, [pc, #44]	; (8008b04 <__d2b+0xc0>)
 8008ad6:	18c0      	adds	r0, r0, r3
 8008ad8:	4b0b      	ldr	r3, [pc, #44]	; (8008b08 <__d2b+0xc4>)
 8008ada:	6038      	str	r0, [r7, #0]
 8008adc:	18e3      	adds	r3, r4, r3
 8008ade:	009b      	lsls	r3, r3, #2
 8008ae0:	18eb      	adds	r3, r5, r3
 8008ae2:	6958      	ldr	r0, [r3, #20]
 8008ae4:	f7ff fd22 	bl	800852c <__hi0bits>
 8008ae8:	0164      	lsls	r4, r4, #5
 8008aea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008aec:	1a24      	subs	r4, r4, r0
 8008aee:	601c      	str	r4, [r3, #0]
 8008af0:	e7df      	b.n	8008ab2 <__d2b+0x6e>
 8008af2:	46c0      	nop			; (mov r8, r8)
 8008af4:	08009f2f 	.word	0x08009f2f
 8008af8:	0000030a 	.word	0x0000030a
 8008afc:	08009f40 	.word	0x08009f40
 8008b00:	fffffbcd 	.word	0xfffffbcd
 8008b04:	fffffbce 	.word	0xfffffbce
 8008b08:	3fffffff 	.word	0x3fffffff

08008b0c <_calloc_r>:
 8008b0c:	b570      	push	{r4, r5, r6, lr}
 8008b0e:	0c13      	lsrs	r3, r2, #16
 8008b10:	0c0d      	lsrs	r5, r1, #16
 8008b12:	d11e      	bne.n	8008b52 <_calloc_r+0x46>
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d10c      	bne.n	8008b32 <_calloc_r+0x26>
 8008b18:	b289      	uxth	r1, r1
 8008b1a:	b294      	uxth	r4, r2
 8008b1c:	434c      	muls	r4, r1
 8008b1e:	0021      	movs	r1, r4
 8008b20:	f000 f88c 	bl	8008c3c <_malloc_r>
 8008b24:	1e05      	subs	r5, r0, #0
 8008b26:	d01b      	beq.n	8008b60 <_calloc_r+0x54>
 8008b28:	0022      	movs	r2, r4
 8008b2a:	2100      	movs	r1, #0
 8008b2c:	f7fe f8f4 	bl	8006d18 <memset>
 8008b30:	e016      	b.n	8008b60 <_calloc_r+0x54>
 8008b32:	1c1d      	adds	r5, r3, #0
 8008b34:	1c0b      	adds	r3, r1, #0
 8008b36:	b292      	uxth	r2, r2
 8008b38:	b289      	uxth	r1, r1
 8008b3a:	b29c      	uxth	r4, r3
 8008b3c:	4351      	muls	r1, r2
 8008b3e:	b2ab      	uxth	r3, r5
 8008b40:	4363      	muls	r3, r4
 8008b42:	0c0c      	lsrs	r4, r1, #16
 8008b44:	191c      	adds	r4, r3, r4
 8008b46:	0c22      	lsrs	r2, r4, #16
 8008b48:	d107      	bne.n	8008b5a <_calloc_r+0x4e>
 8008b4a:	0424      	lsls	r4, r4, #16
 8008b4c:	b289      	uxth	r1, r1
 8008b4e:	430c      	orrs	r4, r1
 8008b50:	e7e5      	b.n	8008b1e <_calloc_r+0x12>
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d101      	bne.n	8008b5a <_calloc_r+0x4e>
 8008b56:	1c13      	adds	r3, r2, #0
 8008b58:	e7ed      	b.n	8008b36 <_calloc_r+0x2a>
 8008b5a:	230c      	movs	r3, #12
 8008b5c:	2500      	movs	r5, #0
 8008b5e:	6003      	str	r3, [r0, #0]
 8008b60:	0028      	movs	r0, r5
 8008b62:	bd70      	pop	{r4, r5, r6, pc}

08008b64 <_free_r>:
 8008b64:	b570      	push	{r4, r5, r6, lr}
 8008b66:	0005      	movs	r5, r0
 8008b68:	2900      	cmp	r1, #0
 8008b6a:	d010      	beq.n	8008b8e <_free_r+0x2a>
 8008b6c:	1f0c      	subs	r4, r1, #4
 8008b6e:	6823      	ldr	r3, [r4, #0]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	da00      	bge.n	8008b76 <_free_r+0x12>
 8008b74:	18e4      	adds	r4, r4, r3
 8008b76:	0028      	movs	r0, r5
 8008b78:	f000 fa9e 	bl	80090b8 <__malloc_lock>
 8008b7c:	4a1d      	ldr	r2, [pc, #116]	; (8008bf4 <_free_r+0x90>)
 8008b7e:	6813      	ldr	r3, [r2, #0]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d105      	bne.n	8008b90 <_free_r+0x2c>
 8008b84:	6063      	str	r3, [r4, #4]
 8008b86:	6014      	str	r4, [r2, #0]
 8008b88:	0028      	movs	r0, r5
 8008b8a:	f000 fa9d 	bl	80090c8 <__malloc_unlock>
 8008b8e:	bd70      	pop	{r4, r5, r6, pc}
 8008b90:	42a3      	cmp	r3, r4
 8008b92:	d908      	bls.n	8008ba6 <_free_r+0x42>
 8008b94:	6821      	ldr	r1, [r4, #0]
 8008b96:	1860      	adds	r0, r4, r1
 8008b98:	4283      	cmp	r3, r0
 8008b9a:	d1f3      	bne.n	8008b84 <_free_r+0x20>
 8008b9c:	6818      	ldr	r0, [r3, #0]
 8008b9e:	685b      	ldr	r3, [r3, #4]
 8008ba0:	1841      	adds	r1, r0, r1
 8008ba2:	6021      	str	r1, [r4, #0]
 8008ba4:	e7ee      	b.n	8008b84 <_free_r+0x20>
 8008ba6:	001a      	movs	r2, r3
 8008ba8:	685b      	ldr	r3, [r3, #4]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d001      	beq.n	8008bb2 <_free_r+0x4e>
 8008bae:	42a3      	cmp	r3, r4
 8008bb0:	d9f9      	bls.n	8008ba6 <_free_r+0x42>
 8008bb2:	6811      	ldr	r1, [r2, #0]
 8008bb4:	1850      	adds	r0, r2, r1
 8008bb6:	42a0      	cmp	r0, r4
 8008bb8:	d10b      	bne.n	8008bd2 <_free_r+0x6e>
 8008bba:	6820      	ldr	r0, [r4, #0]
 8008bbc:	1809      	adds	r1, r1, r0
 8008bbe:	1850      	adds	r0, r2, r1
 8008bc0:	6011      	str	r1, [r2, #0]
 8008bc2:	4283      	cmp	r3, r0
 8008bc4:	d1e0      	bne.n	8008b88 <_free_r+0x24>
 8008bc6:	6818      	ldr	r0, [r3, #0]
 8008bc8:	685b      	ldr	r3, [r3, #4]
 8008bca:	1841      	adds	r1, r0, r1
 8008bcc:	6011      	str	r1, [r2, #0]
 8008bce:	6053      	str	r3, [r2, #4]
 8008bd0:	e7da      	b.n	8008b88 <_free_r+0x24>
 8008bd2:	42a0      	cmp	r0, r4
 8008bd4:	d902      	bls.n	8008bdc <_free_r+0x78>
 8008bd6:	230c      	movs	r3, #12
 8008bd8:	602b      	str	r3, [r5, #0]
 8008bda:	e7d5      	b.n	8008b88 <_free_r+0x24>
 8008bdc:	6821      	ldr	r1, [r4, #0]
 8008bde:	1860      	adds	r0, r4, r1
 8008be0:	4283      	cmp	r3, r0
 8008be2:	d103      	bne.n	8008bec <_free_r+0x88>
 8008be4:	6818      	ldr	r0, [r3, #0]
 8008be6:	685b      	ldr	r3, [r3, #4]
 8008be8:	1841      	adds	r1, r0, r1
 8008bea:	6021      	str	r1, [r4, #0]
 8008bec:	6063      	str	r3, [r4, #4]
 8008bee:	6054      	str	r4, [r2, #4]
 8008bf0:	e7ca      	b.n	8008b88 <_free_r+0x24>
 8008bf2:	46c0      	nop			; (mov r8, r8)
 8008bf4:	200003e4 	.word	0x200003e4

08008bf8 <sbrk_aligned>:
 8008bf8:	b570      	push	{r4, r5, r6, lr}
 8008bfa:	4e0f      	ldr	r6, [pc, #60]	; (8008c38 <sbrk_aligned+0x40>)
 8008bfc:	000d      	movs	r5, r1
 8008bfe:	6831      	ldr	r1, [r6, #0]
 8008c00:	0004      	movs	r4, r0
 8008c02:	2900      	cmp	r1, #0
 8008c04:	d102      	bne.n	8008c0c <sbrk_aligned+0x14>
 8008c06:	f000 f9f1 	bl	8008fec <_sbrk_r>
 8008c0a:	6030      	str	r0, [r6, #0]
 8008c0c:	0029      	movs	r1, r5
 8008c0e:	0020      	movs	r0, r4
 8008c10:	f000 f9ec 	bl	8008fec <_sbrk_r>
 8008c14:	1c43      	adds	r3, r0, #1
 8008c16:	d00a      	beq.n	8008c2e <sbrk_aligned+0x36>
 8008c18:	2303      	movs	r3, #3
 8008c1a:	1cc5      	adds	r5, r0, #3
 8008c1c:	439d      	bics	r5, r3
 8008c1e:	42a8      	cmp	r0, r5
 8008c20:	d007      	beq.n	8008c32 <sbrk_aligned+0x3a>
 8008c22:	1a29      	subs	r1, r5, r0
 8008c24:	0020      	movs	r0, r4
 8008c26:	f000 f9e1 	bl	8008fec <_sbrk_r>
 8008c2a:	1c43      	adds	r3, r0, #1
 8008c2c:	d101      	bne.n	8008c32 <sbrk_aligned+0x3a>
 8008c2e:	2501      	movs	r5, #1
 8008c30:	426d      	negs	r5, r5
 8008c32:	0028      	movs	r0, r5
 8008c34:	bd70      	pop	{r4, r5, r6, pc}
 8008c36:	46c0      	nop			; (mov r8, r8)
 8008c38:	200003e8 	.word	0x200003e8

08008c3c <_malloc_r>:
 8008c3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008c3e:	2203      	movs	r2, #3
 8008c40:	1ccb      	adds	r3, r1, #3
 8008c42:	4393      	bics	r3, r2
 8008c44:	3308      	adds	r3, #8
 8008c46:	0006      	movs	r6, r0
 8008c48:	001f      	movs	r7, r3
 8008c4a:	2b0c      	cmp	r3, #12
 8008c4c:	d232      	bcs.n	8008cb4 <_malloc_r+0x78>
 8008c4e:	270c      	movs	r7, #12
 8008c50:	42b9      	cmp	r1, r7
 8008c52:	d831      	bhi.n	8008cb8 <_malloc_r+0x7c>
 8008c54:	0030      	movs	r0, r6
 8008c56:	f000 fa2f 	bl	80090b8 <__malloc_lock>
 8008c5a:	4d32      	ldr	r5, [pc, #200]	; (8008d24 <_malloc_r+0xe8>)
 8008c5c:	682b      	ldr	r3, [r5, #0]
 8008c5e:	001c      	movs	r4, r3
 8008c60:	2c00      	cmp	r4, #0
 8008c62:	d12e      	bne.n	8008cc2 <_malloc_r+0x86>
 8008c64:	0039      	movs	r1, r7
 8008c66:	0030      	movs	r0, r6
 8008c68:	f7ff ffc6 	bl	8008bf8 <sbrk_aligned>
 8008c6c:	0004      	movs	r4, r0
 8008c6e:	1c43      	adds	r3, r0, #1
 8008c70:	d11e      	bne.n	8008cb0 <_malloc_r+0x74>
 8008c72:	682c      	ldr	r4, [r5, #0]
 8008c74:	0025      	movs	r5, r4
 8008c76:	2d00      	cmp	r5, #0
 8008c78:	d14a      	bne.n	8008d10 <_malloc_r+0xd4>
 8008c7a:	6823      	ldr	r3, [r4, #0]
 8008c7c:	0029      	movs	r1, r5
 8008c7e:	18e3      	adds	r3, r4, r3
 8008c80:	0030      	movs	r0, r6
 8008c82:	9301      	str	r3, [sp, #4]
 8008c84:	f000 f9b2 	bl	8008fec <_sbrk_r>
 8008c88:	9b01      	ldr	r3, [sp, #4]
 8008c8a:	4283      	cmp	r3, r0
 8008c8c:	d143      	bne.n	8008d16 <_malloc_r+0xda>
 8008c8e:	6823      	ldr	r3, [r4, #0]
 8008c90:	3703      	adds	r7, #3
 8008c92:	1aff      	subs	r7, r7, r3
 8008c94:	2303      	movs	r3, #3
 8008c96:	439f      	bics	r7, r3
 8008c98:	3708      	adds	r7, #8
 8008c9a:	2f0c      	cmp	r7, #12
 8008c9c:	d200      	bcs.n	8008ca0 <_malloc_r+0x64>
 8008c9e:	270c      	movs	r7, #12
 8008ca0:	0039      	movs	r1, r7
 8008ca2:	0030      	movs	r0, r6
 8008ca4:	f7ff ffa8 	bl	8008bf8 <sbrk_aligned>
 8008ca8:	1c43      	adds	r3, r0, #1
 8008caa:	d034      	beq.n	8008d16 <_malloc_r+0xda>
 8008cac:	6823      	ldr	r3, [r4, #0]
 8008cae:	19df      	adds	r7, r3, r7
 8008cb0:	6027      	str	r7, [r4, #0]
 8008cb2:	e013      	b.n	8008cdc <_malloc_r+0xa0>
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	dacb      	bge.n	8008c50 <_malloc_r+0x14>
 8008cb8:	230c      	movs	r3, #12
 8008cba:	2500      	movs	r5, #0
 8008cbc:	6033      	str	r3, [r6, #0]
 8008cbe:	0028      	movs	r0, r5
 8008cc0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008cc2:	6822      	ldr	r2, [r4, #0]
 8008cc4:	1bd1      	subs	r1, r2, r7
 8008cc6:	d420      	bmi.n	8008d0a <_malloc_r+0xce>
 8008cc8:	290b      	cmp	r1, #11
 8008cca:	d917      	bls.n	8008cfc <_malloc_r+0xc0>
 8008ccc:	19e2      	adds	r2, r4, r7
 8008cce:	6027      	str	r7, [r4, #0]
 8008cd0:	42a3      	cmp	r3, r4
 8008cd2:	d111      	bne.n	8008cf8 <_malloc_r+0xbc>
 8008cd4:	602a      	str	r2, [r5, #0]
 8008cd6:	6863      	ldr	r3, [r4, #4]
 8008cd8:	6011      	str	r1, [r2, #0]
 8008cda:	6053      	str	r3, [r2, #4]
 8008cdc:	0030      	movs	r0, r6
 8008cde:	0025      	movs	r5, r4
 8008ce0:	f000 f9f2 	bl	80090c8 <__malloc_unlock>
 8008ce4:	2207      	movs	r2, #7
 8008ce6:	350b      	adds	r5, #11
 8008ce8:	1d23      	adds	r3, r4, #4
 8008cea:	4395      	bics	r5, r2
 8008cec:	1aea      	subs	r2, r5, r3
 8008cee:	429d      	cmp	r5, r3
 8008cf0:	d0e5      	beq.n	8008cbe <_malloc_r+0x82>
 8008cf2:	1b5b      	subs	r3, r3, r5
 8008cf4:	50a3      	str	r3, [r4, r2]
 8008cf6:	e7e2      	b.n	8008cbe <_malloc_r+0x82>
 8008cf8:	605a      	str	r2, [r3, #4]
 8008cfa:	e7ec      	b.n	8008cd6 <_malloc_r+0x9a>
 8008cfc:	6862      	ldr	r2, [r4, #4]
 8008cfe:	42a3      	cmp	r3, r4
 8008d00:	d101      	bne.n	8008d06 <_malloc_r+0xca>
 8008d02:	602a      	str	r2, [r5, #0]
 8008d04:	e7ea      	b.n	8008cdc <_malloc_r+0xa0>
 8008d06:	605a      	str	r2, [r3, #4]
 8008d08:	e7e8      	b.n	8008cdc <_malloc_r+0xa0>
 8008d0a:	0023      	movs	r3, r4
 8008d0c:	6864      	ldr	r4, [r4, #4]
 8008d0e:	e7a7      	b.n	8008c60 <_malloc_r+0x24>
 8008d10:	002c      	movs	r4, r5
 8008d12:	686d      	ldr	r5, [r5, #4]
 8008d14:	e7af      	b.n	8008c76 <_malloc_r+0x3a>
 8008d16:	230c      	movs	r3, #12
 8008d18:	0030      	movs	r0, r6
 8008d1a:	6033      	str	r3, [r6, #0]
 8008d1c:	f000 f9d4 	bl	80090c8 <__malloc_unlock>
 8008d20:	e7cd      	b.n	8008cbe <_malloc_r+0x82>
 8008d22:	46c0      	nop			; (mov r8, r8)
 8008d24:	200003e4 	.word	0x200003e4

08008d28 <__ssputs_r>:
 8008d28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d2a:	688e      	ldr	r6, [r1, #8]
 8008d2c:	b085      	sub	sp, #20
 8008d2e:	0007      	movs	r7, r0
 8008d30:	000c      	movs	r4, r1
 8008d32:	9203      	str	r2, [sp, #12]
 8008d34:	9301      	str	r3, [sp, #4]
 8008d36:	429e      	cmp	r6, r3
 8008d38:	d83c      	bhi.n	8008db4 <__ssputs_r+0x8c>
 8008d3a:	2390      	movs	r3, #144	; 0x90
 8008d3c:	898a      	ldrh	r2, [r1, #12]
 8008d3e:	00db      	lsls	r3, r3, #3
 8008d40:	421a      	tst	r2, r3
 8008d42:	d034      	beq.n	8008dae <__ssputs_r+0x86>
 8008d44:	6909      	ldr	r1, [r1, #16]
 8008d46:	6823      	ldr	r3, [r4, #0]
 8008d48:	6960      	ldr	r0, [r4, #20]
 8008d4a:	1a5b      	subs	r3, r3, r1
 8008d4c:	9302      	str	r3, [sp, #8]
 8008d4e:	2303      	movs	r3, #3
 8008d50:	4343      	muls	r3, r0
 8008d52:	0fdd      	lsrs	r5, r3, #31
 8008d54:	18ed      	adds	r5, r5, r3
 8008d56:	9b01      	ldr	r3, [sp, #4]
 8008d58:	9802      	ldr	r0, [sp, #8]
 8008d5a:	3301      	adds	r3, #1
 8008d5c:	181b      	adds	r3, r3, r0
 8008d5e:	106d      	asrs	r5, r5, #1
 8008d60:	42ab      	cmp	r3, r5
 8008d62:	d900      	bls.n	8008d66 <__ssputs_r+0x3e>
 8008d64:	001d      	movs	r5, r3
 8008d66:	0553      	lsls	r3, r2, #21
 8008d68:	d532      	bpl.n	8008dd0 <__ssputs_r+0xa8>
 8008d6a:	0029      	movs	r1, r5
 8008d6c:	0038      	movs	r0, r7
 8008d6e:	f7ff ff65 	bl	8008c3c <_malloc_r>
 8008d72:	1e06      	subs	r6, r0, #0
 8008d74:	d109      	bne.n	8008d8a <__ssputs_r+0x62>
 8008d76:	230c      	movs	r3, #12
 8008d78:	603b      	str	r3, [r7, #0]
 8008d7a:	2340      	movs	r3, #64	; 0x40
 8008d7c:	2001      	movs	r0, #1
 8008d7e:	89a2      	ldrh	r2, [r4, #12]
 8008d80:	4240      	negs	r0, r0
 8008d82:	4313      	orrs	r3, r2
 8008d84:	81a3      	strh	r3, [r4, #12]
 8008d86:	b005      	add	sp, #20
 8008d88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d8a:	9a02      	ldr	r2, [sp, #8]
 8008d8c:	6921      	ldr	r1, [r4, #16]
 8008d8e:	f7ff fb18 	bl	80083c2 <memcpy>
 8008d92:	89a3      	ldrh	r3, [r4, #12]
 8008d94:	4a14      	ldr	r2, [pc, #80]	; (8008de8 <__ssputs_r+0xc0>)
 8008d96:	401a      	ands	r2, r3
 8008d98:	2380      	movs	r3, #128	; 0x80
 8008d9a:	4313      	orrs	r3, r2
 8008d9c:	81a3      	strh	r3, [r4, #12]
 8008d9e:	9b02      	ldr	r3, [sp, #8]
 8008da0:	6126      	str	r6, [r4, #16]
 8008da2:	18f6      	adds	r6, r6, r3
 8008da4:	6026      	str	r6, [r4, #0]
 8008da6:	6165      	str	r5, [r4, #20]
 8008da8:	9e01      	ldr	r6, [sp, #4]
 8008daa:	1aed      	subs	r5, r5, r3
 8008dac:	60a5      	str	r5, [r4, #8]
 8008dae:	9b01      	ldr	r3, [sp, #4]
 8008db0:	429e      	cmp	r6, r3
 8008db2:	d900      	bls.n	8008db6 <__ssputs_r+0x8e>
 8008db4:	9e01      	ldr	r6, [sp, #4]
 8008db6:	0032      	movs	r2, r6
 8008db8:	9903      	ldr	r1, [sp, #12]
 8008dba:	6820      	ldr	r0, [r4, #0]
 8008dbc:	f000 f968 	bl	8009090 <memmove>
 8008dc0:	68a3      	ldr	r3, [r4, #8]
 8008dc2:	2000      	movs	r0, #0
 8008dc4:	1b9b      	subs	r3, r3, r6
 8008dc6:	60a3      	str	r3, [r4, #8]
 8008dc8:	6823      	ldr	r3, [r4, #0]
 8008dca:	199e      	adds	r6, r3, r6
 8008dcc:	6026      	str	r6, [r4, #0]
 8008dce:	e7da      	b.n	8008d86 <__ssputs_r+0x5e>
 8008dd0:	002a      	movs	r2, r5
 8008dd2:	0038      	movs	r0, r7
 8008dd4:	f000 f980 	bl	80090d8 <_realloc_r>
 8008dd8:	1e06      	subs	r6, r0, #0
 8008dda:	d1e0      	bne.n	8008d9e <__ssputs_r+0x76>
 8008ddc:	0038      	movs	r0, r7
 8008dde:	6921      	ldr	r1, [r4, #16]
 8008de0:	f7ff fec0 	bl	8008b64 <_free_r>
 8008de4:	e7c7      	b.n	8008d76 <__ssputs_r+0x4e>
 8008de6:	46c0      	nop			; (mov r8, r8)
 8008de8:	fffffb7f 	.word	0xfffffb7f

08008dec <_svfiprintf_r>:
 8008dec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008dee:	b0a1      	sub	sp, #132	; 0x84
 8008df0:	9003      	str	r0, [sp, #12]
 8008df2:	001d      	movs	r5, r3
 8008df4:	898b      	ldrh	r3, [r1, #12]
 8008df6:	000f      	movs	r7, r1
 8008df8:	0016      	movs	r6, r2
 8008dfa:	061b      	lsls	r3, r3, #24
 8008dfc:	d511      	bpl.n	8008e22 <_svfiprintf_r+0x36>
 8008dfe:	690b      	ldr	r3, [r1, #16]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d10e      	bne.n	8008e22 <_svfiprintf_r+0x36>
 8008e04:	2140      	movs	r1, #64	; 0x40
 8008e06:	f7ff ff19 	bl	8008c3c <_malloc_r>
 8008e0a:	6038      	str	r0, [r7, #0]
 8008e0c:	6138      	str	r0, [r7, #16]
 8008e0e:	2800      	cmp	r0, #0
 8008e10:	d105      	bne.n	8008e1e <_svfiprintf_r+0x32>
 8008e12:	230c      	movs	r3, #12
 8008e14:	9a03      	ldr	r2, [sp, #12]
 8008e16:	3801      	subs	r0, #1
 8008e18:	6013      	str	r3, [r2, #0]
 8008e1a:	b021      	add	sp, #132	; 0x84
 8008e1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e1e:	2340      	movs	r3, #64	; 0x40
 8008e20:	617b      	str	r3, [r7, #20]
 8008e22:	2300      	movs	r3, #0
 8008e24:	ac08      	add	r4, sp, #32
 8008e26:	6163      	str	r3, [r4, #20]
 8008e28:	3320      	adds	r3, #32
 8008e2a:	7663      	strb	r3, [r4, #25]
 8008e2c:	3310      	adds	r3, #16
 8008e2e:	76a3      	strb	r3, [r4, #26]
 8008e30:	9507      	str	r5, [sp, #28]
 8008e32:	0035      	movs	r5, r6
 8008e34:	782b      	ldrb	r3, [r5, #0]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d001      	beq.n	8008e3e <_svfiprintf_r+0x52>
 8008e3a:	2b25      	cmp	r3, #37	; 0x25
 8008e3c:	d147      	bne.n	8008ece <_svfiprintf_r+0xe2>
 8008e3e:	1bab      	subs	r3, r5, r6
 8008e40:	9305      	str	r3, [sp, #20]
 8008e42:	42b5      	cmp	r5, r6
 8008e44:	d00c      	beq.n	8008e60 <_svfiprintf_r+0x74>
 8008e46:	0032      	movs	r2, r6
 8008e48:	0039      	movs	r1, r7
 8008e4a:	9803      	ldr	r0, [sp, #12]
 8008e4c:	f7ff ff6c 	bl	8008d28 <__ssputs_r>
 8008e50:	1c43      	adds	r3, r0, #1
 8008e52:	d100      	bne.n	8008e56 <_svfiprintf_r+0x6a>
 8008e54:	e0ae      	b.n	8008fb4 <_svfiprintf_r+0x1c8>
 8008e56:	6962      	ldr	r2, [r4, #20]
 8008e58:	9b05      	ldr	r3, [sp, #20]
 8008e5a:	4694      	mov	ip, r2
 8008e5c:	4463      	add	r3, ip
 8008e5e:	6163      	str	r3, [r4, #20]
 8008e60:	782b      	ldrb	r3, [r5, #0]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d100      	bne.n	8008e68 <_svfiprintf_r+0x7c>
 8008e66:	e0a5      	b.n	8008fb4 <_svfiprintf_r+0x1c8>
 8008e68:	2201      	movs	r2, #1
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	4252      	negs	r2, r2
 8008e6e:	6062      	str	r2, [r4, #4]
 8008e70:	a904      	add	r1, sp, #16
 8008e72:	3254      	adds	r2, #84	; 0x54
 8008e74:	1852      	adds	r2, r2, r1
 8008e76:	1c6e      	adds	r6, r5, #1
 8008e78:	6023      	str	r3, [r4, #0]
 8008e7a:	60e3      	str	r3, [r4, #12]
 8008e7c:	60a3      	str	r3, [r4, #8]
 8008e7e:	7013      	strb	r3, [r2, #0]
 8008e80:	65a3      	str	r3, [r4, #88]	; 0x58
 8008e82:	2205      	movs	r2, #5
 8008e84:	7831      	ldrb	r1, [r6, #0]
 8008e86:	4854      	ldr	r0, [pc, #336]	; (8008fd8 <_svfiprintf_r+0x1ec>)
 8008e88:	f7ff fa90 	bl	80083ac <memchr>
 8008e8c:	1c75      	adds	r5, r6, #1
 8008e8e:	2800      	cmp	r0, #0
 8008e90:	d11f      	bne.n	8008ed2 <_svfiprintf_r+0xe6>
 8008e92:	6822      	ldr	r2, [r4, #0]
 8008e94:	06d3      	lsls	r3, r2, #27
 8008e96:	d504      	bpl.n	8008ea2 <_svfiprintf_r+0xb6>
 8008e98:	2353      	movs	r3, #83	; 0x53
 8008e9a:	a904      	add	r1, sp, #16
 8008e9c:	185b      	adds	r3, r3, r1
 8008e9e:	2120      	movs	r1, #32
 8008ea0:	7019      	strb	r1, [r3, #0]
 8008ea2:	0713      	lsls	r3, r2, #28
 8008ea4:	d504      	bpl.n	8008eb0 <_svfiprintf_r+0xc4>
 8008ea6:	2353      	movs	r3, #83	; 0x53
 8008ea8:	a904      	add	r1, sp, #16
 8008eaa:	185b      	adds	r3, r3, r1
 8008eac:	212b      	movs	r1, #43	; 0x2b
 8008eae:	7019      	strb	r1, [r3, #0]
 8008eb0:	7833      	ldrb	r3, [r6, #0]
 8008eb2:	2b2a      	cmp	r3, #42	; 0x2a
 8008eb4:	d016      	beq.n	8008ee4 <_svfiprintf_r+0xf8>
 8008eb6:	0035      	movs	r5, r6
 8008eb8:	2100      	movs	r1, #0
 8008eba:	200a      	movs	r0, #10
 8008ebc:	68e3      	ldr	r3, [r4, #12]
 8008ebe:	782a      	ldrb	r2, [r5, #0]
 8008ec0:	1c6e      	adds	r6, r5, #1
 8008ec2:	3a30      	subs	r2, #48	; 0x30
 8008ec4:	2a09      	cmp	r2, #9
 8008ec6:	d94e      	bls.n	8008f66 <_svfiprintf_r+0x17a>
 8008ec8:	2900      	cmp	r1, #0
 8008eca:	d111      	bne.n	8008ef0 <_svfiprintf_r+0x104>
 8008ecc:	e017      	b.n	8008efe <_svfiprintf_r+0x112>
 8008ece:	3501      	adds	r5, #1
 8008ed0:	e7b0      	b.n	8008e34 <_svfiprintf_r+0x48>
 8008ed2:	4b41      	ldr	r3, [pc, #260]	; (8008fd8 <_svfiprintf_r+0x1ec>)
 8008ed4:	6822      	ldr	r2, [r4, #0]
 8008ed6:	1ac0      	subs	r0, r0, r3
 8008ed8:	2301      	movs	r3, #1
 8008eda:	4083      	lsls	r3, r0
 8008edc:	4313      	orrs	r3, r2
 8008ede:	002e      	movs	r6, r5
 8008ee0:	6023      	str	r3, [r4, #0]
 8008ee2:	e7ce      	b.n	8008e82 <_svfiprintf_r+0x96>
 8008ee4:	9b07      	ldr	r3, [sp, #28]
 8008ee6:	1d19      	adds	r1, r3, #4
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	9107      	str	r1, [sp, #28]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	db01      	blt.n	8008ef4 <_svfiprintf_r+0x108>
 8008ef0:	930b      	str	r3, [sp, #44]	; 0x2c
 8008ef2:	e004      	b.n	8008efe <_svfiprintf_r+0x112>
 8008ef4:	425b      	negs	r3, r3
 8008ef6:	60e3      	str	r3, [r4, #12]
 8008ef8:	2302      	movs	r3, #2
 8008efa:	4313      	orrs	r3, r2
 8008efc:	6023      	str	r3, [r4, #0]
 8008efe:	782b      	ldrb	r3, [r5, #0]
 8008f00:	2b2e      	cmp	r3, #46	; 0x2e
 8008f02:	d10a      	bne.n	8008f1a <_svfiprintf_r+0x12e>
 8008f04:	786b      	ldrb	r3, [r5, #1]
 8008f06:	2b2a      	cmp	r3, #42	; 0x2a
 8008f08:	d135      	bne.n	8008f76 <_svfiprintf_r+0x18a>
 8008f0a:	9b07      	ldr	r3, [sp, #28]
 8008f0c:	3502      	adds	r5, #2
 8008f0e:	1d1a      	adds	r2, r3, #4
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	9207      	str	r2, [sp, #28]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	db2b      	blt.n	8008f70 <_svfiprintf_r+0x184>
 8008f18:	9309      	str	r3, [sp, #36]	; 0x24
 8008f1a:	4e30      	ldr	r6, [pc, #192]	; (8008fdc <_svfiprintf_r+0x1f0>)
 8008f1c:	2203      	movs	r2, #3
 8008f1e:	0030      	movs	r0, r6
 8008f20:	7829      	ldrb	r1, [r5, #0]
 8008f22:	f7ff fa43 	bl	80083ac <memchr>
 8008f26:	2800      	cmp	r0, #0
 8008f28:	d006      	beq.n	8008f38 <_svfiprintf_r+0x14c>
 8008f2a:	2340      	movs	r3, #64	; 0x40
 8008f2c:	1b80      	subs	r0, r0, r6
 8008f2e:	4083      	lsls	r3, r0
 8008f30:	6822      	ldr	r2, [r4, #0]
 8008f32:	3501      	adds	r5, #1
 8008f34:	4313      	orrs	r3, r2
 8008f36:	6023      	str	r3, [r4, #0]
 8008f38:	7829      	ldrb	r1, [r5, #0]
 8008f3a:	2206      	movs	r2, #6
 8008f3c:	4828      	ldr	r0, [pc, #160]	; (8008fe0 <_svfiprintf_r+0x1f4>)
 8008f3e:	1c6e      	adds	r6, r5, #1
 8008f40:	7621      	strb	r1, [r4, #24]
 8008f42:	f7ff fa33 	bl	80083ac <memchr>
 8008f46:	2800      	cmp	r0, #0
 8008f48:	d03c      	beq.n	8008fc4 <_svfiprintf_r+0x1d8>
 8008f4a:	4b26      	ldr	r3, [pc, #152]	; (8008fe4 <_svfiprintf_r+0x1f8>)
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d125      	bne.n	8008f9c <_svfiprintf_r+0x1b0>
 8008f50:	2207      	movs	r2, #7
 8008f52:	9b07      	ldr	r3, [sp, #28]
 8008f54:	3307      	adds	r3, #7
 8008f56:	4393      	bics	r3, r2
 8008f58:	3308      	adds	r3, #8
 8008f5a:	9307      	str	r3, [sp, #28]
 8008f5c:	6963      	ldr	r3, [r4, #20]
 8008f5e:	9a04      	ldr	r2, [sp, #16]
 8008f60:	189b      	adds	r3, r3, r2
 8008f62:	6163      	str	r3, [r4, #20]
 8008f64:	e765      	b.n	8008e32 <_svfiprintf_r+0x46>
 8008f66:	4343      	muls	r3, r0
 8008f68:	0035      	movs	r5, r6
 8008f6a:	2101      	movs	r1, #1
 8008f6c:	189b      	adds	r3, r3, r2
 8008f6e:	e7a6      	b.n	8008ebe <_svfiprintf_r+0xd2>
 8008f70:	2301      	movs	r3, #1
 8008f72:	425b      	negs	r3, r3
 8008f74:	e7d0      	b.n	8008f18 <_svfiprintf_r+0x12c>
 8008f76:	2300      	movs	r3, #0
 8008f78:	200a      	movs	r0, #10
 8008f7a:	001a      	movs	r2, r3
 8008f7c:	3501      	adds	r5, #1
 8008f7e:	6063      	str	r3, [r4, #4]
 8008f80:	7829      	ldrb	r1, [r5, #0]
 8008f82:	1c6e      	adds	r6, r5, #1
 8008f84:	3930      	subs	r1, #48	; 0x30
 8008f86:	2909      	cmp	r1, #9
 8008f88:	d903      	bls.n	8008f92 <_svfiprintf_r+0x1a6>
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d0c5      	beq.n	8008f1a <_svfiprintf_r+0x12e>
 8008f8e:	9209      	str	r2, [sp, #36]	; 0x24
 8008f90:	e7c3      	b.n	8008f1a <_svfiprintf_r+0x12e>
 8008f92:	4342      	muls	r2, r0
 8008f94:	0035      	movs	r5, r6
 8008f96:	2301      	movs	r3, #1
 8008f98:	1852      	adds	r2, r2, r1
 8008f9a:	e7f1      	b.n	8008f80 <_svfiprintf_r+0x194>
 8008f9c:	ab07      	add	r3, sp, #28
 8008f9e:	9300      	str	r3, [sp, #0]
 8008fa0:	003a      	movs	r2, r7
 8008fa2:	0021      	movs	r1, r4
 8008fa4:	4b10      	ldr	r3, [pc, #64]	; (8008fe8 <_svfiprintf_r+0x1fc>)
 8008fa6:	9803      	ldr	r0, [sp, #12]
 8008fa8:	f7fd ff68 	bl	8006e7c <_printf_float>
 8008fac:	9004      	str	r0, [sp, #16]
 8008fae:	9b04      	ldr	r3, [sp, #16]
 8008fb0:	3301      	adds	r3, #1
 8008fb2:	d1d3      	bne.n	8008f5c <_svfiprintf_r+0x170>
 8008fb4:	89bb      	ldrh	r3, [r7, #12]
 8008fb6:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008fb8:	065b      	lsls	r3, r3, #25
 8008fba:	d400      	bmi.n	8008fbe <_svfiprintf_r+0x1d2>
 8008fbc:	e72d      	b.n	8008e1a <_svfiprintf_r+0x2e>
 8008fbe:	2001      	movs	r0, #1
 8008fc0:	4240      	negs	r0, r0
 8008fc2:	e72a      	b.n	8008e1a <_svfiprintf_r+0x2e>
 8008fc4:	ab07      	add	r3, sp, #28
 8008fc6:	9300      	str	r3, [sp, #0]
 8008fc8:	003a      	movs	r2, r7
 8008fca:	0021      	movs	r1, r4
 8008fcc:	4b06      	ldr	r3, [pc, #24]	; (8008fe8 <_svfiprintf_r+0x1fc>)
 8008fce:	9803      	ldr	r0, [sp, #12]
 8008fd0:	f7fe fa06 	bl	80073e0 <_printf_i>
 8008fd4:	e7ea      	b.n	8008fac <_svfiprintf_r+0x1c0>
 8008fd6:	46c0      	nop			; (mov r8, r8)
 8008fd8:	0800a09c 	.word	0x0800a09c
 8008fdc:	0800a0a2 	.word	0x0800a0a2
 8008fe0:	0800a0a6 	.word	0x0800a0a6
 8008fe4:	08006e7d 	.word	0x08006e7d
 8008fe8:	08008d29 	.word	0x08008d29

08008fec <_sbrk_r>:
 8008fec:	2300      	movs	r3, #0
 8008fee:	b570      	push	{r4, r5, r6, lr}
 8008ff0:	4d06      	ldr	r5, [pc, #24]	; (800900c <_sbrk_r+0x20>)
 8008ff2:	0004      	movs	r4, r0
 8008ff4:	0008      	movs	r0, r1
 8008ff6:	602b      	str	r3, [r5, #0]
 8008ff8:	f7fa f86c 	bl	80030d4 <_sbrk>
 8008ffc:	1c43      	adds	r3, r0, #1
 8008ffe:	d103      	bne.n	8009008 <_sbrk_r+0x1c>
 8009000:	682b      	ldr	r3, [r5, #0]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d000      	beq.n	8009008 <_sbrk_r+0x1c>
 8009006:	6023      	str	r3, [r4, #0]
 8009008:	bd70      	pop	{r4, r5, r6, pc}
 800900a:	46c0      	nop			; (mov r8, r8)
 800900c:	200003ec 	.word	0x200003ec

08009010 <__assert_func>:
 8009010:	b530      	push	{r4, r5, lr}
 8009012:	0014      	movs	r4, r2
 8009014:	001a      	movs	r2, r3
 8009016:	4b09      	ldr	r3, [pc, #36]	; (800903c <__assert_func+0x2c>)
 8009018:	0005      	movs	r5, r0
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	b085      	sub	sp, #20
 800901e:	68d8      	ldr	r0, [r3, #12]
 8009020:	4b07      	ldr	r3, [pc, #28]	; (8009040 <__assert_func+0x30>)
 8009022:	2c00      	cmp	r4, #0
 8009024:	d101      	bne.n	800902a <__assert_func+0x1a>
 8009026:	4b07      	ldr	r3, [pc, #28]	; (8009044 <__assert_func+0x34>)
 8009028:	001c      	movs	r4, r3
 800902a:	9301      	str	r3, [sp, #4]
 800902c:	9100      	str	r1, [sp, #0]
 800902e:	002b      	movs	r3, r5
 8009030:	4905      	ldr	r1, [pc, #20]	; (8009048 <__assert_func+0x38>)
 8009032:	9402      	str	r4, [sp, #8]
 8009034:	f000 f80a 	bl	800904c <fiprintf>
 8009038:	f000 faba 	bl	80095b0 <abort>
 800903c:	2000000c 	.word	0x2000000c
 8009040:	0800a0ad 	.word	0x0800a0ad
 8009044:	0800a0e8 	.word	0x0800a0e8
 8009048:	0800a0ba 	.word	0x0800a0ba

0800904c <fiprintf>:
 800904c:	b40e      	push	{r1, r2, r3}
 800904e:	b503      	push	{r0, r1, lr}
 8009050:	0001      	movs	r1, r0
 8009052:	ab03      	add	r3, sp, #12
 8009054:	4804      	ldr	r0, [pc, #16]	; (8009068 <fiprintf+0x1c>)
 8009056:	cb04      	ldmia	r3!, {r2}
 8009058:	6800      	ldr	r0, [r0, #0]
 800905a:	9301      	str	r3, [sp, #4]
 800905c:	f000 f892 	bl	8009184 <_vfiprintf_r>
 8009060:	b002      	add	sp, #8
 8009062:	bc08      	pop	{r3}
 8009064:	b003      	add	sp, #12
 8009066:	4718      	bx	r3
 8009068:	2000000c 	.word	0x2000000c

0800906c <__ascii_mbtowc>:
 800906c:	b082      	sub	sp, #8
 800906e:	2900      	cmp	r1, #0
 8009070:	d100      	bne.n	8009074 <__ascii_mbtowc+0x8>
 8009072:	a901      	add	r1, sp, #4
 8009074:	1e10      	subs	r0, r2, #0
 8009076:	d006      	beq.n	8009086 <__ascii_mbtowc+0x1a>
 8009078:	2b00      	cmp	r3, #0
 800907a:	d006      	beq.n	800908a <__ascii_mbtowc+0x1e>
 800907c:	7813      	ldrb	r3, [r2, #0]
 800907e:	600b      	str	r3, [r1, #0]
 8009080:	7810      	ldrb	r0, [r2, #0]
 8009082:	1e43      	subs	r3, r0, #1
 8009084:	4198      	sbcs	r0, r3
 8009086:	b002      	add	sp, #8
 8009088:	4770      	bx	lr
 800908a:	2002      	movs	r0, #2
 800908c:	4240      	negs	r0, r0
 800908e:	e7fa      	b.n	8009086 <__ascii_mbtowc+0x1a>

08009090 <memmove>:
 8009090:	b510      	push	{r4, lr}
 8009092:	4288      	cmp	r0, r1
 8009094:	d902      	bls.n	800909c <memmove+0xc>
 8009096:	188b      	adds	r3, r1, r2
 8009098:	4298      	cmp	r0, r3
 800909a:	d303      	bcc.n	80090a4 <memmove+0x14>
 800909c:	2300      	movs	r3, #0
 800909e:	e007      	b.n	80090b0 <memmove+0x20>
 80090a0:	5c8b      	ldrb	r3, [r1, r2]
 80090a2:	5483      	strb	r3, [r0, r2]
 80090a4:	3a01      	subs	r2, #1
 80090a6:	d2fb      	bcs.n	80090a0 <memmove+0x10>
 80090a8:	bd10      	pop	{r4, pc}
 80090aa:	5ccc      	ldrb	r4, [r1, r3]
 80090ac:	54c4      	strb	r4, [r0, r3]
 80090ae:	3301      	adds	r3, #1
 80090b0:	429a      	cmp	r2, r3
 80090b2:	d1fa      	bne.n	80090aa <memmove+0x1a>
 80090b4:	e7f8      	b.n	80090a8 <memmove+0x18>
	...

080090b8 <__malloc_lock>:
 80090b8:	b510      	push	{r4, lr}
 80090ba:	4802      	ldr	r0, [pc, #8]	; (80090c4 <__malloc_lock+0xc>)
 80090bc:	f000 fc4f 	bl	800995e <__retarget_lock_acquire_recursive>
 80090c0:	bd10      	pop	{r4, pc}
 80090c2:	46c0      	nop			; (mov r8, r8)
 80090c4:	200003f0 	.word	0x200003f0

080090c8 <__malloc_unlock>:
 80090c8:	b510      	push	{r4, lr}
 80090ca:	4802      	ldr	r0, [pc, #8]	; (80090d4 <__malloc_unlock+0xc>)
 80090cc:	f000 fc48 	bl	8009960 <__retarget_lock_release_recursive>
 80090d0:	bd10      	pop	{r4, pc}
 80090d2:	46c0      	nop			; (mov r8, r8)
 80090d4:	200003f0 	.word	0x200003f0

080090d8 <_realloc_r>:
 80090d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80090da:	0007      	movs	r7, r0
 80090dc:	000e      	movs	r6, r1
 80090de:	0014      	movs	r4, r2
 80090e0:	2900      	cmp	r1, #0
 80090e2:	d105      	bne.n	80090f0 <_realloc_r+0x18>
 80090e4:	0011      	movs	r1, r2
 80090e6:	f7ff fda9 	bl	8008c3c <_malloc_r>
 80090ea:	0005      	movs	r5, r0
 80090ec:	0028      	movs	r0, r5
 80090ee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80090f0:	2a00      	cmp	r2, #0
 80090f2:	d103      	bne.n	80090fc <_realloc_r+0x24>
 80090f4:	f7ff fd36 	bl	8008b64 <_free_r>
 80090f8:	0025      	movs	r5, r4
 80090fa:	e7f7      	b.n	80090ec <_realloc_r+0x14>
 80090fc:	f000 fc9e 	bl	8009a3c <_malloc_usable_size_r>
 8009100:	9001      	str	r0, [sp, #4]
 8009102:	4284      	cmp	r4, r0
 8009104:	d803      	bhi.n	800910e <_realloc_r+0x36>
 8009106:	0035      	movs	r5, r6
 8009108:	0843      	lsrs	r3, r0, #1
 800910a:	42a3      	cmp	r3, r4
 800910c:	d3ee      	bcc.n	80090ec <_realloc_r+0x14>
 800910e:	0021      	movs	r1, r4
 8009110:	0038      	movs	r0, r7
 8009112:	f7ff fd93 	bl	8008c3c <_malloc_r>
 8009116:	1e05      	subs	r5, r0, #0
 8009118:	d0e8      	beq.n	80090ec <_realloc_r+0x14>
 800911a:	9b01      	ldr	r3, [sp, #4]
 800911c:	0022      	movs	r2, r4
 800911e:	429c      	cmp	r4, r3
 8009120:	d900      	bls.n	8009124 <_realloc_r+0x4c>
 8009122:	001a      	movs	r2, r3
 8009124:	0031      	movs	r1, r6
 8009126:	0028      	movs	r0, r5
 8009128:	f7ff f94b 	bl	80083c2 <memcpy>
 800912c:	0031      	movs	r1, r6
 800912e:	0038      	movs	r0, r7
 8009130:	f7ff fd18 	bl	8008b64 <_free_r>
 8009134:	e7da      	b.n	80090ec <_realloc_r+0x14>

08009136 <__sfputc_r>:
 8009136:	6893      	ldr	r3, [r2, #8]
 8009138:	b510      	push	{r4, lr}
 800913a:	3b01      	subs	r3, #1
 800913c:	6093      	str	r3, [r2, #8]
 800913e:	2b00      	cmp	r3, #0
 8009140:	da04      	bge.n	800914c <__sfputc_r+0x16>
 8009142:	6994      	ldr	r4, [r2, #24]
 8009144:	42a3      	cmp	r3, r4
 8009146:	db07      	blt.n	8009158 <__sfputc_r+0x22>
 8009148:	290a      	cmp	r1, #10
 800914a:	d005      	beq.n	8009158 <__sfputc_r+0x22>
 800914c:	6813      	ldr	r3, [r2, #0]
 800914e:	1c58      	adds	r0, r3, #1
 8009150:	6010      	str	r0, [r2, #0]
 8009152:	7019      	strb	r1, [r3, #0]
 8009154:	0008      	movs	r0, r1
 8009156:	bd10      	pop	{r4, pc}
 8009158:	f000 f94e 	bl	80093f8 <__swbuf_r>
 800915c:	0001      	movs	r1, r0
 800915e:	e7f9      	b.n	8009154 <__sfputc_r+0x1e>

08009160 <__sfputs_r>:
 8009160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009162:	0006      	movs	r6, r0
 8009164:	000f      	movs	r7, r1
 8009166:	0014      	movs	r4, r2
 8009168:	18d5      	adds	r5, r2, r3
 800916a:	42ac      	cmp	r4, r5
 800916c:	d101      	bne.n	8009172 <__sfputs_r+0x12>
 800916e:	2000      	movs	r0, #0
 8009170:	e007      	b.n	8009182 <__sfputs_r+0x22>
 8009172:	7821      	ldrb	r1, [r4, #0]
 8009174:	003a      	movs	r2, r7
 8009176:	0030      	movs	r0, r6
 8009178:	f7ff ffdd 	bl	8009136 <__sfputc_r>
 800917c:	3401      	adds	r4, #1
 800917e:	1c43      	adds	r3, r0, #1
 8009180:	d1f3      	bne.n	800916a <__sfputs_r+0xa>
 8009182:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009184 <_vfiprintf_r>:
 8009184:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009186:	b0a1      	sub	sp, #132	; 0x84
 8009188:	0006      	movs	r6, r0
 800918a:	000c      	movs	r4, r1
 800918c:	001f      	movs	r7, r3
 800918e:	9203      	str	r2, [sp, #12]
 8009190:	2800      	cmp	r0, #0
 8009192:	d004      	beq.n	800919e <_vfiprintf_r+0x1a>
 8009194:	6983      	ldr	r3, [r0, #24]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d101      	bne.n	800919e <_vfiprintf_r+0x1a>
 800919a:	f000 fb3f 	bl	800981c <__sinit>
 800919e:	4b8e      	ldr	r3, [pc, #568]	; (80093d8 <_vfiprintf_r+0x254>)
 80091a0:	429c      	cmp	r4, r3
 80091a2:	d11c      	bne.n	80091de <_vfiprintf_r+0x5a>
 80091a4:	6874      	ldr	r4, [r6, #4]
 80091a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80091a8:	07db      	lsls	r3, r3, #31
 80091aa:	d405      	bmi.n	80091b8 <_vfiprintf_r+0x34>
 80091ac:	89a3      	ldrh	r3, [r4, #12]
 80091ae:	059b      	lsls	r3, r3, #22
 80091b0:	d402      	bmi.n	80091b8 <_vfiprintf_r+0x34>
 80091b2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80091b4:	f000 fbd3 	bl	800995e <__retarget_lock_acquire_recursive>
 80091b8:	89a3      	ldrh	r3, [r4, #12]
 80091ba:	071b      	lsls	r3, r3, #28
 80091bc:	d502      	bpl.n	80091c4 <_vfiprintf_r+0x40>
 80091be:	6923      	ldr	r3, [r4, #16]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d11d      	bne.n	8009200 <_vfiprintf_r+0x7c>
 80091c4:	0021      	movs	r1, r4
 80091c6:	0030      	movs	r0, r6
 80091c8:	f000 f97a 	bl	80094c0 <__swsetup_r>
 80091cc:	2800      	cmp	r0, #0
 80091ce:	d017      	beq.n	8009200 <_vfiprintf_r+0x7c>
 80091d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80091d2:	07db      	lsls	r3, r3, #31
 80091d4:	d50d      	bpl.n	80091f2 <_vfiprintf_r+0x6e>
 80091d6:	2001      	movs	r0, #1
 80091d8:	4240      	negs	r0, r0
 80091da:	b021      	add	sp, #132	; 0x84
 80091dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80091de:	4b7f      	ldr	r3, [pc, #508]	; (80093dc <_vfiprintf_r+0x258>)
 80091e0:	429c      	cmp	r4, r3
 80091e2:	d101      	bne.n	80091e8 <_vfiprintf_r+0x64>
 80091e4:	68b4      	ldr	r4, [r6, #8]
 80091e6:	e7de      	b.n	80091a6 <_vfiprintf_r+0x22>
 80091e8:	4b7d      	ldr	r3, [pc, #500]	; (80093e0 <_vfiprintf_r+0x25c>)
 80091ea:	429c      	cmp	r4, r3
 80091ec:	d1db      	bne.n	80091a6 <_vfiprintf_r+0x22>
 80091ee:	68f4      	ldr	r4, [r6, #12]
 80091f0:	e7d9      	b.n	80091a6 <_vfiprintf_r+0x22>
 80091f2:	89a3      	ldrh	r3, [r4, #12]
 80091f4:	059b      	lsls	r3, r3, #22
 80091f6:	d4ee      	bmi.n	80091d6 <_vfiprintf_r+0x52>
 80091f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80091fa:	f000 fbb1 	bl	8009960 <__retarget_lock_release_recursive>
 80091fe:	e7ea      	b.n	80091d6 <_vfiprintf_r+0x52>
 8009200:	2300      	movs	r3, #0
 8009202:	ad08      	add	r5, sp, #32
 8009204:	616b      	str	r3, [r5, #20]
 8009206:	3320      	adds	r3, #32
 8009208:	766b      	strb	r3, [r5, #25]
 800920a:	3310      	adds	r3, #16
 800920c:	76ab      	strb	r3, [r5, #26]
 800920e:	9707      	str	r7, [sp, #28]
 8009210:	9f03      	ldr	r7, [sp, #12]
 8009212:	783b      	ldrb	r3, [r7, #0]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d001      	beq.n	800921c <_vfiprintf_r+0x98>
 8009218:	2b25      	cmp	r3, #37	; 0x25
 800921a:	d14e      	bne.n	80092ba <_vfiprintf_r+0x136>
 800921c:	9b03      	ldr	r3, [sp, #12]
 800921e:	1afb      	subs	r3, r7, r3
 8009220:	9305      	str	r3, [sp, #20]
 8009222:	9b03      	ldr	r3, [sp, #12]
 8009224:	429f      	cmp	r7, r3
 8009226:	d00d      	beq.n	8009244 <_vfiprintf_r+0xc0>
 8009228:	9b05      	ldr	r3, [sp, #20]
 800922a:	0021      	movs	r1, r4
 800922c:	0030      	movs	r0, r6
 800922e:	9a03      	ldr	r2, [sp, #12]
 8009230:	f7ff ff96 	bl	8009160 <__sfputs_r>
 8009234:	1c43      	adds	r3, r0, #1
 8009236:	d100      	bne.n	800923a <_vfiprintf_r+0xb6>
 8009238:	e0b5      	b.n	80093a6 <_vfiprintf_r+0x222>
 800923a:	696a      	ldr	r2, [r5, #20]
 800923c:	9b05      	ldr	r3, [sp, #20]
 800923e:	4694      	mov	ip, r2
 8009240:	4463      	add	r3, ip
 8009242:	616b      	str	r3, [r5, #20]
 8009244:	783b      	ldrb	r3, [r7, #0]
 8009246:	2b00      	cmp	r3, #0
 8009248:	d100      	bne.n	800924c <_vfiprintf_r+0xc8>
 800924a:	e0ac      	b.n	80093a6 <_vfiprintf_r+0x222>
 800924c:	2201      	movs	r2, #1
 800924e:	1c7b      	adds	r3, r7, #1
 8009250:	9303      	str	r3, [sp, #12]
 8009252:	2300      	movs	r3, #0
 8009254:	4252      	negs	r2, r2
 8009256:	606a      	str	r2, [r5, #4]
 8009258:	a904      	add	r1, sp, #16
 800925a:	3254      	adds	r2, #84	; 0x54
 800925c:	1852      	adds	r2, r2, r1
 800925e:	602b      	str	r3, [r5, #0]
 8009260:	60eb      	str	r3, [r5, #12]
 8009262:	60ab      	str	r3, [r5, #8]
 8009264:	7013      	strb	r3, [r2, #0]
 8009266:	65ab      	str	r3, [r5, #88]	; 0x58
 8009268:	9b03      	ldr	r3, [sp, #12]
 800926a:	2205      	movs	r2, #5
 800926c:	7819      	ldrb	r1, [r3, #0]
 800926e:	485d      	ldr	r0, [pc, #372]	; (80093e4 <_vfiprintf_r+0x260>)
 8009270:	f7ff f89c 	bl	80083ac <memchr>
 8009274:	9b03      	ldr	r3, [sp, #12]
 8009276:	1c5f      	adds	r7, r3, #1
 8009278:	2800      	cmp	r0, #0
 800927a:	d120      	bne.n	80092be <_vfiprintf_r+0x13a>
 800927c:	682a      	ldr	r2, [r5, #0]
 800927e:	06d3      	lsls	r3, r2, #27
 8009280:	d504      	bpl.n	800928c <_vfiprintf_r+0x108>
 8009282:	2353      	movs	r3, #83	; 0x53
 8009284:	a904      	add	r1, sp, #16
 8009286:	185b      	adds	r3, r3, r1
 8009288:	2120      	movs	r1, #32
 800928a:	7019      	strb	r1, [r3, #0]
 800928c:	0713      	lsls	r3, r2, #28
 800928e:	d504      	bpl.n	800929a <_vfiprintf_r+0x116>
 8009290:	2353      	movs	r3, #83	; 0x53
 8009292:	a904      	add	r1, sp, #16
 8009294:	185b      	adds	r3, r3, r1
 8009296:	212b      	movs	r1, #43	; 0x2b
 8009298:	7019      	strb	r1, [r3, #0]
 800929a:	9b03      	ldr	r3, [sp, #12]
 800929c:	781b      	ldrb	r3, [r3, #0]
 800929e:	2b2a      	cmp	r3, #42	; 0x2a
 80092a0:	d016      	beq.n	80092d0 <_vfiprintf_r+0x14c>
 80092a2:	2100      	movs	r1, #0
 80092a4:	68eb      	ldr	r3, [r5, #12]
 80092a6:	9f03      	ldr	r7, [sp, #12]
 80092a8:	783a      	ldrb	r2, [r7, #0]
 80092aa:	1c78      	adds	r0, r7, #1
 80092ac:	3a30      	subs	r2, #48	; 0x30
 80092ae:	4684      	mov	ip, r0
 80092b0:	2a09      	cmp	r2, #9
 80092b2:	d94f      	bls.n	8009354 <_vfiprintf_r+0x1d0>
 80092b4:	2900      	cmp	r1, #0
 80092b6:	d111      	bne.n	80092dc <_vfiprintf_r+0x158>
 80092b8:	e017      	b.n	80092ea <_vfiprintf_r+0x166>
 80092ba:	3701      	adds	r7, #1
 80092bc:	e7a9      	b.n	8009212 <_vfiprintf_r+0x8e>
 80092be:	4b49      	ldr	r3, [pc, #292]	; (80093e4 <_vfiprintf_r+0x260>)
 80092c0:	682a      	ldr	r2, [r5, #0]
 80092c2:	1ac0      	subs	r0, r0, r3
 80092c4:	2301      	movs	r3, #1
 80092c6:	4083      	lsls	r3, r0
 80092c8:	4313      	orrs	r3, r2
 80092ca:	602b      	str	r3, [r5, #0]
 80092cc:	9703      	str	r7, [sp, #12]
 80092ce:	e7cb      	b.n	8009268 <_vfiprintf_r+0xe4>
 80092d0:	9b07      	ldr	r3, [sp, #28]
 80092d2:	1d19      	adds	r1, r3, #4
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	9107      	str	r1, [sp, #28]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	db01      	blt.n	80092e0 <_vfiprintf_r+0x15c>
 80092dc:	930b      	str	r3, [sp, #44]	; 0x2c
 80092de:	e004      	b.n	80092ea <_vfiprintf_r+0x166>
 80092e0:	425b      	negs	r3, r3
 80092e2:	60eb      	str	r3, [r5, #12]
 80092e4:	2302      	movs	r3, #2
 80092e6:	4313      	orrs	r3, r2
 80092e8:	602b      	str	r3, [r5, #0]
 80092ea:	783b      	ldrb	r3, [r7, #0]
 80092ec:	2b2e      	cmp	r3, #46	; 0x2e
 80092ee:	d10a      	bne.n	8009306 <_vfiprintf_r+0x182>
 80092f0:	787b      	ldrb	r3, [r7, #1]
 80092f2:	2b2a      	cmp	r3, #42	; 0x2a
 80092f4:	d137      	bne.n	8009366 <_vfiprintf_r+0x1e2>
 80092f6:	9b07      	ldr	r3, [sp, #28]
 80092f8:	3702      	adds	r7, #2
 80092fa:	1d1a      	adds	r2, r3, #4
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	9207      	str	r2, [sp, #28]
 8009300:	2b00      	cmp	r3, #0
 8009302:	db2d      	blt.n	8009360 <_vfiprintf_r+0x1dc>
 8009304:	9309      	str	r3, [sp, #36]	; 0x24
 8009306:	2203      	movs	r2, #3
 8009308:	7839      	ldrb	r1, [r7, #0]
 800930a:	4837      	ldr	r0, [pc, #220]	; (80093e8 <_vfiprintf_r+0x264>)
 800930c:	f7ff f84e 	bl	80083ac <memchr>
 8009310:	2800      	cmp	r0, #0
 8009312:	d007      	beq.n	8009324 <_vfiprintf_r+0x1a0>
 8009314:	4b34      	ldr	r3, [pc, #208]	; (80093e8 <_vfiprintf_r+0x264>)
 8009316:	682a      	ldr	r2, [r5, #0]
 8009318:	1ac0      	subs	r0, r0, r3
 800931a:	2340      	movs	r3, #64	; 0x40
 800931c:	4083      	lsls	r3, r0
 800931e:	4313      	orrs	r3, r2
 8009320:	3701      	adds	r7, #1
 8009322:	602b      	str	r3, [r5, #0]
 8009324:	7839      	ldrb	r1, [r7, #0]
 8009326:	1c7b      	adds	r3, r7, #1
 8009328:	2206      	movs	r2, #6
 800932a:	4830      	ldr	r0, [pc, #192]	; (80093ec <_vfiprintf_r+0x268>)
 800932c:	9303      	str	r3, [sp, #12]
 800932e:	7629      	strb	r1, [r5, #24]
 8009330:	f7ff f83c 	bl	80083ac <memchr>
 8009334:	2800      	cmp	r0, #0
 8009336:	d045      	beq.n	80093c4 <_vfiprintf_r+0x240>
 8009338:	4b2d      	ldr	r3, [pc, #180]	; (80093f0 <_vfiprintf_r+0x26c>)
 800933a:	2b00      	cmp	r3, #0
 800933c:	d127      	bne.n	800938e <_vfiprintf_r+0x20a>
 800933e:	2207      	movs	r2, #7
 8009340:	9b07      	ldr	r3, [sp, #28]
 8009342:	3307      	adds	r3, #7
 8009344:	4393      	bics	r3, r2
 8009346:	3308      	adds	r3, #8
 8009348:	9307      	str	r3, [sp, #28]
 800934a:	696b      	ldr	r3, [r5, #20]
 800934c:	9a04      	ldr	r2, [sp, #16]
 800934e:	189b      	adds	r3, r3, r2
 8009350:	616b      	str	r3, [r5, #20]
 8009352:	e75d      	b.n	8009210 <_vfiprintf_r+0x8c>
 8009354:	210a      	movs	r1, #10
 8009356:	434b      	muls	r3, r1
 8009358:	4667      	mov	r7, ip
 800935a:	189b      	adds	r3, r3, r2
 800935c:	3909      	subs	r1, #9
 800935e:	e7a3      	b.n	80092a8 <_vfiprintf_r+0x124>
 8009360:	2301      	movs	r3, #1
 8009362:	425b      	negs	r3, r3
 8009364:	e7ce      	b.n	8009304 <_vfiprintf_r+0x180>
 8009366:	2300      	movs	r3, #0
 8009368:	001a      	movs	r2, r3
 800936a:	3701      	adds	r7, #1
 800936c:	606b      	str	r3, [r5, #4]
 800936e:	7839      	ldrb	r1, [r7, #0]
 8009370:	1c78      	adds	r0, r7, #1
 8009372:	3930      	subs	r1, #48	; 0x30
 8009374:	4684      	mov	ip, r0
 8009376:	2909      	cmp	r1, #9
 8009378:	d903      	bls.n	8009382 <_vfiprintf_r+0x1fe>
 800937a:	2b00      	cmp	r3, #0
 800937c:	d0c3      	beq.n	8009306 <_vfiprintf_r+0x182>
 800937e:	9209      	str	r2, [sp, #36]	; 0x24
 8009380:	e7c1      	b.n	8009306 <_vfiprintf_r+0x182>
 8009382:	230a      	movs	r3, #10
 8009384:	435a      	muls	r2, r3
 8009386:	4667      	mov	r7, ip
 8009388:	1852      	adds	r2, r2, r1
 800938a:	3b09      	subs	r3, #9
 800938c:	e7ef      	b.n	800936e <_vfiprintf_r+0x1ea>
 800938e:	ab07      	add	r3, sp, #28
 8009390:	9300      	str	r3, [sp, #0]
 8009392:	0022      	movs	r2, r4
 8009394:	0029      	movs	r1, r5
 8009396:	0030      	movs	r0, r6
 8009398:	4b16      	ldr	r3, [pc, #88]	; (80093f4 <_vfiprintf_r+0x270>)
 800939a:	f7fd fd6f 	bl	8006e7c <_printf_float>
 800939e:	9004      	str	r0, [sp, #16]
 80093a0:	9b04      	ldr	r3, [sp, #16]
 80093a2:	3301      	adds	r3, #1
 80093a4:	d1d1      	bne.n	800934a <_vfiprintf_r+0x1c6>
 80093a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80093a8:	07db      	lsls	r3, r3, #31
 80093aa:	d405      	bmi.n	80093b8 <_vfiprintf_r+0x234>
 80093ac:	89a3      	ldrh	r3, [r4, #12]
 80093ae:	059b      	lsls	r3, r3, #22
 80093b0:	d402      	bmi.n	80093b8 <_vfiprintf_r+0x234>
 80093b2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80093b4:	f000 fad4 	bl	8009960 <__retarget_lock_release_recursive>
 80093b8:	89a3      	ldrh	r3, [r4, #12]
 80093ba:	065b      	lsls	r3, r3, #25
 80093bc:	d500      	bpl.n	80093c0 <_vfiprintf_r+0x23c>
 80093be:	e70a      	b.n	80091d6 <_vfiprintf_r+0x52>
 80093c0:	980d      	ldr	r0, [sp, #52]	; 0x34
 80093c2:	e70a      	b.n	80091da <_vfiprintf_r+0x56>
 80093c4:	ab07      	add	r3, sp, #28
 80093c6:	9300      	str	r3, [sp, #0]
 80093c8:	0022      	movs	r2, r4
 80093ca:	0029      	movs	r1, r5
 80093cc:	0030      	movs	r0, r6
 80093ce:	4b09      	ldr	r3, [pc, #36]	; (80093f4 <_vfiprintf_r+0x270>)
 80093d0:	f7fe f806 	bl	80073e0 <_printf_i>
 80093d4:	e7e3      	b.n	800939e <_vfiprintf_r+0x21a>
 80093d6:	46c0      	nop			; (mov r8, r8)
 80093d8:	0800a214 	.word	0x0800a214
 80093dc:	0800a234 	.word	0x0800a234
 80093e0:	0800a1f4 	.word	0x0800a1f4
 80093e4:	0800a09c 	.word	0x0800a09c
 80093e8:	0800a0a2 	.word	0x0800a0a2
 80093ec:	0800a0a6 	.word	0x0800a0a6
 80093f0:	08006e7d 	.word	0x08006e7d
 80093f4:	08009161 	.word	0x08009161

080093f8 <__swbuf_r>:
 80093f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093fa:	0005      	movs	r5, r0
 80093fc:	000e      	movs	r6, r1
 80093fe:	0014      	movs	r4, r2
 8009400:	2800      	cmp	r0, #0
 8009402:	d004      	beq.n	800940e <__swbuf_r+0x16>
 8009404:	6983      	ldr	r3, [r0, #24]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d101      	bne.n	800940e <__swbuf_r+0x16>
 800940a:	f000 fa07 	bl	800981c <__sinit>
 800940e:	4b22      	ldr	r3, [pc, #136]	; (8009498 <__swbuf_r+0xa0>)
 8009410:	429c      	cmp	r4, r3
 8009412:	d12e      	bne.n	8009472 <__swbuf_r+0x7a>
 8009414:	686c      	ldr	r4, [r5, #4]
 8009416:	69a3      	ldr	r3, [r4, #24]
 8009418:	60a3      	str	r3, [r4, #8]
 800941a:	89a3      	ldrh	r3, [r4, #12]
 800941c:	071b      	lsls	r3, r3, #28
 800941e:	d532      	bpl.n	8009486 <__swbuf_r+0x8e>
 8009420:	6923      	ldr	r3, [r4, #16]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d02f      	beq.n	8009486 <__swbuf_r+0x8e>
 8009426:	6823      	ldr	r3, [r4, #0]
 8009428:	6922      	ldr	r2, [r4, #16]
 800942a:	b2f7      	uxtb	r7, r6
 800942c:	1a98      	subs	r0, r3, r2
 800942e:	6963      	ldr	r3, [r4, #20]
 8009430:	b2f6      	uxtb	r6, r6
 8009432:	4283      	cmp	r3, r0
 8009434:	dc05      	bgt.n	8009442 <__swbuf_r+0x4a>
 8009436:	0021      	movs	r1, r4
 8009438:	0028      	movs	r0, r5
 800943a:	f000 f94d 	bl	80096d8 <_fflush_r>
 800943e:	2800      	cmp	r0, #0
 8009440:	d127      	bne.n	8009492 <__swbuf_r+0x9a>
 8009442:	68a3      	ldr	r3, [r4, #8]
 8009444:	3001      	adds	r0, #1
 8009446:	3b01      	subs	r3, #1
 8009448:	60a3      	str	r3, [r4, #8]
 800944a:	6823      	ldr	r3, [r4, #0]
 800944c:	1c5a      	adds	r2, r3, #1
 800944e:	6022      	str	r2, [r4, #0]
 8009450:	701f      	strb	r7, [r3, #0]
 8009452:	6963      	ldr	r3, [r4, #20]
 8009454:	4283      	cmp	r3, r0
 8009456:	d004      	beq.n	8009462 <__swbuf_r+0x6a>
 8009458:	89a3      	ldrh	r3, [r4, #12]
 800945a:	07db      	lsls	r3, r3, #31
 800945c:	d507      	bpl.n	800946e <__swbuf_r+0x76>
 800945e:	2e0a      	cmp	r6, #10
 8009460:	d105      	bne.n	800946e <__swbuf_r+0x76>
 8009462:	0021      	movs	r1, r4
 8009464:	0028      	movs	r0, r5
 8009466:	f000 f937 	bl	80096d8 <_fflush_r>
 800946a:	2800      	cmp	r0, #0
 800946c:	d111      	bne.n	8009492 <__swbuf_r+0x9a>
 800946e:	0030      	movs	r0, r6
 8009470:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009472:	4b0a      	ldr	r3, [pc, #40]	; (800949c <__swbuf_r+0xa4>)
 8009474:	429c      	cmp	r4, r3
 8009476:	d101      	bne.n	800947c <__swbuf_r+0x84>
 8009478:	68ac      	ldr	r4, [r5, #8]
 800947a:	e7cc      	b.n	8009416 <__swbuf_r+0x1e>
 800947c:	4b08      	ldr	r3, [pc, #32]	; (80094a0 <__swbuf_r+0xa8>)
 800947e:	429c      	cmp	r4, r3
 8009480:	d1c9      	bne.n	8009416 <__swbuf_r+0x1e>
 8009482:	68ec      	ldr	r4, [r5, #12]
 8009484:	e7c7      	b.n	8009416 <__swbuf_r+0x1e>
 8009486:	0021      	movs	r1, r4
 8009488:	0028      	movs	r0, r5
 800948a:	f000 f819 	bl	80094c0 <__swsetup_r>
 800948e:	2800      	cmp	r0, #0
 8009490:	d0c9      	beq.n	8009426 <__swbuf_r+0x2e>
 8009492:	2601      	movs	r6, #1
 8009494:	4276      	negs	r6, r6
 8009496:	e7ea      	b.n	800946e <__swbuf_r+0x76>
 8009498:	0800a214 	.word	0x0800a214
 800949c:	0800a234 	.word	0x0800a234
 80094a0:	0800a1f4 	.word	0x0800a1f4

080094a4 <__ascii_wctomb>:
 80094a4:	0003      	movs	r3, r0
 80094a6:	1e08      	subs	r0, r1, #0
 80094a8:	d005      	beq.n	80094b6 <__ascii_wctomb+0x12>
 80094aa:	2aff      	cmp	r2, #255	; 0xff
 80094ac:	d904      	bls.n	80094b8 <__ascii_wctomb+0x14>
 80094ae:	228a      	movs	r2, #138	; 0x8a
 80094b0:	2001      	movs	r0, #1
 80094b2:	601a      	str	r2, [r3, #0]
 80094b4:	4240      	negs	r0, r0
 80094b6:	4770      	bx	lr
 80094b8:	2001      	movs	r0, #1
 80094ba:	700a      	strb	r2, [r1, #0]
 80094bc:	e7fb      	b.n	80094b6 <__ascii_wctomb+0x12>
	...

080094c0 <__swsetup_r>:
 80094c0:	4b37      	ldr	r3, [pc, #220]	; (80095a0 <__swsetup_r+0xe0>)
 80094c2:	b570      	push	{r4, r5, r6, lr}
 80094c4:	681d      	ldr	r5, [r3, #0]
 80094c6:	0006      	movs	r6, r0
 80094c8:	000c      	movs	r4, r1
 80094ca:	2d00      	cmp	r5, #0
 80094cc:	d005      	beq.n	80094da <__swsetup_r+0x1a>
 80094ce:	69ab      	ldr	r3, [r5, #24]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d102      	bne.n	80094da <__swsetup_r+0x1a>
 80094d4:	0028      	movs	r0, r5
 80094d6:	f000 f9a1 	bl	800981c <__sinit>
 80094da:	4b32      	ldr	r3, [pc, #200]	; (80095a4 <__swsetup_r+0xe4>)
 80094dc:	429c      	cmp	r4, r3
 80094de:	d10f      	bne.n	8009500 <__swsetup_r+0x40>
 80094e0:	686c      	ldr	r4, [r5, #4]
 80094e2:	230c      	movs	r3, #12
 80094e4:	5ee2      	ldrsh	r2, [r4, r3]
 80094e6:	b293      	uxth	r3, r2
 80094e8:	0711      	lsls	r1, r2, #28
 80094ea:	d42d      	bmi.n	8009548 <__swsetup_r+0x88>
 80094ec:	06d9      	lsls	r1, r3, #27
 80094ee:	d411      	bmi.n	8009514 <__swsetup_r+0x54>
 80094f0:	2309      	movs	r3, #9
 80094f2:	2001      	movs	r0, #1
 80094f4:	6033      	str	r3, [r6, #0]
 80094f6:	3337      	adds	r3, #55	; 0x37
 80094f8:	4313      	orrs	r3, r2
 80094fa:	81a3      	strh	r3, [r4, #12]
 80094fc:	4240      	negs	r0, r0
 80094fe:	bd70      	pop	{r4, r5, r6, pc}
 8009500:	4b29      	ldr	r3, [pc, #164]	; (80095a8 <__swsetup_r+0xe8>)
 8009502:	429c      	cmp	r4, r3
 8009504:	d101      	bne.n	800950a <__swsetup_r+0x4a>
 8009506:	68ac      	ldr	r4, [r5, #8]
 8009508:	e7eb      	b.n	80094e2 <__swsetup_r+0x22>
 800950a:	4b28      	ldr	r3, [pc, #160]	; (80095ac <__swsetup_r+0xec>)
 800950c:	429c      	cmp	r4, r3
 800950e:	d1e8      	bne.n	80094e2 <__swsetup_r+0x22>
 8009510:	68ec      	ldr	r4, [r5, #12]
 8009512:	e7e6      	b.n	80094e2 <__swsetup_r+0x22>
 8009514:	075b      	lsls	r3, r3, #29
 8009516:	d513      	bpl.n	8009540 <__swsetup_r+0x80>
 8009518:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800951a:	2900      	cmp	r1, #0
 800951c:	d008      	beq.n	8009530 <__swsetup_r+0x70>
 800951e:	0023      	movs	r3, r4
 8009520:	3344      	adds	r3, #68	; 0x44
 8009522:	4299      	cmp	r1, r3
 8009524:	d002      	beq.n	800952c <__swsetup_r+0x6c>
 8009526:	0030      	movs	r0, r6
 8009528:	f7ff fb1c 	bl	8008b64 <_free_r>
 800952c:	2300      	movs	r3, #0
 800952e:	6363      	str	r3, [r4, #52]	; 0x34
 8009530:	2224      	movs	r2, #36	; 0x24
 8009532:	89a3      	ldrh	r3, [r4, #12]
 8009534:	4393      	bics	r3, r2
 8009536:	81a3      	strh	r3, [r4, #12]
 8009538:	2300      	movs	r3, #0
 800953a:	6063      	str	r3, [r4, #4]
 800953c:	6923      	ldr	r3, [r4, #16]
 800953e:	6023      	str	r3, [r4, #0]
 8009540:	2308      	movs	r3, #8
 8009542:	89a2      	ldrh	r2, [r4, #12]
 8009544:	4313      	orrs	r3, r2
 8009546:	81a3      	strh	r3, [r4, #12]
 8009548:	6923      	ldr	r3, [r4, #16]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d10b      	bne.n	8009566 <__swsetup_r+0xa6>
 800954e:	21a0      	movs	r1, #160	; 0xa0
 8009550:	2280      	movs	r2, #128	; 0x80
 8009552:	89a3      	ldrh	r3, [r4, #12]
 8009554:	0089      	lsls	r1, r1, #2
 8009556:	0092      	lsls	r2, r2, #2
 8009558:	400b      	ands	r3, r1
 800955a:	4293      	cmp	r3, r2
 800955c:	d003      	beq.n	8009566 <__swsetup_r+0xa6>
 800955e:	0021      	movs	r1, r4
 8009560:	0030      	movs	r0, r6
 8009562:	f000 fa27 	bl	80099b4 <__smakebuf_r>
 8009566:	220c      	movs	r2, #12
 8009568:	5ea3      	ldrsh	r3, [r4, r2]
 800956a:	2001      	movs	r0, #1
 800956c:	001a      	movs	r2, r3
 800956e:	b299      	uxth	r1, r3
 8009570:	4002      	ands	r2, r0
 8009572:	4203      	tst	r3, r0
 8009574:	d00f      	beq.n	8009596 <__swsetup_r+0xd6>
 8009576:	2200      	movs	r2, #0
 8009578:	60a2      	str	r2, [r4, #8]
 800957a:	6962      	ldr	r2, [r4, #20]
 800957c:	4252      	negs	r2, r2
 800957e:	61a2      	str	r2, [r4, #24]
 8009580:	2000      	movs	r0, #0
 8009582:	6922      	ldr	r2, [r4, #16]
 8009584:	4282      	cmp	r2, r0
 8009586:	d1ba      	bne.n	80094fe <__swsetup_r+0x3e>
 8009588:	060a      	lsls	r2, r1, #24
 800958a:	d5b8      	bpl.n	80094fe <__swsetup_r+0x3e>
 800958c:	2240      	movs	r2, #64	; 0x40
 800958e:	4313      	orrs	r3, r2
 8009590:	81a3      	strh	r3, [r4, #12]
 8009592:	3801      	subs	r0, #1
 8009594:	e7b3      	b.n	80094fe <__swsetup_r+0x3e>
 8009596:	0788      	lsls	r0, r1, #30
 8009598:	d400      	bmi.n	800959c <__swsetup_r+0xdc>
 800959a:	6962      	ldr	r2, [r4, #20]
 800959c:	60a2      	str	r2, [r4, #8]
 800959e:	e7ef      	b.n	8009580 <__swsetup_r+0xc0>
 80095a0:	2000000c 	.word	0x2000000c
 80095a4:	0800a214 	.word	0x0800a214
 80095a8:	0800a234 	.word	0x0800a234
 80095ac:	0800a1f4 	.word	0x0800a1f4

080095b0 <abort>:
 80095b0:	2006      	movs	r0, #6
 80095b2:	b510      	push	{r4, lr}
 80095b4:	f000 fa74 	bl	8009aa0 <raise>
 80095b8:	2001      	movs	r0, #1
 80095ba:	f7f9 fd1a 	bl	8002ff2 <_exit>
	...

080095c0 <__sflush_r>:
 80095c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80095c2:	898b      	ldrh	r3, [r1, #12]
 80095c4:	0005      	movs	r5, r0
 80095c6:	000c      	movs	r4, r1
 80095c8:	071a      	lsls	r2, r3, #28
 80095ca:	d45f      	bmi.n	800968c <__sflush_r+0xcc>
 80095cc:	684a      	ldr	r2, [r1, #4]
 80095ce:	2a00      	cmp	r2, #0
 80095d0:	dc04      	bgt.n	80095dc <__sflush_r+0x1c>
 80095d2:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80095d4:	2a00      	cmp	r2, #0
 80095d6:	dc01      	bgt.n	80095dc <__sflush_r+0x1c>
 80095d8:	2000      	movs	r0, #0
 80095da:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80095dc:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80095de:	2f00      	cmp	r7, #0
 80095e0:	d0fa      	beq.n	80095d8 <__sflush_r+0x18>
 80095e2:	2200      	movs	r2, #0
 80095e4:	2180      	movs	r1, #128	; 0x80
 80095e6:	682e      	ldr	r6, [r5, #0]
 80095e8:	602a      	str	r2, [r5, #0]
 80095ea:	001a      	movs	r2, r3
 80095ec:	0149      	lsls	r1, r1, #5
 80095ee:	400a      	ands	r2, r1
 80095f0:	420b      	tst	r3, r1
 80095f2:	d034      	beq.n	800965e <__sflush_r+0x9e>
 80095f4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80095f6:	89a3      	ldrh	r3, [r4, #12]
 80095f8:	075b      	lsls	r3, r3, #29
 80095fa:	d506      	bpl.n	800960a <__sflush_r+0x4a>
 80095fc:	6863      	ldr	r3, [r4, #4]
 80095fe:	1ac0      	subs	r0, r0, r3
 8009600:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009602:	2b00      	cmp	r3, #0
 8009604:	d001      	beq.n	800960a <__sflush_r+0x4a>
 8009606:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009608:	1ac0      	subs	r0, r0, r3
 800960a:	0002      	movs	r2, r0
 800960c:	6a21      	ldr	r1, [r4, #32]
 800960e:	2300      	movs	r3, #0
 8009610:	0028      	movs	r0, r5
 8009612:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8009614:	47b8      	blx	r7
 8009616:	89a1      	ldrh	r1, [r4, #12]
 8009618:	1c43      	adds	r3, r0, #1
 800961a:	d106      	bne.n	800962a <__sflush_r+0x6a>
 800961c:	682b      	ldr	r3, [r5, #0]
 800961e:	2b1d      	cmp	r3, #29
 8009620:	d831      	bhi.n	8009686 <__sflush_r+0xc6>
 8009622:	4a2c      	ldr	r2, [pc, #176]	; (80096d4 <__sflush_r+0x114>)
 8009624:	40da      	lsrs	r2, r3
 8009626:	07d3      	lsls	r3, r2, #31
 8009628:	d52d      	bpl.n	8009686 <__sflush_r+0xc6>
 800962a:	2300      	movs	r3, #0
 800962c:	6063      	str	r3, [r4, #4]
 800962e:	6923      	ldr	r3, [r4, #16]
 8009630:	6023      	str	r3, [r4, #0]
 8009632:	04cb      	lsls	r3, r1, #19
 8009634:	d505      	bpl.n	8009642 <__sflush_r+0x82>
 8009636:	1c43      	adds	r3, r0, #1
 8009638:	d102      	bne.n	8009640 <__sflush_r+0x80>
 800963a:	682b      	ldr	r3, [r5, #0]
 800963c:	2b00      	cmp	r3, #0
 800963e:	d100      	bne.n	8009642 <__sflush_r+0x82>
 8009640:	6560      	str	r0, [r4, #84]	; 0x54
 8009642:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009644:	602e      	str	r6, [r5, #0]
 8009646:	2900      	cmp	r1, #0
 8009648:	d0c6      	beq.n	80095d8 <__sflush_r+0x18>
 800964a:	0023      	movs	r3, r4
 800964c:	3344      	adds	r3, #68	; 0x44
 800964e:	4299      	cmp	r1, r3
 8009650:	d002      	beq.n	8009658 <__sflush_r+0x98>
 8009652:	0028      	movs	r0, r5
 8009654:	f7ff fa86 	bl	8008b64 <_free_r>
 8009658:	2000      	movs	r0, #0
 800965a:	6360      	str	r0, [r4, #52]	; 0x34
 800965c:	e7bd      	b.n	80095da <__sflush_r+0x1a>
 800965e:	2301      	movs	r3, #1
 8009660:	0028      	movs	r0, r5
 8009662:	6a21      	ldr	r1, [r4, #32]
 8009664:	47b8      	blx	r7
 8009666:	1c43      	adds	r3, r0, #1
 8009668:	d1c5      	bne.n	80095f6 <__sflush_r+0x36>
 800966a:	682b      	ldr	r3, [r5, #0]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d0c2      	beq.n	80095f6 <__sflush_r+0x36>
 8009670:	2b1d      	cmp	r3, #29
 8009672:	d001      	beq.n	8009678 <__sflush_r+0xb8>
 8009674:	2b16      	cmp	r3, #22
 8009676:	d101      	bne.n	800967c <__sflush_r+0xbc>
 8009678:	602e      	str	r6, [r5, #0]
 800967a:	e7ad      	b.n	80095d8 <__sflush_r+0x18>
 800967c:	2340      	movs	r3, #64	; 0x40
 800967e:	89a2      	ldrh	r2, [r4, #12]
 8009680:	4313      	orrs	r3, r2
 8009682:	81a3      	strh	r3, [r4, #12]
 8009684:	e7a9      	b.n	80095da <__sflush_r+0x1a>
 8009686:	2340      	movs	r3, #64	; 0x40
 8009688:	430b      	orrs	r3, r1
 800968a:	e7fa      	b.n	8009682 <__sflush_r+0xc2>
 800968c:	690f      	ldr	r7, [r1, #16]
 800968e:	2f00      	cmp	r7, #0
 8009690:	d0a2      	beq.n	80095d8 <__sflush_r+0x18>
 8009692:	680a      	ldr	r2, [r1, #0]
 8009694:	600f      	str	r7, [r1, #0]
 8009696:	1bd2      	subs	r2, r2, r7
 8009698:	9201      	str	r2, [sp, #4]
 800969a:	2200      	movs	r2, #0
 800969c:	079b      	lsls	r3, r3, #30
 800969e:	d100      	bne.n	80096a2 <__sflush_r+0xe2>
 80096a0:	694a      	ldr	r2, [r1, #20]
 80096a2:	60a2      	str	r2, [r4, #8]
 80096a4:	9b01      	ldr	r3, [sp, #4]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	dc00      	bgt.n	80096ac <__sflush_r+0xec>
 80096aa:	e795      	b.n	80095d8 <__sflush_r+0x18>
 80096ac:	003a      	movs	r2, r7
 80096ae:	0028      	movs	r0, r5
 80096b0:	9b01      	ldr	r3, [sp, #4]
 80096b2:	6a21      	ldr	r1, [r4, #32]
 80096b4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80096b6:	47b0      	blx	r6
 80096b8:	2800      	cmp	r0, #0
 80096ba:	dc06      	bgt.n	80096ca <__sflush_r+0x10a>
 80096bc:	2340      	movs	r3, #64	; 0x40
 80096be:	2001      	movs	r0, #1
 80096c0:	89a2      	ldrh	r2, [r4, #12]
 80096c2:	4240      	negs	r0, r0
 80096c4:	4313      	orrs	r3, r2
 80096c6:	81a3      	strh	r3, [r4, #12]
 80096c8:	e787      	b.n	80095da <__sflush_r+0x1a>
 80096ca:	9b01      	ldr	r3, [sp, #4]
 80096cc:	183f      	adds	r7, r7, r0
 80096ce:	1a1b      	subs	r3, r3, r0
 80096d0:	9301      	str	r3, [sp, #4]
 80096d2:	e7e7      	b.n	80096a4 <__sflush_r+0xe4>
 80096d4:	20400001 	.word	0x20400001

080096d8 <_fflush_r>:
 80096d8:	690b      	ldr	r3, [r1, #16]
 80096da:	b570      	push	{r4, r5, r6, lr}
 80096dc:	0005      	movs	r5, r0
 80096de:	000c      	movs	r4, r1
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d102      	bne.n	80096ea <_fflush_r+0x12>
 80096e4:	2500      	movs	r5, #0
 80096e6:	0028      	movs	r0, r5
 80096e8:	bd70      	pop	{r4, r5, r6, pc}
 80096ea:	2800      	cmp	r0, #0
 80096ec:	d004      	beq.n	80096f8 <_fflush_r+0x20>
 80096ee:	6983      	ldr	r3, [r0, #24]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d101      	bne.n	80096f8 <_fflush_r+0x20>
 80096f4:	f000 f892 	bl	800981c <__sinit>
 80096f8:	4b14      	ldr	r3, [pc, #80]	; (800974c <_fflush_r+0x74>)
 80096fa:	429c      	cmp	r4, r3
 80096fc:	d11b      	bne.n	8009736 <_fflush_r+0x5e>
 80096fe:	686c      	ldr	r4, [r5, #4]
 8009700:	220c      	movs	r2, #12
 8009702:	5ea3      	ldrsh	r3, [r4, r2]
 8009704:	2b00      	cmp	r3, #0
 8009706:	d0ed      	beq.n	80096e4 <_fflush_r+0xc>
 8009708:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800970a:	07d2      	lsls	r2, r2, #31
 800970c:	d404      	bmi.n	8009718 <_fflush_r+0x40>
 800970e:	059b      	lsls	r3, r3, #22
 8009710:	d402      	bmi.n	8009718 <_fflush_r+0x40>
 8009712:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009714:	f000 f923 	bl	800995e <__retarget_lock_acquire_recursive>
 8009718:	0028      	movs	r0, r5
 800971a:	0021      	movs	r1, r4
 800971c:	f7ff ff50 	bl	80095c0 <__sflush_r>
 8009720:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009722:	0005      	movs	r5, r0
 8009724:	07db      	lsls	r3, r3, #31
 8009726:	d4de      	bmi.n	80096e6 <_fflush_r+0xe>
 8009728:	89a3      	ldrh	r3, [r4, #12]
 800972a:	059b      	lsls	r3, r3, #22
 800972c:	d4db      	bmi.n	80096e6 <_fflush_r+0xe>
 800972e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009730:	f000 f916 	bl	8009960 <__retarget_lock_release_recursive>
 8009734:	e7d7      	b.n	80096e6 <_fflush_r+0xe>
 8009736:	4b06      	ldr	r3, [pc, #24]	; (8009750 <_fflush_r+0x78>)
 8009738:	429c      	cmp	r4, r3
 800973a:	d101      	bne.n	8009740 <_fflush_r+0x68>
 800973c:	68ac      	ldr	r4, [r5, #8]
 800973e:	e7df      	b.n	8009700 <_fflush_r+0x28>
 8009740:	4b04      	ldr	r3, [pc, #16]	; (8009754 <_fflush_r+0x7c>)
 8009742:	429c      	cmp	r4, r3
 8009744:	d1dc      	bne.n	8009700 <_fflush_r+0x28>
 8009746:	68ec      	ldr	r4, [r5, #12]
 8009748:	e7da      	b.n	8009700 <_fflush_r+0x28>
 800974a:	46c0      	nop			; (mov r8, r8)
 800974c:	0800a214 	.word	0x0800a214
 8009750:	0800a234 	.word	0x0800a234
 8009754:	0800a1f4 	.word	0x0800a1f4

08009758 <std>:
 8009758:	2300      	movs	r3, #0
 800975a:	b510      	push	{r4, lr}
 800975c:	0004      	movs	r4, r0
 800975e:	6003      	str	r3, [r0, #0]
 8009760:	6043      	str	r3, [r0, #4]
 8009762:	6083      	str	r3, [r0, #8]
 8009764:	8181      	strh	r1, [r0, #12]
 8009766:	6643      	str	r3, [r0, #100]	; 0x64
 8009768:	0019      	movs	r1, r3
 800976a:	81c2      	strh	r2, [r0, #14]
 800976c:	6103      	str	r3, [r0, #16]
 800976e:	6143      	str	r3, [r0, #20]
 8009770:	6183      	str	r3, [r0, #24]
 8009772:	2208      	movs	r2, #8
 8009774:	305c      	adds	r0, #92	; 0x5c
 8009776:	f7fd facf 	bl	8006d18 <memset>
 800977a:	4b05      	ldr	r3, [pc, #20]	; (8009790 <std+0x38>)
 800977c:	6224      	str	r4, [r4, #32]
 800977e:	6263      	str	r3, [r4, #36]	; 0x24
 8009780:	4b04      	ldr	r3, [pc, #16]	; (8009794 <std+0x3c>)
 8009782:	62a3      	str	r3, [r4, #40]	; 0x28
 8009784:	4b04      	ldr	r3, [pc, #16]	; (8009798 <std+0x40>)
 8009786:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009788:	4b04      	ldr	r3, [pc, #16]	; (800979c <std+0x44>)
 800978a:	6323      	str	r3, [r4, #48]	; 0x30
 800978c:	bd10      	pop	{r4, pc}
 800978e:	46c0      	nop			; (mov r8, r8)
 8009790:	08009ae1 	.word	0x08009ae1
 8009794:	08009b09 	.word	0x08009b09
 8009798:	08009b41 	.word	0x08009b41
 800979c:	08009b6d 	.word	0x08009b6d

080097a0 <_cleanup_r>:
 80097a0:	b510      	push	{r4, lr}
 80097a2:	4902      	ldr	r1, [pc, #8]	; (80097ac <_cleanup_r+0xc>)
 80097a4:	f000 f8ba 	bl	800991c <_fwalk_reent>
 80097a8:	bd10      	pop	{r4, pc}
 80097aa:	46c0      	nop			; (mov r8, r8)
 80097ac:	080096d9 	.word	0x080096d9

080097b0 <__sfmoreglue>:
 80097b0:	b570      	push	{r4, r5, r6, lr}
 80097b2:	2568      	movs	r5, #104	; 0x68
 80097b4:	1e4a      	subs	r2, r1, #1
 80097b6:	4355      	muls	r5, r2
 80097b8:	000e      	movs	r6, r1
 80097ba:	0029      	movs	r1, r5
 80097bc:	3174      	adds	r1, #116	; 0x74
 80097be:	f7ff fa3d 	bl	8008c3c <_malloc_r>
 80097c2:	1e04      	subs	r4, r0, #0
 80097c4:	d008      	beq.n	80097d8 <__sfmoreglue+0x28>
 80097c6:	2100      	movs	r1, #0
 80097c8:	002a      	movs	r2, r5
 80097ca:	6001      	str	r1, [r0, #0]
 80097cc:	6046      	str	r6, [r0, #4]
 80097ce:	300c      	adds	r0, #12
 80097d0:	60a0      	str	r0, [r4, #8]
 80097d2:	3268      	adds	r2, #104	; 0x68
 80097d4:	f7fd faa0 	bl	8006d18 <memset>
 80097d8:	0020      	movs	r0, r4
 80097da:	bd70      	pop	{r4, r5, r6, pc}

080097dc <__sfp_lock_acquire>:
 80097dc:	b510      	push	{r4, lr}
 80097de:	4802      	ldr	r0, [pc, #8]	; (80097e8 <__sfp_lock_acquire+0xc>)
 80097e0:	f000 f8bd 	bl	800995e <__retarget_lock_acquire_recursive>
 80097e4:	bd10      	pop	{r4, pc}
 80097e6:	46c0      	nop			; (mov r8, r8)
 80097e8:	200003f1 	.word	0x200003f1

080097ec <__sfp_lock_release>:
 80097ec:	b510      	push	{r4, lr}
 80097ee:	4802      	ldr	r0, [pc, #8]	; (80097f8 <__sfp_lock_release+0xc>)
 80097f0:	f000 f8b6 	bl	8009960 <__retarget_lock_release_recursive>
 80097f4:	bd10      	pop	{r4, pc}
 80097f6:	46c0      	nop			; (mov r8, r8)
 80097f8:	200003f1 	.word	0x200003f1

080097fc <__sinit_lock_acquire>:
 80097fc:	b510      	push	{r4, lr}
 80097fe:	4802      	ldr	r0, [pc, #8]	; (8009808 <__sinit_lock_acquire+0xc>)
 8009800:	f000 f8ad 	bl	800995e <__retarget_lock_acquire_recursive>
 8009804:	bd10      	pop	{r4, pc}
 8009806:	46c0      	nop			; (mov r8, r8)
 8009808:	200003f2 	.word	0x200003f2

0800980c <__sinit_lock_release>:
 800980c:	b510      	push	{r4, lr}
 800980e:	4802      	ldr	r0, [pc, #8]	; (8009818 <__sinit_lock_release+0xc>)
 8009810:	f000 f8a6 	bl	8009960 <__retarget_lock_release_recursive>
 8009814:	bd10      	pop	{r4, pc}
 8009816:	46c0      	nop			; (mov r8, r8)
 8009818:	200003f2 	.word	0x200003f2

0800981c <__sinit>:
 800981c:	b513      	push	{r0, r1, r4, lr}
 800981e:	0004      	movs	r4, r0
 8009820:	f7ff ffec 	bl	80097fc <__sinit_lock_acquire>
 8009824:	69a3      	ldr	r3, [r4, #24]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d002      	beq.n	8009830 <__sinit+0x14>
 800982a:	f7ff ffef 	bl	800980c <__sinit_lock_release>
 800982e:	bd13      	pop	{r0, r1, r4, pc}
 8009830:	64a3      	str	r3, [r4, #72]	; 0x48
 8009832:	64e3      	str	r3, [r4, #76]	; 0x4c
 8009834:	6523      	str	r3, [r4, #80]	; 0x50
 8009836:	4b13      	ldr	r3, [pc, #76]	; (8009884 <__sinit+0x68>)
 8009838:	4a13      	ldr	r2, [pc, #76]	; (8009888 <__sinit+0x6c>)
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	62a2      	str	r2, [r4, #40]	; 0x28
 800983e:	9301      	str	r3, [sp, #4]
 8009840:	42a3      	cmp	r3, r4
 8009842:	d101      	bne.n	8009848 <__sinit+0x2c>
 8009844:	2301      	movs	r3, #1
 8009846:	61a3      	str	r3, [r4, #24]
 8009848:	0020      	movs	r0, r4
 800984a:	f000 f81f 	bl	800988c <__sfp>
 800984e:	6060      	str	r0, [r4, #4]
 8009850:	0020      	movs	r0, r4
 8009852:	f000 f81b 	bl	800988c <__sfp>
 8009856:	60a0      	str	r0, [r4, #8]
 8009858:	0020      	movs	r0, r4
 800985a:	f000 f817 	bl	800988c <__sfp>
 800985e:	2200      	movs	r2, #0
 8009860:	2104      	movs	r1, #4
 8009862:	60e0      	str	r0, [r4, #12]
 8009864:	6860      	ldr	r0, [r4, #4]
 8009866:	f7ff ff77 	bl	8009758 <std>
 800986a:	2201      	movs	r2, #1
 800986c:	2109      	movs	r1, #9
 800986e:	68a0      	ldr	r0, [r4, #8]
 8009870:	f7ff ff72 	bl	8009758 <std>
 8009874:	2202      	movs	r2, #2
 8009876:	2112      	movs	r1, #18
 8009878:	68e0      	ldr	r0, [r4, #12]
 800987a:	f7ff ff6d 	bl	8009758 <std>
 800987e:	2301      	movs	r3, #1
 8009880:	61a3      	str	r3, [r4, #24]
 8009882:	e7d2      	b.n	800982a <__sinit+0xe>
 8009884:	08009e78 	.word	0x08009e78
 8009888:	080097a1 	.word	0x080097a1

0800988c <__sfp>:
 800988c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800988e:	0007      	movs	r7, r0
 8009890:	f7ff ffa4 	bl	80097dc <__sfp_lock_acquire>
 8009894:	4b1f      	ldr	r3, [pc, #124]	; (8009914 <__sfp+0x88>)
 8009896:	681e      	ldr	r6, [r3, #0]
 8009898:	69b3      	ldr	r3, [r6, #24]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d102      	bne.n	80098a4 <__sfp+0x18>
 800989e:	0030      	movs	r0, r6
 80098a0:	f7ff ffbc 	bl	800981c <__sinit>
 80098a4:	3648      	adds	r6, #72	; 0x48
 80098a6:	68b4      	ldr	r4, [r6, #8]
 80098a8:	6873      	ldr	r3, [r6, #4]
 80098aa:	3b01      	subs	r3, #1
 80098ac:	d504      	bpl.n	80098b8 <__sfp+0x2c>
 80098ae:	6833      	ldr	r3, [r6, #0]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d022      	beq.n	80098fa <__sfp+0x6e>
 80098b4:	6836      	ldr	r6, [r6, #0]
 80098b6:	e7f6      	b.n	80098a6 <__sfp+0x1a>
 80098b8:	220c      	movs	r2, #12
 80098ba:	5ea5      	ldrsh	r5, [r4, r2]
 80098bc:	2d00      	cmp	r5, #0
 80098be:	d11a      	bne.n	80098f6 <__sfp+0x6a>
 80098c0:	0020      	movs	r0, r4
 80098c2:	4b15      	ldr	r3, [pc, #84]	; (8009918 <__sfp+0x8c>)
 80098c4:	3058      	adds	r0, #88	; 0x58
 80098c6:	60e3      	str	r3, [r4, #12]
 80098c8:	6665      	str	r5, [r4, #100]	; 0x64
 80098ca:	f000 f847 	bl	800995c <__retarget_lock_init_recursive>
 80098ce:	f7ff ff8d 	bl	80097ec <__sfp_lock_release>
 80098d2:	0020      	movs	r0, r4
 80098d4:	2208      	movs	r2, #8
 80098d6:	0029      	movs	r1, r5
 80098d8:	6025      	str	r5, [r4, #0]
 80098da:	60a5      	str	r5, [r4, #8]
 80098dc:	6065      	str	r5, [r4, #4]
 80098de:	6125      	str	r5, [r4, #16]
 80098e0:	6165      	str	r5, [r4, #20]
 80098e2:	61a5      	str	r5, [r4, #24]
 80098e4:	305c      	adds	r0, #92	; 0x5c
 80098e6:	f7fd fa17 	bl	8006d18 <memset>
 80098ea:	6365      	str	r5, [r4, #52]	; 0x34
 80098ec:	63a5      	str	r5, [r4, #56]	; 0x38
 80098ee:	64a5      	str	r5, [r4, #72]	; 0x48
 80098f0:	64e5      	str	r5, [r4, #76]	; 0x4c
 80098f2:	0020      	movs	r0, r4
 80098f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80098f6:	3468      	adds	r4, #104	; 0x68
 80098f8:	e7d7      	b.n	80098aa <__sfp+0x1e>
 80098fa:	2104      	movs	r1, #4
 80098fc:	0038      	movs	r0, r7
 80098fe:	f7ff ff57 	bl	80097b0 <__sfmoreglue>
 8009902:	1e04      	subs	r4, r0, #0
 8009904:	6030      	str	r0, [r6, #0]
 8009906:	d1d5      	bne.n	80098b4 <__sfp+0x28>
 8009908:	f7ff ff70 	bl	80097ec <__sfp_lock_release>
 800990c:	230c      	movs	r3, #12
 800990e:	603b      	str	r3, [r7, #0]
 8009910:	e7ef      	b.n	80098f2 <__sfp+0x66>
 8009912:	46c0      	nop			; (mov r8, r8)
 8009914:	08009e78 	.word	0x08009e78
 8009918:	ffff0001 	.word	0xffff0001

0800991c <_fwalk_reent>:
 800991c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800991e:	0004      	movs	r4, r0
 8009920:	0006      	movs	r6, r0
 8009922:	2700      	movs	r7, #0
 8009924:	9101      	str	r1, [sp, #4]
 8009926:	3448      	adds	r4, #72	; 0x48
 8009928:	6863      	ldr	r3, [r4, #4]
 800992a:	68a5      	ldr	r5, [r4, #8]
 800992c:	9300      	str	r3, [sp, #0]
 800992e:	9b00      	ldr	r3, [sp, #0]
 8009930:	3b01      	subs	r3, #1
 8009932:	9300      	str	r3, [sp, #0]
 8009934:	d504      	bpl.n	8009940 <_fwalk_reent+0x24>
 8009936:	6824      	ldr	r4, [r4, #0]
 8009938:	2c00      	cmp	r4, #0
 800993a:	d1f5      	bne.n	8009928 <_fwalk_reent+0xc>
 800993c:	0038      	movs	r0, r7
 800993e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009940:	89ab      	ldrh	r3, [r5, #12]
 8009942:	2b01      	cmp	r3, #1
 8009944:	d908      	bls.n	8009958 <_fwalk_reent+0x3c>
 8009946:	220e      	movs	r2, #14
 8009948:	5eab      	ldrsh	r3, [r5, r2]
 800994a:	3301      	adds	r3, #1
 800994c:	d004      	beq.n	8009958 <_fwalk_reent+0x3c>
 800994e:	0029      	movs	r1, r5
 8009950:	0030      	movs	r0, r6
 8009952:	9b01      	ldr	r3, [sp, #4]
 8009954:	4798      	blx	r3
 8009956:	4307      	orrs	r7, r0
 8009958:	3568      	adds	r5, #104	; 0x68
 800995a:	e7e8      	b.n	800992e <_fwalk_reent+0x12>

0800995c <__retarget_lock_init_recursive>:
 800995c:	4770      	bx	lr

0800995e <__retarget_lock_acquire_recursive>:
 800995e:	4770      	bx	lr

08009960 <__retarget_lock_release_recursive>:
 8009960:	4770      	bx	lr
	...

08009964 <__swhatbuf_r>:
 8009964:	b570      	push	{r4, r5, r6, lr}
 8009966:	000e      	movs	r6, r1
 8009968:	001d      	movs	r5, r3
 800996a:	230e      	movs	r3, #14
 800996c:	5ec9      	ldrsh	r1, [r1, r3]
 800996e:	0014      	movs	r4, r2
 8009970:	b096      	sub	sp, #88	; 0x58
 8009972:	2900      	cmp	r1, #0
 8009974:	da08      	bge.n	8009988 <__swhatbuf_r+0x24>
 8009976:	220c      	movs	r2, #12
 8009978:	5eb3      	ldrsh	r3, [r6, r2]
 800997a:	2200      	movs	r2, #0
 800997c:	602a      	str	r2, [r5, #0]
 800997e:	061b      	lsls	r3, r3, #24
 8009980:	d411      	bmi.n	80099a6 <__swhatbuf_r+0x42>
 8009982:	2380      	movs	r3, #128	; 0x80
 8009984:	00db      	lsls	r3, r3, #3
 8009986:	e00f      	b.n	80099a8 <__swhatbuf_r+0x44>
 8009988:	466a      	mov	r2, sp
 800998a:	f000 f91b 	bl	8009bc4 <_fstat_r>
 800998e:	2800      	cmp	r0, #0
 8009990:	dbf1      	blt.n	8009976 <__swhatbuf_r+0x12>
 8009992:	23f0      	movs	r3, #240	; 0xf0
 8009994:	9901      	ldr	r1, [sp, #4]
 8009996:	021b      	lsls	r3, r3, #8
 8009998:	4019      	ands	r1, r3
 800999a:	4b05      	ldr	r3, [pc, #20]	; (80099b0 <__swhatbuf_r+0x4c>)
 800999c:	18c9      	adds	r1, r1, r3
 800999e:	424b      	negs	r3, r1
 80099a0:	4159      	adcs	r1, r3
 80099a2:	6029      	str	r1, [r5, #0]
 80099a4:	e7ed      	b.n	8009982 <__swhatbuf_r+0x1e>
 80099a6:	2340      	movs	r3, #64	; 0x40
 80099a8:	2000      	movs	r0, #0
 80099aa:	6023      	str	r3, [r4, #0]
 80099ac:	b016      	add	sp, #88	; 0x58
 80099ae:	bd70      	pop	{r4, r5, r6, pc}
 80099b0:	ffffe000 	.word	0xffffe000

080099b4 <__smakebuf_r>:
 80099b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80099b6:	2602      	movs	r6, #2
 80099b8:	898b      	ldrh	r3, [r1, #12]
 80099ba:	0005      	movs	r5, r0
 80099bc:	000c      	movs	r4, r1
 80099be:	4233      	tst	r3, r6
 80099c0:	d006      	beq.n	80099d0 <__smakebuf_r+0x1c>
 80099c2:	0023      	movs	r3, r4
 80099c4:	3347      	adds	r3, #71	; 0x47
 80099c6:	6023      	str	r3, [r4, #0]
 80099c8:	6123      	str	r3, [r4, #16]
 80099ca:	2301      	movs	r3, #1
 80099cc:	6163      	str	r3, [r4, #20]
 80099ce:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80099d0:	466a      	mov	r2, sp
 80099d2:	ab01      	add	r3, sp, #4
 80099d4:	f7ff ffc6 	bl	8009964 <__swhatbuf_r>
 80099d8:	9900      	ldr	r1, [sp, #0]
 80099da:	0007      	movs	r7, r0
 80099dc:	0028      	movs	r0, r5
 80099de:	f7ff f92d 	bl	8008c3c <_malloc_r>
 80099e2:	2800      	cmp	r0, #0
 80099e4:	d108      	bne.n	80099f8 <__smakebuf_r+0x44>
 80099e6:	220c      	movs	r2, #12
 80099e8:	5ea3      	ldrsh	r3, [r4, r2]
 80099ea:	059a      	lsls	r2, r3, #22
 80099ec:	d4ef      	bmi.n	80099ce <__smakebuf_r+0x1a>
 80099ee:	2203      	movs	r2, #3
 80099f0:	4393      	bics	r3, r2
 80099f2:	431e      	orrs	r6, r3
 80099f4:	81a6      	strh	r6, [r4, #12]
 80099f6:	e7e4      	b.n	80099c2 <__smakebuf_r+0xe>
 80099f8:	4b0f      	ldr	r3, [pc, #60]	; (8009a38 <__smakebuf_r+0x84>)
 80099fa:	62ab      	str	r3, [r5, #40]	; 0x28
 80099fc:	2380      	movs	r3, #128	; 0x80
 80099fe:	89a2      	ldrh	r2, [r4, #12]
 8009a00:	6020      	str	r0, [r4, #0]
 8009a02:	4313      	orrs	r3, r2
 8009a04:	81a3      	strh	r3, [r4, #12]
 8009a06:	9b00      	ldr	r3, [sp, #0]
 8009a08:	6120      	str	r0, [r4, #16]
 8009a0a:	6163      	str	r3, [r4, #20]
 8009a0c:	9b01      	ldr	r3, [sp, #4]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d00d      	beq.n	8009a2e <__smakebuf_r+0x7a>
 8009a12:	0028      	movs	r0, r5
 8009a14:	230e      	movs	r3, #14
 8009a16:	5ee1      	ldrsh	r1, [r4, r3]
 8009a18:	f000 f8e6 	bl	8009be8 <_isatty_r>
 8009a1c:	2800      	cmp	r0, #0
 8009a1e:	d006      	beq.n	8009a2e <__smakebuf_r+0x7a>
 8009a20:	2203      	movs	r2, #3
 8009a22:	89a3      	ldrh	r3, [r4, #12]
 8009a24:	4393      	bics	r3, r2
 8009a26:	001a      	movs	r2, r3
 8009a28:	2301      	movs	r3, #1
 8009a2a:	4313      	orrs	r3, r2
 8009a2c:	81a3      	strh	r3, [r4, #12]
 8009a2e:	89a0      	ldrh	r0, [r4, #12]
 8009a30:	4307      	orrs	r7, r0
 8009a32:	81a7      	strh	r7, [r4, #12]
 8009a34:	e7cb      	b.n	80099ce <__smakebuf_r+0x1a>
 8009a36:	46c0      	nop			; (mov r8, r8)
 8009a38:	080097a1 	.word	0x080097a1

08009a3c <_malloc_usable_size_r>:
 8009a3c:	1f0b      	subs	r3, r1, #4
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	1f18      	subs	r0, r3, #4
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	da01      	bge.n	8009a4a <_malloc_usable_size_r+0xe>
 8009a46:	580b      	ldr	r3, [r1, r0]
 8009a48:	18c0      	adds	r0, r0, r3
 8009a4a:	4770      	bx	lr

08009a4c <_raise_r>:
 8009a4c:	b570      	push	{r4, r5, r6, lr}
 8009a4e:	0004      	movs	r4, r0
 8009a50:	000d      	movs	r5, r1
 8009a52:	291f      	cmp	r1, #31
 8009a54:	d904      	bls.n	8009a60 <_raise_r+0x14>
 8009a56:	2316      	movs	r3, #22
 8009a58:	6003      	str	r3, [r0, #0]
 8009a5a:	2001      	movs	r0, #1
 8009a5c:	4240      	negs	r0, r0
 8009a5e:	bd70      	pop	{r4, r5, r6, pc}
 8009a60:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d004      	beq.n	8009a70 <_raise_r+0x24>
 8009a66:	008a      	lsls	r2, r1, #2
 8009a68:	189b      	adds	r3, r3, r2
 8009a6a:	681a      	ldr	r2, [r3, #0]
 8009a6c:	2a00      	cmp	r2, #0
 8009a6e:	d108      	bne.n	8009a82 <_raise_r+0x36>
 8009a70:	0020      	movs	r0, r4
 8009a72:	f000 f831 	bl	8009ad8 <_getpid_r>
 8009a76:	002a      	movs	r2, r5
 8009a78:	0001      	movs	r1, r0
 8009a7a:	0020      	movs	r0, r4
 8009a7c:	f000 f81a 	bl	8009ab4 <_kill_r>
 8009a80:	e7ed      	b.n	8009a5e <_raise_r+0x12>
 8009a82:	2000      	movs	r0, #0
 8009a84:	2a01      	cmp	r2, #1
 8009a86:	d0ea      	beq.n	8009a5e <_raise_r+0x12>
 8009a88:	1c51      	adds	r1, r2, #1
 8009a8a:	d103      	bne.n	8009a94 <_raise_r+0x48>
 8009a8c:	2316      	movs	r3, #22
 8009a8e:	3001      	adds	r0, #1
 8009a90:	6023      	str	r3, [r4, #0]
 8009a92:	e7e4      	b.n	8009a5e <_raise_r+0x12>
 8009a94:	2400      	movs	r4, #0
 8009a96:	0028      	movs	r0, r5
 8009a98:	601c      	str	r4, [r3, #0]
 8009a9a:	4790      	blx	r2
 8009a9c:	0020      	movs	r0, r4
 8009a9e:	e7de      	b.n	8009a5e <_raise_r+0x12>

08009aa0 <raise>:
 8009aa0:	b510      	push	{r4, lr}
 8009aa2:	4b03      	ldr	r3, [pc, #12]	; (8009ab0 <raise+0x10>)
 8009aa4:	0001      	movs	r1, r0
 8009aa6:	6818      	ldr	r0, [r3, #0]
 8009aa8:	f7ff ffd0 	bl	8009a4c <_raise_r>
 8009aac:	bd10      	pop	{r4, pc}
 8009aae:	46c0      	nop			; (mov r8, r8)
 8009ab0:	2000000c 	.word	0x2000000c

08009ab4 <_kill_r>:
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	b570      	push	{r4, r5, r6, lr}
 8009ab8:	4d06      	ldr	r5, [pc, #24]	; (8009ad4 <_kill_r+0x20>)
 8009aba:	0004      	movs	r4, r0
 8009abc:	0008      	movs	r0, r1
 8009abe:	0011      	movs	r1, r2
 8009ac0:	602b      	str	r3, [r5, #0]
 8009ac2:	f7f9 fa86 	bl	8002fd2 <_kill>
 8009ac6:	1c43      	adds	r3, r0, #1
 8009ac8:	d103      	bne.n	8009ad2 <_kill_r+0x1e>
 8009aca:	682b      	ldr	r3, [r5, #0]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d000      	beq.n	8009ad2 <_kill_r+0x1e>
 8009ad0:	6023      	str	r3, [r4, #0]
 8009ad2:	bd70      	pop	{r4, r5, r6, pc}
 8009ad4:	200003ec 	.word	0x200003ec

08009ad8 <_getpid_r>:
 8009ad8:	b510      	push	{r4, lr}
 8009ada:	f7f9 fa74 	bl	8002fc6 <_getpid>
 8009ade:	bd10      	pop	{r4, pc}

08009ae0 <__sread>:
 8009ae0:	b570      	push	{r4, r5, r6, lr}
 8009ae2:	000c      	movs	r4, r1
 8009ae4:	250e      	movs	r5, #14
 8009ae6:	5f49      	ldrsh	r1, [r1, r5]
 8009ae8:	f000 f8a4 	bl	8009c34 <_read_r>
 8009aec:	2800      	cmp	r0, #0
 8009aee:	db03      	blt.n	8009af8 <__sread+0x18>
 8009af0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8009af2:	181b      	adds	r3, r3, r0
 8009af4:	6563      	str	r3, [r4, #84]	; 0x54
 8009af6:	bd70      	pop	{r4, r5, r6, pc}
 8009af8:	89a3      	ldrh	r3, [r4, #12]
 8009afa:	4a02      	ldr	r2, [pc, #8]	; (8009b04 <__sread+0x24>)
 8009afc:	4013      	ands	r3, r2
 8009afe:	81a3      	strh	r3, [r4, #12]
 8009b00:	e7f9      	b.n	8009af6 <__sread+0x16>
 8009b02:	46c0      	nop			; (mov r8, r8)
 8009b04:	ffffefff 	.word	0xffffefff

08009b08 <__swrite>:
 8009b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b0a:	001f      	movs	r7, r3
 8009b0c:	898b      	ldrh	r3, [r1, #12]
 8009b0e:	0005      	movs	r5, r0
 8009b10:	000c      	movs	r4, r1
 8009b12:	0016      	movs	r6, r2
 8009b14:	05db      	lsls	r3, r3, #23
 8009b16:	d505      	bpl.n	8009b24 <__swrite+0x1c>
 8009b18:	230e      	movs	r3, #14
 8009b1a:	5ec9      	ldrsh	r1, [r1, r3]
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	2302      	movs	r3, #2
 8009b20:	f000 f874 	bl	8009c0c <_lseek_r>
 8009b24:	89a3      	ldrh	r3, [r4, #12]
 8009b26:	4a05      	ldr	r2, [pc, #20]	; (8009b3c <__swrite+0x34>)
 8009b28:	0028      	movs	r0, r5
 8009b2a:	4013      	ands	r3, r2
 8009b2c:	81a3      	strh	r3, [r4, #12]
 8009b2e:	0032      	movs	r2, r6
 8009b30:	230e      	movs	r3, #14
 8009b32:	5ee1      	ldrsh	r1, [r4, r3]
 8009b34:	003b      	movs	r3, r7
 8009b36:	f000 f81f 	bl	8009b78 <_write_r>
 8009b3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b3c:	ffffefff 	.word	0xffffefff

08009b40 <__sseek>:
 8009b40:	b570      	push	{r4, r5, r6, lr}
 8009b42:	000c      	movs	r4, r1
 8009b44:	250e      	movs	r5, #14
 8009b46:	5f49      	ldrsh	r1, [r1, r5]
 8009b48:	f000 f860 	bl	8009c0c <_lseek_r>
 8009b4c:	89a3      	ldrh	r3, [r4, #12]
 8009b4e:	1c42      	adds	r2, r0, #1
 8009b50:	d103      	bne.n	8009b5a <__sseek+0x1a>
 8009b52:	4a05      	ldr	r2, [pc, #20]	; (8009b68 <__sseek+0x28>)
 8009b54:	4013      	ands	r3, r2
 8009b56:	81a3      	strh	r3, [r4, #12]
 8009b58:	bd70      	pop	{r4, r5, r6, pc}
 8009b5a:	2280      	movs	r2, #128	; 0x80
 8009b5c:	0152      	lsls	r2, r2, #5
 8009b5e:	4313      	orrs	r3, r2
 8009b60:	81a3      	strh	r3, [r4, #12]
 8009b62:	6560      	str	r0, [r4, #84]	; 0x54
 8009b64:	e7f8      	b.n	8009b58 <__sseek+0x18>
 8009b66:	46c0      	nop			; (mov r8, r8)
 8009b68:	ffffefff 	.word	0xffffefff

08009b6c <__sclose>:
 8009b6c:	b510      	push	{r4, lr}
 8009b6e:	230e      	movs	r3, #14
 8009b70:	5ec9      	ldrsh	r1, [r1, r3]
 8009b72:	f000 f815 	bl	8009ba0 <_close_r>
 8009b76:	bd10      	pop	{r4, pc}

08009b78 <_write_r>:
 8009b78:	b570      	push	{r4, r5, r6, lr}
 8009b7a:	0004      	movs	r4, r0
 8009b7c:	0008      	movs	r0, r1
 8009b7e:	0011      	movs	r1, r2
 8009b80:	001a      	movs	r2, r3
 8009b82:	2300      	movs	r3, #0
 8009b84:	4d05      	ldr	r5, [pc, #20]	; (8009b9c <_write_r+0x24>)
 8009b86:	602b      	str	r3, [r5, #0]
 8009b88:	f7f9 fa5c 	bl	8003044 <_write>
 8009b8c:	1c43      	adds	r3, r0, #1
 8009b8e:	d103      	bne.n	8009b98 <_write_r+0x20>
 8009b90:	682b      	ldr	r3, [r5, #0]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d000      	beq.n	8009b98 <_write_r+0x20>
 8009b96:	6023      	str	r3, [r4, #0]
 8009b98:	bd70      	pop	{r4, r5, r6, pc}
 8009b9a:	46c0      	nop			; (mov r8, r8)
 8009b9c:	200003ec 	.word	0x200003ec

08009ba0 <_close_r>:
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	b570      	push	{r4, r5, r6, lr}
 8009ba4:	4d06      	ldr	r5, [pc, #24]	; (8009bc0 <_close_r+0x20>)
 8009ba6:	0004      	movs	r4, r0
 8009ba8:	0008      	movs	r0, r1
 8009baa:	602b      	str	r3, [r5, #0]
 8009bac:	f7f9 fa66 	bl	800307c <_close>
 8009bb0:	1c43      	adds	r3, r0, #1
 8009bb2:	d103      	bne.n	8009bbc <_close_r+0x1c>
 8009bb4:	682b      	ldr	r3, [r5, #0]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d000      	beq.n	8009bbc <_close_r+0x1c>
 8009bba:	6023      	str	r3, [r4, #0]
 8009bbc:	bd70      	pop	{r4, r5, r6, pc}
 8009bbe:	46c0      	nop			; (mov r8, r8)
 8009bc0:	200003ec 	.word	0x200003ec

08009bc4 <_fstat_r>:
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	b570      	push	{r4, r5, r6, lr}
 8009bc8:	4d06      	ldr	r5, [pc, #24]	; (8009be4 <_fstat_r+0x20>)
 8009bca:	0004      	movs	r4, r0
 8009bcc:	0008      	movs	r0, r1
 8009bce:	0011      	movs	r1, r2
 8009bd0:	602b      	str	r3, [r5, #0]
 8009bd2:	f7f9 fa5d 	bl	8003090 <_fstat>
 8009bd6:	1c43      	adds	r3, r0, #1
 8009bd8:	d103      	bne.n	8009be2 <_fstat_r+0x1e>
 8009bda:	682b      	ldr	r3, [r5, #0]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d000      	beq.n	8009be2 <_fstat_r+0x1e>
 8009be0:	6023      	str	r3, [r4, #0]
 8009be2:	bd70      	pop	{r4, r5, r6, pc}
 8009be4:	200003ec 	.word	0x200003ec

08009be8 <_isatty_r>:
 8009be8:	2300      	movs	r3, #0
 8009bea:	b570      	push	{r4, r5, r6, lr}
 8009bec:	4d06      	ldr	r5, [pc, #24]	; (8009c08 <_isatty_r+0x20>)
 8009bee:	0004      	movs	r4, r0
 8009bf0:	0008      	movs	r0, r1
 8009bf2:	602b      	str	r3, [r5, #0]
 8009bf4:	f7f9 fa5a 	bl	80030ac <_isatty>
 8009bf8:	1c43      	adds	r3, r0, #1
 8009bfa:	d103      	bne.n	8009c04 <_isatty_r+0x1c>
 8009bfc:	682b      	ldr	r3, [r5, #0]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d000      	beq.n	8009c04 <_isatty_r+0x1c>
 8009c02:	6023      	str	r3, [r4, #0]
 8009c04:	bd70      	pop	{r4, r5, r6, pc}
 8009c06:	46c0      	nop			; (mov r8, r8)
 8009c08:	200003ec 	.word	0x200003ec

08009c0c <_lseek_r>:
 8009c0c:	b570      	push	{r4, r5, r6, lr}
 8009c0e:	0004      	movs	r4, r0
 8009c10:	0008      	movs	r0, r1
 8009c12:	0011      	movs	r1, r2
 8009c14:	001a      	movs	r2, r3
 8009c16:	2300      	movs	r3, #0
 8009c18:	4d05      	ldr	r5, [pc, #20]	; (8009c30 <_lseek_r+0x24>)
 8009c1a:	602b      	str	r3, [r5, #0]
 8009c1c:	f7f9 fa4f 	bl	80030be <_lseek>
 8009c20:	1c43      	adds	r3, r0, #1
 8009c22:	d103      	bne.n	8009c2c <_lseek_r+0x20>
 8009c24:	682b      	ldr	r3, [r5, #0]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d000      	beq.n	8009c2c <_lseek_r+0x20>
 8009c2a:	6023      	str	r3, [r4, #0]
 8009c2c:	bd70      	pop	{r4, r5, r6, pc}
 8009c2e:	46c0      	nop			; (mov r8, r8)
 8009c30:	200003ec 	.word	0x200003ec

08009c34 <_read_r>:
 8009c34:	b570      	push	{r4, r5, r6, lr}
 8009c36:	0004      	movs	r4, r0
 8009c38:	0008      	movs	r0, r1
 8009c3a:	0011      	movs	r1, r2
 8009c3c:	001a      	movs	r2, r3
 8009c3e:	2300      	movs	r3, #0
 8009c40:	4d05      	ldr	r5, [pc, #20]	; (8009c58 <_read_r+0x24>)
 8009c42:	602b      	str	r3, [r5, #0]
 8009c44:	f7f9 f9e1 	bl	800300a <_read>
 8009c48:	1c43      	adds	r3, r0, #1
 8009c4a:	d103      	bne.n	8009c54 <_read_r+0x20>
 8009c4c:	682b      	ldr	r3, [r5, #0]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d000      	beq.n	8009c54 <_read_r+0x20>
 8009c52:	6023      	str	r3, [r4, #0]
 8009c54:	bd70      	pop	{r4, r5, r6, pc}
 8009c56:	46c0      	nop			; (mov r8, r8)
 8009c58:	200003ec 	.word	0x200003ec

08009c5c <_init>:
 8009c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c5e:	46c0      	nop			; (mov r8, r8)
 8009c60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c62:	bc08      	pop	{r3}
 8009c64:	469e      	mov	lr, r3
 8009c66:	4770      	bx	lr

08009c68 <_fini>:
 8009c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c6a:	46c0      	nop			; (mov r8, r8)
 8009c6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c6e:	bc08      	pop	{r3}
 8009c70:	469e      	mov	lr, r3
 8009c72:	4770      	bx	lr
