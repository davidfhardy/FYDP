
osc_spi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d50  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a0  08003e10  08003e10  00013e10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003fb0  08003fb0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003fb0  08003fb0  00013fb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003fb8  08003fb8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003fb8  08003fb8  00013fb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003fbc  08003fbc  00013fbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003fc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000015c  20000070  08004030  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001cc  08004030  000201cc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a563  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000173d  00000000  00000000  0002a5fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008b8  00000000  00000000  0002bd38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000820  00000000  00000000  0002c5f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014976  00000000  00000000  0002ce10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000aca3  00000000  00000000  00041786  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007f225  00000000  00000000  0004c429  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cb64e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002268  00000000  00000000  000cb6a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003df8 	.word	0x08003df8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08003df8 	.word	0x08003df8

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uldivmod>:
 8000234:	2b00      	cmp	r3, #0
 8000236:	d111      	bne.n	800025c <__aeabi_uldivmod+0x28>
 8000238:	2a00      	cmp	r2, #0
 800023a:	d10f      	bne.n	800025c <__aeabi_uldivmod+0x28>
 800023c:	2900      	cmp	r1, #0
 800023e:	d100      	bne.n	8000242 <__aeabi_uldivmod+0xe>
 8000240:	2800      	cmp	r0, #0
 8000242:	d002      	beq.n	800024a <__aeabi_uldivmod+0x16>
 8000244:	2100      	movs	r1, #0
 8000246:	43c9      	mvns	r1, r1
 8000248:	0008      	movs	r0, r1
 800024a:	b407      	push	{r0, r1, r2}
 800024c:	4802      	ldr	r0, [pc, #8]	; (8000258 <__aeabi_uldivmod+0x24>)
 800024e:	a102      	add	r1, pc, #8	; (adr r1, 8000258 <__aeabi_uldivmod+0x24>)
 8000250:	1840      	adds	r0, r0, r1
 8000252:	9002      	str	r0, [sp, #8]
 8000254:	bd03      	pop	{r0, r1, pc}
 8000256:	46c0      	nop			; (mov r8, r8)
 8000258:	ffffffd9 	.word	0xffffffd9
 800025c:	b403      	push	{r0, r1}
 800025e:	4668      	mov	r0, sp
 8000260:	b501      	push	{r0, lr}
 8000262:	9802      	ldr	r0, [sp, #8]
 8000264:	f000 f834 	bl	80002d0 <__udivmoddi4>
 8000268:	9b01      	ldr	r3, [sp, #4]
 800026a:	469e      	mov	lr, r3
 800026c:	b002      	add	sp, #8
 800026e:	bc0c      	pop	{r2, r3}
 8000270:	4770      	bx	lr
 8000272:	46c0      	nop			; (mov r8, r8)

08000274 <__aeabi_lmul>:
 8000274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000276:	46ce      	mov	lr, r9
 8000278:	4647      	mov	r7, r8
 800027a:	b580      	push	{r7, lr}
 800027c:	0007      	movs	r7, r0
 800027e:	4699      	mov	r9, r3
 8000280:	0c3b      	lsrs	r3, r7, #16
 8000282:	469c      	mov	ip, r3
 8000284:	0413      	lsls	r3, r2, #16
 8000286:	0c1b      	lsrs	r3, r3, #16
 8000288:	001d      	movs	r5, r3
 800028a:	000e      	movs	r6, r1
 800028c:	4661      	mov	r1, ip
 800028e:	0400      	lsls	r0, r0, #16
 8000290:	0c14      	lsrs	r4, r2, #16
 8000292:	0c00      	lsrs	r0, r0, #16
 8000294:	4345      	muls	r5, r0
 8000296:	434b      	muls	r3, r1
 8000298:	4360      	muls	r0, r4
 800029a:	4361      	muls	r1, r4
 800029c:	18c0      	adds	r0, r0, r3
 800029e:	0c2c      	lsrs	r4, r5, #16
 80002a0:	1820      	adds	r0, r4, r0
 80002a2:	468c      	mov	ip, r1
 80002a4:	4283      	cmp	r3, r0
 80002a6:	d903      	bls.n	80002b0 <__aeabi_lmul+0x3c>
 80002a8:	2380      	movs	r3, #128	; 0x80
 80002aa:	025b      	lsls	r3, r3, #9
 80002ac:	4698      	mov	r8, r3
 80002ae:	44c4      	add	ip, r8
 80002b0:	4649      	mov	r1, r9
 80002b2:	4379      	muls	r1, r7
 80002b4:	4372      	muls	r2, r6
 80002b6:	0c03      	lsrs	r3, r0, #16
 80002b8:	4463      	add	r3, ip
 80002ba:	042d      	lsls	r5, r5, #16
 80002bc:	0c2d      	lsrs	r5, r5, #16
 80002be:	18c9      	adds	r1, r1, r3
 80002c0:	0400      	lsls	r0, r0, #16
 80002c2:	1940      	adds	r0, r0, r5
 80002c4:	1889      	adds	r1, r1, r2
 80002c6:	bcc0      	pop	{r6, r7}
 80002c8:	46b9      	mov	r9, r7
 80002ca:	46b0      	mov	r8, r6
 80002cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ce:	46c0      	nop			; (mov r8, r8)

080002d0 <__udivmoddi4>:
 80002d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002d2:	4657      	mov	r7, sl
 80002d4:	464e      	mov	r6, r9
 80002d6:	4645      	mov	r5, r8
 80002d8:	46de      	mov	lr, fp
 80002da:	b5e0      	push	{r5, r6, r7, lr}
 80002dc:	0004      	movs	r4, r0
 80002de:	000d      	movs	r5, r1
 80002e0:	4692      	mov	sl, r2
 80002e2:	4699      	mov	r9, r3
 80002e4:	b083      	sub	sp, #12
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d830      	bhi.n	800034c <__udivmoddi4+0x7c>
 80002ea:	d02d      	beq.n	8000348 <__udivmoddi4+0x78>
 80002ec:	4649      	mov	r1, r9
 80002ee:	4650      	mov	r0, sl
 80002f0:	f000 f8ba 	bl	8000468 <__clzdi2>
 80002f4:	0029      	movs	r1, r5
 80002f6:	0006      	movs	r6, r0
 80002f8:	0020      	movs	r0, r4
 80002fa:	f000 f8b5 	bl	8000468 <__clzdi2>
 80002fe:	1a33      	subs	r3, r6, r0
 8000300:	4698      	mov	r8, r3
 8000302:	3b20      	subs	r3, #32
 8000304:	469b      	mov	fp, r3
 8000306:	d433      	bmi.n	8000370 <__udivmoddi4+0xa0>
 8000308:	465a      	mov	r2, fp
 800030a:	4653      	mov	r3, sl
 800030c:	4093      	lsls	r3, r2
 800030e:	4642      	mov	r2, r8
 8000310:	001f      	movs	r7, r3
 8000312:	4653      	mov	r3, sl
 8000314:	4093      	lsls	r3, r2
 8000316:	001e      	movs	r6, r3
 8000318:	42af      	cmp	r7, r5
 800031a:	d83a      	bhi.n	8000392 <__udivmoddi4+0xc2>
 800031c:	42af      	cmp	r7, r5
 800031e:	d100      	bne.n	8000322 <__udivmoddi4+0x52>
 8000320:	e078      	b.n	8000414 <__udivmoddi4+0x144>
 8000322:	465b      	mov	r3, fp
 8000324:	1ba4      	subs	r4, r4, r6
 8000326:	41bd      	sbcs	r5, r7
 8000328:	2b00      	cmp	r3, #0
 800032a:	da00      	bge.n	800032e <__udivmoddi4+0x5e>
 800032c:	e075      	b.n	800041a <__udivmoddi4+0x14a>
 800032e:	2200      	movs	r2, #0
 8000330:	2300      	movs	r3, #0
 8000332:	9200      	str	r2, [sp, #0]
 8000334:	9301      	str	r3, [sp, #4]
 8000336:	2301      	movs	r3, #1
 8000338:	465a      	mov	r2, fp
 800033a:	4093      	lsls	r3, r2
 800033c:	9301      	str	r3, [sp, #4]
 800033e:	2301      	movs	r3, #1
 8000340:	4642      	mov	r2, r8
 8000342:	4093      	lsls	r3, r2
 8000344:	9300      	str	r3, [sp, #0]
 8000346:	e028      	b.n	800039a <__udivmoddi4+0xca>
 8000348:	4282      	cmp	r2, r0
 800034a:	d9cf      	bls.n	80002ec <__udivmoddi4+0x1c>
 800034c:	2200      	movs	r2, #0
 800034e:	2300      	movs	r3, #0
 8000350:	9200      	str	r2, [sp, #0]
 8000352:	9301      	str	r3, [sp, #4]
 8000354:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <__udivmoddi4+0x8e>
 800035a:	601c      	str	r4, [r3, #0]
 800035c:	605d      	str	r5, [r3, #4]
 800035e:	9800      	ldr	r0, [sp, #0]
 8000360:	9901      	ldr	r1, [sp, #4]
 8000362:	b003      	add	sp, #12
 8000364:	bcf0      	pop	{r4, r5, r6, r7}
 8000366:	46bb      	mov	fp, r7
 8000368:	46b2      	mov	sl, r6
 800036a:	46a9      	mov	r9, r5
 800036c:	46a0      	mov	r8, r4
 800036e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000370:	4642      	mov	r2, r8
 8000372:	2320      	movs	r3, #32
 8000374:	1a9b      	subs	r3, r3, r2
 8000376:	4652      	mov	r2, sl
 8000378:	40da      	lsrs	r2, r3
 800037a:	4641      	mov	r1, r8
 800037c:	0013      	movs	r3, r2
 800037e:	464a      	mov	r2, r9
 8000380:	408a      	lsls	r2, r1
 8000382:	0017      	movs	r7, r2
 8000384:	4642      	mov	r2, r8
 8000386:	431f      	orrs	r7, r3
 8000388:	4653      	mov	r3, sl
 800038a:	4093      	lsls	r3, r2
 800038c:	001e      	movs	r6, r3
 800038e:	42af      	cmp	r7, r5
 8000390:	d9c4      	bls.n	800031c <__udivmoddi4+0x4c>
 8000392:	2200      	movs	r2, #0
 8000394:	2300      	movs	r3, #0
 8000396:	9200      	str	r2, [sp, #0]
 8000398:	9301      	str	r3, [sp, #4]
 800039a:	4643      	mov	r3, r8
 800039c:	2b00      	cmp	r3, #0
 800039e:	d0d9      	beq.n	8000354 <__udivmoddi4+0x84>
 80003a0:	07fb      	lsls	r3, r7, #31
 80003a2:	0872      	lsrs	r2, r6, #1
 80003a4:	431a      	orrs	r2, r3
 80003a6:	4646      	mov	r6, r8
 80003a8:	087b      	lsrs	r3, r7, #1
 80003aa:	e00e      	b.n	80003ca <__udivmoddi4+0xfa>
 80003ac:	42ab      	cmp	r3, r5
 80003ae:	d101      	bne.n	80003b4 <__udivmoddi4+0xe4>
 80003b0:	42a2      	cmp	r2, r4
 80003b2:	d80c      	bhi.n	80003ce <__udivmoddi4+0xfe>
 80003b4:	1aa4      	subs	r4, r4, r2
 80003b6:	419d      	sbcs	r5, r3
 80003b8:	2001      	movs	r0, #1
 80003ba:	1924      	adds	r4, r4, r4
 80003bc:	416d      	adcs	r5, r5
 80003be:	2100      	movs	r1, #0
 80003c0:	3e01      	subs	r6, #1
 80003c2:	1824      	adds	r4, r4, r0
 80003c4:	414d      	adcs	r5, r1
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	d006      	beq.n	80003d8 <__udivmoddi4+0x108>
 80003ca:	42ab      	cmp	r3, r5
 80003cc:	d9ee      	bls.n	80003ac <__udivmoddi4+0xdc>
 80003ce:	3e01      	subs	r6, #1
 80003d0:	1924      	adds	r4, r4, r4
 80003d2:	416d      	adcs	r5, r5
 80003d4:	2e00      	cmp	r6, #0
 80003d6:	d1f8      	bne.n	80003ca <__udivmoddi4+0xfa>
 80003d8:	9800      	ldr	r0, [sp, #0]
 80003da:	9901      	ldr	r1, [sp, #4]
 80003dc:	465b      	mov	r3, fp
 80003de:	1900      	adds	r0, r0, r4
 80003e0:	4169      	adcs	r1, r5
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	db24      	blt.n	8000430 <__udivmoddi4+0x160>
 80003e6:	002b      	movs	r3, r5
 80003e8:	465a      	mov	r2, fp
 80003ea:	4644      	mov	r4, r8
 80003ec:	40d3      	lsrs	r3, r2
 80003ee:	002a      	movs	r2, r5
 80003f0:	40e2      	lsrs	r2, r4
 80003f2:	001c      	movs	r4, r3
 80003f4:	465b      	mov	r3, fp
 80003f6:	0015      	movs	r5, r2
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	db2a      	blt.n	8000452 <__udivmoddi4+0x182>
 80003fc:	0026      	movs	r6, r4
 80003fe:	409e      	lsls	r6, r3
 8000400:	0033      	movs	r3, r6
 8000402:	0026      	movs	r6, r4
 8000404:	4647      	mov	r7, r8
 8000406:	40be      	lsls	r6, r7
 8000408:	0032      	movs	r2, r6
 800040a:	1a80      	subs	r0, r0, r2
 800040c:	4199      	sbcs	r1, r3
 800040e:	9000      	str	r0, [sp, #0]
 8000410:	9101      	str	r1, [sp, #4]
 8000412:	e79f      	b.n	8000354 <__udivmoddi4+0x84>
 8000414:	42a3      	cmp	r3, r4
 8000416:	d8bc      	bhi.n	8000392 <__udivmoddi4+0xc2>
 8000418:	e783      	b.n	8000322 <__udivmoddi4+0x52>
 800041a:	4642      	mov	r2, r8
 800041c:	2320      	movs	r3, #32
 800041e:	2100      	movs	r1, #0
 8000420:	1a9b      	subs	r3, r3, r2
 8000422:	2200      	movs	r2, #0
 8000424:	9100      	str	r1, [sp, #0]
 8000426:	9201      	str	r2, [sp, #4]
 8000428:	2201      	movs	r2, #1
 800042a:	40da      	lsrs	r2, r3
 800042c:	9201      	str	r2, [sp, #4]
 800042e:	e786      	b.n	800033e <__udivmoddi4+0x6e>
 8000430:	4642      	mov	r2, r8
 8000432:	2320      	movs	r3, #32
 8000434:	1a9b      	subs	r3, r3, r2
 8000436:	002a      	movs	r2, r5
 8000438:	4646      	mov	r6, r8
 800043a:	409a      	lsls	r2, r3
 800043c:	0023      	movs	r3, r4
 800043e:	40f3      	lsrs	r3, r6
 8000440:	4644      	mov	r4, r8
 8000442:	4313      	orrs	r3, r2
 8000444:	002a      	movs	r2, r5
 8000446:	40e2      	lsrs	r2, r4
 8000448:	001c      	movs	r4, r3
 800044a:	465b      	mov	r3, fp
 800044c:	0015      	movs	r5, r2
 800044e:	2b00      	cmp	r3, #0
 8000450:	dad4      	bge.n	80003fc <__udivmoddi4+0x12c>
 8000452:	4642      	mov	r2, r8
 8000454:	002f      	movs	r7, r5
 8000456:	2320      	movs	r3, #32
 8000458:	0026      	movs	r6, r4
 800045a:	4097      	lsls	r7, r2
 800045c:	1a9b      	subs	r3, r3, r2
 800045e:	40de      	lsrs	r6, r3
 8000460:	003b      	movs	r3, r7
 8000462:	4333      	orrs	r3, r6
 8000464:	e7cd      	b.n	8000402 <__udivmoddi4+0x132>
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__clzdi2>:
 8000468:	b510      	push	{r4, lr}
 800046a:	2900      	cmp	r1, #0
 800046c:	d103      	bne.n	8000476 <__clzdi2+0xe>
 800046e:	f000 f807 	bl	8000480 <__clzsi2>
 8000472:	3020      	adds	r0, #32
 8000474:	e002      	b.n	800047c <__clzdi2+0x14>
 8000476:	0008      	movs	r0, r1
 8000478:	f000 f802 	bl	8000480 <__clzsi2>
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__clzsi2>:
 8000480:	211c      	movs	r1, #28
 8000482:	2301      	movs	r3, #1
 8000484:	041b      	lsls	r3, r3, #16
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0xe>
 800048a:	0c00      	lsrs	r0, r0, #16
 800048c:	3910      	subs	r1, #16
 800048e:	0a1b      	lsrs	r3, r3, #8
 8000490:	4298      	cmp	r0, r3
 8000492:	d301      	bcc.n	8000498 <__clzsi2+0x18>
 8000494:	0a00      	lsrs	r0, r0, #8
 8000496:	3908      	subs	r1, #8
 8000498:	091b      	lsrs	r3, r3, #4
 800049a:	4298      	cmp	r0, r3
 800049c:	d301      	bcc.n	80004a2 <__clzsi2+0x22>
 800049e:	0900      	lsrs	r0, r0, #4
 80004a0:	3904      	subs	r1, #4
 80004a2:	a202      	add	r2, pc, #8	; (adr r2, 80004ac <__clzsi2+0x2c>)
 80004a4:	5c10      	ldrb	r0, [r2, r0]
 80004a6:	1840      	adds	r0, r0, r1
 80004a8:	4770      	bx	lr
 80004aa:	46c0      	nop			; (mov r8, r8)
 80004ac:	02020304 	.word	0x02020304
 80004b0:	01010101 	.word	0x01010101
	...

080004bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b082      	sub	sp, #8
 80004c0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c2:	f000 fbfb 	bl	8000cbc <HAL_Init>

  /* USER CODE BEGIN Init */
//  char uart_buf[50];
//  int uart_buf_len;
  // char spi_buf[20];
  for(int i=0; i<20; i++)
 80004c6:	2300      	movs	r3, #0
 80004c8:	607b      	str	r3, [r7, #4]
 80004ca:	e007      	b.n	80004dc <main+0x20>
  {
	  spi_buf[i] = 'a';
 80004cc:	4a77      	ldr	r2, [pc, #476]	; (80006ac <main+0x1f0>)
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	18d3      	adds	r3, r2, r3
 80004d2:	2261      	movs	r2, #97	; 0x61
 80004d4:	701a      	strb	r2, [r3, #0]
  for(int i=0; i<20; i++)
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	3301      	adds	r3, #1
 80004da:	607b      	str	r3, [r7, #4]
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	2b13      	cmp	r3, #19
 80004e0:	ddf4      	ble.n	80004cc <main+0x10>
  }
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e2:	f000 f90f 	bl	8000704 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e6:	f000 f9e1 	bl	80008ac <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004ea:	f000 f9af 	bl	800084c <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80004ee:	f000 f975 	bl	80007dc <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  uart_buf_len = sprintf(uart_buf, "========== Begin Running Code ==========\r\n");
 80004f2:	4a6f      	ldr	r2, [pc, #444]	; (80006b0 <main+0x1f4>)
 80004f4:	4b6f      	ldr	r3, [pc, #444]	; (80006b4 <main+0x1f8>)
 80004f6:	0011      	movs	r1, r2
 80004f8:	0018      	movs	r0, r3
 80004fa:	f003 f813 	bl	8003524 <siprintf>
 80004fe:	0002      	movs	r2, r0
 8000500:	4b6d      	ldr	r3, [pc, #436]	; (80006b8 <main+0x1fc>)
 8000502:	601a      	str	r2, [r3, #0]
  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
 8000504:	4b6c      	ldr	r3, [pc, #432]	; (80006b8 <main+0x1fc>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	b29a      	uxth	r2, r3
 800050a:	496a      	ldr	r1, [pc, #424]	; (80006b4 <main+0x1f8>)
 800050c:	486b      	ldr	r0, [pc, #428]	; (80006bc <main+0x200>)
 800050e:	2364      	movs	r3, #100	; 0x64
 8000510:	f002 face 	bl	8002ab0 <HAL_UART_Transmit>

  /* BEGIN OSCILLATOR SECTION -----------------------------------------------------*/
   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET); // Should be high by default
 8000514:	4b6a      	ldr	r3, [pc, #424]	; (80006c0 <main+0x204>)
 8000516:	2201      	movs	r2, #1
 8000518:	2140      	movs	r1, #64	; 0x40
 800051a:	0018      	movs	r0, r3
 800051c:	f000 fe70 	bl	8001200 <HAL_GPIO_WritePin>

  uart_buf_len = sprintf(uart_buf, "/* Oscillator Code ---------*/ \r\n");
 8000520:	4a68      	ldr	r2, [pc, #416]	; (80006c4 <main+0x208>)
 8000522:	4b64      	ldr	r3, [pc, #400]	; (80006b4 <main+0x1f8>)
 8000524:	0011      	movs	r1, r2
 8000526:	0018      	movs	r0, r3
 8000528:	f002 fffc 	bl	8003524 <siprintf>
 800052c:	0002      	movs	r2, r0
 800052e:	4b62      	ldr	r3, [pc, #392]	; (80006b8 <main+0x1fc>)
 8000530:	601a      	str	r2, [r3, #0]
  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
 8000532:	4b61      	ldr	r3, [pc, #388]	; (80006b8 <main+0x1fc>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	b29a      	uxth	r2, r3
 8000538:	495e      	ldr	r1, [pc, #376]	; (80006b4 <main+0x1f8>)
 800053a:	4860      	ldr	r0, [pc, #384]	; (80006bc <main+0x200>)
 800053c:	2364      	movs	r3, #100	; 0x64
 800053e:	f002 fab7 	bl	8002ab0 <HAL_UART_Transmit>

  // Set oscillator initial values
  // osc_init();
  osc_write_to_register(W_REG1, VAL_REG1);
 8000542:	2302      	movs	r3, #2
 8000544:	2204      	movs	r2, #4
 8000546:	0011      	movs	r1, r2
 8000548:	0018      	movs	r0, r3
 800054a:	f000 fa1f 	bl	800098c <osc_write_to_register>
  osc_write_to_register(W_REG2, VAL_REG2);
 800054e:	2304      	movs	r3, #4
 8000550:	2204      	movs	r2, #4
 8000552:	0011      	movs	r1, r2
 8000554:	0018      	movs	r0, r3
 8000556:	f000 fa19 	bl	800098c <osc_write_to_register>
  osc_write_to_register(W_REG3, VAL_REG3);
 800055a:	2306      	movs	r3, #6
 800055c:	223f      	movs	r2, #63	; 0x3f
 800055e:	0011      	movs	r1, r2
 8000560:	0018      	movs	r0, r3
 8000562:	f000 fa13 	bl	800098c <osc_write_to_register>
  osc_write_to_register(W_REG4, VAL_REG4);
 8000566:	2308      	movs	r3, #8
 8000568:	2257      	movs	r2, #87	; 0x57
 800056a:	0011      	movs	r1, r2
 800056c:	0018      	movs	r0, r3
 800056e:	f000 fa0d 	bl	800098c <osc_write_to_register>
  osc_write_to_register(W_REG5, VAL_REG5);
 8000572:	230a      	movs	r3, #10
 8000574:	2211      	movs	r2, #17
 8000576:	0011      	movs	r1, r2
 8000578:	0018      	movs	r0, r3
 800057a:	f000 fa07 	bl	800098c <osc_write_to_register>
  osc_write_to_register(W_REG6, VAL_REG6);
 800057e:	230c      	movs	r3, #12
 8000580:	2218      	movs	r2, #24
 8000582:	0011      	movs	r1, r2
 8000584:	0018      	movs	r0, r3
 8000586:	f000 fa01 	bl	800098c <osc_write_to_register>
  osc_write_to_register(W_REG7, VAL_REG7);
 800058a:	230e      	movs	r3, #14
 800058c:	2228      	movs	r2, #40	; 0x28
 800058e:	0011      	movs	r1, r2
 8000590:	0018      	movs	r0, r3
 8000592:	f000 f9fb 	bl	800098c <osc_write_to_register>
  osc_write_to_register(W_REG8, VAL_REG8);
 8000596:	2310      	movs	r3, #16
 8000598:	223f      	movs	r2, #63	; 0x3f
 800059a:	0011      	movs	r1, r2
 800059c:	0018      	movs	r0, r3
 800059e:	f000 f9f5 	bl	800098c <osc_write_to_register>
  osc_write_to_register(W_REG9, VAL_REG9);
 80005a2:	2312      	movs	r3, #18
 80005a4:	22ff      	movs	r2, #255	; 0xff
 80005a6:	0011      	movs	r1, r2
 80005a8:	0018      	movs	r0, r3
 80005aa:	f000 f9ef 	bl	800098c <osc_write_to_register>
  osc_write_to_register(W_REGA, VAL_REGA);
 80005ae:	2314      	movs	r3, #20
 80005b0:	22f0      	movs	r2, #240	; 0xf0
 80005b2:	0011      	movs	r1, r2
 80005b4:	0018      	movs	r0, r3
 80005b6:	f000 f9e9 	bl	800098c <osc_write_to_register>
  osc_write_to_register(W_REGB, VAL_REGB);
 80005ba:	2316      	movs	r3, #22
 80005bc:	2219      	movs	r2, #25
 80005be:	0011      	movs	r1, r2
 80005c0:	0018      	movs	r0, r3
 80005c2:	f000 f9e3 	bl	800098c <osc_write_to_register>
  osc_write_to_register(W_REGC, VAL_REGC);
 80005c6:	2318      	movs	r3, #24
 80005c8:	22bf      	movs	r2, #191	; 0xbf
 80005ca:	0011      	movs	r1, r2
 80005cc:	0018      	movs	r0, r3
 80005ce:	f000 f9dd 	bl	800098c <osc_write_to_register>
  osc_write_to_register(W_REGD, VAL_REGD);
 80005d2:	231a      	movs	r3, #26
 80005d4:	2200      	movs	r2, #0
 80005d6:	0011      	movs	r1, r2
 80005d8:	0018      	movs	r0, r3
 80005da:	f000 f9d7 	bl	800098c <osc_write_to_register>

  // Read register values
  osc_read_register(R_REG0, "REG0");
 80005de:	2201      	movs	r2, #1
 80005e0:	4b39      	ldr	r3, [pc, #228]	; (80006c8 <main+0x20c>)
 80005e2:	0019      	movs	r1, r3
 80005e4:	0010      	movs	r0, r2
 80005e6:	f000 f9fd 	bl	80009e4 <osc_read_register>
  osc_read_register(R_REG1, "REG1");
 80005ea:	2203      	movs	r2, #3
 80005ec:	4b37      	ldr	r3, [pc, #220]	; (80006cc <main+0x210>)
 80005ee:	0019      	movs	r1, r3
 80005f0:	0010      	movs	r0, r2
 80005f2:	f000 f9f7 	bl	80009e4 <osc_read_register>
  osc_read_register(R_REG2, "REG2");
 80005f6:	2205      	movs	r2, #5
 80005f8:	4b35      	ldr	r3, [pc, #212]	; (80006d0 <main+0x214>)
 80005fa:	0019      	movs	r1, r3
 80005fc:	0010      	movs	r0, r2
 80005fe:	f000 f9f1 	bl	80009e4 <osc_read_register>
  osc_read_register(R_REG3, "REG3");
 8000602:	2207      	movs	r2, #7
 8000604:	4b33      	ldr	r3, [pc, #204]	; (80006d4 <main+0x218>)
 8000606:	0019      	movs	r1, r3
 8000608:	0010      	movs	r0, r2
 800060a:	f000 f9eb 	bl	80009e4 <osc_read_register>
  osc_read_register(R_REG4, "REG4");
 800060e:	2209      	movs	r2, #9
 8000610:	4b31      	ldr	r3, [pc, #196]	; (80006d8 <main+0x21c>)
 8000612:	0019      	movs	r1, r3
 8000614:	0010      	movs	r0, r2
 8000616:	f000 f9e5 	bl	80009e4 <osc_read_register>
  osc_read_register(R_REG5, "REG5");
 800061a:	220b      	movs	r2, #11
 800061c:	4b2f      	ldr	r3, [pc, #188]	; (80006dc <main+0x220>)
 800061e:	0019      	movs	r1, r3
 8000620:	0010      	movs	r0, r2
 8000622:	f000 f9df 	bl	80009e4 <osc_read_register>
  osc_read_register(R_REG6, "REG6");
 8000626:	220d      	movs	r2, #13
 8000628:	4b2d      	ldr	r3, [pc, #180]	; (80006e0 <main+0x224>)
 800062a:	0019      	movs	r1, r3
 800062c:	0010      	movs	r0, r2
 800062e:	f000 f9d9 	bl	80009e4 <osc_read_register>
  osc_read_register(R_REG7, "REG7");
 8000632:	220f      	movs	r2, #15
 8000634:	4b2b      	ldr	r3, [pc, #172]	; (80006e4 <main+0x228>)
 8000636:	0019      	movs	r1, r3
 8000638:	0010      	movs	r0, r2
 800063a:	f000 f9d3 	bl	80009e4 <osc_read_register>
  osc_read_register(R_REG8, "REG8");
 800063e:	2211      	movs	r2, #17
 8000640:	4b29      	ldr	r3, [pc, #164]	; (80006e8 <main+0x22c>)
 8000642:	0019      	movs	r1, r3
 8000644:	0010      	movs	r0, r2
 8000646:	f000 f9cd 	bl	80009e4 <osc_read_register>
  osc_read_register(R_REG9, "REG9");
 800064a:	2213      	movs	r2, #19
 800064c:	4b27      	ldr	r3, [pc, #156]	; (80006ec <main+0x230>)
 800064e:	0019      	movs	r1, r3
 8000650:	0010      	movs	r0, r2
 8000652:	f000 f9c7 	bl	80009e4 <osc_read_register>
  osc_read_register(R_REGA, "REGA");
 8000656:	2215      	movs	r2, #21
 8000658:	4b25      	ldr	r3, [pc, #148]	; (80006f0 <main+0x234>)
 800065a:	0019      	movs	r1, r3
 800065c:	0010      	movs	r0, r2
 800065e:	f000 f9c1 	bl	80009e4 <osc_read_register>
  osc_read_register(R_REGB, "REGB");
 8000662:	2217      	movs	r2, #23
 8000664:	4b23      	ldr	r3, [pc, #140]	; (80006f4 <main+0x238>)
 8000666:	0019      	movs	r1, r3
 8000668:	0010      	movs	r0, r2
 800066a:	f000 f9bb 	bl	80009e4 <osc_read_register>
  osc_read_register(R_REGC, "REGC");
 800066e:	2219      	movs	r2, #25
 8000670:	4b21      	ldr	r3, [pc, #132]	; (80006f8 <main+0x23c>)
 8000672:	0019      	movs	r1, r3
 8000674:	0010      	movs	r0, r2
 8000676:	f000 f9b5 	bl	80009e4 <osc_read_register>
  osc_read_register(R_REGD, "REGD");
 800067a:	221b      	movs	r2, #27
 800067c:	4b1f      	ldr	r3, [pc, #124]	; (80006fc <main+0x240>)
 800067e:	0019      	movs	r1, r3
 8000680:	0010      	movs	r0, r2
 8000682:	f000 f9af 	bl	80009e4 <osc_read_register>

  uart_buf_len = sprintf(uart_buf, "=========== End Code Running ===========\r\n");
 8000686:	4a1e      	ldr	r2, [pc, #120]	; (8000700 <main+0x244>)
 8000688:	4b0a      	ldr	r3, [pc, #40]	; (80006b4 <main+0x1f8>)
 800068a:	0011      	movs	r1, r2
 800068c:	0018      	movs	r0, r3
 800068e:	f002 ff49 	bl	8003524 <siprintf>
 8000692:	0002      	movs	r2, r0
 8000694:	4b08      	ldr	r3, [pc, #32]	; (80006b8 <main+0x1fc>)
 8000696:	601a      	str	r2, [r3, #0]
  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
 8000698:	4b07      	ldr	r3, [pc, #28]	; (80006b8 <main+0x1fc>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	b29a      	uxth	r2, r3
 800069e:	4905      	ldr	r1, [pc, #20]	; (80006b4 <main+0x1f8>)
 80006a0:	4806      	ldr	r0, [pc, #24]	; (80006bc <main+0x200>)
 80006a2:	2364      	movs	r3, #100	; 0x64
 80006a4:	f002 fa04 	bl	8002ab0 <HAL_UART_Transmit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006a8:	e7fe      	b.n	80006a8 <main+0x1ec>
 80006aa:	46c0      	nop			; (mov r8, r8)
 80006ac:	20000168 	.word	0x20000168
 80006b0:	08003e10 	.word	0x08003e10
 80006b4:	20000180 	.word	0x20000180
 80006b8:	2000017c 	.word	0x2000017c
 80006bc:	200000e4 	.word	0x200000e4
 80006c0:	50000400 	.word	0x50000400
 80006c4:	08003e3c 	.word	0x08003e3c
 80006c8:	08003e60 	.word	0x08003e60
 80006cc:	08003e68 	.word	0x08003e68
 80006d0:	08003e70 	.word	0x08003e70
 80006d4:	08003e78 	.word	0x08003e78
 80006d8:	08003e80 	.word	0x08003e80
 80006dc:	08003e88 	.word	0x08003e88
 80006e0:	08003e90 	.word	0x08003e90
 80006e4:	08003e98 	.word	0x08003e98
 80006e8:	08003ea0 	.word	0x08003ea0
 80006ec:	08003ea8 	.word	0x08003ea8
 80006f0:	08003eb0 	.word	0x08003eb0
 80006f4:	08003eb8 	.word	0x08003eb8
 80006f8:	08003ec0 	.word	0x08003ec0
 80006fc:	08003ec8 	.word	0x08003ec8
 8000700:	08003ed0 	.word	0x08003ed0

08000704 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000704:	b590      	push	{r4, r7, lr}
 8000706:	b09f      	sub	sp, #124	; 0x7c
 8000708:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800070a:	2440      	movs	r4, #64	; 0x40
 800070c:	193b      	adds	r3, r7, r4
 800070e:	0018      	movs	r0, r3
 8000710:	2338      	movs	r3, #56	; 0x38
 8000712:	001a      	movs	r2, r3
 8000714:	2100      	movs	r1, #0
 8000716:	f002 fefd 	bl	8003514 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800071a:	232c      	movs	r3, #44	; 0x2c
 800071c:	18fb      	adds	r3, r7, r3
 800071e:	0018      	movs	r0, r3
 8000720:	2314      	movs	r3, #20
 8000722:	001a      	movs	r2, r3
 8000724:	2100      	movs	r1, #0
 8000726:	f002 fef5 	bl	8003514 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800072a:	1d3b      	adds	r3, r7, #4
 800072c:	0018      	movs	r0, r3
 800072e:	2328      	movs	r3, #40	; 0x28
 8000730:	001a      	movs	r2, r3
 8000732:	2100      	movs	r1, #0
 8000734:	f002 feee 	bl	8003514 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000738:	4b26      	ldr	r3, [pc, #152]	; (80007d4 <SystemClock_Config+0xd0>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a26      	ldr	r2, [pc, #152]	; (80007d8 <SystemClock_Config+0xd4>)
 800073e:	401a      	ands	r2, r3
 8000740:	4b24      	ldr	r3, [pc, #144]	; (80007d4 <SystemClock_Config+0xd0>)
 8000742:	2180      	movs	r1, #128	; 0x80
 8000744:	0109      	lsls	r1, r1, #4
 8000746:	430a      	orrs	r2, r1
 8000748:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800074a:	0021      	movs	r1, r4
 800074c:	187b      	adds	r3, r7, r1
 800074e:	2210      	movs	r2, #16
 8000750:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000752:	187b      	adds	r3, r7, r1
 8000754:	2201      	movs	r2, #1
 8000756:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000758:	187b      	adds	r3, r7, r1
 800075a:	2200      	movs	r2, #0
 800075c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 800075e:	187b      	adds	r3, r7, r1
 8000760:	22a0      	movs	r2, #160	; 0xa0
 8000762:	0212      	lsls	r2, r2, #8
 8000764:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000766:	187b      	adds	r3, r7, r1
 8000768:	2200      	movs	r2, #0
 800076a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800076c:	187b      	adds	r3, r7, r1
 800076e:	0018      	movs	r0, r3
 8000770:	f000 fd64 	bl	800123c <HAL_RCC_OscConfig>
 8000774:	1e03      	subs	r3, r0, #0
 8000776:	d001      	beq.n	800077c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000778:	f000 f980 	bl	8000a7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800077c:	212c      	movs	r1, #44	; 0x2c
 800077e:	187b      	adds	r3, r7, r1
 8000780:	220f      	movs	r2, #15
 8000782:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000784:	187b      	adds	r3, r7, r1
 8000786:	2200      	movs	r2, #0
 8000788:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800078a:	187b      	adds	r3, r7, r1
 800078c:	2200      	movs	r2, #0
 800078e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000790:	187b      	adds	r3, r7, r1
 8000792:	2200      	movs	r2, #0
 8000794:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000796:	187b      	adds	r3, r7, r1
 8000798:	2200      	movs	r2, #0
 800079a:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800079c:	187b      	adds	r3, r7, r1
 800079e:	2100      	movs	r1, #0
 80007a0:	0018      	movs	r0, r3
 80007a2:	f001 f91f 	bl	80019e4 <HAL_RCC_ClockConfig>
 80007a6:	1e03      	subs	r3, r0, #0
 80007a8:	d001      	beq.n	80007ae <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80007aa:	f000 f967 	bl	8000a7c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80007ae:	1d3b      	adds	r3, r7, #4
 80007b0:	2202      	movs	r2, #2
 80007b2:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80007b4:	1d3b      	adds	r3, r7, #4
 80007b6:	2200      	movs	r2, #0
 80007b8:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007ba:	1d3b      	adds	r3, r7, #4
 80007bc:	0018      	movs	r0, r3
 80007be:	f001 fb35 	bl	8001e2c <HAL_RCCEx_PeriphCLKConfig>
 80007c2:	1e03      	subs	r3, r0, #0
 80007c4:	d001      	beq.n	80007ca <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80007c6:	f000 f959 	bl	8000a7c <Error_Handler>
  }
}
 80007ca:	46c0      	nop			; (mov r8, r8)
 80007cc:	46bd      	mov	sp, r7
 80007ce:	b01f      	add	sp, #124	; 0x7c
 80007d0:	bd90      	pop	{r4, r7, pc}
 80007d2:	46c0      	nop			; (mov r8, r8)
 80007d4:	40007000 	.word	0x40007000
 80007d8:	ffffe7ff 	.word	0xffffe7ff

080007dc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007e0:	4b18      	ldr	r3, [pc, #96]	; (8000844 <MX_SPI1_Init+0x68>)
 80007e2:	4a19      	ldr	r2, [pc, #100]	; (8000848 <MX_SPI1_Init+0x6c>)
 80007e4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007e6:	4b17      	ldr	r3, [pc, #92]	; (8000844 <MX_SPI1_Init+0x68>)
 80007e8:	2282      	movs	r2, #130	; 0x82
 80007ea:	0052      	lsls	r2, r2, #1
 80007ec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007ee:	4b15      	ldr	r3, [pc, #84]	; (8000844 <MX_SPI1_Init+0x68>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007f4:	4b13      	ldr	r3, [pc, #76]	; (8000844 <MX_SPI1_Init+0x68>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007fa:	4b12      	ldr	r3, [pc, #72]	; (8000844 <MX_SPI1_Init+0x68>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000800:	4b10      	ldr	r3, [pc, #64]	; (8000844 <MX_SPI1_Init+0x68>)
 8000802:	2200      	movs	r2, #0
 8000804:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000806:	4b0f      	ldr	r3, [pc, #60]	; (8000844 <MX_SPI1_Init+0x68>)
 8000808:	2280      	movs	r2, #128	; 0x80
 800080a:	0092      	lsls	r2, r2, #2
 800080c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800080e:	4b0d      	ldr	r3, [pc, #52]	; (8000844 <MX_SPI1_Init+0x68>)
 8000810:	2200      	movs	r2, #0
 8000812:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000814:	4b0b      	ldr	r3, [pc, #44]	; (8000844 <MX_SPI1_Init+0x68>)
 8000816:	2200      	movs	r2, #0
 8000818:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800081a:	4b0a      	ldr	r3, [pc, #40]	; (8000844 <MX_SPI1_Init+0x68>)
 800081c:	2200      	movs	r2, #0
 800081e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000820:	4b08      	ldr	r3, [pc, #32]	; (8000844 <MX_SPI1_Init+0x68>)
 8000822:	2200      	movs	r2, #0
 8000824:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000826:	4b07      	ldr	r3, [pc, #28]	; (8000844 <MX_SPI1_Init+0x68>)
 8000828:	2207      	movs	r2, #7
 800082a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800082c:	4b05      	ldr	r3, [pc, #20]	; (8000844 <MX_SPI1_Init+0x68>)
 800082e:	0018      	movs	r0, r3
 8000830:	f001 fc70 	bl	8002114 <HAL_SPI_Init>
 8000834:	1e03      	subs	r3, r0, #0
 8000836:	d001      	beq.n	800083c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000838:	f000 f920 	bl	8000a7c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800083c:	46c0      	nop			; (mov r8, r8)
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	46c0      	nop			; (mov r8, r8)
 8000844:	2000008c 	.word	0x2000008c
 8000848:	40013000 	.word	0x40013000

0800084c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000850:	4b14      	ldr	r3, [pc, #80]	; (80008a4 <MX_USART2_UART_Init+0x58>)
 8000852:	4a15      	ldr	r2, [pc, #84]	; (80008a8 <MX_USART2_UART_Init+0x5c>)
 8000854:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000856:	4b13      	ldr	r3, [pc, #76]	; (80008a4 <MX_USART2_UART_Init+0x58>)
 8000858:	22e1      	movs	r2, #225	; 0xe1
 800085a:	0252      	lsls	r2, r2, #9
 800085c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800085e:	4b11      	ldr	r3, [pc, #68]	; (80008a4 <MX_USART2_UART_Init+0x58>)
 8000860:	2200      	movs	r2, #0
 8000862:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000864:	4b0f      	ldr	r3, [pc, #60]	; (80008a4 <MX_USART2_UART_Init+0x58>)
 8000866:	2200      	movs	r2, #0
 8000868:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800086a:	4b0e      	ldr	r3, [pc, #56]	; (80008a4 <MX_USART2_UART_Init+0x58>)
 800086c:	2200      	movs	r2, #0
 800086e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000870:	4b0c      	ldr	r3, [pc, #48]	; (80008a4 <MX_USART2_UART_Init+0x58>)
 8000872:	220c      	movs	r2, #12
 8000874:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000876:	4b0b      	ldr	r3, [pc, #44]	; (80008a4 <MX_USART2_UART_Init+0x58>)
 8000878:	2200      	movs	r2, #0
 800087a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800087c:	4b09      	ldr	r3, [pc, #36]	; (80008a4 <MX_USART2_UART_Init+0x58>)
 800087e:	2200      	movs	r2, #0
 8000880:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000882:	4b08      	ldr	r3, [pc, #32]	; (80008a4 <MX_USART2_UART_Init+0x58>)
 8000884:	2200      	movs	r2, #0
 8000886:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000888:	4b06      	ldr	r3, [pc, #24]	; (80008a4 <MX_USART2_UART_Init+0x58>)
 800088a:	2200      	movs	r2, #0
 800088c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800088e:	4b05      	ldr	r3, [pc, #20]	; (80008a4 <MX_USART2_UART_Init+0x58>)
 8000890:	0018      	movs	r0, r3
 8000892:	f002 f8b9 	bl	8002a08 <HAL_UART_Init>
 8000896:	1e03      	subs	r3, r0, #0
 8000898:	d001      	beq.n	800089e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800089a:	f000 f8ef 	bl	8000a7c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800089e:	46c0      	nop			; (mov r8, r8)
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	200000e4 	.word	0x200000e4
 80008a8:	40004400 	.word	0x40004400

080008ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008ac:	b590      	push	{r4, r7, lr}
 80008ae:	b08b      	sub	sp, #44	; 0x2c
 80008b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b2:	2414      	movs	r4, #20
 80008b4:	193b      	adds	r3, r7, r4
 80008b6:	0018      	movs	r0, r3
 80008b8:	2314      	movs	r3, #20
 80008ba:	001a      	movs	r2, r3
 80008bc:	2100      	movs	r1, #0
 80008be:	f002 fe29 	bl	8003514 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008c2:	4b2f      	ldr	r3, [pc, #188]	; (8000980 <MX_GPIO_Init+0xd4>)
 80008c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008c6:	4b2e      	ldr	r3, [pc, #184]	; (8000980 <MX_GPIO_Init+0xd4>)
 80008c8:	2104      	movs	r1, #4
 80008ca:	430a      	orrs	r2, r1
 80008cc:	62da      	str	r2, [r3, #44]	; 0x2c
 80008ce:	4b2c      	ldr	r3, [pc, #176]	; (8000980 <MX_GPIO_Init+0xd4>)
 80008d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008d2:	2204      	movs	r2, #4
 80008d4:	4013      	ands	r3, r2
 80008d6:	613b      	str	r3, [r7, #16]
 80008d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008da:	4b29      	ldr	r3, [pc, #164]	; (8000980 <MX_GPIO_Init+0xd4>)
 80008dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008de:	4b28      	ldr	r3, [pc, #160]	; (8000980 <MX_GPIO_Init+0xd4>)
 80008e0:	2180      	movs	r1, #128	; 0x80
 80008e2:	430a      	orrs	r2, r1
 80008e4:	62da      	str	r2, [r3, #44]	; 0x2c
 80008e6:	4b26      	ldr	r3, [pc, #152]	; (8000980 <MX_GPIO_Init+0xd4>)
 80008e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008ea:	2280      	movs	r2, #128	; 0x80
 80008ec:	4013      	ands	r3, r2
 80008ee:	60fb      	str	r3, [r7, #12]
 80008f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f2:	4b23      	ldr	r3, [pc, #140]	; (8000980 <MX_GPIO_Init+0xd4>)
 80008f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008f6:	4b22      	ldr	r3, [pc, #136]	; (8000980 <MX_GPIO_Init+0xd4>)
 80008f8:	2101      	movs	r1, #1
 80008fa:	430a      	orrs	r2, r1
 80008fc:	62da      	str	r2, [r3, #44]	; 0x2c
 80008fe:	4b20      	ldr	r3, [pc, #128]	; (8000980 <MX_GPIO_Init+0xd4>)
 8000900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000902:	2201      	movs	r2, #1
 8000904:	4013      	ands	r3, r2
 8000906:	60bb      	str	r3, [r7, #8]
 8000908:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800090a:	4b1d      	ldr	r3, [pc, #116]	; (8000980 <MX_GPIO_Init+0xd4>)
 800090c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800090e:	4b1c      	ldr	r3, [pc, #112]	; (8000980 <MX_GPIO_Init+0xd4>)
 8000910:	2102      	movs	r1, #2
 8000912:	430a      	orrs	r2, r1
 8000914:	62da      	str	r2, [r3, #44]	; 0x2c
 8000916:	4b1a      	ldr	r3, [pc, #104]	; (8000980 <MX_GPIO_Init+0xd4>)
 8000918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800091a:	2202      	movs	r2, #2
 800091c:	4013      	ands	r3, r2
 800091e:	607b      	str	r3, [r7, #4]
 8000920:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000922:	4b18      	ldr	r3, [pc, #96]	; (8000984 <MX_GPIO_Init+0xd8>)
 8000924:	2200      	movs	r2, #0
 8000926:	2140      	movs	r1, #64	; 0x40
 8000928:	0018      	movs	r0, r3
 800092a:	f000 fc69 	bl	8001200 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800092e:	193b      	adds	r3, r7, r4
 8000930:	2280      	movs	r2, #128	; 0x80
 8000932:	0192      	lsls	r2, r2, #6
 8000934:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000936:	193b      	adds	r3, r7, r4
 8000938:	2284      	movs	r2, #132	; 0x84
 800093a:	0392      	lsls	r2, r2, #14
 800093c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093e:	193b      	adds	r3, r7, r4
 8000940:	2200      	movs	r2, #0
 8000942:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000944:	193b      	adds	r3, r7, r4
 8000946:	4a10      	ldr	r2, [pc, #64]	; (8000988 <MX_GPIO_Init+0xdc>)
 8000948:	0019      	movs	r1, r3
 800094a:	0010      	movs	r0, r2
 800094c:	f000 fada 	bl	8000f04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000950:	0021      	movs	r1, r4
 8000952:	187b      	adds	r3, r7, r1
 8000954:	2240      	movs	r2, #64	; 0x40
 8000956:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000958:	187b      	adds	r3, r7, r1
 800095a:	2201      	movs	r2, #1
 800095c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095e:	187b      	adds	r3, r7, r1
 8000960:	2200      	movs	r2, #0
 8000962:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000964:	187b      	adds	r3, r7, r1
 8000966:	2200      	movs	r2, #0
 8000968:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800096a:	187b      	adds	r3, r7, r1
 800096c:	4a05      	ldr	r2, [pc, #20]	; (8000984 <MX_GPIO_Init+0xd8>)
 800096e:	0019      	movs	r1, r3
 8000970:	0010      	movs	r0, r2
 8000972:	f000 fac7 	bl	8000f04 <HAL_GPIO_Init>

}
 8000976:	46c0      	nop			; (mov r8, r8)
 8000978:	46bd      	mov	sp, r7
 800097a:	b00b      	add	sp, #44	; 0x2c
 800097c:	bd90      	pop	{r4, r7, pc}
 800097e:	46c0      	nop			; (mov r8, r8)
 8000980:	40021000 	.word	0x40021000
 8000984:	50000400 	.word	0x50000400
 8000988:	50000800 	.word	0x50000800

0800098c <osc_write_to_register>:

/* USER CODE BEGIN 4 */
void osc_write_to_register(uint8_t REG, uint8_t VAL)
{
 800098c:	b590      	push	{r4, r7, lr}
 800098e:	b085      	sub	sp, #20
 8000990:	af00      	add	r7, sp, #0
 8000992:	0002      	movs	r2, r0
 8000994:	1dfb      	adds	r3, r7, #7
 8000996:	701a      	strb	r2, [r3, #0]
 8000998:	1dbb      	adds	r3, r7, #6
 800099a:	1c0a      	adds	r2, r1, #0
 800099c:	701a      	strb	r2, [r3, #0]
	uint8_t tx_data[2];

	tx_data[0] = REG;
 800099e:	240c      	movs	r4, #12
 80009a0:	193b      	adds	r3, r7, r4
 80009a2:	1dfa      	adds	r2, r7, #7
 80009a4:	7812      	ldrb	r2, [r2, #0]
 80009a6:	701a      	strb	r2, [r3, #0]
	tx_data[1] = VAL;
 80009a8:	193b      	adds	r3, r7, r4
 80009aa:	1dba      	adds	r2, r7, #6
 80009ac:	7812      	ldrb	r2, [r2, #0]
 80009ae:	705a      	strb	r2, [r3, #1]


	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80009b0:	4b0a      	ldr	r3, [pc, #40]	; (80009dc <osc_write_to_register+0x50>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	2140      	movs	r1, #64	; 0x40
 80009b6:	0018      	movs	r0, r3
 80009b8:	f000 fc22 	bl	8001200 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)tx_data, 2, 100);
 80009bc:	1939      	adds	r1, r7, r4
 80009be:	4808      	ldr	r0, [pc, #32]	; (80009e0 <osc_write_to_register+0x54>)
 80009c0:	2364      	movs	r3, #100	; 0x64
 80009c2:	2202      	movs	r2, #2
 80009c4:	f001 fc3a 	bl	800223c <HAL_SPI_Transmit>
	//HAL_SPI_Transmit(&hspi1, (uint8_t *)&VAL, 1, 100);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80009c8:	4b04      	ldr	r3, [pc, #16]	; (80009dc <osc_write_to_register+0x50>)
 80009ca:	2201      	movs	r2, #1
 80009cc:	2140      	movs	r1, #64	; 0x40
 80009ce:	0018      	movs	r0, r3
 80009d0:	f000 fc16 	bl	8001200 <HAL_GPIO_WritePin>
}
 80009d4:	46c0      	nop			; (mov r8, r8)
 80009d6:	46bd      	mov	sp, r7
 80009d8:	b005      	add	sp, #20
 80009da:	bd90      	pop	{r4, r7, pc}
 80009dc:	50000400 	.word	0x50000400
 80009e0:	2000008c 	.word	0x2000008c

080009e4 <osc_read_register>:

void osc_read_register(uint8_t REG, char NAME[20])
{
 80009e4:	b5b0      	push	{r4, r5, r7, lr}
 80009e6:	b086      	sub	sp, #24
 80009e8:	af02      	add	r7, sp, #8
 80009ea:	0002      	movs	r2, r0
 80009ec:	6039      	str	r1, [r7, #0]
 80009ee:	1dfb      	adds	r3, r7, #7
 80009f0:	701a      	strb	r2, [r3, #0]
	uint8_t tx_data[2];
	uint8_t rx_data[2];

	tx_data[0] = REG;
 80009f2:	250c      	movs	r5, #12
 80009f4:	197b      	adds	r3, r7, r5
 80009f6:	1dfa      	adds	r2, r7, #7
 80009f8:	7812      	ldrb	r2, [r2, #0]
 80009fa:	701a      	strb	r2, [r3, #0]
	tx_data[1] = 0;
 80009fc:	197b      	adds	r3, r7, r5
 80009fe:	2200      	movs	r2, #0
 8000a00:	705a      	strb	r2, [r3, #1]
	rx_data[0] = 0;
 8000a02:	2408      	movs	r4, #8
 8000a04:	193b      	adds	r3, r7, r4
 8000a06:	2200      	movs	r2, #0
 8000a08:	701a      	strb	r2, [r3, #0]
	rx_data[1] = 0;
 8000a0a:	193b      	adds	r3, r7, r4
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	705a      	strb	r2, [r3, #1]

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000a10:	4b14      	ldr	r3, [pc, #80]	; (8000a64 <osc_read_register+0x80>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	2140      	movs	r1, #64	; 0x40
 8000a16:	0018      	movs	r0, r3
 8000a18:	f000 fbf2 	bl	8001200 <HAL_GPIO_WritePin>
	// HAL_SPI_Transmit(&hspi1, (uint8_t *)&REG, 1, 100);
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)tx_data, rx_data, 2, 100);
 8000a1c:	193a      	adds	r2, r7, r4
 8000a1e:	1979      	adds	r1, r7, r5
 8000a20:	4811      	ldr	r0, [pc, #68]	; (8000a68 <osc_read_register+0x84>)
 8000a22:	2364      	movs	r3, #100	; 0x64
 8000a24:	9300      	str	r3, [sp, #0]
 8000a26:	2302      	movs	r3, #2
 8000a28:	f001 fd5e 	bl	80024e8 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000a2c:	4b0d      	ldr	r3, [pc, #52]	; (8000a64 <osc_read_register+0x80>)
 8000a2e:	2201      	movs	r2, #1
 8000a30:	2140      	movs	r1, #64	; 0x40
 8000a32:	0018      	movs	r0, r3
 8000a34:	f000 fbe4 	bl	8001200 <HAL_GPIO_WritePin>

	uart_buf_len = sprintf(uart_buf, "%s Value: 0x%02x\r\n", NAME, (unsigned int)rx_data[1]);
 8000a38:	193b      	adds	r3, r7, r4
 8000a3a:	785b      	ldrb	r3, [r3, #1]
 8000a3c:	683a      	ldr	r2, [r7, #0]
 8000a3e:	490b      	ldr	r1, [pc, #44]	; (8000a6c <osc_read_register+0x88>)
 8000a40:	480b      	ldr	r0, [pc, #44]	; (8000a70 <osc_read_register+0x8c>)
 8000a42:	f002 fd6f 	bl	8003524 <siprintf>
 8000a46:	0002      	movs	r2, r0
 8000a48:	4b0a      	ldr	r3, [pc, #40]	; (8000a74 <osc_read_register+0x90>)
 8000a4a:	601a      	str	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
 8000a4c:	4b09      	ldr	r3, [pc, #36]	; (8000a74 <osc_read_register+0x90>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	b29a      	uxth	r2, r3
 8000a52:	4907      	ldr	r1, [pc, #28]	; (8000a70 <osc_read_register+0x8c>)
 8000a54:	4808      	ldr	r0, [pc, #32]	; (8000a78 <osc_read_register+0x94>)
 8000a56:	2364      	movs	r3, #100	; 0x64
 8000a58:	f002 f82a 	bl	8002ab0 <HAL_UART_Transmit>
}
 8000a5c:	46c0      	nop			; (mov r8, r8)
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	b004      	add	sp, #16
 8000a62:	bdb0      	pop	{r4, r5, r7, pc}
 8000a64:	50000400 	.word	0x50000400
 8000a68:	2000008c 	.word	0x2000008c
 8000a6c:	08003efc 	.word	0x08003efc
 8000a70:	20000180 	.word	0x20000180
 8000a74:	2000017c 	.word	0x2000017c
 8000a78:	200000e4 	.word	0x200000e4

08000a7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a80:	b672      	cpsid	i
}
 8000a82:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a84:	e7fe      	b.n	8000a84 <Error_Handler+0x8>
	...

08000a88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a8c:	4b07      	ldr	r3, [pc, #28]	; (8000aac <HAL_MspInit+0x24>)
 8000a8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a90:	4b06      	ldr	r3, [pc, #24]	; (8000aac <HAL_MspInit+0x24>)
 8000a92:	2101      	movs	r1, #1
 8000a94:	430a      	orrs	r2, r1
 8000a96:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a98:	4b04      	ldr	r3, [pc, #16]	; (8000aac <HAL_MspInit+0x24>)
 8000a9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000a9c:	4b03      	ldr	r3, [pc, #12]	; (8000aac <HAL_MspInit+0x24>)
 8000a9e:	2180      	movs	r1, #128	; 0x80
 8000aa0:	0549      	lsls	r1, r1, #21
 8000aa2:	430a      	orrs	r2, r1
 8000aa4:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aa6:	46c0      	nop			; (mov r8, r8)
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	40021000 	.word	0x40021000

08000ab0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ab0:	b590      	push	{r4, r7, lr}
 8000ab2:	b089      	sub	sp, #36	; 0x24
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab8:	240c      	movs	r4, #12
 8000aba:	193b      	adds	r3, r7, r4
 8000abc:	0018      	movs	r0, r3
 8000abe:	2314      	movs	r3, #20
 8000ac0:	001a      	movs	r2, r3
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	f002 fd26 	bl	8003514 <memset>
  if(hspi->Instance==SPI1)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a18      	ldr	r2, [pc, #96]	; (8000b30 <HAL_SPI_MspInit+0x80>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d129      	bne.n	8000b26 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ad2:	4b18      	ldr	r3, [pc, #96]	; (8000b34 <HAL_SPI_MspInit+0x84>)
 8000ad4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ad6:	4b17      	ldr	r3, [pc, #92]	; (8000b34 <HAL_SPI_MspInit+0x84>)
 8000ad8:	2180      	movs	r1, #128	; 0x80
 8000ada:	0149      	lsls	r1, r1, #5
 8000adc:	430a      	orrs	r2, r1
 8000ade:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae0:	4b14      	ldr	r3, [pc, #80]	; (8000b34 <HAL_SPI_MspInit+0x84>)
 8000ae2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ae4:	4b13      	ldr	r3, [pc, #76]	; (8000b34 <HAL_SPI_MspInit+0x84>)
 8000ae6:	2101      	movs	r1, #1
 8000ae8:	430a      	orrs	r2, r1
 8000aea:	62da      	str	r2, [r3, #44]	; 0x2c
 8000aec:	4b11      	ldr	r3, [pc, #68]	; (8000b34 <HAL_SPI_MspInit+0x84>)
 8000aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000af0:	2201      	movs	r2, #1
 8000af2:	4013      	ands	r3, r2
 8000af4:	60bb      	str	r3, [r7, #8]
 8000af6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000af8:	0021      	movs	r1, r4
 8000afa:	187b      	adds	r3, r7, r1
 8000afc:	22e0      	movs	r2, #224	; 0xe0
 8000afe:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b00:	187b      	adds	r3, r7, r1
 8000b02:	2202      	movs	r2, #2
 8000b04:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b06:	187b      	adds	r3, r7, r1
 8000b08:	2200      	movs	r2, #0
 8000b0a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b0c:	187b      	adds	r3, r7, r1
 8000b0e:	2203      	movs	r2, #3
 8000b10:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000b12:	187b      	adds	r3, r7, r1
 8000b14:	2200      	movs	r2, #0
 8000b16:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b18:	187a      	adds	r2, r7, r1
 8000b1a:	23a0      	movs	r3, #160	; 0xa0
 8000b1c:	05db      	lsls	r3, r3, #23
 8000b1e:	0011      	movs	r1, r2
 8000b20:	0018      	movs	r0, r3
 8000b22:	f000 f9ef 	bl	8000f04 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000b26:	46c0      	nop			; (mov r8, r8)
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	b009      	add	sp, #36	; 0x24
 8000b2c:	bd90      	pop	{r4, r7, pc}
 8000b2e:	46c0      	nop			; (mov r8, r8)
 8000b30:	40013000 	.word	0x40013000
 8000b34:	40021000 	.word	0x40021000

08000b38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b38:	b590      	push	{r4, r7, lr}
 8000b3a:	b089      	sub	sp, #36	; 0x24
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b40:	240c      	movs	r4, #12
 8000b42:	193b      	adds	r3, r7, r4
 8000b44:	0018      	movs	r0, r3
 8000b46:	2314      	movs	r3, #20
 8000b48:	001a      	movs	r2, r3
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	f002 fce2 	bl	8003514 <memset>
  if(huart->Instance==USART2)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a18      	ldr	r2, [pc, #96]	; (8000bb8 <HAL_UART_MspInit+0x80>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d129      	bne.n	8000bae <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b5a:	4b18      	ldr	r3, [pc, #96]	; (8000bbc <HAL_UART_MspInit+0x84>)
 8000b5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000b5e:	4b17      	ldr	r3, [pc, #92]	; (8000bbc <HAL_UART_MspInit+0x84>)
 8000b60:	2180      	movs	r1, #128	; 0x80
 8000b62:	0289      	lsls	r1, r1, #10
 8000b64:	430a      	orrs	r2, r1
 8000b66:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b68:	4b14      	ldr	r3, [pc, #80]	; (8000bbc <HAL_UART_MspInit+0x84>)
 8000b6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b6c:	4b13      	ldr	r3, [pc, #76]	; (8000bbc <HAL_UART_MspInit+0x84>)
 8000b6e:	2101      	movs	r1, #1
 8000b70:	430a      	orrs	r2, r1
 8000b72:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b74:	4b11      	ldr	r3, [pc, #68]	; (8000bbc <HAL_UART_MspInit+0x84>)
 8000b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b78:	2201      	movs	r2, #1
 8000b7a:	4013      	ands	r3, r2
 8000b7c:	60bb      	str	r3, [r7, #8]
 8000b7e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b80:	0021      	movs	r1, r4
 8000b82:	187b      	adds	r3, r7, r1
 8000b84:	220c      	movs	r2, #12
 8000b86:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b88:	187b      	adds	r3, r7, r1
 8000b8a:	2202      	movs	r2, #2
 8000b8c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8e:	187b      	adds	r3, r7, r1
 8000b90:	2200      	movs	r2, #0
 8000b92:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b94:	187b      	adds	r3, r7, r1
 8000b96:	2203      	movs	r2, #3
 8000b98:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000b9a:	187b      	adds	r3, r7, r1
 8000b9c:	2204      	movs	r2, #4
 8000b9e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba0:	187a      	adds	r2, r7, r1
 8000ba2:	23a0      	movs	r3, #160	; 0xa0
 8000ba4:	05db      	lsls	r3, r3, #23
 8000ba6:	0011      	movs	r1, r2
 8000ba8:	0018      	movs	r0, r3
 8000baa:	f000 f9ab 	bl	8000f04 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000bae:	46c0      	nop			; (mov r8, r8)
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	b009      	add	sp, #36	; 0x24
 8000bb4:	bd90      	pop	{r4, r7, pc}
 8000bb6:	46c0      	nop			; (mov r8, r8)
 8000bb8:	40004400 	.word	0x40004400
 8000bbc:	40021000 	.word	0x40021000

08000bc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bc4:	e7fe      	b.n	8000bc4 <NMI_Handler+0x4>

08000bc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bc6:	b580      	push	{r7, lr}
 8000bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bca:	e7fe      	b.n	8000bca <HardFault_Handler+0x4>

08000bcc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000bd0:	46c0      	nop			; (mov r8, r8)
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}

08000bd6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bd6:	b580      	push	{r7, lr}
 8000bd8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bda:	46c0      	nop			; (mov r8, r8)
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}

08000be0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000be4:	f000 f8be 	bl	8000d64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000be8:	46c0      	nop			; (mov r8, r8)
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
	...

08000bf0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b086      	sub	sp, #24
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bf8:	4a14      	ldr	r2, [pc, #80]	; (8000c4c <_sbrk+0x5c>)
 8000bfa:	4b15      	ldr	r3, [pc, #84]	; (8000c50 <_sbrk+0x60>)
 8000bfc:	1ad3      	subs	r3, r2, r3
 8000bfe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c04:	4b13      	ldr	r3, [pc, #76]	; (8000c54 <_sbrk+0x64>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d102      	bne.n	8000c12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c0c:	4b11      	ldr	r3, [pc, #68]	; (8000c54 <_sbrk+0x64>)
 8000c0e:	4a12      	ldr	r2, [pc, #72]	; (8000c58 <_sbrk+0x68>)
 8000c10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c12:	4b10      	ldr	r3, [pc, #64]	; (8000c54 <_sbrk+0x64>)
 8000c14:	681a      	ldr	r2, [r3, #0]
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	18d3      	adds	r3, r2, r3
 8000c1a:	693a      	ldr	r2, [r7, #16]
 8000c1c:	429a      	cmp	r2, r3
 8000c1e:	d207      	bcs.n	8000c30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c20:	f002 fc4e 	bl	80034c0 <__errno>
 8000c24:	0003      	movs	r3, r0
 8000c26:	220c      	movs	r2, #12
 8000c28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	425b      	negs	r3, r3
 8000c2e:	e009      	b.n	8000c44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c30:	4b08      	ldr	r3, [pc, #32]	; (8000c54 <_sbrk+0x64>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c36:	4b07      	ldr	r3, [pc, #28]	; (8000c54 <_sbrk+0x64>)
 8000c38:	681a      	ldr	r2, [r3, #0]
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	18d2      	adds	r2, r2, r3
 8000c3e:	4b05      	ldr	r3, [pc, #20]	; (8000c54 <_sbrk+0x64>)
 8000c40:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000c42:	68fb      	ldr	r3, [r7, #12]
}
 8000c44:	0018      	movs	r0, r3
 8000c46:	46bd      	mov	sp, r7
 8000c48:	b006      	add	sp, #24
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	20005000 	.word	0x20005000
 8000c50:	00000400 	.word	0x00000400
 8000c54:	200001b4 	.word	0x200001b4
 8000c58:	200001d0 	.word	0x200001d0

08000c5c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c60:	46c0      	nop			; (mov r8, r8)
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
	...

08000c68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000c68:	480d      	ldr	r0, [pc, #52]	; (8000ca0 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000c6a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c6c:	480d      	ldr	r0, [pc, #52]	; (8000ca4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c6e:	490e      	ldr	r1, [pc, #56]	; (8000ca8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c70:	4a0e      	ldr	r2, [pc, #56]	; (8000cac <LoopForever+0xe>)
  movs r3, #0
 8000c72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c74:	e002      	b.n	8000c7c <LoopCopyDataInit>

08000c76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c7a:	3304      	adds	r3, #4

08000c7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c80:	d3f9      	bcc.n	8000c76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c82:	4a0b      	ldr	r2, [pc, #44]	; (8000cb0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c84:	4c0b      	ldr	r4, [pc, #44]	; (8000cb4 <LoopForever+0x16>)
  movs r3, #0
 8000c86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c88:	e001      	b.n	8000c8e <LoopFillZerobss>

08000c8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c8c:	3204      	adds	r2, #4

08000c8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c90:	d3fb      	bcc.n	8000c8a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000c92:	f7ff ffe3 	bl	8000c5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c96:	f002 fc19 	bl	80034cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c9a:	f7ff fc0f 	bl	80004bc <main>

08000c9e <LoopForever>:

LoopForever:
    b LoopForever
 8000c9e:	e7fe      	b.n	8000c9e <LoopForever>
   ldr   r0, =_estack
 8000ca0:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000ca4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ca8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000cac:	08003fc0 	.word	0x08003fc0
  ldr r2, =_sbss
 8000cb0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000cb4:	200001cc 	.word	0x200001cc

08000cb8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cb8:	e7fe      	b.n	8000cb8 <ADC1_COMP_IRQHandler>
	...

08000cbc <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cc2:	1dfb      	adds	r3, r7, #7
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000cc8:	4b0b      	ldr	r3, [pc, #44]	; (8000cf8 <HAL_Init+0x3c>)
 8000cca:	681a      	ldr	r2, [r3, #0]
 8000ccc:	4b0a      	ldr	r3, [pc, #40]	; (8000cf8 <HAL_Init+0x3c>)
 8000cce:	2140      	movs	r1, #64	; 0x40
 8000cd0:	430a      	orrs	r2, r1
 8000cd2:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cd4:	2000      	movs	r0, #0
 8000cd6:	f000 f811 	bl	8000cfc <HAL_InitTick>
 8000cda:	1e03      	subs	r3, r0, #0
 8000cdc:	d003      	beq.n	8000ce6 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000cde:	1dfb      	adds	r3, r7, #7
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	701a      	strb	r2, [r3, #0]
 8000ce4:	e001      	b.n	8000cea <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ce6:	f7ff fecf 	bl	8000a88 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000cea:	1dfb      	adds	r3, r7, #7
 8000cec:	781b      	ldrb	r3, [r3, #0]
}
 8000cee:	0018      	movs	r0, r3
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	b002      	add	sp, #8
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	46c0      	nop			; (mov r8, r8)
 8000cf8:	40022000 	.word	0x40022000

08000cfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cfc:	b590      	push	{r4, r7, lr}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d04:	4b14      	ldr	r3, [pc, #80]	; (8000d58 <HAL_InitTick+0x5c>)
 8000d06:	681c      	ldr	r4, [r3, #0]
 8000d08:	4b14      	ldr	r3, [pc, #80]	; (8000d5c <HAL_InitTick+0x60>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	0019      	movs	r1, r3
 8000d0e:	23fa      	movs	r3, #250	; 0xfa
 8000d10:	0098      	lsls	r0, r3, #2
 8000d12:	f7ff fa03 	bl	800011c <__udivsi3>
 8000d16:	0003      	movs	r3, r0
 8000d18:	0019      	movs	r1, r3
 8000d1a:	0020      	movs	r0, r4
 8000d1c:	f7ff f9fe 	bl	800011c <__udivsi3>
 8000d20:	0003      	movs	r3, r0
 8000d22:	0018      	movs	r0, r3
 8000d24:	f000 f8e1 	bl	8000eea <HAL_SYSTICK_Config>
 8000d28:	1e03      	subs	r3, r0, #0
 8000d2a:	d001      	beq.n	8000d30 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	e00f      	b.n	8000d50 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	2b03      	cmp	r3, #3
 8000d34:	d80b      	bhi.n	8000d4e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d36:	6879      	ldr	r1, [r7, #4]
 8000d38:	2301      	movs	r3, #1
 8000d3a:	425b      	negs	r3, r3
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	0018      	movs	r0, r3
 8000d40:	f000 f8be 	bl	8000ec0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d44:	4b06      	ldr	r3, [pc, #24]	; (8000d60 <HAL_InitTick+0x64>)
 8000d46:	687a      	ldr	r2, [r7, #4]
 8000d48:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	e000      	b.n	8000d50 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000d4e:	2301      	movs	r3, #1
}
 8000d50:	0018      	movs	r0, r3
 8000d52:	46bd      	mov	sp, r7
 8000d54:	b003      	add	sp, #12
 8000d56:	bd90      	pop	{r4, r7, pc}
 8000d58:	20000000 	.word	0x20000000
 8000d5c:	20000008 	.word	0x20000008
 8000d60:	20000004 	.word	0x20000004

08000d64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d68:	4b05      	ldr	r3, [pc, #20]	; (8000d80 <HAL_IncTick+0x1c>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	001a      	movs	r2, r3
 8000d6e:	4b05      	ldr	r3, [pc, #20]	; (8000d84 <HAL_IncTick+0x20>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	18d2      	adds	r2, r2, r3
 8000d74:	4b03      	ldr	r3, [pc, #12]	; (8000d84 <HAL_IncTick+0x20>)
 8000d76:	601a      	str	r2, [r3, #0]
}
 8000d78:	46c0      	nop			; (mov r8, r8)
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	46c0      	nop			; (mov r8, r8)
 8000d80:	20000008 	.word	0x20000008
 8000d84:	200001b8 	.word	0x200001b8

08000d88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d8c:	4b02      	ldr	r3, [pc, #8]	; (8000d98 <HAL_GetTick+0x10>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
}
 8000d90:	0018      	movs	r0, r3
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	46c0      	nop			; (mov r8, r8)
 8000d98:	200001b8 	.word	0x200001b8

08000d9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d9c:	b590      	push	{r4, r7, lr}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	0002      	movs	r2, r0
 8000da4:	6039      	str	r1, [r7, #0]
 8000da6:	1dfb      	adds	r3, r7, #7
 8000da8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000daa:	1dfb      	adds	r3, r7, #7
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	2b7f      	cmp	r3, #127	; 0x7f
 8000db0:	d828      	bhi.n	8000e04 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000db2:	4a2f      	ldr	r2, [pc, #188]	; (8000e70 <__NVIC_SetPriority+0xd4>)
 8000db4:	1dfb      	adds	r3, r7, #7
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	b25b      	sxtb	r3, r3
 8000dba:	089b      	lsrs	r3, r3, #2
 8000dbc:	33c0      	adds	r3, #192	; 0xc0
 8000dbe:	009b      	lsls	r3, r3, #2
 8000dc0:	589b      	ldr	r3, [r3, r2]
 8000dc2:	1dfa      	adds	r2, r7, #7
 8000dc4:	7812      	ldrb	r2, [r2, #0]
 8000dc6:	0011      	movs	r1, r2
 8000dc8:	2203      	movs	r2, #3
 8000dca:	400a      	ands	r2, r1
 8000dcc:	00d2      	lsls	r2, r2, #3
 8000dce:	21ff      	movs	r1, #255	; 0xff
 8000dd0:	4091      	lsls	r1, r2
 8000dd2:	000a      	movs	r2, r1
 8000dd4:	43d2      	mvns	r2, r2
 8000dd6:	401a      	ands	r2, r3
 8000dd8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	019b      	lsls	r3, r3, #6
 8000dde:	22ff      	movs	r2, #255	; 0xff
 8000de0:	401a      	ands	r2, r3
 8000de2:	1dfb      	adds	r3, r7, #7
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	0018      	movs	r0, r3
 8000de8:	2303      	movs	r3, #3
 8000dea:	4003      	ands	r3, r0
 8000dec:	00db      	lsls	r3, r3, #3
 8000dee:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000df0:	481f      	ldr	r0, [pc, #124]	; (8000e70 <__NVIC_SetPriority+0xd4>)
 8000df2:	1dfb      	adds	r3, r7, #7
 8000df4:	781b      	ldrb	r3, [r3, #0]
 8000df6:	b25b      	sxtb	r3, r3
 8000df8:	089b      	lsrs	r3, r3, #2
 8000dfa:	430a      	orrs	r2, r1
 8000dfc:	33c0      	adds	r3, #192	; 0xc0
 8000dfe:	009b      	lsls	r3, r3, #2
 8000e00:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000e02:	e031      	b.n	8000e68 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e04:	4a1b      	ldr	r2, [pc, #108]	; (8000e74 <__NVIC_SetPriority+0xd8>)
 8000e06:	1dfb      	adds	r3, r7, #7
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	0019      	movs	r1, r3
 8000e0c:	230f      	movs	r3, #15
 8000e0e:	400b      	ands	r3, r1
 8000e10:	3b08      	subs	r3, #8
 8000e12:	089b      	lsrs	r3, r3, #2
 8000e14:	3306      	adds	r3, #6
 8000e16:	009b      	lsls	r3, r3, #2
 8000e18:	18d3      	adds	r3, r2, r3
 8000e1a:	3304      	adds	r3, #4
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	1dfa      	adds	r2, r7, #7
 8000e20:	7812      	ldrb	r2, [r2, #0]
 8000e22:	0011      	movs	r1, r2
 8000e24:	2203      	movs	r2, #3
 8000e26:	400a      	ands	r2, r1
 8000e28:	00d2      	lsls	r2, r2, #3
 8000e2a:	21ff      	movs	r1, #255	; 0xff
 8000e2c:	4091      	lsls	r1, r2
 8000e2e:	000a      	movs	r2, r1
 8000e30:	43d2      	mvns	r2, r2
 8000e32:	401a      	ands	r2, r3
 8000e34:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	019b      	lsls	r3, r3, #6
 8000e3a:	22ff      	movs	r2, #255	; 0xff
 8000e3c:	401a      	ands	r2, r3
 8000e3e:	1dfb      	adds	r3, r7, #7
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	0018      	movs	r0, r3
 8000e44:	2303      	movs	r3, #3
 8000e46:	4003      	ands	r3, r0
 8000e48:	00db      	lsls	r3, r3, #3
 8000e4a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e4c:	4809      	ldr	r0, [pc, #36]	; (8000e74 <__NVIC_SetPriority+0xd8>)
 8000e4e:	1dfb      	adds	r3, r7, #7
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	001c      	movs	r4, r3
 8000e54:	230f      	movs	r3, #15
 8000e56:	4023      	ands	r3, r4
 8000e58:	3b08      	subs	r3, #8
 8000e5a:	089b      	lsrs	r3, r3, #2
 8000e5c:	430a      	orrs	r2, r1
 8000e5e:	3306      	adds	r3, #6
 8000e60:	009b      	lsls	r3, r3, #2
 8000e62:	18c3      	adds	r3, r0, r3
 8000e64:	3304      	adds	r3, #4
 8000e66:	601a      	str	r2, [r3, #0]
}
 8000e68:	46c0      	nop			; (mov r8, r8)
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	b003      	add	sp, #12
 8000e6e:	bd90      	pop	{r4, r7, pc}
 8000e70:	e000e100 	.word	0xe000e100
 8000e74:	e000ed00 	.word	0xe000ed00

08000e78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	1e5a      	subs	r2, r3, #1
 8000e84:	2380      	movs	r3, #128	; 0x80
 8000e86:	045b      	lsls	r3, r3, #17
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	d301      	bcc.n	8000e90 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	e010      	b.n	8000eb2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e90:	4b0a      	ldr	r3, [pc, #40]	; (8000ebc <SysTick_Config+0x44>)
 8000e92:	687a      	ldr	r2, [r7, #4]
 8000e94:	3a01      	subs	r2, #1
 8000e96:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e98:	2301      	movs	r3, #1
 8000e9a:	425b      	negs	r3, r3
 8000e9c:	2103      	movs	r1, #3
 8000e9e:	0018      	movs	r0, r3
 8000ea0:	f7ff ff7c 	bl	8000d9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ea4:	4b05      	ldr	r3, [pc, #20]	; (8000ebc <SysTick_Config+0x44>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eaa:	4b04      	ldr	r3, [pc, #16]	; (8000ebc <SysTick_Config+0x44>)
 8000eac:	2207      	movs	r2, #7
 8000eae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000eb0:	2300      	movs	r3, #0
}
 8000eb2:	0018      	movs	r0, r3
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	b002      	add	sp, #8
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	46c0      	nop			; (mov r8, r8)
 8000ebc:	e000e010 	.word	0xe000e010

08000ec0 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	60b9      	str	r1, [r7, #8]
 8000ec8:	607a      	str	r2, [r7, #4]
 8000eca:	210f      	movs	r1, #15
 8000ecc:	187b      	adds	r3, r7, r1
 8000ece:	1c02      	adds	r2, r0, #0
 8000ed0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000ed2:	68ba      	ldr	r2, [r7, #8]
 8000ed4:	187b      	adds	r3, r7, r1
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	b25b      	sxtb	r3, r3
 8000eda:	0011      	movs	r1, r2
 8000edc:	0018      	movs	r0, r3
 8000ede:	f7ff ff5d 	bl	8000d9c <__NVIC_SetPriority>
}
 8000ee2:	46c0      	nop			; (mov r8, r8)
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	b004      	add	sp, #16
 8000ee8:	bd80      	pop	{r7, pc}

08000eea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eea:	b580      	push	{r7, lr}
 8000eec:	b082      	sub	sp, #8
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	0018      	movs	r0, r3
 8000ef6:	f7ff ffbf 	bl	8000e78 <SysTick_Config>
 8000efa:	0003      	movs	r3, r0
}
 8000efc:	0018      	movs	r0, r3
 8000efe:	46bd      	mov	sp, r7
 8000f00:	b002      	add	sp, #8
 8000f02:	bd80      	pop	{r7, pc}

08000f04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b086      	sub	sp, #24
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f12:	2300      	movs	r3, #0
 8000f14:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000f16:	2300      	movs	r3, #0
 8000f18:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000f1a:	e155      	b.n	80011c8 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	2101      	movs	r1, #1
 8000f22:	697a      	ldr	r2, [r7, #20]
 8000f24:	4091      	lsls	r1, r2
 8000f26:	000a      	movs	r2, r1
 8000f28:	4013      	ands	r3, r2
 8000f2a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d100      	bne.n	8000f34 <HAL_GPIO_Init+0x30>
 8000f32:	e146      	b.n	80011c2 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	2203      	movs	r2, #3
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	2b01      	cmp	r3, #1
 8000f3e:	d005      	beq.n	8000f4c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	2203      	movs	r2, #3
 8000f46:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000f48:	2b02      	cmp	r3, #2
 8000f4a:	d130      	bne.n	8000fae <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	689b      	ldr	r3, [r3, #8]
 8000f50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	005b      	lsls	r3, r3, #1
 8000f56:	2203      	movs	r2, #3
 8000f58:	409a      	lsls	r2, r3
 8000f5a:	0013      	movs	r3, r2
 8000f5c:	43da      	mvns	r2, r3
 8000f5e:	693b      	ldr	r3, [r7, #16]
 8000f60:	4013      	ands	r3, r2
 8000f62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	68da      	ldr	r2, [r3, #12]
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	005b      	lsls	r3, r3, #1
 8000f6c:	409a      	lsls	r2, r3
 8000f6e:	0013      	movs	r3, r2
 8000f70:	693a      	ldr	r2, [r7, #16]
 8000f72:	4313      	orrs	r3, r2
 8000f74:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	693a      	ldr	r2, [r7, #16]
 8000f7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f82:	2201      	movs	r2, #1
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	409a      	lsls	r2, r3
 8000f88:	0013      	movs	r3, r2
 8000f8a:	43da      	mvns	r2, r3
 8000f8c:	693b      	ldr	r3, [r7, #16]
 8000f8e:	4013      	ands	r3, r2
 8000f90:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	091b      	lsrs	r3, r3, #4
 8000f98:	2201      	movs	r2, #1
 8000f9a:	401a      	ands	r2, r3
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	409a      	lsls	r2, r3
 8000fa0:	0013      	movs	r3, r2
 8000fa2:	693a      	ldr	r2, [r7, #16]
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	693a      	ldr	r2, [r7, #16]
 8000fac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	2203      	movs	r2, #3
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	2b03      	cmp	r3, #3
 8000fb8:	d017      	beq.n	8000fea <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	68db      	ldr	r3, [r3, #12]
 8000fbe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	005b      	lsls	r3, r3, #1
 8000fc4:	2203      	movs	r2, #3
 8000fc6:	409a      	lsls	r2, r3
 8000fc8:	0013      	movs	r3, r2
 8000fca:	43da      	mvns	r2, r3
 8000fcc:	693b      	ldr	r3, [r7, #16]
 8000fce:	4013      	ands	r3, r2
 8000fd0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	689a      	ldr	r2, [r3, #8]
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	005b      	lsls	r3, r3, #1
 8000fda:	409a      	lsls	r2, r3
 8000fdc:	0013      	movs	r3, r2
 8000fde:	693a      	ldr	r2, [r7, #16]
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	2203      	movs	r2, #3
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	2b02      	cmp	r3, #2
 8000ff4:	d123      	bne.n	800103e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	08da      	lsrs	r2, r3, #3
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	3208      	adds	r2, #8
 8000ffe:	0092      	lsls	r2, r2, #2
 8001000:	58d3      	ldr	r3, [r2, r3]
 8001002:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	2207      	movs	r2, #7
 8001008:	4013      	ands	r3, r2
 800100a:	009b      	lsls	r3, r3, #2
 800100c:	220f      	movs	r2, #15
 800100e:	409a      	lsls	r2, r3
 8001010:	0013      	movs	r3, r2
 8001012:	43da      	mvns	r2, r3
 8001014:	693b      	ldr	r3, [r7, #16]
 8001016:	4013      	ands	r3, r2
 8001018:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	691a      	ldr	r2, [r3, #16]
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	2107      	movs	r1, #7
 8001022:	400b      	ands	r3, r1
 8001024:	009b      	lsls	r3, r3, #2
 8001026:	409a      	lsls	r2, r3
 8001028:	0013      	movs	r3, r2
 800102a:	693a      	ldr	r2, [r7, #16]
 800102c:	4313      	orrs	r3, r2
 800102e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	08da      	lsrs	r2, r3, #3
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	3208      	adds	r2, #8
 8001038:	0092      	lsls	r2, r2, #2
 800103a:	6939      	ldr	r1, [r7, #16]
 800103c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	005b      	lsls	r3, r3, #1
 8001048:	2203      	movs	r2, #3
 800104a:	409a      	lsls	r2, r3
 800104c:	0013      	movs	r3, r2
 800104e:	43da      	mvns	r2, r3
 8001050:	693b      	ldr	r3, [r7, #16]
 8001052:	4013      	ands	r3, r2
 8001054:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	2203      	movs	r2, #3
 800105c:	401a      	ands	r2, r3
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	005b      	lsls	r3, r3, #1
 8001062:	409a      	lsls	r2, r3
 8001064:	0013      	movs	r3, r2
 8001066:	693a      	ldr	r2, [r7, #16]
 8001068:	4313      	orrs	r3, r2
 800106a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	693a      	ldr	r2, [r7, #16]
 8001070:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	685a      	ldr	r2, [r3, #4]
 8001076:	23c0      	movs	r3, #192	; 0xc0
 8001078:	029b      	lsls	r3, r3, #10
 800107a:	4013      	ands	r3, r2
 800107c:	d100      	bne.n	8001080 <HAL_GPIO_Init+0x17c>
 800107e:	e0a0      	b.n	80011c2 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001080:	4b57      	ldr	r3, [pc, #348]	; (80011e0 <HAL_GPIO_Init+0x2dc>)
 8001082:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001084:	4b56      	ldr	r3, [pc, #344]	; (80011e0 <HAL_GPIO_Init+0x2dc>)
 8001086:	2101      	movs	r1, #1
 8001088:	430a      	orrs	r2, r1
 800108a:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 800108c:	4a55      	ldr	r2, [pc, #340]	; (80011e4 <HAL_GPIO_Init+0x2e0>)
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	089b      	lsrs	r3, r3, #2
 8001092:	3302      	adds	r3, #2
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	589b      	ldr	r3, [r3, r2]
 8001098:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	2203      	movs	r2, #3
 800109e:	4013      	ands	r3, r2
 80010a0:	009b      	lsls	r3, r3, #2
 80010a2:	220f      	movs	r2, #15
 80010a4:	409a      	lsls	r2, r3
 80010a6:	0013      	movs	r3, r2
 80010a8:	43da      	mvns	r2, r3
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	4013      	ands	r3, r2
 80010ae:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80010b0:	687a      	ldr	r2, [r7, #4]
 80010b2:	23a0      	movs	r3, #160	; 0xa0
 80010b4:	05db      	lsls	r3, r3, #23
 80010b6:	429a      	cmp	r2, r3
 80010b8:	d01f      	beq.n	80010fa <HAL_GPIO_Init+0x1f6>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4a4a      	ldr	r2, [pc, #296]	; (80011e8 <HAL_GPIO_Init+0x2e4>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d019      	beq.n	80010f6 <HAL_GPIO_Init+0x1f2>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4a49      	ldr	r2, [pc, #292]	; (80011ec <HAL_GPIO_Init+0x2e8>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d013      	beq.n	80010f2 <HAL_GPIO_Init+0x1ee>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4a48      	ldr	r2, [pc, #288]	; (80011f0 <HAL_GPIO_Init+0x2ec>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d00d      	beq.n	80010ee <HAL_GPIO_Init+0x1ea>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4a47      	ldr	r2, [pc, #284]	; (80011f4 <HAL_GPIO_Init+0x2f0>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d007      	beq.n	80010ea <HAL_GPIO_Init+0x1e6>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4a46      	ldr	r2, [pc, #280]	; (80011f8 <HAL_GPIO_Init+0x2f4>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d101      	bne.n	80010e6 <HAL_GPIO_Init+0x1e2>
 80010e2:	2305      	movs	r3, #5
 80010e4:	e00a      	b.n	80010fc <HAL_GPIO_Init+0x1f8>
 80010e6:	2306      	movs	r3, #6
 80010e8:	e008      	b.n	80010fc <HAL_GPIO_Init+0x1f8>
 80010ea:	2304      	movs	r3, #4
 80010ec:	e006      	b.n	80010fc <HAL_GPIO_Init+0x1f8>
 80010ee:	2303      	movs	r3, #3
 80010f0:	e004      	b.n	80010fc <HAL_GPIO_Init+0x1f8>
 80010f2:	2302      	movs	r3, #2
 80010f4:	e002      	b.n	80010fc <HAL_GPIO_Init+0x1f8>
 80010f6:	2301      	movs	r3, #1
 80010f8:	e000      	b.n	80010fc <HAL_GPIO_Init+0x1f8>
 80010fa:	2300      	movs	r3, #0
 80010fc:	697a      	ldr	r2, [r7, #20]
 80010fe:	2103      	movs	r1, #3
 8001100:	400a      	ands	r2, r1
 8001102:	0092      	lsls	r2, r2, #2
 8001104:	4093      	lsls	r3, r2
 8001106:	693a      	ldr	r2, [r7, #16]
 8001108:	4313      	orrs	r3, r2
 800110a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800110c:	4935      	ldr	r1, [pc, #212]	; (80011e4 <HAL_GPIO_Init+0x2e0>)
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	089b      	lsrs	r3, r3, #2
 8001112:	3302      	adds	r3, #2
 8001114:	009b      	lsls	r3, r3, #2
 8001116:	693a      	ldr	r2, [r7, #16]
 8001118:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800111a:	4b38      	ldr	r3, [pc, #224]	; (80011fc <HAL_GPIO_Init+0x2f8>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	43da      	mvns	r2, r3
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	4013      	ands	r3, r2
 8001128:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	685a      	ldr	r2, [r3, #4]
 800112e:	2380      	movs	r3, #128	; 0x80
 8001130:	025b      	lsls	r3, r3, #9
 8001132:	4013      	ands	r3, r2
 8001134:	d003      	beq.n	800113e <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8001136:	693a      	ldr	r2, [r7, #16]
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	4313      	orrs	r3, r2
 800113c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800113e:	4b2f      	ldr	r3, [pc, #188]	; (80011fc <HAL_GPIO_Init+0x2f8>)
 8001140:	693a      	ldr	r2, [r7, #16]
 8001142:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001144:	4b2d      	ldr	r3, [pc, #180]	; (80011fc <HAL_GPIO_Init+0x2f8>)
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	43da      	mvns	r2, r3
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	4013      	ands	r3, r2
 8001152:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685a      	ldr	r2, [r3, #4]
 8001158:	2380      	movs	r3, #128	; 0x80
 800115a:	029b      	lsls	r3, r3, #10
 800115c:	4013      	ands	r3, r2
 800115e:	d003      	beq.n	8001168 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001160:	693a      	ldr	r2, [r7, #16]
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	4313      	orrs	r3, r2
 8001166:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001168:	4b24      	ldr	r3, [pc, #144]	; (80011fc <HAL_GPIO_Init+0x2f8>)
 800116a:	693a      	ldr	r2, [r7, #16]
 800116c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800116e:	4b23      	ldr	r3, [pc, #140]	; (80011fc <HAL_GPIO_Init+0x2f8>)
 8001170:	689b      	ldr	r3, [r3, #8]
 8001172:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	43da      	mvns	r2, r3
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	4013      	ands	r3, r2
 800117c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	685a      	ldr	r2, [r3, #4]
 8001182:	2380      	movs	r3, #128	; 0x80
 8001184:	035b      	lsls	r3, r3, #13
 8001186:	4013      	ands	r3, r2
 8001188:	d003      	beq.n	8001192 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800118a:	693a      	ldr	r2, [r7, #16]
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	4313      	orrs	r3, r2
 8001190:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001192:	4b1a      	ldr	r3, [pc, #104]	; (80011fc <HAL_GPIO_Init+0x2f8>)
 8001194:	693a      	ldr	r2, [r7, #16]
 8001196:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001198:	4b18      	ldr	r3, [pc, #96]	; (80011fc <HAL_GPIO_Init+0x2f8>)
 800119a:	68db      	ldr	r3, [r3, #12]
 800119c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	43da      	mvns	r2, r3
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	4013      	ands	r3, r2
 80011a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685a      	ldr	r2, [r3, #4]
 80011ac:	2380      	movs	r3, #128	; 0x80
 80011ae:	039b      	lsls	r3, r3, #14
 80011b0:	4013      	ands	r3, r2
 80011b2:	d003      	beq.n	80011bc <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 80011b4:	693a      	ldr	r2, [r7, #16]
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	4313      	orrs	r3, r2
 80011ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80011bc:	4b0f      	ldr	r3, [pc, #60]	; (80011fc <HAL_GPIO_Init+0x2f8>)
 80011be:	693a      	ldr	r2, [r7, #16]
 80011c0:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	3301      	adds	r3, #1
 80011c6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	40da      	lsrs	r2, r3
 80011d0:	1e13      	subs	r3, r2, #0
 80011d2:	d000      	beq.n	80011d6 <HAL_GPIO_Init+0x2d2>
 80011d4:	e6a2      	b.n	8000f1c <HAL_GPIO_Init+0x18>
  }
}
 80011d6:	46c0      	nop			; (mov r8, r8)
 80011d8:	46c0      	nop			; (mov r8, r8)
 80011da:	46bd      	mov	sp, r7
 80011dc:	b006      	add	sp, #24
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	40021000 	.word	0x40021000
 80011e4:	40010000 	.word	0x40010000
 80011e8:	50000400 	.word	0x50000400
 80011ec:	50000800 	.word	0x50000800
 80011f0:	50000c00 	.word	0x50000c00
 80011f4:	50001000 	.word	0x50001000
 80011f8:	50001c00 	.word	0x50001c00
 80011fc:	40010400 	.word	0x40010400

08001200 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	0008      	movs	r0, r1
 800120a:	0011      	movs	r1, r2
 800120c:	1cbb      	adds	r3, r7, #2
 800120e:	1c02      	adds	r2, r0, #0
 8001210:	801a      	strh	r2, [r3, #0]
 8001212:	1c7b      	adds	r3, r7, #1
 8001214:	1c0a      	adds	r2, r1, #0
 8001216:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001218:	1c7b      	adds	r3, r7, #1
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d004      	beq.n	800122a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001220:	1cbb      	adds	r3, r7, #2
 8001222:	881a      	ldrh	r2, [r3, #0]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001228:	e003      	b.n	8001232 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800122a:	1cbb      	adds	r3, r7, #2
 800122c:	881a      	ldrh	r2, [r3, #0]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001232:	46c0      	nop			; (mov r8, r8)
 8001234:	46bd      	mov	sp, r7
 8001236:	b002      	add	sp, #8
 8001238:	bd80      	pop	{r7, pc}
	...

0800123c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800123c:	b5b0      	push	{r4, r5, r7, lr}
 800123e:	b08a      	sub	sp, #40	; 0x28
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d102      	bne.n	8001250 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	f000 fbbf 	bl	80019ce <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001250:	4bc9      	ldr	r3, [pc, #804]	; (8001578 <HAL_RCC_OscConfig+0x33c>)
 8001252:	68db      	ldr	r3, [r3, #12]
 8001254:	220c      	movs	r2, #12
 8001256:	4013      	ands	r3, r2
 8001258:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800125a:	4bc7      	ldr	r3, [pc, #796]	; (8001578 <HAL_RCC_OscConfig+0x33c>)
 800125c:	68da      	ldr	r2, [r3, #12]
 800125e:	2380      	movs	r3, #128	; 0x80
 8001260:	025b      	lsls	r3, r3, #9
 8001262:	4013      	ands	r3, r2
 8001264:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	2201      	movs	r2, #1
 800126c:	4013      	ands	r3, r2
 800126e:	d100      	bne.n	8001272 <HAL_RCC_OscConfig+0x36>
 8001270:	e07e      	b.n	8001370 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	2b08      	cmp	r3, #8
 8001276:	d007      	beq.n	8001288 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001278:	69fb      	ldr	r3, [r7, #28]
 800127a:	2b0c      	cmp	r3, #12
 800127c:	d112      	bne.n	80012a4 <HAL_RCC_OscConfig+0x68>
 800127e:	69ba      	ldr	r2, [r7, #24]
 8001280:	2380      	movs	r3, #128	; 0x80
 8001282:	025b      	lsls	r3, r3, #9
 8001284:	429a      	cmp	r2, r3
 8001286:	d10d      	bne.n	80012a4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001288:	4bbb      	ldr	r3, [pc, #748]	; (8001578 <HAL_RCC_OscConfig+0x33c>)
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	2380      	movs	r3, #128	; 0x80
 800128e:	029b      	lsls	r3, r3, #10
 8001290:	4013      	ands	r3, r2
 8001292:	d100      	bne.n	8001296 <HAL_RCC_OscConfig+0x5a>
 8001294:	e06b      	b.n	800136e <HAL_RCC_OscConfig+0x132>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d167      	bne.n	800136e <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	f000 fb95 	bl	80019ce <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	685a      	ldr	r2, [r3, #4]
 80012a8:	2380      	movs	r3, #128	; 0x80
 80012aa:	025b      	lsls	r3, r3, #9
 80012ac:	429a      	cmp	r2, r3
 80012ae:	d107      	bne.n	80012c0 <HAL_RCC_OscConfig+0x84>
 80012b0:	4bb1      	ldr	r3, [pc, #708]	; (8001578 <HAL_RCC_OscConfig+0x33c>)
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	4bb0      	ldr	r3, [pc, #704]	; (8001578 <HAL_RCC_OscConfig+0x33c>)
 80012b6:	2180      	movs	r1, #128	; 0x80
 80012b8:	0249      	lsls	r1, r1, #9
 80012ba:	430a      	orrs	r2, r1
 80012bc:	601a      	str	r2, [r3, #0]
 80012be:	e027      	b.n	8001310 <HAL_RCC_OscConfig+0xd4>
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	685a      	ldr	r2, [r3, #4]
 80012c4:	23a0      	movs	r3, #160	; 0xa0
 80012c6:	02db      	lsls	r3, r3, #11
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d10e      	bne.n	80012ea <HAL_RCC_OscConfig+0xae>
 80012cc:	4baa      	ldr	r3, [pc, #680]	; (8001578 <HAL_RCC_OscConfig+0x33c>)
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	4ba9      	ldr	r3, [pc, #676]	; (8001578 <HAL_RCC_OscConfig+0x33c>)
 80012d2:	2180      	movs	r1, #128	; 0x80
 80012d4:	02c9      	lsls	r1, r1, #11
 80012d6:	430a      	orrs	r2, r1
 80012d8:	601a      	str	r2, [r3, #0]
 80012da:	4ba7      	ldr	r3, [pc, #668]	; (8001578 <HAL_RCC_OscConfig+0x33c>)
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	4ba6      	ldr	r3, [pc, #664]	; (8001578 <HAL_RCC_OscConfig+0x33c>)
 80012e0:	2180      	movs	r1, #128	; 0x80
 80012e2:	0249      	lsls	r1, r1, #9
 80012e4:	430a      	orrs	r2, r1
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	e012      	b.n	8001310 <HAL_RCC_OscConfig+0xd4>
 80012ea:	4ba3      	ldr	r3, [pc, #652]	; (8001578 <HAL_RCC_OscConfig+0x33c>)
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	4ba2      	ldr	r3, [pc, #648]	; (8001578 <HAL_RCC_OscConfig+0x33c>)
 80012f0:	49a2      	ldr	r1, [pc, #648]	; (800157c <HAL_RCC_OscConfig+0x340>)
 80012f2:	400a      	ands	r2, r1
 80012f4:	601a      	str	r2, [r3, #0]
 80012f6:	4ba0      	ldr	r3, [pc, #640]	; (8001578 <HAL_RCC_OscConfig+0x33c>)
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	2380      	movs	r3, #128	; 0x80
 80012fc:	025b      	lsls	r3, r3, #9
 80012fe:	4013      	ands	r3, r2
 8001300:	60fb      	str	r3, [r7, #12]
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	4b9c      	ldr	r3, [pc, #624]	; (8001578 <HAL_RCC_OscConfig+0x33c>)
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	4b9b      	ldr	r3, [pc, #620]	; (8001578 <HAL_RCC_OscConfig+0x33c>)
 800130a:	499d      	ldr	r1, [pc, #628]	; (8001580 <HAL_RCC_OscConfig+0x344>)
 800130c:	400a      	ands	r2, r1
 800130e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d015      	beq.n	8001344 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001318:	f7ff fd36 	bl	8000d88 <HAL_GetTick>
 800131c:	0003      	movs	r3, r0
 800131e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001320:	e009      	b.n	8001336 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001322:	f7ff fd31 	bl	8000d88 <HAL_GetTick>
 8001326:	0002      	movs	r2, r0
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	1ad3      	subs	r3, r2, r3
 800132c:	2b64      	cmp	r3, #100	; 0x64
 800132e:	d902      	bls.n	8001336 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001330:	2303      	movs	r3, #3
 8001332:	f000 fb4c 	bl	80019ce <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001336:	4b90      	ldr	r3, [pc, #576]	; (8001578 <HAL_RCC_OscConfig+0x33c>)
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	2380      	movs	r3, #128	; 0x80
 800133c:	029b      	lsls	r3, r3, #10
 800133e:	4013      	ands	r3, r2
 8001340:	d0ef      	beq.n	8001322 <HAL_RCC_OscConfig+0xe6>
 8001342:	e015      	b.n	8001370 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001344:	f7ff fd20 	bl	8000d88 <HAL_GetTick>
 8001348:	0003      	movs	r3, r0
 800134a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800134c:	e008      	b.n	8001360 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800134e:	f7ff fd1b 	bl	8000d88 <HAL_GetTick>
 8001352:	0002      	movs	r2, r0
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	1ad3      	subs	r3, r2, r3
 8001358:	2b64      	cmp	r3, #100	; 0x64
 800135a:	d901      	bls.n	8001360 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 800135c:	2303      	movs	r3, #3
 800135e:	e336      	b.n	80019ce <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001360:	4b85      	ldr	r3, [pc, #532]	; (8001578 <HAL_RCC_OscConfig+0x33c>)
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	2380      	movs	r3, #128	; 0x80
 8001366:	029b      	lsls	r3, r3, #10
 8001368:	4013      	ands	r3, r2
 800136a:	d1f0      	bne.n	800134e <HAL_RCC_OscConfig+0x112>
 800136c:	e000      	b.n	8001370 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800136e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	2202      	movs	r2, #2
 8001376:	4013      	ands	r3, r2
 8001378:	d100      	bne.n	800137c <HAL_RCC_OscConfig+0x140>
 800137a:	e099      	b.n	80014b0 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	68db      	ldr	r3, [r3, #12]
 8001380:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001384:	2220      	movs	r2, #32
 8001386:	4013      	ands	r3, r2
 8001388:	d009      	beq.n	800139e <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800138a:	4b7b      	ldr	r3, [pc, #492]	; (8001578 <HAL_RCC_OscConfig+0x33c>)
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	4b7a      	ldr	r3, [pc, #488]	; (8001578 <HAL_RCC_OscConfig+0x33c>)
 8001390:	2120      	movs	r1, #32
 8001392:	430a      	orrs	r2, r1
 8001394:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001398:	2220      	movs	r2, #32
 800139a:	4393      	bics	r3, r2
 800139c:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	2b04      	cmp	r3, #4
 80013a2:	d005      	beq.n	80013b0 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	2b0c      	cmp	r3, #12
 80013a8:	d13e      	bne.n	8001428 <HAL_RCC_OscConfig+0x1ec>
 80013aa:	69bb      	ldr	r3, [r7, #24]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d13b      	bne.n	8001428 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80013b0:	4b71      	ldr	r3, [pc, #452]	; (8001578 <HAL_RCC_OscConfig+0x33c>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	2204      	movs	r2, #4
 80013b6:	4013      	ands	r3, r2
 80013b8:	d004      	beq.n	80013c4 <HAL_RCC_OscConfig+0x188>
 80013ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d101      	bne.n	80013c4 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80013c0:	2301      	movs	r3, #1
 80013c2:	e304      	b.n	80019ce <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013c4:	4b6c      	ldr	r3, [pc, #432]	; (8001578 <HAL_RCC_OscConfig+0x33c>)
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	4a6e      	ldr	r2, [pc, #440]	; (8001584 <HAL_RCC_OscConfig+0x348>)
 80013ca:	4013      	ands	r3, r2
 80013cc:	0019      	movs	r1, r3
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	691b      	ldr	r3, [r3, #16]
 80013d2:	021a      	lsls	r2, r3, #8
 80013d4:	4b68      	ldr	r3, [pc, #416]	; (8001578 <HAL_RCC_OscConfig+0x33c>)
 80013d6:	430a      	orrs	r2, r1
 80013d8:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80013da:	4b67      	ldr	r3, [pc, #412]	; (8001578 <HAL_RCC_OscConfig+0x33c>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	2209      	movs	r2, #9
 80013e0:	4393      	bics	r3, r2
 80013e2:	0019      	movs	r1, r3
 80013e4:	4b64      	ldr	r3, [pc, #400]	; (8001578 <HAL_RCC_OscConfig+0x33c>)
 80013e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013e8:	430a      	orrs	r2, r1
 80013ea:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80013ec:	f000 fc42 	bl	8001c74 <HAL_RCC_GetSysClockFreq>
 80013f0:	0001      	movs	r1, r0
 80013f2:	4b61      	ldr	r3, [pc, #388]	; (8001578 <HAL_RCC_OscConfig+0x33c>)
 80013f4:	68db      	ldr	r3, [r3, #12]
 80013f6:	091b      	lsrs	r3, r3, #4
 80013f8:	220f      	movs	r2, #15
 80013fa:	4013      	ands	r3, r2
 80013fc:	4a62      	ldr	r2, [pc, #392]	; (8001588 <HAL_RCC_OscConfig+0x34c>)
 80013fe:	5cd3      	ldrb	r3, [r2, r3]
 8001400:	000a      	movs	r2, r1
 8001402:	40da      	lsrs	r2, r3
 8001404:	4b61      	ldr	r3, [pc, #388]	; (800158c <HAL_RCC_OscConfig+0x350>)
 8001406:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001408:	4b61      	ldr	r3, [pc, #388]	; (8001590 <HAL_RCC_OscConfig+0x354>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	2513      	movs	r5, #19
 800140e:	197c      	adds	r4, r7, r5
 8001410:	0018      	movs	r0, r3
 8001412:	f7ff fc73 	bl	8000cfc <HAL_InitTick>
 8001416:	0003      	movs	r3, r0
 8001418:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800141a:	197b      	adds	r3, r7, r5
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d046      	beq.n	80014b0 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8001422:	197b      	adds	r3, r7, r5
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	e2d2      	b.n	80019ce <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800142a:	2b00      	cmp	r3, #0
 800142c:	d027      	beq.n	800147e <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800142e:	4b52      	ldr	r3, [pc, #328]	; (8001578 <HAL_RCC_OscConfig+0x33c>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	2209      	movs	r2, #9
 8001434:	4393      	bics	r3, r2
 8001436:	0019      	movs	r1, r3
 8001438:	4b4f      	ldr	r3, [pc, #316]	; (8001578 <HAL_RCC_OscConfig+0x33c>)
 800143a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800143c:	430a      	orrs	r2, r1
 800143e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001440:	f7ff fca2 	bl	8000d88 <HAL_GetTick>
 8001444:	0003      	movs	r3, r0
 8001446:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001448:	e008      	b.n	800145c <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800144a:	f7ff fc9d 	bl	8000d88 <HAL_GetTick>
 800144e:	0002      	movs	r2, r0
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	1ad3      	subs	r3, r2, r3
 8001454:	2b02      	cmp	r3, #2
 8001456:	d901      	bls.n	800145c <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8001458:	2303      	movs	r3, #3
 800145a:	e2b8      	b.n	80019ce <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800145c:	4b46      	ldr	r3, [pc, #280]	; (8001578 <HAL_RCC_OscConfig+0x33c>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	2204      	movs	r2, #4
 8001462:	4013      	ands	r3, r2
 8001464:	d0f1      	beq.n	800144a <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001466:	4b44      	ldr	r3, [pc, #272]	; (8001578 <HAL_RCC_OscConfig+0x33c>)
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	4a46      	ldr	r2, [pc, #280]	; (8001584 <HAL_RCC_OscConfig+0x348>)
 800146c:	4013      	ands	r3, r2
 800146e:	0019      	movs	r1, r3
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	691b      	ldr	r3, [r3, #16]
 8001474:	021a      	lsls	r2, r3, #8
 8001476:	4b40      	ldr	r3, [pc, #256]	; (8001578 <HAL_RCC_OscConfig+0x33c>)
 8001478:	430a      	orrs	r2, r1
 800147a:	605a      	str	r2, [r3, #4]
 800147c:	e018      	b.n	80014b0 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800147e:	4b3e      	ldr	r3, [pc, #248]	; (8001578 <HAL_RCC_OscConfig+0x33c>)
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	4b3d      	ldr	r3, [pc, #244]	; (8001578 <HAL_RCC_OscConfig+0x33c>)
 8001484:	2101      	movs	r1, #1
 8001486:	438a      	bics	r2, r1
 8001488:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800148a:	f7ff fc7d 	bl	8000d88 <HAL_GetTick>
 800148e:	0003      	movs	r3, r0
 8001490:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001492:	e008      	b.n	80014a6 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001494:	f7ff fc78 	bl	8000d88 <HAL_GetTick>
 8001498:	0002      	movs	r2, r0
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	2b02      	cmp	r3, #2
 80014a0:	d901      	bls.n	80014a6 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 80014a2:	2303      	movs	r3, #3
 80014a4:	e293      	b.n	80019ce <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80014a6:	4b34      	ldr	r3, [pc, #208]	; (8001578 <HAL_RCC_OscConfig+0x33c>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	2204      	movs	r2, #4
 80014ac:	4013      	ands	r3, r2
 80014ae:	d1f1      	bne.n	8001494 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	2210      	movs	r2, #16
 80014b6:	4013      	ands	r3, r2
 80014b8:	d100      	bne.n	80014bc <HAL_RCC_OscConfig+0x280>
 80014ba:	e0a2      	b.n	8001602 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80014bc:	69fb      	ldr	r3, [r7, #28]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d140      	bne.n	8001544 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80014c2:	4b2d      	ldr	r3, [pc, #180]	; (8001578 <HAL_RCC_OscConfig+0x33c>)
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	2380      	movs	r3, #128	; 0x80
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	4013      	ands	r3, r2
 80014cc:	d005      	beq.n	80014da <HAL_RCC_OscConfig+0x29e>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	69db      	ldr	r3, [r3, #28]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d101      	bne.n	80014da <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e279      	b.n	80019ce <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014da:	4b27      	ldr	r3, [pc, #156]	; (8001578 <HAL_RCC_OscConfig+0x33c>)
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	4a2d      	ldr	r2, [pc, #180]	; (8001594 <HAL_RCC_OscConfig+0x358>)
 80014e0:	4013      	ands	r3, r2
 80014e2:	0019      	movs	r1, r3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014e8:	4b23      	ldr	r3, [pc, #140]	; (8001578 <HAL_RCC_OscConfig+0x33c>)
 80014ea:	430a      	orrs	r2, r1
 80014ec:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014ee:	4b22      	ldr	r3, [pc, #136]	; (8001578 <HAL_RCC_OscConfig+0x33c>)
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	021b      	lsls	r3, r3, #8
 80014f4:	0a19      	lsrs	r1, r3, #8
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6a1b      	ldr	r3, [r3, #32]
 80014fa:	061a      	lsls	r2, r3, #24
 80014fc:	4b1e      	ldr	r3, [pc, #120]	; (8001578 <HAL_RCC_OscConfig+0x33c>)
 80014fe:	430a      	orrs	r2, r1
 8001500:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001506:	0b5b      	lsrs	r3, r3, #13
 8001508:	3301      	adds	r3, #1
 800150a:	2280      	movs	r2, #128	; 0x80
 800150c:	0212      	lsls	r2, r2, #8
 800150e:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001510:	4b19      	ldr	r3, [pc, #100]	; (8001578 <HAL_RCC_OscConfig+0x33c>)
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	091b      	lsrs	r3, r3, #4
 8001516:	210f      	movs	r1, #15
 8001518:	400b      	ands	r3, r1
 800151a:	491b      	ldr	r1, [pc, #108]	; (8001588 <HAL_RCC_OscConfig+0x34c>)
 800151c:	5ccb      	ldrb	r3, [r1, r3]
 800151e:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001520:	4b1a      	ldr	r3, [pc, #104]	; (800158c <HAL_RCC_OscConfig+0x350>)
 8001522:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001524:	4b1a      	ldr	r3, [pc, #104]	; (8001590 <HAL_RCC_OscConfig+0x354>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	2513      	movs	r5, #19
 800152a:	197c      	adds	r4, r7, r5
 800152c:	0018      	movs	r0, r3
 800152e:	f7ff fbe5 	bl	8000cfc <HAL_InitTick>
 8001532:	0003      	movs	r3, r0
 8001534:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001536:	197b      	adds	r3, r7, r5
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d061      	beq.n	8001602 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 800153e:	197b      	adds	r3, r7, r5
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	e244      	b.n	80019ce <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	69db      	ldr	r3, [r3, #28]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d040      	beq.n	80015ce <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800154c:	4b0a      	ldr	r3, [pc, #40]	; (8001578 <HAL_RCC_OscConfig+0x33c>)
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	4b09      	ldr	r3, [pc, #36]	; (8001578 <HAL_RCC_OscConfig+0x33c>)
 8001552:	2180      	movs	r1, #128	; 0x80
 8001554:	0049      	lsls	r1, r1, #1
 8001556:	430a      	orrs	r2, r1
 8001558:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800155a:	f7ff fc15 	bl	8000d88 <HAL_GetTick>
 800155e:	0003      	movs	r3, r0
 8001560:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001562:	e019      	b.n	8001598 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001564:	f7ff fc10 	bl	8000d88 <HAL_GetTick>
 8001568:	0002      	movs	r2, r0
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	2b02      	cmp	r3, #2
 8001570:	d912      	bls.n	8001598 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8001572:	2303      	movs	r3, #3
 8001574:	e22b      	b.n	80019ce <HAL_RCC_OscConfig+0x792>
 8001576:	46c0      	nop			; (mov r8, r8)
 8001578:	40021000 	.word	0x40021000
 800157c:	fffeffff 	.word	0xfffeffff
 8001580:	fffbffff 	.word	0xfffbffff
 8001584:	ffffe0ff 	.word	0xffffe0ff
 8001588:	08003f10 	.word	0x08003f10
 800158c:	20000000 	.word	0x20000000
 8001590:	20000004 	.word	0x20000004
 8001594:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001598:	4bca      	ldr	r3, [pc, #808]	; (80018c4 <HAL_RCC_OscConfig+0x688>)
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	2380      	movs	r3, #128	; 0x80
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	4013      	ands	r3, r2
 80015a2:	d0df      	beq.n	8001564 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015a4:	4bc7      	ldr	r3, [pc, #796]	; (80018c4 <HAL_RCC_OscConfig+0x688>)
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	4ac7      	ldr	r2, [pc, #796]	; (80018c8 <HAL_RCC_OscConfig+0x68c>)
 80015aa:	4013      	ands	r3, r2
 80015ac:	0019      	movs	r1, r3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015b2:	4bc4      	ldr	r3, [pc, #784]	; (80018c4 <HAL_RCC_OscConfig+0x688>)
 80015b4:	430a      	orrs	r2, r1
 80015b6:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015b8:	4bc2      	ldr	r3, [pc, #776]	; (80018c4 <HAL_RCC_OscConfig+0x688>)
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	021b      	lsls	r3, r3, #8
 80015be:	0a19      	lsrs	r1, r3, #8
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6a1b      	ldr	r3, [r3, #32]
 80015c4:	061a      	lsls	r2, r3, #24
 80015c6:	4bbf      	ldr	r3, [pc, #764]	; (80018c4 <HAL_RCC_OscConfig+0x688>)
 80015c8:	430a      	orrs	r2, r1
 80015ca:	605a      	str	r2, [r3, #4]
 80015cc:	e019      	b.n	8001602 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80015ce:	4bbd      	ldr	r3, [pc, #756]	; (80018c4 <HAL_RCC_OscConfig+0x688>)
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	4bbc      	ldr	r3, [pc, #752]	; (80018c4 <HAL_RCC_OscConfig+0x688>)
 80015d4:	49bd      	ldr	r1, [pc, #756]	; (80018cc <HAL_RCC_OscConfig+0x690>)
 80015d6:	400a      	ands	r2, r1
 80015d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015da:	f7ff fbd5 	bl	8000d88 <HAL_GetTick>
 80015de:	0003      	movs	r3, r0
 80015e0:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80015e2:	e008      	b.n	80015f6 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015e4:	f7ff fbd0 	bl	8000d88 <HAL_GetTick>
 80015e8:	0002      	movs	r2, r0
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	2b02      	cmp	r3, #2
 80015f0:	d901      	bls.n	80015f6 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 80015f2:	2303      	movs	r3, #3
 80015f4:	e1eb      	b.n	80019ce <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80015f6:	4bb3      	ldr	r3, [pc, #716]	; (80018c4 <HAL_RCC_OscConfig+0x688>)
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	2380      	movs	r3, #128	; 0x80
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	4013      	ands	r3, r2
 8001600:	d1f0      	bne.n	80015e4 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	2208      	movs	r2, #8
 8001608:	4013      	ands	r3, r2
 800160a:	d036      	beq.n	800167a <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	695b      	ldr	r3, [r3, #20]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d019      	beq.n	8001648 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001614:	4bab      	ldr	r3, [pc, #684]	; (80018c4 <HAL_RCC_OscConfig+0x688>)
 8001616:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001618:	4baa      	ldr	r3, [pc, #680]	; (80018c4 <HAL_RCC_OscConfig+0x688>)
 800161a:	2101      	movs	r1, #1
 800161c:	430a      	orrs	r2, r1
 800161e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001620:	f7ff fbb2 	bl	8000d88 <HAL_GetTick>
 8001624:	0003      	movs	r3, r0
 8001626:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001628:	e008      	b.n	800163c <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800162a:	f7ff fbad 	bl	8000d88 <HAL_GetTick>
 800162e:	0002      	movs	r2, r0
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	1ad3      	subs	r3, r2, r3
 8001634:	2b02      	cmp	r3, #2
 8001636:	d901      	bls.n	800163c <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8001638:	2303      	movs	r3, #3
 800163a:	e1c8      	b.n	80019ce <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800163c:	4ba1      	ldr	r3, [pc, #644]	; (80018c4 <HAL_RCC_OscConfig+0x688>)
 800163e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001640:	2202      	movs	r2, #2
 8001642:	4013      	ands	r3, r2
 8001644:	d0f1      	beq.n	800162a <HAL_RCC_OscConfig+0x3ee>
 8001646:	e018      	b.n	800167a <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001648:	4b9e      	ldr	r3, [pc, #632]	; (80018c4 <HAL_RCC_OscConfig+0x688>)
 800164a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800164c:	4b9d      	ldr	r3, [pc, #628]	; (80018c4 <HAL_RCC_OscConfig+0x688>)
 800164e:	2101      	movs	r1, #1
 8001650:	438a      	bics	r2, r1
 8001652:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001654:	f7ff fb98 	bl	8000d88 <HAL_GetTick>
 8001658:	0003      	movs	r3, r0
 800165a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800165c:	e008      	b.n	8001670 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800165e:	f7ff fb93 	bl	8000d88 <HAL_GetTick>
 8001662:	0002      	movs	r2, r0
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	1ad3      	subs	r3, r2, r3
 8001668:	2b02      	cmp	r3, #2
 800166a:	d901      	bls.n	8001670 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 800166c:	2303      	movs	r3, #3
 800166e:	e1ae      	b.n	80019ce <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001670:	4b94      	ldr	r3, [pc, #592]	; (80018c4 <HAL_RCC_OscConfig+0x688>)
 8001672:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001674:	2202      	movs	r2, #2
 8001676:	4013      	ands	r3, r2
 8001678:	d1f1      	bne.n	800165e <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	2204      	movs	r2, #4
 8001680:	4013      	ands	r3, r2
 8001682:	d100      	bne.n	8001686 <HAL_RCC_OscConfig+0x44a>
 8001684:	e0ae      	b.n	80017e4 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001686:	2023      	movs	r0, #35	; 0x23
 8001688:	183b      	adds	r3, r7, r0
 800168a:	2200      	movs	r2, #0
 800168c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800168e:	4b8d      	ldr	r3, [pc, #564]	; (80018c4 <HAL_RCC_OscConfig+0x688>)
 8001690:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001692:	2380      	movs	r3, #128	; 0x80
 8001694:	055b      	lsls	r3, r3, #21
 8001696:	4013      	ands	r3, r2
 8001698:	d109      	bne.n	80016ae <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800169a:	4b8a      	ldr	r3, [pc, #552]	; (80018c4 <HAL_RCC_OscConfig+0x688>)
 800169c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800169e:	4b89      	ldr	r3, [pc, #548]	; (80018c4 <HAL_RCC_OscConfig+0x688>)
 80016a0:	2180      	movs	r1, #128	; 0x80
 80016a2:	0549      	lsls	r1, r1, #21
 80016a4:	430a      	orrs	r2, r1
 80016a6:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80016a8:	183b      	adds	r3, r7, r0
 80016aa:	2201      	movs	r2, #1
 80016ac:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016ae:	4b88      	ldr	r3, [pc, #544]	; (80018d0 <HAL_RCC_OscConfig+0x694>)
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	2380      	movs	r3, #128	; 0x80
 80016b4:	005b      	lsls	r3, r3, #1
 80016b6:	4013      	ands	r3, r2
 80016b8:	d11a      	bne.n	80016f0 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016ba:	4b85      	ldr	r3, [pc, #532]	; (80018d0 <HAL_RCC_OscConfig+0x694>)
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	4b84      	ldr	r3, [pc, #528]	; (80018d0 <HAL_RCC_OscConfig+0x694>)
 80016c0:	2180      	movs	r1, #128	; 0x80
 80016c2:	0049      	lsls	r1, r1, #1
 80016c4:	430a      	orrs	r2, r1
 80016c6:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016c8:	f7ff fb5e 	bl	8000d88 <HAL_GetTick>
 80016cc:	0003      	movs	r3, r0
 80016ce:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016d0:	e008      	b.n	80016e4 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016d2:	f7ff fb59 	bl	8000d88 <HAL_GetTick>
 80016d6:	0002      	movs	r2, r0
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	2b64      	cmp	r3, #100	; 0x64
 80016de:	d901      	bls.n	80016e4 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 80016e0:	2303      	movs	r3, #3
 80016e2:	e174      	b.n	80019ce <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016e4:	4b7a      	ldr	r3, [pc, #488]	; (80018d0 <HAL_RCC_OscConfig+0x694>)
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	2380      	movs	r3, #128	; 0x80
 80016ea:	005b      	lsls	r3, r3, #1
 80016ec:	4013      	ands	r3, r2
 80016ee:	d0f0      	beq.n	80016d2 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	689a      	ldr	r2, [r3, #8]
 80016f4:	2380      	movs	r3, #128	; 0x80
 80016f6:	005b      	lsls	r3, r3, #1
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d107      	bne.n	800170c <HAL_RCC_OscConfig+0x4d0>
 80016fc:	4b71      	ldr	r3, [pc, #452]	; (80018c4 <HAL_RCC_OscConfig+0x688>)
 80016fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001700:	4b70      	ldr	r3, [pc, #448]	; (80018c4 <HAL_RCC_OscConfig+0x688>)
 8001702:	2180      	movs	r1, #128	; 0x80
 8001704:	0049      	lsls	r1, r1, #1
 8001706:	430a      	orrs	r2, r1
 8001708:	651a      	str	r2, [r3, #80]	; 0x50
 800170a:	e031      	b.n	8001770 <HAL_RCC_OscConfig+0x534>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d10c      	bne.n	800172e <HAL_RCC_OscConfig+0x4f2>
 8001714:	4b6b      	ldr	r3, [pc, #428]	; (80018c4 <HAL_RCC_OscConfig+0x688>)
 8001716:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001718:	4b6a      	ldr	r3, [pc, #424]	; (80018c4 <HAL_RCC_OscConfig+0x688>)
 800171a:	496c      	ldr	r1, [pc, #432]	; (80018cc <HAL_RCC_OscConfig+0x690>)
 800171c:	400a      	ands	r2, r1
 800171e:	651a      	str	r2, [r3, #80]	; 0x50
 8001720:	4b68      	ldr	r3, [pc, #416]	; (80018c4 <HAL_RCC_OscConfig+0x688>)
 8001722:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001724:	4b67      	ldr	r3, [pc, #412]	; (80018c4 <HAL_RCC_OscConfig+0x688>)
 8001726:	496b      	ldr	r1, [pc, #428]	; (80018d4 <HAL_RCC_OscConfig+0x698>)
 8001728:	400a      	ands	r2, r1
 800172a:	651a      	str	r2, [r3, #80]	; 0x50
 800172c:	e020      	b.n	8001770 <HAL_RCC_OscConfig+0x534>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	689a      	ldr	r2, [r3, #8]
 8001732:	23a0      	movs	r3, #160	; 0xa0
 8001734:	00db      	lsls	r3, r3, #3
 8001736:	429a      	cmp	r2, r3
 8001738:	d10e      	bne.n	8001758 <HAL_RCC_OscConfig+0x51c>
 800173a:	4b62      	ldr	r3, [pc, #392]	; (80018c4 <HAL_RCC_OscConfig+0x688>)
 800173c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800173e:	4b61      	ldr	r3, [pc, #388]	; (80018c4 <HAL_RCC_OscConfig+0x688>)
 8001740:	2180      	movs	r1, #128	; 0x80
 8001742:	00c9      	lsls	r1, r1, #3
 8001744:	430a      	orrs	r2, r1
 8001746:	651a      	str	r2, [r3, #80]	; 0x50
 8001748:	4b5e      	ldr	r3, [pc, #376]	; (80018c4 <HAL_RCC_OscConfig+0x688>)
 800174a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800174c:	4b5d      	ldr	r3, [pc, #372]	; (80018c4 <HAL_RCC_OscConfig+0x688>)
 800174e:	2180      	movs	r1, #128	; 0x80
 8001750:	0049      	lsls	r1, r1, #1
 8001752:	430a      	orrs	r2, r1
 8001754:	651a      	str	r2, [r3, #80]	; 0x50
 8001756:	e00b      	b.n	8001770 <HAL_RCC_OscConfig+0x534>
 8001758:	4b5a      	ldr	r3, [pc, #360]	; (80018c4 <HAL_RCC_OscConfig+0x688>)
 800175a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800175c:	4b59      	ldr	r3, [pc, #356]	; (80018c4 <HAL_RCC_OscConfig+0x688>)
 800175e:	495b      	ldr	r1, [pc, #364]	; (80018cc <HAL_RCC_OscConfig+0x690>)
 8001760:	400a      	ands	r2, r1
 8001762:	651a      	str	r2, [r3, #80]	; 0x50
 8001764:	4b57      	ldr	r3, [pc, #348]	; (80018c4 <HAL_RCC_OscConfig+0x688>)
 8001766:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001768:	4b56      	ldr	r3, [pc, #344]	; (80018c4 <HAL_RCC_OscConfig+0x688>)
 800176a:	495a      	ldr	r1, [pc, #360]	; (80018d4 <HAL_RCC_OscConfig+0x698>)
 800176c:	400a      	ands	r2, r1
 800176e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d015      	beq.n	80017a4 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001778:	f7ff fb06 	bl	8000d88 <HAL_GetTick>
 800177c:	0003      	movs	r3, r0
 800177e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001780:	e009      	b.n	8001796 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001782:	f7ff fb01 	bl	8000d88 <HAL_GetTick>
 8001786:	0002      	movs	r2, r0
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	1ad3      	subs	r3, r2, r3
 800178c:	4a52      	ldr	r2, [pc, #328]	; (80018d8 <HAL_RCC_OscConfig+0x69c>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d901      	bls.n	8001796 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8001792:	2303      	movs	r3, #3
 8001794:	e11b      	b.n	80019ce <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001796:	4b4b      	ldr	r3, [pc, #300]	; (80018c4 <HAL_RCC_OscConfig+0x688>)
 8001798:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800179a:	2380      	movs	r3, #128	; 0x80
 800179c:	009b      	lsls	r3, r3, #2
 800179e:	4013      	ands	r3, r2
 80017a0:	d0ef      	beq.n	8001782 <HAL_RCC_OscConfig+0x546>
 80017a2:	e014      	b.n	80017ce <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017a4:	f7ff faf0 	bl	8000d88 <HAL_GetTick>
 80017a8:	0003      	movs	r3, r0
 80017aa:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80017ac:	e009      	b.n	80017c2 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017ae:	f7ff faeb 	bl	8000d88 <HAL_GetTick>
 80017b2:	0002      	movs	r2, r0
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	1ad3      	subs	r3, r2, r3
 80017b8:	4a47      	ldr	r2, [pc, #284]	; (80018d8 <HAL_RCC_OscConfig+0x69c>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d901      	bls.n	80017c2 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 80017be:	2303      	movs	r3, #3
 80017c0:	e105      	b.n	80019ce <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80017c2:	4b40      	ldr	r3, [pc, #256]	; (80018c4 <HAL_RCC_OscConfig+0x688>)
 80017c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80017c6:	2380      	movs	r3, #128	; 0x80
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	4013      	ands	r3, r2
 80017cc:	d1ef      	bne.n	80017ae <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80017ce:	2323      	movs	r3, #35	; 0x23
 80017d0:	18fb      	adds	r3, r7, r3
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	2b01      	cmp	r3, #1
 80017d6:	d105      	bne.n	80017e4 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017d8:	4b3a      	ldr	r3, [pc, #232]	; (80018c4 <HAL_RCC_OscConfig+0x688>)
 80017da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80017dc:	4b39      	ldr	r3, [pc, #228]	; (80018c4 <HAL_RCC_OscConfig+0x688>)
 80017de:	493f      	ldr	r1, [pc, #252]	; (80018dc <HAL_RCC_OscConfig+0x6a0>)
 80017e0:	400a      	ands	r2, r1
 80017e2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	2220      	movs	r2, #32
 80017ea:	4013      	ands	r3, r2
 80017ec:	d049      	beq.n	8001882 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	699b      	ldr	r3, [r3, #24]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d026      	beq.n	8001844 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80017f6:	4b33      	ldr	r3, [pc, #204]	; (80018c4 <HAL_RCC_OscConfig+0x688>)
 80017f8:	689a      	ldr	r2, [r3, #8]
 80017fa:	4b32      	ldr	r3, [pc, #200]	; (80018c4 <HAL_RCC_OscConfig+0x688>)
 80017fc:	2101      	movs	r1, #1
 80017fe:	430a      	orrs	r2, r1
 8001800:	609a      	str	r2, [r3, #8]
 8001802:	4b30      	ldr	r3, [pc, #192]	; (80018c4 <HAL_RCC_OscConfig+0x688>)
 8001804:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001806:	4b2f      	ldr	r3, [pc, #188]	; (80018c4 <HAL_RCC_OscConfig+0x688>)
 8001808:	2101      	movs	r1, #1
 800180a:	430a      	orrs	r2, r1
 800180c:	635a      	str	r2, [r3, #52]	; 0x34
 800180e:	4b34      	ldr	r3, [pc, #208]	; (80018e0 <HAL_RCC_OscConfig+0x6a4>)
 8001810:	6a1a      	ldr	r2, [r3, #32]
 8001812:	4b33      	ldr	r3, [pc, #204]	; (80018e0 <HAL_RCC_OscConfig+0x6a4>)
 8001814:	2180      	movs	r1, #128	; 0x80
 8001816:	0189      	lsls	r1, r1, #6
 8001818:	430a      	orrs	r2, r1
 800181a:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800181c:	f7ff fab4 	bl	8000d88 <HAL_GetTick>
 8001820:	0003      	movs	r3, r0
 8001822:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001824:	e008      	b.n	8001838 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001826:	f7ff faaf 	bl	8000d88 <HAL_GetTick>
 800182a:	0002      	movs	r2, r0
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	2b02      	cmp	r3, #2
 8001832:	d901      	bls.n	8001838 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8001834:	2303      	movs	r3, #3
 8001836:	e0ca      	b.n	80019ce <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001838:	4b22      	ldr	r3, [pc, #136]	; (80018c4 <HAL_RCC_OscConfig+0x688>)
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	2202      	movs	r2, #2
 800183e:	4013      	ands	r3, r2
 8001840:	d0f1      	beq.n	8001826 <HAL_RCC_OscConfig+0x5ea>
 8001842:	e01e      	b.n	8001882 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001844:	4b1f      	ldr	r3, [pc, #124]	; (80018c4 <HAL_RCC_OscConfig+0x688>)
 8001846:	689a      	ldr	r2, [r3, #8]
 8001848:	4b1e      	ldr	r3, [pc, #120]	; (80018c4 <HAL_RCC_OscConfig+0x688>)
 800184a:	2101      	movs	r1, #1
 800184c:	438a      	bics	r2, r1
 800184e:	609a      	str	r2, [r3, #8]
 8001850:	4b23      	ldr	r3, [pc, #140]	; (80018e0 <HAL_RCC_OscConfig+0x6a4>)
 8001852:	6a1a      	ldr	r2, [r3, #32]
 8001854:	4b22      	ldr	r3, [pc, #136]	; (80018e0 <HAL_RCC_OscConfig+0x6a4>)
 8001856:	4923      	ldr	r1, [pc, #140]	; (80018e4 <HAL_RCC_OscConfig+0x6a8>)
 8001858:	400a      	ands	r2, r1
 800185a:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800185c:	f7ff fa94 	bl	8000d88 <HAL_GetTick>
 8001860:	0003      	movs	r3, r0
 8001862:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001864:	e008      	b.n	8001878 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001866:	f7ff fa8f 	bl	8000d88 <HAL_GetTick>
 800186a:	0002      	movs	r2, r0
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	1ad3      	subs	r3, r2, r3
 8001870:	2b02      	cmp	r3, #2
 8001872:	d901      	bls.n	8001878 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8001874:	2303      	movs	r3, #3
 8001876:	e0aa      	b.n	80019ce <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001878:	4b12      	ldr	r3, [pc, #72]	; (80018c4 <HAL_RCC_OscConfig+0x688>)
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	2202      	movs	r2, #2
 800187e:	4013      	ands	r3, r2
 8001880:	d1f1      	bne.n	8001866 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001886:	2b00      	cmp	r3, #0
 8001888:	d100      	bne.n	800188c <HAL_RCC_OscConfig+0x650>
 800188a:	e09f      	b.n	80019cc <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800188c:	69fb      	ldr	r3, [r7, #28]
 800188e:	2b0c      	cmp	r3, #12
 8001890:	d100      	bne.n	8001894 <HAL_RCC_OscConfig+0x658>
 8001892:	e078      	b.n	8001986 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001898:	2b02      	cmp	r3, #2
 800189a:	d159      	bne.n	8001950 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800189c:	4b09      	ldr	r3, [pc, #36]	; (80018c4 <HAL_RCC_OscConfig+0x688>)
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	4b08      	ldr	r3, [pc, #32]	; (80018c4 <HAL_RCC_OscConfig+0x688>)
 80018a2:	4911      	ldr	r1, [pc, #68]	; (80018e8 <HAL_RCC_OscConfig+0x6ac>)
 80018a4:	400a      	ands	r2, r1
 80018a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018a8:	f7ff fa6e 	bl	8000d88 <HAL_GetTick>
 80018ac:	0003      	movs	r3, r0
 80018ae:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80018b0:	e01c      	b.n	80018ec <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018b2:	f7ff fa69 	bl	8000d88 <HAL_GetTick>
 80018b6:	0002      	movs	r2, r0
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	1ad3      	subs	r3, r2, r3
 80018bc:	2b02      	cmp	r3, #2
 80018be:	d915      	bls.n	80018ec <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 80018c0:	2303      	movs	r3, #3
 80018c2:	e084      	b.n	80019ce <HAL_RCC_OscConfig+0x792>
 80018c4:	40021000 	.word	0x40021000
 80018c8:	ffff1fff 	.word	0xffff1fff
 80018cc:	fffffeff 	.word	0xfffffeff
 80018d0:	40007000 	.word	0x40007000
 80018d4:	fffffbff 	.word	0xfffffbff
 80018d8:	00001388 	.word	0x00001388
 80018dc:	efffffff 	.word	0xefffffff
 80018e0:	40010000 	.word	0x40010000
 80018e4:	ffffdfff 	.word	0xffffdfff
 80018e8:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80018ec:	4b3a      	ldr	r3, [pc, #232]	; (80019d8 <HAL_RCC_OscConfig+0x79c>)
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	2380      	movs	r3, #128	; 0x80
 80018f2:	049b      	lsls	r3, r3, #18
 80018f4:	4013      	ands	r3, r2
 80018f6:	d1dc      	bne.n	80018b2 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018f8:	4b37      	ldr	r3, [pc, #220]	; (80019d8 <HAL_RCC_OscConfig+0x79c>)
 80018fa:	68db      	ldr	r3, [r3, #12]
 80018fc:	4a37      	ldr	r2, [pc, #220]	; (80019dc <HAL_RCC_OscConfig+0x7a0>)
 80018fe:	4013      	ands	r3, r2
 8001900:	0019      	movs	r1, r3
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190a:	431a      	orrs	r2, r3
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001910:	431a      	orrs	r2, r3
 8001912:	4b31      	ldr	r3, [pc, #196]	; (80019d8 <HAL_RCC_OscConfig+0x79c>)
 8001914:	430a      	orrs	r2, r1
 8001916:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001918:	4b2f      	ldr	r3, [pc, #188]	; (80019d8 <HAL_RCC_OscConfig+0x79c>)
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	4b2e      	ldr	r3, [pc, #184]	; (80019d8 <HAL_RCC_OscConfig+0x79c>)
 800191e:	2180      	movs	r1, #128	; 0x80
 8001920:	0449      	lsls	r1, r1, #17
 8001922:	430a      	orrs	r2, r1
 8001924:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001926:	f7ff fa2f 	bl	8000d88 <HAL_GetTick>
 800192a:	0003      	movs	r3, r0
 800192c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800192e:	e008      	b.n	8001942 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001930:	f7ff fa2a 	bl	8000d88 <HAL_GetTick>
 8001934:	0002      	movs	r2, r0
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	2b02      	cmp	r3, #2
 800193c:	d901      	bls.n	8001942 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 800193e:	2303      	movs	r3, #3
 8001940:	e045      	b.n	80019ce <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001942:	4b25      	ldr	r3, [pc, #148]	; (80019d8 <HAL_RCC_OscConfig+0x79c>)
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	2380      	movs	r3, #128	; 0x80
 8001948:	049b      	lsls	r3, r3, #18
 800194a:	4013      	ands	r3, r2
 800194c:	d0f0      	beq.n	8001930 <HAL_RCC_OscConfig+0x6f4>
 800194e:	e03d      	b.n	80019cc <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001950:	4b21      	ldr	r3, [pc, #132]	; (80019d8 <HAL_RCC_OscConfig+0x79c>)
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	4b20      	ldr	r3, [pc, #128]	; (80019d8 <HAL_RCC_OscConfig+0x79c>)
 8001956:	4922      	ldr	r1, [pc, #136]	; (80019e0 <HAL_RCC_OscConfig+0x7a4>)
 8001958:	400a      	ands	r2, r1
 800195a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800195c:	f7ff fa14 	bl	8000d88 <HAL_GetTick>
 8001960:	0003      	movs	r3, r0
 8001962:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001964:	e008      	b.n	8001978 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001966:	f7ff fa0f 	bl	8000d88 <HAL_GetTick>
 800196a:	0002      	movs	r2, r0
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	1ad3      	subs	r3, r2, r3
 8001970:	2b02      	cmp	r3, #2
 8001972:	d901      	bls.n	8001978 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8001974:	2303      	movs	r3, #3
 8001976:	e02a      	b.n	80019ce <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001978:	4b17      	ldr	r3, [pc, #92]	; (80019d8 <HAL_RCC_OscConfig+0x79c>)
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	2380      	movs	r3, #128	; 0x80
 800197e:	049b      	lsls	r3, r3, #18
 8001980:	4013      	ands	r3, r2
 8001982:	d1f0      	bne.n	8001966 <HAL_RCC_OscConfig+0x72a>
 8001984:	e022      	b.n	80019cc <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800198a:	2b01      	cmp	r3, #1
 800198c:	d101      	bne.n	8001992 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e01d      	b.n	80019ce <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001992:	4b11      	ldr	r3, [pc, #68]	; (80019d8 <HAL_RCC_OscConfig+0x79c>)
 8001994:	68db      	ldr	r3, [r3, #12]
 8001996:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001998:	69ba      	ldr	r2, [r7, #24]
 800199a:	2380      	movs	r3, #128	; 0x80
 800199c:	025b      	lsls	r3, r3, #9
 800199e:	401a      	ands	r2, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d10f      	bne.n	80019c8 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80019a8:	69ba      	ldr	r2, [r7, #24]
 80019aa:	23f0      	movs	r3, #240	; 0xf0
 80019ac:	039b      	lsls	r3, r3, #14
 80019ae:	401a      	ands	r2, r3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d107      	bne.n	80019c8 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80019b8:	69ba      	ldr	r2, [r7, #24]
 80019ba:	23c0      	movs	r3, #192	; 0xc0
 80019bc:	041b      	lsls	r3, r3, #16
 80019be:	401a      	ands	r2, r3
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d001      	beq.n	80019cc <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 80019c8:	2301      	movs	r3, #1
 80019ca:	e000      	b.n	80019ce <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 80019cc:	2300      	movs	r3, #0
}
 80019ce:	0018      	movs	r0, r3
 80019d0:	46bd      	mov	sp, r7
 80019d2:	b00a      	add	sp, #40	; 0x28
 80019d4:	bdb0      	pop	{r4, r5, r7, pc}
 80019d6:	46c0      	nop			; (mov r8, r8)
 80019d8:	40021000 	.word	0x40021000
 80019dc:	ff02ffff 	.word	0xff02ffff
 80019e0:	feffffff 	.word	0xfeffffff

080019e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019e4:	b5b0      	push	{r4, r5, r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d101      	bne.n	80019f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	e128      	b.n	8001c4a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019f8:	4b96      	ldr	r3, [pc, #600]	; (8001c54 <HAL_RCC_ClockConfig+0x270>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	2201      	movs	r2, #1
 80019fe:	4013      	ands	r3, r2
 8001a00:	683a      	ldr	r2, [r7, #0]
 8001a02:	429a      	cmp	r2, r3
 8001a04:	d91e      	bls.n	8001a44 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a06:	4b93      	ldr	r3, [pc, #588]	; (8001c54 <HAL_RCC_ClockConfig+0x270>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	4393      	bics	r3, r2
 8001a0e:	0019      	movs	r1, r3
 8001a10:	4b90      	ldr	r3, [pc, #576]	; (8001c54 <HAL_RCC_ClockConfig+0x270>)
 8001a12:	683a      	ldr	r2, [r7, #0]
 8001a14:	430a      	orrs	r2, r1
 8001a16:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001a18:	f7ff f9b6 	bl	8000d88 <HAL_GetTick>
 8001a1c:	0003      	movs	r3, r0
 8001a1e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a20:	e009      	b.n	8001a36 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a22:	f7ff f9b1 	bl	8000d88 <HAL_GetTick>
 8001a26:	0002      	movs	r2, r0
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	1ad3      	subs	r3, r2, r3
 8001a2c:	4a8a      	ldr	r2, [pc, #552]	; (8001c58 <HAL_RCC_ClockConfig+0x274>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d901      	bls.n	8001a36 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001a32:	2303      	movs	r3, #3
 8001a34:	e109      	b.n	8001c4a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a36:	4b87      	ldr	r3, [pc, #540]	; (8001c54 <HAL_RCC_ClockConfig+0x270>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	683a      	ldr	r2, [r7, #0]
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d1ee      	bne.n	8001a22 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	2202      	movs	r2, #2
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	d009      	beq.n	8001a62 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a4e:	4b83      	ldr	r3, [pc, #524]	; (8001c5c <HAL_RCC_ClockConfig+0x278>)
 8001a50:	68db      	ldr	r3, [r3, #12]
 8001a52:	22f0      	movs	r2, #240	; 0xf0
 8001a54:	4393      	bics	r3, r2
 8001a56:	0019      	movs	r1, r3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	689a      	ldr	r2, [r3, #8]
 8001a5c:	4b7f      	ldr	r3, [pc, #508]	; (8001c5c <HAL_RCC_ClockConfig+0x278>)
 8001a5e:	430a      	orrs	r2, r1
 8001a60:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	2201      	movs	r2, #1
 8001a68:	4013      	ands	r3, r2
 8001a6a:	d100      	bne.n	8001a6e <HAL_RCC_ClockConfig+0x8a>
 8001a6c:	e089      	b.n	8001b82 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	2b02      	cmp	r3, #2
 8001a74:	d107      	bne.n	8001a86 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001a76:	4b79      	ldr	r3, [pc, #484]	; (8001c5c <HAL_RCC_ClockConfig+0x278>)
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	2380      	movs	r3, #128	; 0x80
 8001a7c:	029b      	lsls	r3, r3, #10
 8001a7e:	4013      	ands	r3, r2
 8001a80:	d120      	bne.n	8001ac4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e0e1      	b.n	8001c4a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	2b03      	cmp	r3, #3
 8001a8c:	d107      	bne.n	8001a9e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001a8e:	4b73      	ldr	r3, [pc, #460]	; (8001c5c <HAL_RCC_ClockConfig+0x278>)
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	2380      	movs	r3, #128	; 0x80
 8001a94:	049b      	lsls	r3, r3, #18
 8001a96:	4013      	ands	r3, r2
 8001a98:	d114      	bne.n	8001ac4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e0d5      	b.n	8001c4a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d106      	bne.n	8001ab4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001aa6:	4b6d      	ldr	r3, [pc, #436]	; (8001c5c <HAL_RCC_ClockConfig+0x278>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	2204      	movs	r2, #4
 8001aac:	4013      	ands	r3, r2
 8001aae:	d109      	bne.n	8001ac4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e0ca      	b.n	8001c4a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001ab4:	4b69      	ldr	r3, [pc, #420]	; (8001c5c <HAL_RCC_ClockConfig+0x278>)
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	2380      	movs	r3, #128	; 0x80
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	4013      	ands	r3, r2
 8001abe:	d101      	bne.n	8001ac4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e0c2      	b.n	8001c4a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ac4:	4b65      	ldr	r3, [pc, #404]	; (8001c5c <HAL_RCC_ClockConfig+0x278>)
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	2203      	movs	r2, #3
 8001aca:	4393      	bics	r3, r2
 8001acc:	0019      	movs	r1, r3
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	685a      	ldr	r2, [r3, #4]
 8001ad2:	4b62      	ldr	r3, [pc, #392]	; (8001c5c <HAL_RCC_ClockConfig+0x278>)
 8001ad4:	430a      	orrs	r2, r1
 8001ad6:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ad8:	f7ff f956 	bl	8000d88 <HAL_GetTick>
 8001adc:	0003      	movs	r3, r0
 8001ade:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	2b02      	cmp	r3, #2
 8001ae6:	d111      	bne.n	8001b0c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ae8:	e009      	b.n	8001afe <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aea:	f7ff f94d 	bl	8000d88 <HAL_GetTick>
 8001aee:	0002      	movs	r2, r0
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	4a58      	ldr	r2, [pc, #352]	; (8001c58 <HAL_RCC_ClockConfig+0x274>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d901      	bls.n	8001afe <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001afa:	2303      	movs	r3, #3
 8001afc:	e0a5      	b.n	8001c4a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001afe:	4b57      	ldr	r3, [pc, #348]	; (8001c5c <HAL_RCC_ClockConfig+0x278>)
 8001b00:	68db      	ldr	r3, [r3, #12]
 8001b02:	220c      	movs	r2, #12
 8001b04:	4013      	ands	r3, r2
 8001b06:	2b08      	cmp	r3, #8
 8001b08:	d1ef      	bne.n	8001aea <HAL_RCC_ClockConfig+0x106>
 8001b0a:	e03a      	b.n	8001b82 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	2b03      	cmp	r3, #3
 8001b12:	d111      	bne.n	8001b38 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b14:	e009      	b.n	8001b2a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b16:	f7ff f937 	bl	8000d88 <HAL_GetTick>
 8001b1a:	0002      	movs	r2, r0
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	4a4d      	ldr	r2, [pc, #308]	; (8001c58 <HAL_RCC_ClockConfig+0x274>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d901      	bls.n	8001b2a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001b26:	2303      	movs	r3, #3
 8001b28:	e08f      	b.n	8001c4a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b2a:	4b4c      	ldr	r3, [pc, #304]	; (8001c5c <HAL_RCC_ClockConfig+0x278>)
 8001b2c:	68db      	ldr	r3, [r3, #12]
 8001b2e:	220c      	movs	r2, #12
 8001b30:	4013      	ands	r3, r2
 8001b32:	2b0c      	cmp	r3, #12
 8001b34:	d1ef      	bne.n	8001b16 <HAL_RCC_ClockConfig+0x132>
 8001b36:	e024      	b.n	8001b82 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d11b      	bne.n	8001b78 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b40:	e009      	b.n	8001b56 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b42:	f7ff f921 	bl	8000d88 <HAL_GetTick>
 8001b46:	0002      	movs	r2, r0
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	1ad3      	subs	r3, r2, r3
 8001b4c:	4a42      	ldr	r2, [pc, #264]	; (8001c58 <HAL_RCC_ClockConfig+0x274>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d901      	bls.n	8001b56 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001b52:	2303      	movs	r3, #3
 8001b54:	e079      	b.n	8001c4a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b56:	4b41      	ldr	r3, [pc, #260]	; (8001c5c <HAL_RCC_ClockConfig+0x278>)
 8001b58:	68db      	ldr	r3, [r3, #12]
 8001b5a:	220c      	movs	r2, #12
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	2b04      	cmp	r3, #4
 8001b60:	d1ef      	bne.n	8001b42 <HAL_RCC_ClockConfig+0x15e>
 8001b62:	e00e      	b.n	8001b82 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b64:	f7ff f910 	bl	8000d88 <HAL_GetTick>
 8001b68:	0002      	movs	r2, r0
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	4a3a      	ldr	r2, [pc, #232]	; (8001c58 <HAL_RCC_ClockConfig+0x274>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d901      	bls.n	8001b78 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001b74:	2303      	movs	r3, #3
 8001b76:	e068      	b.n	8001c4a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001b78:	4b38      	ldr	r3, [pc, #224]	; (8001c5c <HAL_RCC_ClockConfig+0x278>)
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	220c      	movs	r2, #12
 8001b7e:	4013      	ands	r3, r2
 8001b80:	d1f0      	bne.n	8001b64 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b82:	4b34      	ldr	r3, [pc, #208]	; (8001c54 <HAL_RCC_ClockConfig+0x270>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	2201      	movs	r2, #1
 8001b88:	4013      	ands	r3, r2
 8001b8a:	683a      	ldr	r2, [r7, #0]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d21e      	bcs.n	8001bce <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b90:	4b30      	ldr	r3, [pc, #192]	; (8001c54 <HAL_RCC_ClockConfig+0x270>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	2201      	movs	r2, #1
 8001b96:	4393      	bics	r3, r2
 8001b98:	0019      	movs	r1, r3
 8001b9a:	4b2e      	ldr	r3, [pc, #184]	; (8001c54 <HAL_RCC_ClockConfig+0x270>)
 8001b9c:	683a      	ldr	r2, [r7, #0]
 8001b9e:	430a      	orrs	r2, r1
 8001ba0:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001ba2:	f7ff f8f1 	bl	8000d88 <HAL_GetTick>
 8001ba6:	0003      	movs	r3, r0
 8001ba8:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001baa:	e009      	b.n	8001bc0 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bac:	f7ff f8ec 	bl	8000d88 <HAL_GetTick>
 8001bb0:	0002      	movs	r2, r0
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	4a28      	ldr	r2, [pc, #160]	; (8001c58 <HAL_RCC_ClockConfig+0x274>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d901      	bls.n	8001bc0 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	e044      	b.n	8001c4a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bc0:	4b24      	ldr	r3, [pc, #144]	; (8001c54 <HAL_RCC_ClockConfig+0x270>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	683a      	ldr	r2, [r7, #0]
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d1ee      	bne.n	8001bac <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	2204      	movs	r2, #4
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	d009      	beq.n	8001bec <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bd8:	4b20      	ldr	r3, [pc, #128]	; (8001c5c <HAL_RCC_ClockConfig+0x278>)
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	4a20      	ldr	r2, [pc, #128]	; (8001c60 <HAL_RCC_ClockConfig+0x27c>)
 8001bde:	4013      	ands	r3, r2
 8001be0:	0019      	movs	r1, r3
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	68da      	ldr	r2, [r3, #12]
 8001be6:	4b1d      	ldr	r3, [pc, #116]	; (8001c5c <HAL_RCC_ClockConfig+0x278>)
 8001be8:	430a      	orrs	r2, r1
 8001bea:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	2208      	movs	r2, #8
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	d00a      	beq.n	8001c0c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001bf6:	4b19      	ldr	r3, [pc, #100]	; (8001c5c <HAL_RCC_ClockConfig+0x278>)
 8001bf8:	68db      	ldr	r3, [r3, #12]
 8001bfa:	4a1a      	ldr	r2, [pc, #104]	; (8001c64 <HAL_RCC_ClockConfig+0x280>)
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	0019      	movs	r1, r3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	691b      	ldr	r3, [r3, #16]
 8001c04:	00da      	lsls	r2, r3, #3
 8001c06:	4b15      	ldr	r3, [pc, #84]	; (8001c5c <HAL_RCC_ClockConfig+0x278>)
 8001c08:	430a      	orrs	r2, r1
 8001c0a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c0c:	f000 f832 	bl	8001c74 <HAL_RCC_GetSysClockFreq>
 8001c10:	0001      	movs	r1, r0
 8001c12:	4b12      	ldr	r3, [pc, #72]	; (8001c5c <HAL_RCC_ClockConfig+0x278>)
 8001c14:	68db      	ldr	r3, [r3, #12]
 8001c16:	091b      	lsrs	r3, r3, #4
 8001c18:	220f      	movs	r2, #15
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	4a12      	ldr	r2, [pc, #72]	; (8001c68 <HAL_RCC_ClockConfig+0x284>)
 8001c1e:	5cd3      	ldrb	r3, [r2, r3]
 8001c20:	000a      	movs	r2, r1
 8001c22:	40da      	lsrs	r2, r3
 8001c24:	4b11      	ldr	r3, [pc, #68]	; (8001c6c <HAL_RCC_ClockConfig+0x288>)
 8001c26:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001c28:	4b11      	ldr	r3, [pc, #68]	; (8001c70 <HAL_RCC_ClockConfig+0x28c>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	250b      	movs	r5, #11
 8001c2e:	197c      	adds	r4, r7, r5
 8001c30:	0018      	movs	r0, r3
 8001c32:	f7ff f863 	bl	8000cfc <HAL_InitTick>
 8001c36:	0003      	movs	r3, r0
 8001c38:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001c3a:	197b      	adds	r3, r7, r5
 8001c3c:	781b      	ldrb	r3, [r3, #0]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d002      	beq.n	8001c48 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001c42:	197b      	adds	r3, r7, r5
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	e000      	b.n	8001c4a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001c48:	2300      	movs	r3, #0
}
 8001c4a:	0018      	movs	r0, r3
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	b004      	add	sp, #16
 8001c50:	bdb0      	pop	{r4, r5, r7, pc}
 8001c52:	46c0      	nop			; (mov r8, r8)
 8001c54:	40022000 	.word	0x40022000
 8001c58:	00001388 	.word	0x00001388
 8001c5c:	40021000 	.word	0x40021000
 8001c60:	fffff8ff 	.word	0xfffff8ff
 8001c64:	ffffc7ff 	.word	0xffffc7ff
 8001c68:	08003f10 	.word	0x08003f10
 8001c6c:	20000000 	.word	0x20000000
 8001c70:	20000004 	.word	0x20000004

08001c74 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c74:	b5b0      	push	{r4, r5, r7, lr}
 8001c76:	b08e      	sub	sp, #56	; 0x38
 8001c78:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001c7a:	4b4c      	ldr	r3, [pc, #304]	; (8001dac <HAL_RCC_GetSysClockFreq+0x138>)
 8001c7c:	68db      	ldr	r3, [r3, #12]
 8001c7e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c82:	230c      	movs	r3, #12
 8001c84:	4013      	ands	r3, r2
 8001c86:	2b0c      	cmp	r3, #12
 8001c88:	d014      	beq.n	8001cb4 <HAL_RCC_GetSysClockFreq+0x40>
 8001c8a:	d900      	bls.n	8001c8e <HAL_RCC_GetSysClockFreq+0x1a>
 8001c8c:	e07b      	b.n	8001d86 <HAL_RCC_GetSysClockFreq+0x112>
 8001c8e:	2b04      	cmp	r3, #4
 8001c90:	d002      	beq.n	8001c98 <HAL_RCC_GetSysClockFreq+0x24>
 8001c92:	2b08      	cmp	r3, #8
 8001c94:	d00b      	beq.n	8001cae <HAL_RCC_GetSysClockFreq+0x3a>
 8001c96:	e076      	b.n	8001d86 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001c98:	4b44      	ldr	r3, [pc, #272]	; (8001dac <HAL_RCC_GetSysClockFreq+0x138>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	2210      	movs	r2, #16
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	d002      	beq.n	8001ca8 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001ca2:	4b43      	ldr	r3, [pc, #268]	; (8001db0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001ca4:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001ca6:	e07c      	b.n	8001da2 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001ca8:	4b42      	ldr	r3, [pc, #264]	; (8001db4 <HAL_RCC_GetSysClockFreq+0x140>)
 8001caa:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001cac:	e079      	b.n	8001da2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001cae:	4b42      	ldr	r3, [pc, #264]	; (8001db8 <HAL_RCC_GetSysClockFreq+0x144>)
 8001cb0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001cb2:	e076      	b.n	8001da2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cb6:	0c9a      	lsrs	r2, r3, #18
 8001cb8:	230f      	movs	r3, #15
 8001cba:	401a      	ands	r2, r3
 8001cbc:	4b3f      	ldr	r3, [pc, #252]	; (8001dbc <HAL_RCC_GetSysClockFreq+0x148>)
 8001cbe:	5c9b      	ldrb	r3, [r3, r2]
 8001cc0:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cc4:	0d9a      	lsrs	r2, r3, #22
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	4013      	ands	r3, r2
 8001cca:	3301      	adds	r3, #1
 8001ccc:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001cce:	4b37      	ldr	r3, [pc, #220]	; (8001dac <HAL_RCC_GetSysClockFreq+0x138>)
 8001cd0:	68da      	ldr	r2, [r3, #12]
 8001cd2:	2380      	movs	r3, #128	; 0x80
 8001cd4:	025b      	lsls	r3, r3, #9
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	d01a      	beq.n	8001d10 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cdc:	61bb      	str	r3, [r7, #24]
 8001cde:	2300      	movs	r3, #0
 8001ce0:	61fb      	str	r3, [r7, #28]
 8001ce2:	4a35      	ldr	r2, [pc, #212]	; (8001db8 <HAL_RCC_GetSysClockFreq+0x144>)
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	69b8      	ldr	r0, [r7, #24]
 8001ce8:	69f9      	ldr	r1, [r7, #28]
 8001cea:	f7fe fac3 	bl	8000274 <__aeabi_lmul>
 8001cee:	0002      	movs	r2, r0
 8001cf0:	000b      	movs	r3, r1
 8001cf2:	0010      	movs	r0, r2
 8001cf4:	0019      	movs	r1, r3
 8001cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf8:	613b      	str	r3, [r7, #16]
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	617b      	str	r3, [r7, #20]
 8001cfe:	693a      	ldr	r2, [r7, #16]
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	f7fe fa97 	bl	8000234 <__aeabi_uldivmod>
 8001d06:	0002      	movs	r2, r0
 8001d08:	000b      	movs	r3, r1
 8001d0a:	0013      	movs	r3, r2
 8001d0c:	637b      	str	r3, [r7, #52]	; 0x34
 8001d0e:	e037      	b.n	8001d80 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001d10:	4b26      	ldr	r3, [pc, #152]	; (8001dac <HAL_RCC_GetSysClockFreq+0x138>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	2210      	movs	r2, #16
 8001d16:	4013      	ands	r3, r2
 8001d18:	d01a      	beq.n	8001d50 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d1c:	60bb      	str	r3, [r7, #8]
 8001d1e:	2300      	movs	r3, #0
 8001d20:	60fb      	str	r3, [r7, #12]
 8001d22:	4a23      	ldr	r2, [pc, #140]	; (8001db0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001d24:	2300      	movs	r3, #0
 8001d26:	68b8      	ldr	r0, [r7, #8]
 8001d28:	68f9      	ldr	r1, [r7, #12]
 8001d2a:	f7fe faa3 	bl	8000274 <__aeabi_lmul>
 8001d2e:	0002      	movs	r2, r0
 8001d30:	000b      	movs	r3, r1
 8001d32:	0010      	movs	r0, r2
 8001d34:	0019      	movs	r1, r3
 8001d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d38:	603b      	str	r3, [r7, #0]
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	607b      	str	r3, [r7, #4]
 8001d3e:	683a      	ldr	r2, [r7, #0]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	f7fe fa77 	bl	8000234 <__aeabi_uldivmod>
 8001d46:	0002      	movs	r2, r0
 8001d48:	000b      	movs	r3, r1
 8001d4a:	0013      	movs	r3, r2
 8001d4c:	637b      	str	r3, [r7, #52]	; 0x34
 8001d4e:	e017      	b.n	8001d80 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d52:	0018      	movs	r0, r3
 8001d54:	2300      	movs	r3, #0
 8001d56:	0019      	movs	r1, r3
 8001d58:	4a16      	ldr	r2, [pc, #88]	; (8001db4 <HAL_RCC_GetSysClockFreq+0x140>)
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	f7fe fa8a 	bl	8000274 <__aeabi_lmul>
 8001d60:	0002      	movs	r2, r0
 8001d62:	000b      	movs	r3, r1
 8001d64:	0010      	movs	r0, r2
 8001d66:	0019      	movs	r1, r3
 8001d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6a:	001c      	movs	r4, r3
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	001d      	movs	r5, r3
 8001d70:	0022      	movs	r2, r4
 8001d72:	002b      	movs	r3, r5
 8001d74:	f7fe fa5e 	bl	8000234 <__aeabi_uldivmod>
 8001d78:	0002      	movs	r2, r0
 8001d7a:	000b      	movs	r3, r1
 8001d7c:	0013      	movs	r3, r2
 8001d7e:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8001d80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d82:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001d84:	e00d      	b.n	8001da2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001d86:	4b09      	ldr	r3, [pc, #36]	; (8001dac <HAL_RCC_GetSysClockFreq+0x138>)
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	0b5b      	lsrs	r3, r3, #13
 8001d8c:	2207      	movs	r2, #7
 8001d8e:	4013      	ands	r3, r2
 8001d90:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001d92:	6a3b      	ldr	r3, [r7, #32]
 8001d94:	3301      	adds	r3, #1
 8001d96:	2280      	movs	r2, #128	; 0x80
 8001d98:	0212      	lsls	r2, r2, #8
 8001d9a:	409a      	lsls	r2, r3
 8001d9c:	0013      	movs	r3, r2
 8001d9e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001da0:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001da4:	0018      	movs	r0, r3
 8001da6:	46bd      	mov	sp, r7
 8001da8:	b00e      	add	sp, #56	; 0x38
 8001daa:	bdb0      	pop	{r4, r5, r7, pc}
 8001dac:	40021000 	.word	0x40021000
 8001db0:	003d0900 	.word	0x003d0900
 8001db4:	00f42400 	.word	0x00f42400
 8001db8:	007a1200 	.word	0x007a1200
 8001dbc:	08003f28 	.word	0x08003f28

08001dc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001dc4:	4b02      	ldr	r3, [pc, #8]	; (8001dd0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
}
 8001dc8:	0018      	movs	r0, r3
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	46c0      	nop			; (mov r8, r8)
 8001dd0:	20000000 	.word	0x20000000

08001dd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001dd8:	f7ff fff2 	bl	8001dc0 <HAL_RCC_GetHCLKFreq>
 8001ddc:	0001      	movs	r1, r0
 8001dde:	4b06      	ldr	r3, [pc, #24]	; (8001df8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001de0:	68db      	ldr	r3, [r3, #12]
 8001de2:	0a1b      	lsrs	r3, r3, #8
 8001de4:	2207      	movs	r2, #7
 8001de6:	4013      	ands	r3, r2
 8001de8:	4a04      	ldr	r2, [pc, #16]	; (8001dfc <HAL_RCC_GetPCLK1Freq+0x28>)
 8001dea:	5cd3      	ldrb	r3, [r2, r3]
 8001dec:	40d9      	lsrs	r1, r3
 8001dee:	000b      	movs	r3, r1
}
 8001df0:	0018      	movs	r0, r3
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	46c0      	nop			; (mov r8, r8)
 8001df8:	40021000 	.word	0x40021000
 8001dfc:	08003f20 	.word	0x08003f20

08001e00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e04:	f7ff ffdc 	bl	8001dc0 <HAL_RCC_GetHCLKFreq>
 8001e08:	0001      	movs	r1, r0
 8001e0a:	4b06      	ldr	r3, [pc, #24]	; (8001e24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e0c:	68db      	ldr	r3, [r3, #12]
 8001e0e:	0adb      	lsrs	r3, r3, #11
 8001e10:	2207      	movs	r2, #7
 8001e12:	4013      	ands	r3, r2
 8001e14:	4a04      	ldr	r2, [pc, #16]	; (8001e28 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001e16:	5cd3      	ldrb	r3, [r2, r3]
 8001e18:	40d9      	lsrs	r1, r3
 8001e1a:	000b      	movs	r3, r1
}
 8001e1c:	0018      	movs	r0, r3
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	46c0      	nop			; (mov r8, r8)
 8001e24:	40021000 	.word	0x40021000
 8001e28:	08003f20 	.word	0x08003f20

08001e2c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b086      	sub	sp, #24
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8001e34:	2317      	movs	r3, #23
 8001e36:	18fb      	adds	r3, r7, r3
 8001e38:	2200      	movs	r2, #0
 8001e3a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2220      	movs	r2, #32
 8001e42:	4013      	ands	r3, r2
 8001e44:	d106      	bne.n	8001e54 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	2380      	movs	r3, #128	; 0x80
 8001e4c:	011b      	lsls	r3, r3, #4
 8001e4e:	4013      	ands	r3, r2
 8001e50:	d100      	bne.n	8001e54 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8001e52:	e0d9      	b.n	8002008 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e54:	4ba4      	ldr	r3, [pc, #656]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001e56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e58:	2380      	movs	r3, #128	; 0x80
 8001e5a:	055b      	lsls	r3, r3, #21
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	d10a      	bne.n	8001e76 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e60:	4ba1      	ldr	r3, [pc, #644]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001e62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e64:	4ba0      	ldr	r3, [pc, #640]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001e66:	2180      	movs	r1, #128	; 0x80
 8001e68:	0549      	lsls	r1, r1, #21
 8001e6a:	430a      	orrs	r2, r1
 8001e6c:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001e6e:	2317      	movs	r3, #23
 8001e70:	18fb      	adds	r3, r7, r3
 8001e72:	2201      	movs	r2, #1
 8001e74:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e76:	4b9d      	ldr	r3, [pc, #628]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	2380      	movs	r3, #128	; 0x80
 8001e7c:	005b      	lsls	r3, r3, #1
 8001e7e:	4013      	ands	r3, r2
 8001e80:	d11a      	bne.n	8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e82:	4b9a      	ldr	r3, [pc, #616]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	4b99      	ldr	r3, [pc, #612]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8001e88:	2180      	movs	r1, #128	; 0x80
 8001e8a:	0049      	lsls	r1, r1, #1
 8001e8c:	430a      	orrs	r2, r1
 8001e8e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e90:	f7fe ff7a 	bl	8000d88 <HAL_GetTick>
 8001e94:	0003      	movs	r3, r0
 8001e96:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e98:	e008      	b.n	8001eac <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e9a:	f7fe ff75 	bl	8000d88 <HAL_GetTick>
 8001e9e:	0002      	movs	r2, r0
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	1ad3      	subs	r3, r2, r3
 8001ea4:	2b64      	cmp	r3, #100	; 0x64
 8001ea6:	d901      	bls.n	8001eac <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8001ea8:	2303      	movs	r3, #3
 8001eaa:	e118      	b.n	80020de <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eac:	4b8f      	ldr	r3, [pc, #572]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	2380      	movs	r3, #128	; 0x80
 8001eb2:	005b      	lsls	r3, r3, #1
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	d0f0      	beq.n	8001e9a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001eb8:	4b8b      	ldr	r3, [pc, #556]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	23c0      	movs	r3, #192	; 0xc0
 8001ebe:	039b      	lsls	r3, r3, #14
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	685a      	ldr	r2, [r3, #4]
 8001ec8:	23c0      	movs	r3, #192	; 0xc0
 8001eca:	039b      	lsls	r3, r3, #14
 8001ecc:	4013      	ands	r3, r2
 8001ece:	68fa      	ldr	r2, [r7, #12]
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d107      	bne.n	8001ee4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	689a      	ldr	r2, [r3, #8]
 8001ed8:	23c0      	movs	r3, #192	; 0xc0
 8001eda:	039b      	lsls	r3, r3, #14
 8001edc:	4013      	ands	r3, r2
 8001ede:	68fa      	ldr	r2, [r7, #12]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d013      	beq.n	8001f0c <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	685a      	ldr	r2, [r3, #4]
 8001ee8:	23c0      	movs	r3, #192	; 0xc0
 8001eea:	029b      	lsls	r3, r3, #10
 8001eec:	401a      	ands	r2, r3
 8001eee:	23c0      	movs	r3, #192	; 0xc0
 8001ef0:	029b      	lsls	r3, r3, #10
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	d10a      	bne.n	8001f0c <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001ef6:	4b7c      	ldr	r3, [pc, #496]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	2380      	movs	r3, #128	; 0x80
 8001efc:	029b      	lsls	r3, r3, #10
 8001efe:	401a      	ands	r2, r3
 8001f00:	2380      	movs	r3, #128	; 0x80
 8001f02:	029b      	lsls	r3, r3, #10
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d101      	bne.n	8001f0c <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e0e8      	b.n	80020de <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001f0c:	4b76      	ldr	r3, [pc, #472]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001f0e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f10:	23c0      	movs	r3, #192	; 0xc0
 8001f12:	029b      	lsls	r3, r3, #10
 8001f14:	4013      	ands	r3, r2
 8001f16:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d049      	beq.n	8001fb2 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	685a      	ldr	r2, [r3, #4]
 8001f22:	23c0      	movs	r3, #192	; 0xc0
 8001f24:	029b      	lsls	r3, r3, #10
 8001f26:	4013      	ands	r3, r2
 8001f28:	68fa      	ldr	r2, [r7, #12]
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	d004      	beq.n	8001f38 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	2220      	movs	r2, #32
 8001f34:	4013      	ands	r3, r2
 8001f36:	d10d      	bne.n	8001f54 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	689a      	ldr	r2, [r3, #8]
 8001f3c:	23c0      	movs	r3, #192	; 0xc0
 8001f3e:	029b      	lsls	r3, r3, #10
 8001f40:	4013      	ands	r3, r2
 8001f42:	68fa      	ldr	r2, [r7, #12]
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d034      	beq.n	8001fb2 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	2380      	movs	r3, #128	; 0x80
 8001f4e:	011b      	lsls	r3, r3, #4
 8001f50:	4013      	ands	r3, r2
 8001f52:	d02e      	beq.n	8001fb2 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001f54:	4b64      	ldr	r3, [pc, #400]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001f56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f58:	4a65      	ldr	r2, [pc, #404]	; (80020f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001f5e:	4b62      	ldr	r3, [pc, #392]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001f60:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f62:	4b61      	ldr	r3, [pc, #388]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001f64:	2180      	movs	r1, #128	; 0x80
 8001f66:	0309      	lsls	r1, r1, #12
 8001f68:	430a      	orrs	r2, r1
 8001f6a:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001f6c:	4b5e      	ldr	r3, [pc, #376]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001f6e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f70:	4b5d      	ldr	r3, [pc, #372]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001f72:	4960      	ldr	r1, [pc, #384]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8001f74:	400a      	ands	r2, r1
 8001f76:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8001f78:	4b5b      	ldr	r3, [pc, #364]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001f7a:	68fa      	ldr	r2, [r7, #12]
 8001f7c:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001f7e:	68fa      	ldr	r2, [r7, #12]
 8001f80:	2380      	movs	r3, #128	; 0x80
 8001f82:	005b      	lsls	r3, r3, #1
 8001f84:	4013      	ands	r3, r2
 8001f86:	d014      	beq.n	8001fb2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f88:	f7fe fefe 	bl	8000d88 <HAL_GetTick>
 8001f8c:	0003      	movs	r3, r0
 8001f8e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001f90:	e009      	b.n	8001fa6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f92:	f7fe fef9 	bl	8000d88 <HAL_GetTick>
 8001f96:	0002      	movs	r2, r0
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	1ad3      	subs	r3, r2, r3
 8001f9c:	4a56      	ldr	r2, [pc, #344]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d901      	bls.n	8001fa6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	e09b      	b.n	80020de <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001fa6:	4b50      	ldr	r3, [pc, #320]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001fa8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001faa:	2380      	movs	r3, #128	; 0x80
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	4013      	ands	r3, r2
 8001fb0:	d0ef      	beq.n	8001f92 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	685a      	ldr	r2, [r3, #4]
 8001fb6:	23c0      	movs	r3, #192	; 0xc0
 8001fb8:	029b      	lsls	r3, r3, #10
 8001fba:	401a      	ands	r2, r3
 8001fbc:	23c0      	movs	r3, #192	; 0xc0
 8001fbe:	029b      	lsls	r3, r3, #10
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d10c      	bne.n	8001fde <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8001fc4:	4b48      	ldr	r3, [pc, #288]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a4c      	ldr	r2, [pc, #304]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8001fca:	4013      	ands	r3, r2
 8001fcc:	0019      	movs	r1, r3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	685a      	ldr	r2, [r3, #4]
 8001fd2:	23c0      	movs	r3, #192	; 0xc0
 8001fd4:	039b      	lsls	r3, r3, #14
 8001fd6:	401a      	ands	r2, r3
 8001fd8:	4b43      	ldr	r3, [pc, #268]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001fda:	430a      	orrs	r2, r1
 8001fdc:	601a      	str	r2, [r3, #0]
 8001fde:	4b42      	ldr	r3, [pc, #264]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001fe0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	685a      	ldr	r2, [r3, #4]
 8001fe6:	23c0      	movs	r3, #192	; 0xc0
 8001fe8:	029b      	lsls	r3, r3, #10
 8001fea:	401a      	ands	r2, r3
 8001fec:	4b3e      	ldr	r3, [pc, #248]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001fee:	430a      	orrs	r2, r1
 8001ff0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001ff2:	2317      	movs	r3, #23
 8001ff4:	18fb      	adds	r3, r7, r3
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d105      	bne.n	8002008 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ffc:	4b3a      	ldr	r3, [pc, #232]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001ffe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002000:	4b39      	ldr	r3, [pc, #228]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002002:	493f      	ldr	r1, [pc, #252]	; (8002100 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002004:	400a      	ands	r2, r1
 8002006:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	2201      	movs	r2, #1
 800200e:	4013      	ands	r3, r2
 8002010:	d009      	beq.n	8002026 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002012:	4b35      	ldr	r3, [pc, #212]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002016:	2203      	movs	r2, #3
 8002018:	4393      	bics	r3, r2
 800201a:	0019      	movs	r1, r3
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	68da      	ldr	r2, [r3, #12]
 8002020:	4b31      	ldr	r3, [pc, #196]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002022:	430a      	orrs	r2, r1
 8002024:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	2202      	movs	r2, #2
 800202c:	4013      	ands	r3, r2
 800202e:	d009      	beq.n	8002044 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002030:	4b2d      	ldr	r3, [pc, #180]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002032:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002034:	220c      	movs	r2, #12
 8002036:	4393      	bics	r3, r2
 8002038:	0019      	movs	r1, r3
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	691a      	ldr	r2, [r3, #16]
 800203e:	4b2a      	ldr	r3, [pc, #168]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002040:	430a      	orrs	r2, r1
 8002042:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	2204      	movs	r2, #4
 800204a:	4013      	ands	r3, r2
 800204c:	d009      	beq.n	8002062 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800204e:	4b26      	ldr	r3, [pc, #152]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002052:	4a2c      	ldr	r2, [pc, #176]	; (8002104 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002054:	4013      	ands	r3, r2
 8002056:	0019      	movs	r1, r3
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	695a      	ldr	r2, [r3, #20]
 800205c:	4b22      	ldr	r3, [pc, #136]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800205e:	430a      	orrs	r2, r1
 8002060:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	2208      	movs	r2, #8
 8002068:	4013      	ands	r3, r2
 800206a:	d009      	beq.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800206c:	4b1e      	ldr	r3, [pc, #120]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800206e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002070:	4a25      	ldr	r2, [pc, #148]	; (8002108 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8002072:	4013      	ands	r3, r2
 8002074:	0019      	movs	r1, r3
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	699a      	ldr	r2, [r3, #24]
 800207a:	4b1b      	ldr	r3, [pc, #108]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800207c:	430a      	orrs	r2, r1
 800207e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	2380      	movs	r3, #128	; 0x80
 8002086:	005b      	lsls	r3, r3, #1
 8002088:	4013      	ands	r3, r2
 800208a:	d009      	beq.n	80020a0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800208c:	4b16      	ldr	r3, [pc, #88]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800208e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002090:	4a17      	ldr	r2, [pc, #92]	; (80020f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002092:	4013      	ands	r3, r2
 8002094:	0019      	movs	r1, r3
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	69da      	ldr	r2, [r3, #28]
 800209a:	4b13      	ldr	r3, [pc, #76]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800209c:	430a      	orrs	r2, r1
 800209e:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	2240      	movs	r2, #64	; 0x40
 80020a6:	4013      	ands	r3, r2
 80020a8:	d009      	beq.n	80020be <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80020aa:	4b0f      	ldr	r3, [pc, #60]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80020ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ae:	4a17      	ldr	r2, [pc, #92]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80020b0:	4013      	ands	r3, r2
 80020b2:	0019      	movs	r1, r3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80020b8:	4b0b      	ldr	r3, [pc, #44]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80020ba:	430a      	orrs	r2, r1
 80020bc:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	2280      	movs	r2, #128	; 0x80
 80020c4:	4013      	ands	r3, r2
 80020c6:	d009      	beq.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80020c8:	4b07      	ldr	r3, [pc, #28]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80020ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020cc:	4a10      	ldr	r2, [pc, #64]	; (8002110 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80020ce:	4013      	ands	r3, r2
 80020d0:	0019      	movs	r1, r3
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6a1a      	ldr	r2, [r3, #32]
 80020d6:	4b04      	ldr	r3, [pc, #16]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80020d8:	430a      	orrs	r2, r1
 80020da:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80020dc:	2300      	movs	r3, #0
}
 80020de:	0018      	movs	r0, r3
 80020e0:	46bd      	mov	sp, r7
 80020e2:	b006      	add	sp, #24
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	46c0      	nop			; (mov r8, r8)
 80020e8:	40021000 	.word	0x40021000
 80020ec:	40007000 	.word	0x40007000
 80020f0:	fffcffff 	.word	0xfffcffff
 80020f4:	fff7ffff 	.word	0xfff7ffff
 80020f8:	00001388 	.word	0x00001388
 80020fc:	ffcfffff 	.word	0xffcfffff
 8002100:	efffffff 	.word	0xefffffff
 8002104:	fffff3ff 	.word	0xfffff3ff
 8002108:	ffffcfff 	.word	0xffffcfff
 800210c:	fbffffff 	.word	0xfbffffff
 8002110:	fff3ffff 	.word	0xfff3ffff

08002114 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d101      	bne.n	8002126 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e083      	b.n	800222e <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800212a:	2b00      	cmp	r3, #0
 800212c:	d109      	bne.n	8002142 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	685a      	ldr	r2, [r3, #4]
 8002132:	2382      	movs	r3, #130	; 0x82
 8002134:	005b      	lsls	r3, r3, #1
 8002136:	429a      	cmp	r2, r3
 8002138:	d009      	beq.n	800214e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2200      	movs	r2, #0
 800213e:	61da      	str	r2, [r3, #28]
 8002140:	e005      	b.n	800214e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2200      	movs	r2, #0
 8002146:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2200      	movs	r2, #0
 800214c:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2200      	movs	r2, #0
 8002152:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2251      	movs	r2, #81	; 0x51
 8002158:	5c9b      	ldrb	r3, [r3, r2]
 800215a:	b2db      	uxtb	r3, r3
 800215c:	2b00      	cmp	r3, #0
 800215e:	d107      	bne.n	8002170 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2250      	movs	r2, #80	; 0x50
 8002164:	2100      	movs	r1, #0
 8002166:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	0018      	movs	r0, r3
 800216c:	f7fe fca0 	bl	8000ab0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2251      	movs	r2, #81	; 0x51
 8002174:	2102      	movs	r1, #2
 8002176:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	2140      	movs	r1, #64	; 0x40
 8002184:	438a      	bics	r2, r1
 8002186:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	685a      	ldr	r2, [r3, #4]
 800218c:	2382      	movs	r3, #130	; 0x82
 800218e:	005b      	lsls	r3, r3, #1
 8002190:	401a      	ands	r2, r3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6899      	ldr	r1, [r3, #8]
 8002196:	2384      	movs	r3, #132	; 0x84
 8002198:	021b      	lsls	r3, r3, #8
 800219a:	400b      	ands	r3, r1
 800219c:	431a      	orrs	r2, r3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	68d9      	ldr	r1, [r3, #12]
 80021a2:	2380      	movs	r3, #128	; 0x80
 80021a4:	011b      	lsls	r3, r3, #4
 80021a6:	400b      	ands	r3, r1
 80021a8:	431a      	orrs	r2, r3
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	691b      	ldr	r3, [r3, #16]
 80021ae:	2102      	movs	r1, #2
 80021b0:	400b      	ands	r3, r1
 80021b2:	431a      	orrs	r2, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	695b      	ldr	r3, [r3, #20]
 80021b8:	2101      	movs	r1, #1
 80021ba:	400b      	ands	r3, r1
 80021bc:	431a      	orrs	r2, r3
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6999      	ldr	r1, [r3, #24]
 80021c2:	2380      	movs	r3, #128	; 0x80
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	400b      	ands	r3, r1
 80021c8:	431a      	orrs	r2, r3
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	69db      	ldr	r3, [r3, #28]
 80021ce:	2138      	movs	r1, #56	; 0x38
 80021d0:	400b      	ands	r3, r1
 80021d2:	431a      	orrs	r2, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6a1b      	ldr	r3, [r3, #32]
 80021d8:	2180      	movs	r1, #128	; 0x80
 80021da:	400b      	ands	r3, r1
 80021dc:	431a      	orrs	r2, r3
 80021de:	0011      	movs	r1, r2
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80021e4:	2380      	movs	r3, #128	; 0x80
 80021e6:	019b      	lsls	r3, r3, #6
 80021e8:	401a      	ands	r2, r3
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	430a      	orrs	r2, r1
 80021f0:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	699b      	ldr	r3, [r3, #24]
 80021f6:	0c1b      	lsrs	r3, r3, #16
 80021f8:	2204      	movs	r2, #4
 80021fa:	4013      	ands	r3, r2
 80021fc:	0019      	movs	r1, r3
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002202:	2210      	movs	r2, #16
 8002204:	401a      	ands	r2, r3
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	430a      	orrs	r2, r1
 800220c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	69da      	ldr	r2, [r3, #28]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4907      	ldr	r1, [pc, #28]	; (8002238 <HAL_SPI_Init+0x124>)
 800221a:	400a      	ands	r2, r1
 800221c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2200      	movs	r2, #0
 8002222:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2251      	movs	r2, #81	; 0x51
 8002228:	2101      	movs	r1, #1
 800222a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800222c:	2300      	movs	r3, #0
}
 800222e:	0018      	movs	r0, r3
 8002230:	46bd      	mov	sp, r7
 8002232:	b002      	add	sp, #8
 8002234:	bd80      	pop	{r7, pc}
 8002236:	46c0      	nop			; (mov r8, r8)
 8002238:	fffff7ff 	.word	0xfffff7ff

0800223c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b088      	sub	sp, #32
 8002240:	af00      	add	r7, sp, #0
 8002242:	60f8      	str	r0, [r7, #12]
 8002244:	60b9      	str	r1, [r7, #8]
 8002246:	603b      	str	r3, [r7, #0]
 8002248:	1dbb      	adds	r3, r7, #6
 800224a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800224c:	231f      	movs	r3, #31
 800224e:	18fb      	adds	r3, r7, r3
 8002250:	2200      	movs	r2, #0
 8002252:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2250      	movs	r2, #80	; 0x50
 8002258:	5c9b      	ldrb	r3, [r3, r2]
 800225a:	2b01      	cmp	r3, #1
 800225c:	d101      	bne.n	8002262 <HAL_SPI_Transmit+0x26>
 800225e:	2302      	movs	r3, #2
 8002260:	e13e      	b.n	80024e0 <HAL_SPI_Transmit+0x2a4>
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	2250      	movs	r2, #80	; 0x50
 8002266:	2101      	movs	r1, #1
 8002268:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800226a:	f7fe fd8d 	bl	8000d88 <HAL_GetTick>
 800226e:	0003      	movs	r3, r0
 8002270:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002272:	2316      	movs	r3, #22
 8002274:	18fb      	adds	r3, r7, r3
 8002276:	1dba      	adds	r2, r7, #6
 8002278:	8812      	ldrh	r2, [r2, #0]
 800227a:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2251      	movs	r2, #81	; 0x51
 8002280:	5c9b      	ldrb	r3, [r3, r2]
 8002282:	b2db      	uxtb	r3, r3
 8002284:	2b01      	cmp	r3, #1
 8002286:	d004      	beq.n	8002292 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8002288:	231f      	movs	r3, #31
 800228a:	18fb      	adds	r3, r7, r3
 800228c:	2202      	movs	r2, #2
 800228e:	701a      	strb	r2, [r3, #0]
    goto error;
 8002290:	e11b      	b.n	80024ca <HAL_SPI_Transmit+0x28e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d003      	beq.n	80022a0 <HAL_SPI_Transmit+0x64>
 8002298:	1dbb      	adds	r3, r7, #6
 800229a:	881b      	ldrh	r3, [r3, #0]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d104      	bne.n	80022aa <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80022a0:	231f      	movs	r3, #31
 80022a2:	18fb      	adds	r3, r7, r3
 80022a4:	2201      	movs	r2, #1
 80022a6:	701a      	strb	r2, [r3, #0]
    goto error;
 80022a8:	e10f      	b.n	80024ca <HAL_SPI_Transmit+0x28e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	2251      	movs	r2, #81	; 0x51
 80022ae:	2103      	movs	r1, #3
 80022b0:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2200      	movs	r2, #0
 80022b6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	68ba      	ldr	r2, [r7, #8]
 80022bc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	1dba      	adds	r2, r7, #6
 80022c2:	8812      	ldrh	r2, [r2, #0]
 80022c4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	1dba      	adds	r2, r7, #6
 80022ca:	8812      	ldrh	r2, [r2, #0]
 80022cc:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2200      	movs	r2, #0
 80022d2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2200      	movs	r2, #0
 80022d8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2200      	movs	r2, #0
 80022de:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2200      	movs	r2, #0
 80022e4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2200      	movs	r2, #0
 80022ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	689a      	ldr	r2, [r3, #8]
 80022f0:	2380      	movs	r3, #128	; 0x80
 80022f2:	021b      	lsls	r3, r3, #8
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d110      	bne.n	800231a <HAL_SPI_Transmit+0xde>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	2140      	movs	r1, #64	; 0x40
 8002304:	438a      	bics	r2, r1
 8002306:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	2180      	movs	r1, #128	; 0x80
 8002314:	01c9      	lsls	r1, r1, #7
 8002316:	430a      	orrs	r2, r1
 8002318:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	2240      	movs	r2, #64	; 0x40
 8002322:	4013      	ands	r3, r2
 8002324:	2b40      	cmp	r3, #64	; 0x40
 8002326:	d007      	beq.n	8002338 <HAL_SPI_Transmit+0xfc>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	2140      	movs	r1, #64	; 0x40
 8002334:	430a      	orrs	r2, r1
 8002336:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	68da      	ldr	r2, [r3, #12]
 800233c:	2380      	movs	r3, #128	; 0x80
 800233e:	011b      	lsls	r3, r3, #4
 8002340:	429a      	cmp	r2, r3
 8002342:	d14e      	bne.n	80023e2 <HAL_SPI_Transmit+0x1a6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d004      	beq.n	8002356 <HAL_SPI_Transmit+0x11a>
 800234c:	2316      	movs	r3, #22
 800234e:	18fb      	adds	r3, r7, r3
 8002350:	881b      	ldrh	r3, [r3, #0]
 8002352:	2b01      	cmp	r3, #1
 8002354:	d13f      	bne.n	80023d6 <HAL_SPI_Transmit+0x19a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235a:	881a      	ldrh	r2, [r3, #0]
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002366:	1c9a      	adds	r2, r3, #2
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002370:	b29b      	uxth	r3, r3
 8002372:	3b01      	subs	r3, #1
 8002374:	b29a      	uxth	r2, r3
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800237a:	e02c      	b.n	80023d6 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	2202      	movs	r2, #2
 8002384:	4013      	ands	r3, r2
 8002386:	2b02      	cmp	r3, #2
 8002388:	d112      	bne.n	80023b0 <HAL_SPI_Transmit+0x174>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238e:	881a      	ldrh	r2, [r3, #0]
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239a:	1c9a      	adds	r2, r3, #2
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023a4:	b29b      	uxth	r3, r3
 80023a6:	3b01      	subs	r3, #1
 80023a8:	b29a      	uxth	r2, r3
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	86da      	strh	r2, [r3, #54]	; 0x36
 80023ae:	e012      	b.n	80023d6 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80023b0:	f7fe fcea 	bl	8000d88 <HAL_GetTick>
 80023b4:	0002      	movs	r2, r0
 80023b6:	69bb      	ldr	r3, [r7, #24]
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	683a      	ldr	r2, [r7, #0]
 80023bc:	429a      	cmp	r2, r3
 80023be:	d802      	bhi.n	80023c6 <HAL_SPI_Transmit+0x18a>
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	3301      	adds	r3, #1
 80023c4:	d102      	bne.n	80023cc <HAL_SPI_Transmit+0x190>
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d104      	bne.n	80023d6 <HAL_SPI_Transmit+0x19a>
        {
          errorcode = HAL_TIMEOUT;
 80023cc:	231f      	movs	r3, #31
 80023ce:	18fb      	adds	r3, r7, r3
 80023d0:	2203      	movs	r2, #3
 80023d2:	701a      	strb	r2, [r3, #0]
          goto error;
 80023d4:	e079      	b.n	80024ca <HAL_SPI_Transmit+0x28e>
    while (hspi->TxXferCount > 0U)
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023da:	b29b      	uxth	r3, r3
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d1cd      	bne.n	800237c <HAL_SPI_Transmit+0x140>
 80023e0:	e04f      	b.n	8002482 <HAL_SPI_Transmit+0x246>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d004      	beq.n	80023f4 <HAL_SPI_Transmit+0x1b8>
 80023ea:	2316      	movs	r3, #22
 80023ec:	18fb      	adds	r3, r7, r3
 80023ee:	881b      	ldrh	r3, [r3, #0]
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d141      	bne.n	8002478 <HAL_SPI_Transmit+0x23c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	330c      	adds	r3, #12
 80023fe:	7812      	ldrb	r2, [r2, #0]
 8002400:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002406:	1c5a      	adds	r2, r3, #1
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002410:	b29b      	uxth	r3, r3
 8002412:	3b01      	subs	r3, #1
 8002414:	b29a      	uxth	r2, r3
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800241a:	e02d      	b.n	8002478 <HAL_SPI_Transmit+0x23c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	2202      	movs	r2, #2
 8002424:	4013      	ands	r3, r2
 8002426:	2b02      	cmp	r3, #2
 8002428:	d113      	bne.n	8002452 <HAL_SPI_Transmit+0x216>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	330c      	adds	r3, #12
 8002434:	7812      	ldrb	r2, [r2, #0]
 8002436:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243c:	1c5a      	adds	r2, r3, #1
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002446:	b29b      	uxth	r3, r3
 8002448:	3b01      	subs	r3, #1
 800244a:	b29a      	uxth	r2, r3
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	86da      	strh	r2, [r3, #54]	; 0x36
 8002450:	e012      	b.n	8002478 <HAL_SPI_Transmit+0x23c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002452:	f7fe fc99 	bl	8000d88 <HAL_GetTick>
 8002456:	0002      	movs	r2, r0
 8002458:	69bb      	ldr	r3, [r7, #24]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	683a      	ldr	r2, [r7, #0]
 800245e:	429a      	cmp	r2, r3
 8002460:	d802      	bhi.n	8002468 <HAL_SPI_Transmit+0x22c>
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	3301      	adds	r3, #1
 8002466:	d102      	bne.n	800246e <HAL_SPI_Transmit+0x232>
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d104      	bne.n	8002478 <HAL_SPI_Transmit+0x23c>
        {
          errorcode = HAL_TIMEOUT;
 800246e:	231f      	movs	r3, #31
 8002470:	18fb      	adds	r3, r7, r3
 8002472:	2203      	movs	r2, #3
 8002474:	701a      	strb	r2, [r3, #0]
          goto error;
 8002476:	e028      	b.n	80024ca <HAL_SPI_Transmit+0x28e>
    while (hspi->TxXferCount > 0U)
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800247c:	b29b      	uxth	r3, r3
 800247e:	2b00      	cmp	r3, #0
 8002480:	d1cc      	bne.n	800241c <HAL_SPI_Transmit+0x1e0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002482:	69ba      	ldr	r2, [r7, #24]
 8002484:	6839      	ldr	r1, [r7, #0]
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	0018      	movs	r0, r3
 800248a:	f000 fa77 	bl	800297c <SPI_EndRxTxTransaction>
 800248e:	1e03      	subs	r3, r0, #0
 8002490:	d002      	beq.n	8002498 <HAL_SPI_Transmit+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2220      	movs	r2, #32
 8002496:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d10a      	bne.n	80024b6 <HAL_SPI_Transmit+0x27a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80024a0:	2300      	movs	r3, #0
 80024a2:	613b      	str	r3, [r7, #16]
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	68db      	ldr	r3, [r3, #12]
 80024aa:	613b      	str	r3, [r7, #16]
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	613b      	str	r3, [r7, #16]
 80024b4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d004      	beq.n	80024c8 <HAL_SPI_Transmit+0x28c>
  {
    errorcode = HAL_ERROR;
 80024be:	231f      	movs	r3, #31
 80024c0:	18fb      	adds	r3, r7, r3
 80024c2:	2201      	movs	r2, #1
 80024c4:	701a      	strb	r2, [r3, #0]
 80024c6:	e000      	b.n	80024ca <HAL_SPI_Transmit+0x28e>
  }

error:
 80024c8:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2251      	movs	r2, #81	; 0x51
 80024ce:	2101      	movs	r1, #1
 80024d0:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2250      	movs	r2, #80	; 0x50
 80024d6:	2100      	movs	r1, #0
 80024d8:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80024da:	231f      	movs	r3, #31
 80024dc:	18fb      	adds	r3, r7, r3
 80024de:	781b      	ldrb	r3, [r3, #0]
}
 80024e0:	0018      	movs	r0, r3
 80024e2:	46bd      	mov	sp, r7
 80024e4:	b008      	add	sp, #32
 80024e6:	bd80      	pop	{r7, pc}

080024e8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b08c      	sub	sp, #48	; 0x30
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	60f8      	str	r0, [r7, #12]
 80024f0:	60b9      	str	r1, [r7, #8]
 80024f2:	607a      	str	r2, [r7, #4]
 80024f4:	001a      	movs	r2, r3
 80024f6:	1cbb      	adds	r3, r7, #2
 80024f8:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80024fa:	2301      	movs	r3, #1
 80024fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80024fe:	232b      	movs	r3, #43	; 0x2b
 8002500:	18fb      	adds	r3, r7, r3
 8002502:	2200      	movs	r2, #0
 8002504:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2250      	movs	r2, #80	; 0x50
 800250a:	5c9b      	ldrb	r3, [r3, r2]
 800250c:	2b01      	cmp	r3, #1
 800250e:	d101      	bne.n	8002514 <HAL_SPI_TransmitReceive+0x2c>
 8002510:	2302      	movs	r3, #2
 8002512:	e1a0      	b.n	8002856 <HAL_SPI_TransmitReceive+0x36e>
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	2250      	movs	r2, #80	; 0x50
 8002518:	2101      	movs	r1, #1
 800251a:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800251c:	f7fe fc34 	bl	8000d88 <HAL_GetTick>
 8002520:	0003      	movs	r3, r0
 8002522:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002524:	2023      	movs	r0, #35	; 0x23
 8002526:	183b      	adds	r3, r7, r0
 8002528:	68fa      	ldr	r2, [r7, #12]
 800252a:	2151      	movs	r1, #81	; 0x51
 800252c:	5c52      	ldrb	r2, [r2, r1]
 800252e:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002536:	231a      	movs	r3, #26
 8002538:	18fb      	adds	r3, r7, r3
 800253a:	1cba      	adds	r2, r7, #2
 800253c:	8812      	ldrh	r2, [r2, #0]
 800253e:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002540:	183b      	adds	r3, r7, r0
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	2b01      	cmp	r3, #1
 8002546:	d011      	beq.n	800256c <HAL_SPI_TransmitReceive+0x84>
 8002548:	69fa      	ldr	r2, [r7, #28]
 800254a:	2382      	movs	r3, #130	; 0x82
 800254c:	005b      	lsls	r3, r3, #1
 800254e:	429a      	cmp	r2, r3
 8002550:	d107      	bne.n	8002562 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d103      	bne.n	8002562 <HAL_SPI_TransmitReceive+0x7a>
 800255a:	183b      	adds	r3, r7, r0
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	2b04      	cmp	r3, #4
 8002560:	d004      	beq.n	800256c <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8002562:	232b      	movs	r3, #43	; 0x2b
 8002564:	18fb      	adds	r3, r7, r3
 8002566:	2202      	movs	r2, #2
 8002568:	701a      	strb	r2, [r3, #0]
    goto error;
 800256a:	e169      	b.n	8002840 <HAL_SPI_TransmitReceive+0x358>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d006      	beq.n	8002580 <HAL_SPI_TransmitReceive+0x98>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d003      	beq.n	8002580 <HAL_SPI_TransmitReceive+0x98>
 8002578:	1cbb      	adds	r3, r7, #2
 800257a:	881b      	ldrh	r3, [r3, #0]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d104      	bne.n	800258a <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8002580:	232b      	movs	r3, #43	; 0x2b
 8002582:	18fb      	adds	r3, r7, r3
 8002584:	2201      	movs	r2, #1
 8002586:	701a      	strb	r2, [r3, #0]
    goto error;
 8002588:	e15a      	b.n	8002840 <HAL_SPI_TransmitReceive+0x358>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2251      	movs	r2, #81	; 0x51
 800258e:	5c9b      	ldrb	r3, [r3, r2]
 8002590:	b2db      	uxtb	r3, r3
 8002592:	2b04      	cmp	r3, #4
 8002594:	d003      	beq.n	800259e <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2251      	movs	r2, #81	; 0x51
 800259a:	2105      	movs	r1, #5
 800259c:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2200      	movs	r2, #0
 80025a2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	1cba      	adds	r2, r7, #2
 80025ae:	8812      	ldrh	r2, [r2, #0]
 80025b0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	1cba      	adds	r2, r7, #2
 80025b6:	8812      	ldrh	r2, [r2, #0]
 80025b8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	68ba      	ldr	r2, [r7, #8]
 80025be:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	1cba      	adds	r2, r7, #2
 80025c4:	8812      	ldrh	r2, [r2, #0]
 80025c6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	1cba      	adds	r2, r7, #2
 80025cc:	8812      	ldrh	r2, [r2, #0]
 80025ce:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2200      	movs	r2, #0
 80025d4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2200      	movs	r2, #0
 80025da:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	2240      	movs	r2, #64	; 0x40
 80025e4:	4013      	ands	r3, r2
 80025e6:	2b40      	cmp	r3, #64	; 0x40
 80025e8:	d007      	beq.n	80025fa <HAL_SPI_TransmitReceive+0x112>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	2140      	movs	r1, #64	; 0x40
 80025f6:	430a      	orrs	r2, r1
 80025f8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	68da      	ldr	r2, [r3, #12]
 80025fe:	2380      	movs	r3, #128	; 0x80
 8002600:	011b      	lsls	r3, r3, #4
 8002602:	429a      	cmp	r2, r3
 8002604:	d000      	beq.n	8002608 <HAL_SPI_TransmitReceive+0x120>
 8002606:	e07a      	b.n	80026fe <HAL_SPI_TransmitReceive+0x216>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d004      	beq.n	800261a <HAL_SPI_TransmitReceive+0x132>
 8002610:	231a      	movs	r3, #26
 8002612:	18fb      	adds	r3, r7, r3
 8002614:	881b      	ldrh	r3, [r3, #0]
 8002616:	2b01      	cmp	r3, #1
 8002618:	d166      	bne.n	80026e8 <HAL_SPI_TransmitReceive+0x200>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261e:	881a      	ldrh	r2, [r3, #0]
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262a:	1c9a      	adds	r2, r3, #2
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002634:	b29b      	uxth	r3, r3
 8002636:	3b01      	subs	r3, #1
 8002638:	b29a      	uxth	r2, r3
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800263e:	e053      	b.n	80026e8 <HAL_SPI_TransmitReceive+0x200>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	2202      	movs	r2, #2
 8002648:	4013      	ands	r3, r2
 800264a:	2b02      	cmp	r3, #2
 800264c:	d11b      	bne.n	8002686 <HAL_SPI_TransmitReceive+0x19e>
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002652:	b29b      	uxth	r3, r3
 8002654:	2b00      	cmp	r3, #0
 8002656:	d016      	beq.n	8002686 <HAL_SPI_TransmitReceive+0x19e>
 8002658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800265a:	2b01      	cmp	r3, #1
 800265c:	d113      	bne.n	8002686 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002662:	881a      	ldrh	r2, [r3, #0]
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266e:	1c9a      	adds	r2, r3, #2
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002678:	b29b      	uxth	r3, r3
 800267a:	3b01      	subs	r3, #1
 800267c:	b29a      	uxth	r2, r3
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002682:	2300      	movs	r3, #0
 8002684:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	2201      	movs	r2, #1
 800268e:	4013      	ands	r3, r2
 8002690:	2b01      	cmp	r3, #1
 8002692:	d119      	bne.n	80026c8 <HAL_SPI_TransmitReceive+0x1e0>
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002698:	b29b      	uxth	r3, r3
 800269a:	2b00      	cmp	r3, #0
 800269c:	d014      	beq.n	80026c8 <HAL_SPI_TransmitReceive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	68da      	ldr	r2, [r3, #12]
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026a8:	b292      	uxth	r2, r2
 80026aa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026b0:	1c9a      	adds	r2, r3, #2
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026ba:	b29b      	uxth	r3, r3
 80026bc:	3b01      	subs	r3, #1
 80026be:	b29a      	uxth	r2, r3
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80026c4:	2301      	movs	r3, #1
 80026c6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80026c8:	f7fe fb5e 	bl	8000d88 <HAL_GetTick>
 80026cc:	0002      	movs	r2, r0
 80026ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d807      	bhi.n	80026e8 <HAL_SPI_TransmitReceive+0x200>
 80026d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026da:	3301      	adds	r3, #1
 80026dc:	d004      	beq.n	80026e8 <HAL_SPI_TransmitReceive+0x200>
      {
        errorcode = HAL_TIMEOUT;
 80026de:	232b      	movs	r3, #43	; 0x2b
 80026e0:	18fb      	adds	r3, r7, r3
 80026e2:	2203      	movs	r2, #3
 80026e4:	701a      	strb	r2, [r3, #0]
        goto error;
 80026e6:	e0ab      	b.n	8002840 <HAL_SPI_TransmitReceive+0x358>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d1a6      	bne.n	8002640 <HAL_SPI_TransmitReceive+0x158>
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d1a1      	bne.n	8002640 <HAL_SPI_TransmitReceive+0x158>
 80026fc:	e07f      	b.n	80027fe <HAL_SPI_TransmitReceive+0x316>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d005      	beq.n	8002712 <HAL_SPI_TransmitReceive+0x22a>
 8002706:	231a      	movs	r3, #26
 8002708:	18fb      	adds	r3, r7, r3
 800270a:	881b      	ldrh	r3, [r3, #0]
 800270c:	2b01      	cmp	r3, #1
 800270e:	d000      	beq.n	8002712 <HAL_SPI_TransmitReceive+0x22a>
 8002710:	e06b      	b.n	80027ea <HAL_SPI_TransmitReceive+0x302>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	330c      	adds	r3, #12
 800271c:	7812      	ldrb	r2, [r2, #0]
 800271e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002724:	1c5a      	adds	r2, r3, #1
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800272e:	b29b      	uxth	r3, r3
 8002730:	3b01      	subs	r3, #1
 8002732:	b29a      	uxth	r2, r3
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002738:	e057      	b.n	80027ea <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	2202      	movs	r2, #2
 8002742:	4013      	ands	r3, r2
 8002744:	2b02      	cmp	r3, #2
 8002746:	d11c      	bne.n	8002782 <HAL_SPI_TransmitReceive+0x29a>
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800274c:	b29b      	uxth	r3, r3
 800274e:	2b00      	cmp	r3, #0
 8002750:	d017      	beq.n	8002782 <HAL_SPI_TransmitReceive+0x29a>
 8002752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002754:	2b01      	cmp	r3, #1
 8002756:	d114      	bne.n	8002782 <HAL_SPI_TransmitReceive+0x29a>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	330c      	adds	r3, #12
 8002762:	7812      	ldrb	r2, [r2, #0]
 8002764:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276a:	1c5a      	adds	r2, r3, #1
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002774:	b29b      	uxth	r3, r3
 8002776:	3b01      	subs	r3, #1
 8002778:	b29a      	uxth	r2, r3
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800277e:	2300      	movs	r3, #0
 8002780:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	2201      	movs	r2, #1
 800278a:	4013      	ands	r3, r2
 800278c:	2b01      	cmp	r3, #1
 800278e:	d119      	bne.n	80027c4 <HAL_SPI_TransmitReceive+0x2dc>
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002794:	b29b      	uxth	r3, r3
 8002796:	2b00      	cmp	r3, #0
 8002798:	d014      	beq.n	80027c4 <HAL_SPI_TransmitReceive+0x2dc>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	68da      	ldr	r2, [r3, #12]
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027a4:	b2d2      	uxtb	r2, r2
 80027a6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ac:	1c5a      	adds	r2, r3, #1
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027b6:	b29b      	uxth	r3, r3
 80027b8:	3b01      	subs	r3, #1
 80027ba:	b29a      	uxth	r2, r3
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80027c0:	2301      	movs	r3, #1
 80027c2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80027c4:	f7fe fae0 	bl	8000d88 <HAL_GetTick>
 80027c8:	0002      	movs	r2, r0
 80027ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d802      	bhi.n	80027da <HAL_SPI_TransmitReceive+0x2f2>
 80027d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027d6:	3301      	adds	r3, #1
 80027d8:	d102      	bne.n	80027e0 <HAL_SPI_TransmitReceive+0x2f8>
 80027da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d104      	bne.n	80027ea <HAL_SPI_TransmitReceive+0x302>
      {
        errorcode = HAL_TIMEOUT;
 80027e0:	232b      	movs	r3, #43	; 0x2b
 80027e2:	18fb      	adds	r3, r7, r3
 80027e4:	2203      	movs	r2, #3
 80027e6:	701a      	strb	r2, [r3, #0]
        goto error;
 80027e8:	e02a      	b.n	8002840 <HAL_SPI_TransmitReceive+0x358>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d1a2      	bne.n	800273a <HAL_SPI_TransmitReceive+0x252>
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027f8:	b29b      	uxth	r3, r3
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d19d      	bne.n	800273a <HAL_SPI_TransmitReceive+0x252>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80027fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002800:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	0018      	movs	r0, r3
 8002806:	f000 f8b9 	bl	800297c <SPI_EndRxTxTransaction>
 800280a:	1e03      	subs	r3, r0, #0
 800280c:	d007      	beq.n	800281e <HAL_SPI_TransmitReceive+0x336>
  {
    errorcode = HAL_ERROR;
 800280e:	232b      	movs	r3, #43	; 0x2b
 8002810:	18fb      	adds	r3, r7, r3
 8002812:	2201      	movs	r2, #1
 8002814:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2220      	movs	r2, #32
 800281a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800281c:	e010      	b.n	8002840 <HAL_SPI_TransmitReceive+0x358>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d10b      	bne.n	800283e <HAL_SPI_TransmitReceive+0x356>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002826:	2300      	movs	r3, #0
 8002828:	617b      	str	r3, [r7, #20]
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	617b      	str	r3, [r7, #20]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	617b      	str	r3, [r7, #20]
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	e000      	b.n	8002840 <HAL_SPI_TransmitReceive+0x358>
  }

error :
 800283e:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2251      	movs	r2, #81	; 0x51
 8002844:	2101      	movs	r1, #1
 8002846:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2250      	movs	r2, #80	; 0x50
 800284c:	2100      	movs	r1, #0
 800284e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002850:	232b      	movs	r3, #43	; 0x2b
 8002852:	18fb      	adds	r3, r7, r3
 8002854:	781b      	ldrb	r3, [r3, #0]
}
 8002856:	0018      	movs	r0, r3
 8002858:	46bd      	mov	sp, r7
 800285a:	b00c      	add	sp, #48	; 0x30
 800285c:	bd80      	pop	{r7, pc}
	...

08002860 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b088      	sub	sp, #32
 8002864:	af00      	add	r7, sp, #0
 8002866:	60f8      	str	r0, [r7, #12]
 8002868:	60b9      	str	r1, [r7, #8]
 800286a:	603b      	str	r3, [r7, #0]
 800286c:	1dfb      	adds	r3, r7, #7
 800286e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002870:	f7fe fa8a 	bl	8000d88 <HAL_GetTick>
 8002874:	0002      	movs	r2, r0
 8002876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002878:	1a9b      	subs	r3, r3, r2
 800287a:	683a      	ldr	r2, [r7, #0]
 800287c:	18d3      	adds	r3, r2, r3
 800287e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002880:	f7fe fa82 	bl	8000d88 <HAL_GetTick>
 8002884:	0003      	movs	r3, r0
 8002886:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002888:	4b3a      	ldr	r3, [pc, #232]	; (8002974 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	015b      	lsls	r3, r3, #5
 800288e:	0d1b      	lsrs	r3, r3, #20
 8002890:	69fa      	ldr	r2, [r7, #28]
 8002892:	4353      	muls	r3, r2
 8002894:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002896:	e058      	b.n	800294a <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	3301      	adds	r3, #1
 800289c:	d055      	beq.n	800294a <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800289e:	f7fe fa73 	bl	8000d88 <HAL_GetTick>
 80028a2:	0002      	movs	r2, r0
 80028a4:	69bb      	ldr	r3, [r7, #24]
 80028a6:	1ad3      	subs	r3, r2, r3
 80028a8:	69fa      	ldr	r2, [r7, #28]
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d902      	bls.n	80028b4 <SPI_WaitFlagStateUntilTimeout+0x54>
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d142      	bne.n	800293a <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	685a      	ldr	r2, [r3, #4]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	21e0      	movs	r1, #224	; 0xe0
 80028c0:	438a      	bics	r2, r1
 80028c2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	685a      	ldr	r2, [r3, #4]
 80028c8:	2382      	movs	r3, #130	; 0x82
 80028ca:	005b      	lsls	r3, r3, #1
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d113      	bne.n	80028f8 <SPI_WaitFlagStateUntilTimeout+0x98>
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	689a      	ldr	r2, [r3, #8]
 80028d4:	2380      	movs	r3, #128	; 0x80
 80028d6:	021b      	lsls	r3, r3, #8
 80028d8:	429a      	cmp	r2, r3
 80028da:	d005      	beq.n	80028e8 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	689a      	ldr	r2, [r3, #8]
 80028e0:	2380      	movs	r3, #128	; 0x80
 80028e2:	00db      	lsls	r3, r3, #3
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d107      	bne.n	80028f8 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	2140      	movs	r1, #64	; 0x40
 80028f4:	438a      	bics	r2, r1
 80028f6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80028fc:	2380      	movs	r3, #128	; 0x80
 80028fe:	019b      	lsls	r3, r3, #6
 8002900:	429a      	cmp	r2, r3
 8002902:	d110      	bne.n	8002926 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	491a      	ldr	r1, [pc, #104]	; (8002978 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8002910:	400a      	ands	r2, r1
 8002912:	601a      	str	r2, [r3, #0]
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	2180      	movs	r1, #128	; 0x80
 8002920:	0189      	lsls	r1, r1, #6
 8002922:	430a      	orrs	r2, r1
 8002924:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2251      	movs	r2, #81	; 0x51
 800292a:	2101      	movs	r1, #1
 800292c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2250      	movs	r2, #80	; 0x50
 8002932:	2100      	movs	r1, #0
 8002934:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e017      	b.n	800296a <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d101      	bne.n	8002944 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8002940:	2300      	movs	r3, #0
 8002942:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	3b01      	subs	r3, #1
 8002948:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	68ba      	ldr	r2, [r7, #8]
 8002952:	4013      	ands	r3, r2
 8002954:	68ba      	ldr	r2, [r7, #8]
 8002956:	1ad3      	subs	r3, r2, r3
 8002958:	425a      	negs	r2, r3
 800295a:	4153      	adcs	r3, r2
 800295c:	b2db      	uxtb	r3, r3
 800295e:	001a      	movs	r2, r3
 8002960:	1dfb      	adds	r3, r7, #7
 8002962:	781b      	ldrb	r3, [r3, #0]
 8002964:	429a      	cmp	r2, r3
 8002966:	d197      	bne.n	8002898 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002968:	2300      	movs	r3, #0
}
 800296a:	0018      	movs	r0, r3
 800296c:	46bd      	mov	sp, r7
 800296e:	b008      	add	sp, #32
 8002970:	bd80      	pop	{r7, pc}
 8002972:	46c0      	nop			; (mov r8, r8)
 8002974:	20000000 	.word	0x20000000
 8002978:	ffffdfff 	.word	0xffffdfff

0800297c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b088      	sub	sp, #32
 8002980:	af02      	add	r7, sp, #8
 8002982:	60f8      	str	r0, [r7, #12]
 8002984:	60b9      	str	r1, [r7, #8]
 8002986:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002988:	4b1d      	ldr	r3, [pc, #116]	; (8002a00 <SPI_EndRxTxTransaction+0x84>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	491d      	ldr	r1, [pc, #116]	; (8002a04 <SPI_EndRxTxTransaction+0x88>)
 800298e:	0018      	movs	r0, r3
 8002990:	f7fd fbc4 	bl	800011c <__udivsi3>
 8002994:	0003      	movs	r3, r0
 8002996:	001a      	movs	r2, r3
 8002998:	0013      	movs	r3, r2
 800299a:	015b      	lsls	r3, r3, #5
 800299c:	1a9b      	subs	r3, r3, r2
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	189b      	adds	r3, r3, r2
 80029a2:	00db      	lsls	r3, r3, #3
 80029a4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	685a      	ldr	r2, [r3, #4]
 80029aa:	2382      	movs	r3, #130	; 0x82
 80029ac:	005b      	lsls	r3, r3, #1
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d112      	bne.n	80029d8 <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80029b2:	68ba      	ldr	r2, [r7, #8]
 80029b4:	68f8      	ldr	r0, [r7, #12]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	9300      	str	r3, [sp, #0]
 80029ba:	0013      	movs	r3, r2
 80029bc:	2200      	movs	r2, #0
 80029be:	2180      	movs	r1, #128	; 0x80
 80029c0:	f7ff ff4e 	bl	8002860 <SPI_WaitFlagStateUntilTimeout>
 80029c4:	1e03      	subs	r3, r0, #0
 80029c6:	d016      	beq.n	80029f6 <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029cc:	2220      	movs	r2, #32
 80029ce:	431a      	orrs	r2, r3
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80029d4:	2303      	movs	r3, #3
 80029d6:	e00f      	b.n	80029f8 <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d00a      	beq.n	80029f4 <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	3b01      	subs	r3, #1
 80029e2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	2280      	movs	r2, #128	; 0x80
 80029ec:	4013      	ands	r3, r2
 80029ee:	2b80      	cmp	r3, #128	; 0x80
 80029f0:	d0f2      	beq.n	80029d8 <SPI_EndRxTxTransaction+0x5c>
 80029f2:	e000      	b.n	80029f6 <SPI_EndRxTxTransaction+0x7a>
        break;
 80029f4:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 80029f6:	2300      	movs	r3, #0
}
 80029f8:	0018      	movs	r0, r3
 80029fa:	46bd      	mov	sp, r7
 80029fc:	b006      	add	sp, #24
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	20000000 	.word	0x20000000
 8002a04:	016e3600 	.word	0x016e3600

08002a08 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d101      	bne.n	8002a1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e044      	b.n	8002aa4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d107      	bne.n	8002a32 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2274      	movs	r2, #116	; 0x74
 8002a26:	2100      	movs	r1, #0
 8002a28:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	0018      	movs	r0, r3
 8002a2e:	f7fe f883 	bl	8000b38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2224      	movs	r2, #36	; 0x24
 8002a36:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	2101      	movs	r1, #1
 8002a44:	438a      	bics	r2, r1
 8002a46:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	0018      	movs	r0, r3
 8002a4c:	f000 f8d8 	bl	8002c00 <UART_SetConfig>
 8002a50:	0003      	movs	r3, r0
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d101      	bne.n	8002a5a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e024      	b.n	8002aa4 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d003      	beq.n	8002a6a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	0018      	movs	r0, r3
 8002a66:	f000 fb6b 	bl	8003140 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	685a      	ldr	r2, [r3, #4]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	490d      	ldr	r1, [pc, #52]	; (8002aac <HAL_UART_Init+0xa4>)
 8002a76:	400a      	ands	r2, r1
 8002a78:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	689a      	ldr	r2, [r3, #8]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	212a      	movs	r1, #42	; 0x2a
 8002a86:	438a      	bics	r2, r1
 8002a88:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	2101      	movs	r1, #1
 8002a96:	430a      	orrs	r2, r1
 8002a98:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	0018      	movs	r0, r3
 8002a9e:	f000 fc03 	bl	80032a8 <UART_CheckIdleState>
 8002aa2:	0003      	movs	r3, r0
}
 8002aa4:	0018      	movs	r0, r3
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	b002      	add	sp, #8
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	ffffb7ff 	.word	0xffffb7ff

08002ab0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b08a      	sub	sp, #40	; 0x28
 8002ab4:	af02      	add	r7, sp, #8
 8002ab6:	60f8      	str	r0, [r7, #12]
 8002ab8:	60b9      	str	r1, [r7, #8]
 8002aba:	603b      	str	r3, [r7, #0]
 8002abc:	1dbb      	adds	r3, r7, #6
 8002abe:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ac4:	2b20      	cmp	r3, #32
 8002ac6:	d000      	beq.n	8002aca <HAL_UART_Transmit+0x1a>
 8002ac8:	e095      	b.n	8002bf6 <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d003      	beq.n	8002ad8 <HAL_UART_Transmit+0x28>
 8002ad0:	1dbb      	adds	r3, r7, #6
 8002ad2:	881b      	ldrh	r3, [r3, #0]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d101      	bne.n	8002adc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e08d      	b.n	8002bf8 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	689a      	ldr	r2, [r3, #8]
 8002ae0:	2380      	movs	r3, #128	; 0x80
 8002ae2:	015b      	lsls	r3, r3, #5
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d109      	bne.n	8002afc <HAL_UART_Transmit+0x4c>
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	691b      	ldr	r3, [r3, #16]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d105      	bne.n	8002afc <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	2201      	movs	r2, #1
 8002af4:	4013      	ands	r3, r2
 8002af6:	d001      	beq.n	8002afc <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e07d      	b.n	8002bf8 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2274      	movs	r2, #116	; 0x74
 8002b00:	5c9b      	ldrb	r3, [r3, r2]
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d101      	bne.n	8002b0a <HAL_UART_Transmit+0x5a>
 8002b06:	2302      	movs	r3, #2
 8002b08:	e076      	b.n	8002bf8 <HAL_UART_Transmit+0x148>
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2274      	movs	r2, #116	; 0x74
 8002b0e:	2101      	movs	r1, #1
 8002b10:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2280      	movs	r2, #128	; 0x80
 8002b16:	2100      	movs	r1, #0
 8002b18:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2221      	movs	r2, #33	; 0x21
 8002b1e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b20:	f7fe f932 	bl	8000d88 <HAL_GetTick>
 8002b24:	0003      	movs	r3, r0
 8002b26:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	1dba      	adds	r2, r7, #6
 8002b2c:	2150      	movs	r1, #80	; 0x50
 8002b2e:	8812      	ldrh	r2, [r2, #0]
 8002b30:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	1dba      	adds	r2, r7, #6
 8002b36:	2152      	movs	r1, #82	; 0x52
 8002b38:	8812      	ldrh	r2, [r2, #0]
 8002b3a:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	689a      	ldr	r2, [r3, #8]
 8002b40:	2380      	movs	r3, #128	; 0x80
 8002b42:	015b      	lsls	r3, r3, #5
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d108      	bne.n	8002b5a <HAL_UART_Transmit+0xaa>
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	691b      	ldr	r3, [r3, #16]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d104      	bne.n	8002b5a <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8002b50:	2300      	movs	r3, #0
 8002b52:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	61bb      	str	r3, [r7, #24]
 8002b58:	e003      	b.n	8002b62 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2274      	movs	r2, #116	; 0x74
 8002b66:	2100      	movs	r1, #0
 8002b68:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8002b6a:	e02c      	b.n	8002bc6 <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b6c:	697a      	ldr	r2, [r7, #20]
 8002b6e:	68f8      	ldr	r0, [r7, #12]
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	9300      	str	r3, [sp, #0]
 8002b74:	0013      	movs	r3, r2
 8002b76:	2200      	movs	r2, #0
 8002b78:	2180      	movs	r1, #128	; 0x80
 8002b7a:	f000 fbdd 	bl	8003338 <UART_WaitOnFlagUntilTimeout>
 8002b7e:	1e03      	subs	r3, r0, #0
 8002b80:	d001      	beq.n	8002b86 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e038      	b.n	8002bf8 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d10b      	bne.n	8002ba4 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b8c:	69bb      	ldr	r3, [r7, #24]
 8002b8e:	881b      	ldrh	r3, [r3, #0]
 8002b90:	001a      	movs	r2, r3
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	05d2      	lsls	r2, r2, #23
 8002b98:	0dd2      	lsrs	r2, r2, #23
 8002b9a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002b9c:	69bb      	ldr	r3, [r7, #24]
 8002b9e:	3302      	adds	r3, #2
 8002ba0:	61bb      	str	r3, [r7, #24]
 8002ba2:	e007      	b.n	8002bb4 <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	781a      	ldrb	r2, [r3, #0]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	3301      	adds	r3, #1
 8002bb2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2252      	movs	r2, #82	; 0x52
 8002bb8:	5a9b      	ldrh	r3, [r3, r2]
 8002bba:	b29b      	uxth	r3, r3
 8002bbc:	3b01      	subs	r3, #1
 8002bbe:	b299      	uxth	r1, r3
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2252      	movs	r2, #82	; 0x52
 8002bc4:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2252      	movs	r2, #82	; 0x52
 8002bca:	5a9b      	ldrh	r3, [r3, r2]
 8002bcc:	b29b      	uxth	r3, r3
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d1cc      	bne.n	8002b6c <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002bd2:	697a      	ldr	r2, [r7, #20]
 8002bd4:	68f8      	ldr	r0, [r7, #12]
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	9300      	str	r3, [sp, #0]
 8002bda:	0013      	movs	r3, r2
 8002bdc:	2200      	movs	r2, #0
 8002bde:	2140      	movs	r1, #64	; 0x40
 8002be0:	f000 fbaa 	bl	8003338 <UART_WaitOnFlagUntilTimeout>
 8002be4:	1e03      	subs	r3, r0, #0
 8002be6:	d001      	beq.n	8002bec <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 8002be8:	2303      	movs	r3, #3
 8002bea:	e005      	b.n	8002bf8 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2220      	movs	r2, #32
 8002bf0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	e000      	b.n	8002bf8 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8002bf6:	2302      	movs	r3, #2
  }
}
 8002bf8:	0018      	movs	r0, r3
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	b008      	add	sp, #32
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c00:	b5b0      	push	{r4, r5, r7, lr}
 8002c02:	b08e      	sub	sp, #56	; 0x38
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002c08:	231a      	movs	r3, #26
 8002c0a:	2218      	movs	r2, #24
 8002c0c:	189b      	adds	r3, r3, r2
 8002c0e:	19db      	adds	r3, r3, r7
 8002c10:	2200      	movs	r2, #0
 8002c12:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	689a      	ldr	r2, [r3, #8]
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	691b      	ldr	r3, [r3, #16]
 8002c1c:	431a      	orrs	r2, r3
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	695b      	ldr	r3, [r3, #20]
 8002c22:	431a      	orrs	r2, r3
 8002c24:	69fb      	ldr	r3, [r7, #28]
 8002c26:	69db      	ldr	r3, [r3, #28]
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4ac3      	ldr	r2, [pc, #780]	; (8002f40 <UART_SetConfig+0x340>)
 8002c34:	4013      	ands	r3, r2
 8002c36:	0019      	movs	r1, r3
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c3e:	430a      	orrs	r2, r1
 8002c40:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	4abe      	ldr	r2, [pc, #760]	; (8002f44 <UART_SetConfig+0x344>)
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	0019      	movs	r1, r3
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	68da      	ldr	r2, [r3, #12]
 8002c52:	69fb      	ldr	r3, [r7, #28]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	430a      	orrs	r2, r1
 8002c58:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	699b      	ldr	r3, [r3, #24]
 8002c5e:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4ab8      	ldr	r2, [pc, #736]	; (8002f48 <UART_SetConfig+0x348>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d004      	beq.n	8002c74 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	6a1b      	ldr	r3, [r3, #32]
 8002c6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c70:	4313      	orrs	r3, r2
 8002c72:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	4ab4      	ldr	r2, [pc, #720]	; (8002f4c <UART_SetConfig+0x34c>)
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	0019      	movs	r1, r3
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c86:	430a      	orrs	r2, r1
 8002c88:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4ab0      	ldr	r2, [pc, #704]	; (8002f50 <UART_SetConfig+0x350>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d131      	bne.n	8002cf8 <UART_SetConfig+0xf8>
 8002c94:	4baf      	ldr	r3, [pc, #700]	; (8002f54 <UART_SetConfig+0x354>)
 8002c96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c98:	2203      	movs	r2, #3
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	2b03      	cmp	r3, #3
 8002c9e:	d01d      	beq.n	8002cdc <UART_SetConfig+0xdc>
 8002ca0:	d823      	bhi.n	8002cea <UART_SetConfig+0xea>
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d00c      	beq.n	8002cc0 <UART_SetConfig+0xc0>
 8002ca6:	d820      	bhi.n	8002cea <UART_SetConfig+0xea>
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d002      	beq.n	8002cb2 <UART_SetConfig+0xb2>
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d00e      	beq.n	8002cce <UART_SetConfig+0xce>
 8002cb0:	e01b      	b.n	8002cea <UART_SetConfig+0xea>
 8002cb2:	231b      	movs	r3, #27
 8002cb4:	2218      	movs	r2, #24
 8002cb6:	189b      	adds	r3, r3, r2
 8002cb8:	19db      	adds	r3, r3, r7
 8002cba:	2201      	movs	r2, #1
 8002cbc:	701a      	strb	r2, [r3, #0]
 8002cbe:	e0b4      	b.n	8002e2a <UART_SetConfig+0x22a>
 8002cc0:	231b      	movs	r3, #27
 8002cc2:	2218      	movs	r2, #24
 8002cc4:	189b      	adds	r3, r3, r2
 8002cc6:	19db      	adds	r3, r3, r7
 8002cc8:	2202      	movs	r2, #2
 8002cca:	701a      	strb	r2, [r3, #0]
 8002ccc:	e0ad      	b.n	8002e2a <UART_SetConfig+0x22a>
 8002cce:	231b      	movs	r3, #27
 8002cd0:	2218      	movs	r2, #24
 8002cd2:	189b      	adds	r3, r3, r2
 8002cd4:	19db      	adds	r3, r3, r7
 8002cd6:	2204      	movs	r2, #4
 8002cd8:	701a      	strb	r2, [r3, #0]
 8002cda:	e0a6      	b.n	8002e2a <UART_SetConfig+0x22a>
 8002cdc:	231b      	movs	r3, #27
 8002cde:	2218      	movs	r2, #24
 8002ce0:	189b      	adds	r3, r3, r2
 8002ce2:	19db      	adds	r3, r3, r7
 8002ce4:	2208      	movs	r2, #8
 8002ce6:	701a      	strb	r2, [r3, #0]
 8002ce8:	e09f      	b.n	8002e2a <UART_SetConfig+0x22a>
 8002cea:	231b      	movs	r3, #27
 8002cec:	2218      	movs	r2, #24
 8002cee:	189b      	adds	r3, r3, r2
 8002cf0:	19db      	adds	r3, r3, r7
 8002cf2:	2210      	movs	r2, #16
 8002cf4:	701a      	strb	r2, [r3, #0]
 8002cf6:	e098      	b.n	8002e2a <UART_SetConfig+0x22a>
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a96      	ldr	r2, [pc, #600]	; (8002f58 <UART_SetConfig+0x358>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d131      	bne.n	8002d66 <UART_SetConfig+0x166>
 8002d02:	4b94      	ldr	r3, [pc, #592]	; (8002f54 <UART_SetConfig+0x354>)
 8002d04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d06:	220c      	movs	r2, #12
 8002d08:	4013      	ands	r3, r2
 8002d0a:	2b0c      	cmp	r3, #12
 8002d0c:	d01d      	beq.n	8002d4a <UART_SetConfig+0x14a>
 8002d0e:	d823      	bhi.n	8002d58 <UART_SetConfig+0x158>
 8002d10:	2b08      	cmp	r3, #8
 8002d12:	d00c      	beq.n	8002d2e <UART_SetConfig+0x12e>
 8002d14:	d820      	bhi.n	8002d58 <UART_SetConfig+0x158>
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d002      	beq.n	8002d20 <UART_SetConfig+0x120>
 8002d1a:	2b04      	cmp	r3, #4
 8002d1c:	d00e      	beq.n	8002d3c <UART_SetConfig+0x13c>
 8002d1e:	e01b      	b.n	8002d58 <UART_SetConfig+0x158>
 8002d20:	231b      	movs	r3, #27
 8002d22:	2218      	movs	r2, #24
 8002d24:	189b      	adds	r3, r3, r2
 8002d26:	19db      	adds	r3, r3, r7
 8002d28:	2200      	movs	r2, #0
 8002d2a:	701a      	strb	r2, [r3, #0]
 8002d2c:	e07d      	b.n	8002e2a <UART_SetConfig+0x22a>
 8002d2e:	231b      	movs	r3, #27
 8002d30:	2218      	movs	r2, #24
 8002d32:	189b      	adds	r3, r3, r2
 8002d34:	19db      	adds	r3, r3, r7
 8002d36:	2202      	movs	r2, #2
 8002d38:	701a      	strb	r2, [r3, #0]
 8002d3a:	e076      	b.n	8002e2a <UART_SetConfig+0x22a>
 8002d3c:	231b      	movs	r3, #27
 8002d3e:	2218      	movs	r2, #24
 8002d40:	189b      	adds	r3, r3, r2
 8002d42:	19db      	adds	r3, r3, r7
 8002d44:	2204      	movs	r2, #4
 8002d46:	701a      	strb	r2, [r3, #0]
 8002d48:	e06f      	b.n	8002e2a <UART_SetConfig+0x22a>
 8002d4a:	231b      	movs	r3, #27
 8002d4c:	2218      	movs	r2, #24
 8002d4e:	189b      	adds	r3, r3, r2
 8002d50:	19db      	adds	r3, r3, r7
 8002d52:	2208      	movs	r2, #8
 8002d54:	701a      	strb	r2, [r3, #0]
 8002d56:	e068      	b.n	8002e2a <UART_SetConfig+0x22a>
 8002d58:	231b      	movs	r3, #27
 8002d5a:	2218      	movs	r2, #24
 8002d5c:	189b      	adds	r3, r3, r2
 8002d5e:	19db      	adds	r3, r3, r7
 8002d60:	2210      	movs	r2, #16
 8002d62:	701a      	strb	r2, [r3, #0]
 8002d64:	e061      	b.n	8002e2a <UART_SetConfig+0x22a>
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a7c      	ldr	r2, [pc, #496]	; (8002f5c <UART_SetConfig+0x35c>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d106      	bne.n	8002d7e <UART_SetConfig+0x17e>
 8002d70:	231b      	movs	r3, #27
 8002d72:	2218      	movs	r2, #24
 8002d74:	189b      	adds	r3, r3, r2
 8002d76:	19db      	adds	r3, r3, r7
 8002d78:	2200      	movs	r2, #0
 8002d7a:	701a      	strb	r2, [r3, #0]
 8002d7c:	e055      	b.n	8002e2a <UART_SetConfig+0x22a>
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a77      	ldr	r2, [pc, #476]	; (8002f60 <UART_SetConfig+0x360>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d106      	bne.n	8002d96 <UART_SetConfig+0x196>
 8002d88:	231b      	movs	r3, #27
 8002d8a:	2218      	movs	r2, #24
 8002d8c:	189b      	adds	r3, r3, r2
 8002d8e:	19db      	adds	r3, r3, r7
 8002d90:	2200      	movs	r2, #0
 8002d92:	701a      	strb	r2, [r3, #0]
 8002d94:	e049      	b.n	8002e2a <UART_SetConfig+0x22a>
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a6b      	ldr	r2, [pc, #428]	; (8002f48 <UART_SetConfig+0x348>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d13e      	bne.n	8002e1e <UART_SetConfig+0x21e>
 8002da0:	4b6c      	ldr	r3, [pc, #432]	; (8002f54 <UART_SetConfig+0x354>)
 8002da2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002da4:	23c0      	movs	r3, #192	; 0xc0
 8002da6:	011b      	lsls	r3, r3, #4
 8002da8:	4013      	ands	r3, r2
 8002daa:	22c0      	movs	r2, #192	; 0xc0
 8002dac:	0112      	lsls	r2, r2, #4
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d027      	beq.n	8002e02 <UART_SetConfig+0x202>
 8002db2:	22c0      	movs	r2, #192	; 0xc0
 8002db4:	0112      	lsls	r2, r2, #4
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d82a      	bhi.n	8002e10 <UART_SetConfig+0x210>
 8002dba:	2280      	movs	r2, #128	; 0x80
 8002dbc:	0112      	lsls	r2, r2, #4
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d011      	beq.n	8002de6 <UART_SetConfig+0x1e6>
 8002dc2:	2280      	movs	r2, #128	; 0x80
 8002dc4:	0112      	lsls	r2, r2, #4
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d822      	bhi.n	8002e10 <UART_SetConfig+0x210>
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d004      	beq.n	8002dd8 <UART_SetConfig+0x1d8>
 8002dce:	2280      	movs	r2, #128	; 0x80
 8002dd0:	00d2      	lsls	r2, r2, #3
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d00e      	beq.n	8002df4 <UART_SetConfig+0x1f4>
 8002dd6:	e01b      	b.n	8002e10 <UART_SetConfig+0x210>
 8002dd8:	231b      	movs	r3, #27
 8002dda:	2218      	movs	r2, #24
 8002ddc:	189b      	adds	r3, r3, r2
 8002dde:	19db      	adds	r3, r3, r7
 8002de0:	2200      	movs	r2, #0
 8002de2:	701a      	strb	r2, [r3, #0]
 8002de4:	e021      	b.n	8002e2a <UART_SetConfig+0x22a>
 8002de6:	231b      	movs	r3, #27
 8002de8:	2218      	movs	r2, #24
 8002dea:	189b      	adds	r3, r3, r2
 8002dec:	19db      	adds	r3, r3, r7
 8002dee:	2202      	movs	r2, #2
 8002df0:	701a      	strb	r2, [r3, #0]
 8002df2:	e01a      	b.n	8002e2a <UART_SetConfig+0x22a>
 8002df4:	231b      	movs	r3, #27
 8002df6:	2218      	movs	r2, #24
 8002df8:	189b      	adds	r3, r3, r2
 8002dfa:	19db      	adds	r3, r3, r7
 8002dfc:	2204      	movs	r2, #4
 8002dfe:	701a      	strb	r2, [r3, #0]
 8002e00:	e013      	b.n	8002e2a <UART_SetConfig+0x22a>
 8002e02:	231b      	movs	r3, #27
 8002e04:	2218      	movs	r2, #24
 8002e06:	189b      	adds	r3, r3, r2
 8002e08:	19db      	adds	r3, r3, r7
 8002e0a:	2208      	movs	r2, #8
 8002e0c:	701a      	strb	r2, [r3, #0]
 8002e0e:	e00c      	b.n	8002e2a <UART_SetConfig+0x22a>
 8002e10:	231b      	movs	r3, #27
 8002e12:	2218      	movs	r2, #24
 8002e14:	189b      	adds	r3, r3, r2
 8002e16:	19db      	adds	r3, r3, r7
 8002e18:	2210      	movs	r2, #16
 8002e1a:	701a      	strb	r2, [r3, #0]
 8002e1c:	e005      	b.n	8002e2a <UART_SetConfig+0x22a>
 8002e1e:	231b      	movs	r3, #27
 8002e20:	2218      	movs	r2, #24
 8002e22:	189b      	adds	r3, r3, r2
 8002e24:	19db      	adds	r3, r3, r7
 8002e26:	2210      	movs	r2, #16
 8002e28:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a46      	ldr	r2, [pc, #280]	; (8002f48 <UART_SetConfig+0x348>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d000      	beq.n	8002e36 <UART_SetConfig+0x236>
 8002e34:	e09a      	b.n	8002f6c <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002e36:	231b      	movs	r3, #27
 8002e38:	2218      	movs	r2, #24
 8002e3a:	189b      	adds	r3, r3, r2
 8002e3c:	19db      	adds	r3, r3, r7
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	2b08      	cmp	r3, #8
 8002e42:	d01d      	beq.n	8002e80 <UART_SetConfig+0x280>
 8002e44:	dc20      	bgt.n	8002e88 <UART_SetConfig+0x288>
 8002e46:	2b04      	cmp	r3, #4
 8002e48:	d015      	beq.n	8002e76 <UART_SetConfig+0x276>
 8002e4a:	dc1d      	bgt.n	8002e88 <UART_SetConfig+0x288>
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d002      	beq.n	8002e56 <UART_SetConfig+0x256>
 8002e50:	2b02      	cmp	r3, #2
 8002e52:	d005      	beq.n	8002e60 <UART_SetConfig+0x260>
 8002e54:	e018      	b.n	8002e88 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e56:	f7fe ffbd 	bl	8001dd4 <HAL_RCC_GetPCLK1Freq>
 8002e5a:	0003      	movs	r3, r0
 8002e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002e5e:	e01c      	b.n	8002e9a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002e60:	4b3c      	ldr	r3, [pc, #240]	; (8002f54 <UART_SetConfig+0x354>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	2210      	movs	r2, #16
 8002e66:	4013      	ands	r3, r2
 8002e68:	d002      	beq.n	8002e70 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002e6a:	4b3e      	ldr	r3, [pc, #248]	; (8002f64 <UART_SetConfig+0x364>)
 8002e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002e6e:	e014      	b.n	8002e9a <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8002e70:	4b3d      	ldr	r3, [pc, #244]	; (8002f68 <UART_SetConfig+0x368>)
 8002e72:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002e74:	e011      	b.n	8002e9a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e76:	f7fe fefd 	bl	8001c74 <HAL_RCC_GetSysClockFreq>
 8002e7a:	0003      	movs	r3, r0
 8002e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002e7e:	e00c      	b.n	8002e9a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e80:	2380      	movs	r3, #128	; 0x80
 8002e82:	021b      	lsls	r3, r3, #8
 8002e84:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002e86:	e008      	b.n	8002e9a <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002e8c:	231a      	movs	r3, #26
 8002e8e:	2218      	movs	r2, #24
 8002e90:	189b      	adds	r3, r3, r2
 8002e92:	19db      	adds	r3, r3, r7
 8002e94:	2201      	movs	r2, #1
 8002e96:	701a      	strb	r2, [r3, #0]
        break;
 8002e98:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d100      	bne.n	8002ea2 <UART_SetConfig+0x2a2>
 8002ea0:	e134      	b.n	800310c <UART_SetConfig+0x50c>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	685a      	ldr	r2, [r3, #4]
 8002ea6:	0013      	movs	r3, r2
 8002ea8:	005b      	lsls	r3, r3, #1
 8002eaa:	189b      	adds	r3, r3, r2
 8002eac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d305      	bcc.n	8002ebe <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002eb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d906      	bls.n	8002ecc <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 8002ebe:	231a      	movs	r3, #26
 8002ec0:	2218      	movs	r2, #24
 8002ec2:	189b      	adds	r3, r3, r2
 8002ec4:	19db      	adds	r3, r3, r7
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	701a      	strb	r2, [r3, #0]
 8002eca:	e11f      	b.n	800310c <UART_SetConfig+0x50c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ece:	613b      	str	r3, [r7, #16]
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	617b      	str	r3, [r7, #20]
 8002ed4:	6939      	ldr	r1, [r7, #16]
 8002ed6:	697a      	ldr	r2, [r7, #20]
 8002ed8:	000b      	movs	r3, r1
 8002eda:	0e1b      	lsrs	r3, r3, #24
 8002edc:	0010      	movs	r0, r2
 8002ede:	0205      	lsls	r5, r0, #8
 8002ee0:	431d      	orrs	r5, r3
 8002ee2:	000b      	movs	r3, r1
 8002ee4:	021c      	lsls	r4, r3, #8
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	085b      	lsrs	r3, r3, #1
 8002eec:	60bb      	str	r3, [r7, #8]
 8002eee:	2300      	movs	r3, #0
 8002ef0:	60fb      	str	r3, [r7, #12]
 8002ef2:	68b8      	ldr	r0, [r7, #8]
 8002ef4:	68f9      	ldr	r1, [r7, #12]
 8002ef6:	1900      	adds	r0, r0, r4
 8002ef8:	4169      	adcs	r1, r5
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	603b      	str	r3, [r7, #0]
 8002f00:	2300      	movs	r3, #0
 8002f02:	607b      	str	r3, [r7, #4]
 8002f04:	683a      	ldr	r2, [r7, #0]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	f7fd f994 	bl	8000234 <__aeabi_uldivmod>
 8002f0c:	0002      	movs	r2, r0
 8002f0e:	000b      	movs	r3, r1
 8002f10:	0013      	movs	r3, r2
 8002f12:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002f14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f16:	23c0      	movs	r3, #192	; 0xc0
 8002f18:	009b      	lsls	r3, r3, #2
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	d309      	bcc.n	8002f32 <UART_SetConfig+0x332>
 8002f1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f20:	2380      	movs	r3, #128	; 0x80
 8002f22:	035b      	lsls	r3, r3, #13
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d204      	bcs.n	8002f32 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f2e:	60da      	str	r2, [r3, #12]
 8002f30:	e0ec      	b.n	800310c <UART_SetConfig+0x50c>
        }
        else
        {
          ret = HAL_ERROR;
 8002f32:	231a      	movs	r3, #26
 8002f34:	2218      	movs	r2, #24
 8002f36:	189b      	adds	r3, r3, r2
 8002f38:	19db      	adds	r3, r3, r7
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	701a      	strb	r2, [r3, #0]
 8002f3e:	e0e5      	b.n	800310c <UART_SetConfig+0x50c>
 8002f40:	efff69f3 	.word	0xefff69f3
 8002f44:	ffffcfff 	.word	0xffffcfff
 8002f48:	40004800 	.word	0x40004800
 8002f4c:	fffff4ff 	.word	0xfffff4ff
 8002f50:	40013800 	.word	0x40013800
 8002f54:	40021000 	.word	0x40021000
 8002f58:	40004400 	.word	0x40004400
 8002f5c:	40004c00 	.word	0x40004c00
 8002f60:	40005000 	.word	0x40005000
 8002f64:	003d0900 	.word	0x003d0900
 8002f68:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	69da      	ldr	r2, [r3, #28]
 8002f70:	2380      	movs	r3, #128	; 0x80
 8002f72:	021b      	lsls	r3, r3, #8
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d000      	beq.n	8002f7a <UART_SetConfig+0x37a>
 8002f78:	e071      	b.n	800305e <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 8002f7a:	231b      	movs	r3, #27
 8002f7c:	2218      	movs	r2, #24
 8002f7e:	189b      	adds	r3, r3, r2
 8002f80:	19db      	adds	r3, r3, r7
 8002f82:	781b      	ldrb	r3, [r3, #0]
 8002f84:	2b08      	cmp	r3, #8
 8002f86:	d822      	bhi.n	8002fce <UART_SetConfig+0x3ce>
 8002f88:	009a      	lsls	r2, r3, #2
 8002f8a:	4b68      	ldr	r3, [pc, #416]	; (800312c <UART_SetConfig+0x52c>)
 8002f8c:	18d3      	adds	r3, r2, r3
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f92:	f7fe ff1f 	bl	8001dd4 <HAL_RCC_GetPCLK1Freq>
 8002f96:	0003      	movs	r3, r0
 8002f98:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002f9a:	e021      	b.n	8002fe0 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002f9c:	f7fe ff30 	bl	8001e00 <HAL_RCC_GetPCLK2Freq>
 8002fa0:	0003      	movs	r3, r0
 8002fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002fa4:	e01c      	b.n	8002fe0 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002fa6:	4b62      	ldr	r3, [pc, #392]	; (8003130 <UART_SetConfig+0x530>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	2210      	movs	r2, #16
 8002fac:	4013      	ands	r3, r2
 8002fae:	d002      	beq.n	8002fb6 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002fb0:	4b60      	ldr	r3, [pc, #384]	; (8003134 <UART_SetConfig+0x534>)
 8002fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002fb4:	e014      	b.n	8002fe0 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 8002fb6:	4b60      	ldr	r3, [pc, #384]	; (8003138 <UART_SetConfig+0x538>)
 8002fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002fba:	e011      	b.n	8002fe0 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002fbc:	f7fe fe5a 	bl	8001c74 <HAL_RCC_GetSysClockFreq>
 8002fc0:	0003      	movs	r3, r0
 8002fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002fc4:	e00c      	b.n	8002fe0 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002fc6:	2380      	movs	r3, #128	; 0x80
 8002fc8:	021b      	lsls	r3, r3, #8
 8002fca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002fcc:	e008      	b.n	8002fe0 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002fd2:	231a      	movs	r3, #26
 8002fd4:	2218      	movs	r2, #24
 8002fd6:	189b      	adds	r3, r3, r2
 8002fd8:	19db      	adds	r3, r3, r7
 8002fda:	2201      	movs	r2, #1
 8002fdc:	701a      	strb	r2, [r3, #0]
        break;
 8002fde:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d100      	bne.n	8002fe8 <UART_SetConfig+0x3e8>
 8002fe6:	e091      	b.n	800310c <UART_SetConfig+0x50c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fea:	005a      	lsls	r2, r3, #1
 8002fec:	69fb      	ldr	r3, [r7, #28]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	085b      	lsrs	r3, r3, #1
 8002ff2:	18d2      	adds	r2, r2, r3
 8002ff4:	69fb      	ldr	r3, [r7, #28]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	0019      	movs	r1, r3
 8002ffa:	0010      	movs	r0, r2
 8002ffc:	f7fd f88e 	bl	800011c <__udivsi3>
 8003000:	0003      	movs	r3, r0
 8003002:	b29b      	uxth	r3, r3
 8003004:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003008:	2b0f      	cmp	r3, #15
 800300a:	d921      	bls.n	8003050 <UART_SetConfig+0x450>
 800300c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800300e:	2380      	movs	r3, #128	; 0x80
 8003010:	025b      	lsls	r3, r3, #9
 8003012:	429a      	cmp	r2, r3
 8003014:	d21c      	bcs.n	8003050 <UART_SetConfig+0x450>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003018:	b29a      	uxth	r2, r3
 800301a:	200e      	movs	r0, #14
 800301c:	2418      	movs	r4, #24
 800301e:	1903      	adds	r3, r0, r4
 8003020:	19db      	adds	r3, r3, r7
 8003022:	210f      	movs	r1, #15
 8003024:	438a      	bics	r2, r1
 8003026:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800302a:	085b      	lsrs	r3, r3, #1
 800302c:	b29b      	uxth	r3, r3
 800302e:	2207      	movs	r2, #7
 8003030:	4013      	ands	r3, r2
 8003032:	b299      	uxth	r1, r3
 8003034:	1903      	adds	r3, r0, r4
 8003036:	19db      	adds	r3, r3, r7
 8003038:	1902      	adds	r2, r0, r4
 800303a:	19d2      	adds	r2, r2, r7
 800303c:	8812      	ldrh	r2, [r2, #0]
 800303e:	430a      	orrs	r2, r1
 8003040:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	1902      	adds	r2, r0, r4
 8003048:	19d2      	adds	r2, r2, r7
 800304a:	8812      	ldrh	r2, [r2, #0]
 800304c:	60da      	str	r2, [r3, #12]
 800304e:	e05d      	b.n	800310c <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8003050:	231a      	movs	r3, #26
 8003052:	2218      	movs	r2, #24
 8003054:	189b      	adds	r3, r3, r2
 8003056:	19db      	adds	r3, r3, r7
 8003058:	2201      	movs	r2, #1
 800305a:	701a      	strb	r2, [r3, #0]
 800305c:	e056      	b.n	800310c <UART_SetConfig+0x50c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800305e:	231b      	movs	r3, #27
 8003060:	2218      	movs	r2, #24
 8003062:	189b      	adds	r3, r3, r2
 8003064:	19db      	adds	r3, r3, r7
 8003066:	781b      	ldrb	r3, [r3, #0]
 8003068:	2b08      	cmp	r3, #8
 800306a:	d822      	bhi.n	80030b2 <UART_SetConfig+0x4b2>
 800306c:	009a      	lsls	r2, r3, #2
 800306e:	4b33      	ldr	r3, [pc, #204]	; (800313c <UART_SetConfig+0x53c>)
 8003070:	18d3      	adds	r3, r2, r3
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003076:	f7fe fead 	bl	8001dd4 <HAL_RCC_GetPCLK1Freq>
 800307a:	0003      	movs	r3, r0
 800307c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800307e:	e021      	b.n	80030c4 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003080:	f7fe febe 	bl	8001e00 <HAL_RCC_GetPCLK2Freq>
 8003084:	0003      	movs	r3, r0
 8003086:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003088:	e01c      	b.n	80030c4 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800308a:	4b29      	ldr	r3, [pc, #164]	; (8003130 <UART_SetConfig+0x530>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	2210      	movs	r2, #16
 8003090:	4013      	ands	r3, r2
 8003092:	d002      	beq.n	800309a <UART_SetConfig+0x49a>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003094:	4b27      	ldr	r3, [pc, #156]	; (8003134 <UART_SetConfig+0x534>)
 8003096:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003098:	e014      	b.n	80030c4 <UART_SetConfig+0x4c4>
          pclk = (uint32_t) HSI_VALUE;
 800309a:	4b27      	ldr	r3, [pc, #156]	; (8003138 <UART_SetConfig+0x538>)
 800309c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800309e:	e011      	b.n	80030c4 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80030a0:	f7fe fde8 	bl	8001c74 <HAL_RCC_GetSysClockFreq>
 80030a4:	0003      	movs	r3, r0
 80030a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80030a8:	e00c      	b.n	80030c4 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030aa:	2380      	movs	r3, #128	; 0x80
 80030ac:	021b      	lsls	r3, r3, #8
 80030ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80030b0:	e008      	b.n	80030c4 <UART_SetConfig+0x4c4>
      default:
        pclk = 0U;
 80030b2:	2300      	movs	r3, #0
 80030b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80030b6:	231a      	movs	r3, #26
 80030b8:	2218      	movs	r2, #24
 80030ba:	189b      	adds	r3, r3, r2
 80030bc:	19db      	adds	r3, r3, r7
 80030be:	2201      	movs	r2, #1
 80030c0:	701a      	strb	r2, [r3, #0]
        break;
 80030c2:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80030c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d020      	beq.n	800310c <UART_SetConfig+0x50c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	085a      	lsrs	r2, r3, #1
 80030d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030d2:	18d2      	adds	r2, r2, r3
 80030d4:	69fb      	ldr	r3, [r7, #28]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	0019      	movs	r1, r3
 80030da:	0010      	movs	r0, r2
 80030dc:	f7fd f81e 	bl	800011c <__udivsi3>
 80030e0:	0003      	movs	r3, r0
 80030e2:	b29b      	uxth	r3, r3
 80030e4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80030e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030e8:	2b0f      	cmp	r3, #15
 80030ea:	d909      	bls.n	8003100 <UART_SetConfig+0x500>
 80030ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030ee:	2380      	movs	r3, #128	; 0x80
 80030f0:	025b      	lsls	r3, r3, #9
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d204      	bcs.n	8003100 <UART_SetConfig+0x500>
      {
        huart->Instance->BRR = usartdiv;
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030fc:	60da      	str	r2, [r3, #12]
 80030fe:	e005      	b.n	800310c <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8003100:	231a      	movs	r3, #26
 8003102:	2218      	movs	r2, #24
 8003104:	189b      	adds	r3, r3, r2
 8003106:	19db      	adds	r3, r3, r7
 8003108:	2201      	movs	r2, #1
 800310a:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	2200      	movs	r2, #0
 8003110:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	2200      	movs	r2, #0
 8003116:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003118:	231a      	movs	r3, #26
 800311a:	2218      	movs	r2, #24
 800311c:	189b      	adds	r3, r3, r2
 800311e:	19db      	adds	r3, r3, r7
 8003120:	781b      	ldrb	r3, [r3, #0]
}
 8003122:	0018      	movs	r0, r3
 8003124:	46bd      	mov	sp, r7
 8003126:	b00e      	add	sp, #56	; 0x38
 8003128:	bdb0      	pop	{r4, r5, r7, pc}
 800312a:	46c0      	nop			; (mov r8, r8)
 800312c:	08003f34 	.word	0x08003f34
 8003130:	40021000 	.word	0x40021000
 8003134:	003d0900 	.word	0x003d0900
 8003138:	00f42400 	.word	0x00f42400
 800313c:	08003f58 	.word	0x08003f58

08003140 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b082      	sub	sp, #8
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314c:	2201      	movs	r2, #1
 800314e:	4013      	ands	r3, r2
 8003150:	d00b      	beq.n	800316a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	4a4a      	ldr	r2, [pc, #296]	; (8003284 <UART_AdvFeatureConfig+0x144>)
 800315a:	4013      	ands	r3, r2
 800315c:	0019      	movs	r1, r3
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	430a      	orrs	r2, r1
 8003168:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316e:	2202      	movs	r2, #2
 8003170:	4013      	ands	r3, r2
 8003172:	d00b      	beq.n	800318c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	4a43      	ldr	r2, [pc, #268]	; (8003288 <UART_AdvFeatureConfig+0x148>)
 800317c:	4013      	ands	r3, r2
 800317e:	0019      	movs	r1, r3
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	430a      	orrs	r2, r1
 800318a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003190:	2204      	movs	r2, #4
 8003192:	4013      	ands	r3, r2
 8003194:	d00b      	beq.n	80031ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	4a3b      	ldr	r2, [pc, #236]	; (800328c <UART_AdvFeatureConfig+0x14c>)
 800319e:	4013      	ands	r3, r2
 80031a0:	0019      	movs	r1, r3
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	430a      	orrs	r2, r1
 80031ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b2:	2208      	movs	r2, #8
 80031b4:	4013      	ands	r3, r2
 80031b6:	d00b      	beq.n	80031d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	4a34      	ldr	r2, [pc, #208]	; (8003290 <UART_AdvFeatureConfig+0x150>)
 80031c0:	4013      	ands	r3, r2
 80031c2:	0019      	movs	r1, r3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	430a      	orrs	r2, r1
 80031ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d4:	2210      	movs	r2, #16
 80031d6:	4013      	ands	r3, r2
 80031d8:	d00b      	beq.n	80031f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	4a2c      	ldr	r2, [pc, #176]	; (8003294 <UART_AdvFeatureConfig+0x154>)
 80031e2:	4013      	ands	r3, r2
 80031e4:	0019      	movs	r1, r3
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	430a      	orrs	r2, r1
 80031f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f6:	2220      	movs	r2, #32
 80031f8:	4013      	ands	r3, r2
 80031fa:	d00b      	beq.n	8003214 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	4a25      	ldr	r2, [pc, #148]	; (8003298 <UART_AdvFeatureConfig+0x158>)
 8003204:	4013      	ands	r3, r2
 8003206:	0019      	movs	r1, r3
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	430a      	orrs	r2, r1
 8003212:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003218:	2240      	movs	r2, #64	; 0x40
 800321a:	4013      	ands	r3, r2
 800321c:	d01d      	beq.n	800325a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	4a1d      	ldr	r2, [pc, #116]	; (800329c <UART_AdvFeatureConfig+0x15c>)
 8003226:	4013      	ands	r3, r2
 8003228:	0019      	movs	r1, r3
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	430a      	orrs	r2, r1
 8003234:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800323a:	2380      	movs	r3, #128	; 0x80
 800323c:	035b      	lsls	r3, r3, #13
 800323e:	429a      	cmp	r2, r3
 8003240:	d10b      	bne.n	800325a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	4a15      	ldr	r2, [pc, #84]	; (80032a0 <UART_AdvFeatureConfig+0x160>)
 800324a:	4013      	ands	r3, r2
 800324c:	0019      	movs	r1, r3
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	430a      	orrs	r2, r1
 8003258:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325e:	2280      	movs	r2, #128	; 0x80
 8003260:	4013      	ands	r3, r2
 8003262:	d00b      	beq.n	800327c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	4a0e      	ldr	r2, [pc, #56]	; (80032a4 <UART_AdvFeatureConfig+0x164>)
 800326c:	4013      	ands	r3, r2
 800326e:	0019      	movs	r1, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	430a      	orrs	r2, r1
 800327a:	605a      	str	r2, [r3, #4]
  }
}
 800327c:	46c0      	nop			; (mov r8, r8)
 800327e:	46bd      	mov	sp, r7
 8003280:	b002      	add	sp, #8
 8003282:	bd80      	pop	{r7, pc}
 8003284:	fffdffff 	.word	0xfffdffff
 8003288:	fffeffff 	.word	0xfffeffff
 800328c:	fffbffff 	.word	0xfffbffff
 8003290:	ffff7fff 	.word	0xffff7fff
 8003294:	ffffefff 	.word	0xffffefff
 8003298:	ffffdfff 	.word	0xffffdfff
 800329c:	ffefffff 	.word	0xffefffff
 80032a0:	ff9fffff 	.word	0xff9fffff
 80032a4:	fff7ffff 	.word	0xfff7ffff

080032a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b086      	sub	sp, #24
 80032ac:	af02      	add	r7, sp, #8
 80032ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2280      	movs	r2, #128	; 0x80
 80032b4:	2100      	movs	r1, #0
 80032b6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80032b8:	f7fd fd66 	bl	8000d88 <HAL_GetTick>
 80032bc:	0003      	movs	r3, r0
 80032be:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	2208      	movs	r2, #8
 80032c8:	4013      	ands	r3, r2
 80032ca:	2b08      	cmp	r3, #8
 80032cc:	d10c      	bne.n	80032e8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2280      	movs	r2, #128	; 0x80
 80032d2:	0391      	lsls	r1, r2, #14
 80032d4:	6878      	ldr	r0, [r7, #4]
 80032d6:	4a17      	ldr	r2, [pc, #92]	; (8003334 <UART_CheckIdleState+0x8c>)
 80032d8:	9200      	str	r2, [sp, #0]
 80032da:	2200      	movs	r2, #0
 80032dc:	f000 f82c 	bl	8003338 <UART_WaitOnFlagUntilTimeout>
 80032e0:	1e03      	subs	r3, r0, #0
 80032e2:	d001      	beq.n	80032e8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80032e4:	2303      	movs	r3, #3
 80032e6:	e021      	b.n	800332c <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	2204      	movs	r2, #4
 80032f0:	4013      	ands	r3, r2
 80032f2:	2b04      	cmp	r3, #4
 80032f4:	d10c      	bne.n	8003310 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2280      	movs	r2, #128	; 0x80
 80032fa:	03d1      	lsls	r1, r2, #15
 80032fc:	6878      	ldr	r0, [r7, #4]
 80032fe:	4a0d      	ldr	r2, [pc, #52]	; (8003334 <UART_CheckIdleState+0x8c>)
 8003300:	9200      	str	r2, [sp, #0]
 8003302:	2200      	movs	r2, #0
 8003304:	f000 f818 	bl	8003338 <UART_WaitOnFlagUntilTimeout>
 8003308:	1e03      	subs	r3, r0, #0
 800330a:	d001      	beq.n	8003310 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800330c:	2303      	movs	r3, #3
 800330e:	e00d      	b.n	800332c <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2220      	movs	r2, #32
 8003314:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2220      	movs	r2, #32
 800331a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2200      	movs	r2, #0
 8003320:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2274      	movs	r2, #116	; 0x74
 8003326:	2100      	movs	r1, #0
 8003328:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800332a:	2300      	movs	r3, #0
}
 800332c:	0018      	movs	r0, r3
 800332e:	46bd      	mov	sp, r7
 8003330:	b004      	add	sp, #16
 8003332:	bd80      	pop	{r7, pc}
 8003334:	01ffffff 	.word	0x01ffffff

08003338 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b094      	sub	sp, #80	; 0x50
 800333c:	af00      	add	r7, sp, #0
 800333e:	60f8      	str	r0, [r7, #12]
 8003340:	60b9      	str	r1, [r7, #8]
 8003342:	603b      	str	r3, [r7, #0]
 8003344:	1dfb      	adds	r3, r7, #7
 8003346:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003348:	e0a3      	b.n	8003492 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800334a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800334c:	3301      	adds	r3, #1
 800334e:	d100      	bne.n	8003352 <UART_WaitOnFlagUntilTimeout+0x1a>
 8003350:	e09f      	b.n	8003492 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003352:	f7fd fd19 	bl	8000d88 <HAL_GetTick>
 8003356:	0002      	movs	r2, r0
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	1ad3      	subs	r3, r2, r3
 800335c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800335e:	429a      	cmp	r2, r3
 8003360:	d302      	bcc.n	8003368 <UART_WaitOnFlagUntilTimeout+0x30>
 8003362:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003364:	2b00      	cmp	r3, #0
 8003366:	d13d      	bne.n	80033e4 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003368:	f3ef 8310 	mrs	r3, PRIMASK
 800336c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800336e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003370:	647b      	str	r3, [r7, #68]	; 0x44
 8003372:	2301      	movs	r3, #1
 8003374:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003378:	f383 8810 	msr	PRIMASK, r3
}
 800337c:	46c0      	nop			; (mov r8, r8)
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	494c      	ldr	r1, [pc, #304]	; (80034bc <UART_WaitOnFlagUntilTimeout+0x184>)
 800338a:	400a      	ands	r2, r1
 800338c:	601a      	str	r2, [r3, #0]
 800338e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003390:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003394:	f383 8810 	msr	PRIMASK, r3
}
 8003398:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800339a:	f3ef 8310 	mrs	r3, PRIMASK
 800339e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80033a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033a2:	643b      	str	r3, [r7, #64]	; 0x40
 80033a4:	2301      	movs	r3, #1
 80033a6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033aa:	f383 8810 	msr	PRIMASK, r3
}
 80033ae:	46c0      	nop			; (mov r8, r8)
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	689a      	ldr	r2, [r3, #8]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	2101      	movs	r1, #1
 80033bc:	438a      	bics	r2, r1
 80033be:	609a      	str	r2, [r3, #8]
 80033c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033c6:	f383 8810 	msr	PRIMASK, r3
}
 80033ca:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2220      	movs	r2, #32
 80033d0:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2220      	movs	r2, #32
 80033d6:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2274      	movs	r2, #116	; 0x74
 80033dc:	2100      	movs	r1, #0
 80033de:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80033e0:	2303      	movs	r3, #3
 80033e2:	e067      	b.n	80034b4 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	2204      	movs	r2, #4
 80033ec:	4013      	ands	r3, r2
 80033ee:	d050      	beq.n	8003492 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	69da      	ldr	r2, [r3, #28]
 80033f6:	2380      	movs	r3, #128	; 0x80
 80033f8:	011b      	lsls	r3, r3, #4
 80033fa:	401a      	ands	r2, r3
 80033fc:	2380      	movs	r3, #128	; 0x80
 80033fe:	011b      	lsls	r3, r3, #4
 8003400:	429a      	cmp	r2, r3
 8003402:	d146      	bne.n	8003492 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	2280      	movs	r2, #128	; 0x80
 800340a:	0112      	lsls	r2, r2, #4
 800340c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800340e:	f3ef 8310 	mrs	r3, PRIMASK
 8003412:	613b      	str	r3, [r7, #16]
  return(result);
 8003414:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003416:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003418:	2301      	movs	r3, #1
 800341a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	f383 8810 	msr	PRIMASK, r3
}
 8003422:	46c0      	nop			; (mov r8, r8)
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4923      	ldr	r1, [pc, #140]	; (80034bc <UART_WaitOnFlagUntilTimeout+0x184>)
 8003430:	400a      	ands	r2, r1
 8003432:	601a      	str	r2, [r3, #0]
 8003434:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003436:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003438:	69bb      	ldr	r3, [r7, #24]
 800343a:	f383 8810 	msr	PRIMASK, r3
}
 800343e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003440:	f3ef 8310 	mrs	r3, PRIMASK
 8003444:	61fb      	str	r3, [r7, #28]
  return(result);
 8003446:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003448:	64bb      	str	r3, [r7, #72]	; 0x48
 800344a:	2301      	movs	r3, #1
 800344c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800344e:	6a3b      	ldr	r3, [r7, #32]
 8003450:	f383 8810 	msr	PRIMASK, r3
}
 8003454:	46c0      	nop			; (mov r8, r8)
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	689a      	ldr	r2, [r3, #8]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	2101      	movs	r1, #1
 8003462:	438a      	bics	r2, r1
 8003464:	609a      	str	r2, [r3, #8]
 8003466:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003468:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800346a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346c:	f383 8810 	msr	PRIMASK, r3
}
 8003470:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2220      	movs	r2, #32
 8003476:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2220      	movs	r2, #32
 800347c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2280      	movs	r2, #128	; 0x80
 8003482:	2120      	movs	r1, #32
 8003484:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2274      	movs	r2, #116	; 0x74
 800348a:	2100      	movs	r1, #0
 800348c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800348e:	2303      	movs	r3, #3
 8003490:	e010      	b.n	80034b4 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	69db      	ldr	r3, [r3, #28]
 8003498:	68ba      	ldr	r2, [r7, #8]
 800349a:	4013      	ands	r3, r2
 800349c:	68ba      	ldr	r2, [r7, #8]
 800349e:	1ad3      	subs	r3, r2, r3
 80034a0:	425a      	negs	r2, r3
 80034a2:	4153      	adcs	r3, r2
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	001a      	movs	r2, r3
 80034a8:	1dfb      	adds	r3, r7, #7
 80034aa:	781b      	ldrb	r3, [r3, #0]
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d100      	bne.n	80034b2 <UART_WaitOnFlagUntilTimeout+0x17a>
 80034b0:	e74b      	b.n	800334a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80034b2:	2300      	movs	r3, #0
}
 80034b4:	0018      	movs	r0, r3
 80034b6:	46bd      	mov	sp, r7
 80034b8:	b014      	add	sp, #80	; 0x50
 80034ba:	bd80      	pop	{r7, pc}
 80034bc:	fffffe5f 	.word	0xfffffe5f

080034c0 <__errno>:
 80034c0:	4b01      	ldr	r3, [pc, #4]	; (80034c8 <__errno+0x8>)
 80034c2:	6818      	ldr	r0, [r3, #0]
 80034c4:	4770      	bx	lr
 80034c6:	46c0      	nop			; (mov r8, r8)
 80034c8:	2000000c 	.word	0x2000000c

080034cc <__libc_init_array>:
 80034cc:	b570      	push	{r4, r5, r6, lr}
 80034ce:	2600      	movs	r6, #0
 80034d0:	4d0c      	ldr	r5, [pc, #48]	; (8003504 <__libc_init_array+0x38>)
 80034d2:	4c0d      	ldr	r4, [pc, #52]	; (8003508 <__libc_init_array+0x3c>)
 80034d4:	1b64      	subs	r4, r4, r5
 80034d6:	10a4      	asrs	r4, r4, #2
 80034d8:	42a6      	cmp	r6, r4
 80034da:	d109      	bne.n	80034f0 <__libc_init_array+0x24>
 80034dc:	2600      	movs	r6, #0
 80034de:	f000 fc8b 	bl	8003df8 <_init>
 80034e2:	4d0a      	ldr	r5, [pc, #40]	; (800350c <__libc_init_array+0x40>)
 80034e4:	4c0a      	ldr	r4, [pc, #40]	; (8003510 <__libc_init_array+0x44>)
 80034e6:	1b64      	subs	r4, r4, r5
 80034e8:	10a4      	asrs	r4, r4, #2
 80034ea:	42a6      	cmp	r6, r4
 80034ec:	d105      	bne.n	80034fa <__libc_init_array+0x2e>
 80034ee:	bd70      	pop	{r4, r5, r6, pc}
 80034f0:	00b3      	lsls	r3, r6, #2
 80034f2:	58eb      	ldr	r3, [r5, r3]
 80034f4:	4798      	blx	r3
 80034f6:	3601      	adds	r6, #1
 80034f8:	e7ee      	b.n	80034d8 <__libc_init_array+0xc>
 80034fa:	00b3      	lsls	r3, r6, #2
 80034fc:	58eb      	ldr	r3, [r5, r3]
 80034fe:	4798      	blx	r3
 8003500:	3601      	adds	r6, #1
 8003502:	e7f2      	b.n	80034ea <__libc_init_array+0x1e>
 8003504:	08003fb8 	.word	0x08003fb8
 8003508:	08003fb8 	.word	0x08003fb8
 800350c:	08003fb8 	.word	0x08003fb8
 8003510:	08003fbc 	.word	0x08003fbc

08003514 <memset>:
 8003514:	0003      	movs	r3, r0
 8003516:	1882      	adds	r2, r0, r2
 8003518:	4293      	cmp	r3, r2
 800351a:	d100      	bne.n	800351e <memset+0xa>
 800351c:	4770      	bx	lr
 800351e:	7019      	strb	r1, [r3, #0]
 8003520:	3301      	adds	r3, #1
 8003522:	e7f9      	b.n	8003518 <memset+0x4>

08003524 <siprintf>:
 8003524:	b40e      	push	{r1, r2, r3}
 8003526:	b500      	push	{lr}
 8003528:	490b      	ldr	r1, [pc, #44]	; (8003558 <siprintf+0x34>)
 800352a:	b09c      	sub	sp, #112	; 0x70
 800352c:	ab1d      	add	r3, sp, #116	; 0x74
 800352e:	9002      	str	r0, [sp, #8]
 8003530:	9006      	str	r0, [sp, #24]
 8003532:	9107      	str	r1, [sp, #28]
 8003534:	9104      	str	r1, [sp, #16]
 8003536:	4809      	ldr	r0, [pc, #36]	; (800355c <siprintf+0x38>)
 8003538:	4909      	ldr	r1, [pc, #36]	; (8003560 <siprintf+0x3c>)
 800353a:	cb04      	ldmia	r3!, {r2}
 800353c:	9105      	str	r1, [sp, #20]
 800353e:	6800      	ldr	r0, [r0, #0]
 8003540:	a902      	add	r1, sp, #8
 8003542:	9301      	str	r3, [sp, #4]
 8003544:	f000 f870 	bl	8003628 <_svfiprintf_r>
 8003548:	2300      	movs	r3, #0
 800354a:	9a02      	ldr	r2, [sp, #8]
 800354c:	7013      	strb	r3, [r2, #0]
 800354e:	b01c      	add	sp, #112	; 0x70
 8003550:	bc08      	pop	{r3}
 8003552:	b003      	add	sp, #12
 8003554:	4718      	bx	r3
 8003556:	46c0      	nop			; (mov r8, r8)
 8003558:	7fffffff 	.word	0x7fffffff
 800355c:	2000000c 	.word	0x2000000c
 8003560:	ffff0208 	.word	0xffff0208

08003564 <__ssputs_r>:
 8003564:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003566:	688e      	ldr	r6, [r1, #8]
 8003568:	b085      	sub	sp, #20
 800356a:	0007      	movs	r7, r0
 800356c:	000c      	movs	r4, r1
 800356e:	9203      	str	r2, [sp, #12]
 8003570:	9301      	str	r3, [sp, #4]
 8003572:	429e      	cmp	r6, r3
 8003574:	d83c      	bhi.n	80035f0 <__ssputs_r+0x8c>
 8003576:	2390      	movs	r3, #144	; 0x90
 8003578:	898a      	ldrh	r2, [r1, #12]
 800357a:	00db      	lsls	r3, r3, #3
 800357c:	421a      	tst	r2, r3
 800357e:	d034      	beq.n	80035ea <__ssputs_r+0x86>
 8003580:	6909      	ldr	r1, [r1, #16]
 8003582:	6823      	ldr	r3, [r4, #0]
 8003584:	6960      	ldr	r0, [r4, #20]
 8003586:	1a5b      	subs	r3, r3, r1
 8003588:	9302      	str	r3, [sp, #8]
 800358a:	2303      	movs	r3, #3
 800358c:	4343      	muls	r3, r0
 800358e:	0fdd      	lsrs	r5, r3, #31
 8003590:	18ed      	adds	r5, r5, r3
 8003592:	9b01      	ldr	r3, [sp, #4]
 8003594:	9802      	ldr	r0, [sp, #8]
 8003596:	3301      	adds	r3, #1
 8003598:	181b      	adds	r3, r3, r0
 800359a:	106d      	asrs	r5, r5, #1
 800359c:	42ab      	cmp	r3, r5
 800359e:	d900      	bls.n	80035a2 <__ssputs_r+0x3e>
 80035a0:	001d      	movs	r5, r3
 80035a2:	0553      	lsls	r3, r2, #21
 80035a4:	d532      	bpl.n	800360c <__ssputs_r+0xa8>
 80035a6:	0029      	movs	r1, r5
 80035a8:	0038      	movs	r0, r7
 80035aa:	f000 fb53 	bl	8003c54 <_malloc_r>
 80035ae:	1e06      	subs	r6, r0, #0
 80035b0:	d109      	bne.n	80035c6 <__ssputs_r+0x62>
 80035b2:	230c      	movs	r3, #12
 80035b4:	603b      	str	r3, [r7, #0]
 80035b6:	2340      	movs	r3, #64	; 0x40
 80035b8:	2001      	movs	r0, #1
 80035ba:	89a2      	ldrh	r2, [r4, #12]
 80035bc:	4240      	negs	r0, r0
 80035be:	4313      	orrs	r3, r2
 80035c0:	81a3      	strh	r3, [r4, #12]
 80035c2:	b005      	add	sp, #20
 80035c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80035c6:	9a02      	ldr	r2, [sp, #8]
 80035c8:	6921      	ldr	r1, [r4, #16]
 80035ca:	f000 faba 	bl	8003b42 <memcpy>
 80035ce:	89a3      	ldrh	r3, [r4, #12]
 80035d0:	4a14      	ldr	r2, [pc, #80]	; (8003624 <__ssputs_r+0xc0>)
 80035d2:	401a      	ands	r2, r3
 80035d4:	2380      	movs	r3, #128	; 0x80
 80035d6:	4313      	orrs	r3, r2
 80035d8:	81a3      	strh	r3, [r4, #12]
 80035da:	9b02      	ldr	r3, [sp, #8]
 80035dc:	6126      	str	r6, [r4, #16]
 80035de:	18f6      	adds	r6, r6, r3
 80035e0:	6026      	str	r6, [r4, #0]
 80035e2:	6165      	str	r5, [r4, #20]
 80035e4:	9e01      	ldr	r6, [sp, #4]
 80035e6:	1aed      	subs	r5, r5, r3
 80035e8:	60a5      	str	r5, [r4, #8]
 80035ea:	9b01      	ldr	r3, [sp, #4]
 80035ec:	429e      	cmp	r6, r3
 80035ee:	d900      	bls.n	80035f2 <__ssputs_r+0x8e>
 80035f0:	9e01      	ldr	r6, [sp, #4]
 80035f2:	0032      	movs	r2, r6
 80035f4:	9903      	ldr	r1, [sp, #12]
 80035f6:	6820      	ldr	r0, [r4, #0]
 80035f8:	f000 faac 	bl	8003b54 <memmove>
 80035fc:	68a3      	ldr	r3, [r4, #8]
 80035fe:	2000      	movs	r0, #0
 8003600:	1b9b      	subs	r3, r3, r6
 8003602:	60a3      	str	r3, [r4, #8]
 8003604:	6823      	ldr	r3, [r4, #0]
 8003606:	199e      	adds	r6, r3, r6
 8003608:	6026      	str	r6, [r4, #0]
 800360a:	e7da      	b.n	80035c2 <__ssputs_r+0x5e>
 800360c:	002a      	movs	r2, r5
 800360e:	0038      	movs	r0, r7
 8003610:	f000 fb96 	bl	8003d40 <_realloc_r>
 8003614:	1e06      	subs	r6, r0, #0
 8003616:	d1e0      	bne.n	80035da <__ssputs_r+0x76>
 8003618:	0038      	movs	r0, r7
 800361a:	6921      	ldr	r1, [r4, #16]
 800361c:	f000 faae 	bl	8003b7c <_free_r>
 8003620:	e7c7      	b.n	80035b2 <__ssputs_r+0x4e>
 8003622:	46c0      	nop			; (mov r8, r8)
 8003624:	fffffb7f 	.word	0xfffffb7f

08003628 <_svfiprintf_r>:
 8003628:	b5f0      	push	{r4, r5, r6, r7, lr}
 800362a:	b0a1      	sub	sp, #132	; 0x84
 800362c:	9003      	str	r0, [sp, #12]
 800362e:	001d      	movs	r5, r3
 8003630:	898b      	ldrh	r3, [r1, #12]
 8003632:	000f      	movs	r7, r1
 8003634:	0016      	movs	r6, r2
 8003636:	061b      	lsls	r3, r3, #24
 8003638:	d511      	bpl.n	800365e <_svfiprintf_r+0x36>
 800363a:	690b      	ldr	r3, [r1, #16]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d10e      	bne.n	800365e <_svfiprintf_r+0x36>
 8003640:	2140      	movs	r1, #64	; 0x40
 8003642:	f000 fb07 	bl	8003c54 <_malloc_r>
 8003646:	6038      	str	r0, [r7, #0]
 8003648:	6138      	str	r0, [r7, #16]
 800364a:	2800      	cmp	r0, #0
 800364c:	d105      	bne.n	800365a <_svfiprintf_r+0x32>
 800364e:	230c      	movs	r3, #12
 8003650:	9a03      	ldr	r2, [sp, #12]
 8003652:	3801      	subs	r0, #1
 8003654:	6013      	str	r3, [r2, #0]
 8003656:	b021      	add	sp, #132	; 0x84
 8003658:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800365a:	2340      	movs	r3, #64	; 0x40
 800365c:	617b      	str	r3, [r7, #20]
 800365e:	2300      	movs	r3, #0
 8003660:	ac08      	add	r4, sp, #32
 8003662:	6163      	str	r3, [r4, #20]
 8003664:	3320      	adds	r3, #32
 8003666:	7663      	strb	r3, [r4, #25]
 8003668:	3310      	adds	r3, #16
 800366a:	76a3      	strb	r3, [r4, #26]
 800366c:	9507      	str	r5, [sp, #28]
 800366e:	0035      	movs	r5, r6
 8003670:	782b      	ldrb	r3, [r5, #0]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d001      	beq.n	800367a <_svfiprintf_r+0x52>
 8003676:	2b25      	cmp	r3, #37	; 0x25
 8003678:	d147      	bne.n	800370a <_svfiprintf_r+0xe2>
 800367a:	1bab      	subs	r3, r5, r6
 800367c:	9305      	str	r3, [sp, #20]
 800367e:	42b5      	cmp	r5, r6
 8003680:	d00c      	beq.n	800369c <_svfiprintf_r+0x74>
 8003682:	0032      	movs	r2, r6
 8003684:	0039      	movs	r1, r7
 8003686:	9803      	ldr	r0, [sp, #12]
 8003688:	f7ff ff6c 	bl	8003564 <__ssputs_r>
 800368c:	1c43      	adds	r3, r0, #1
 800368e:	d100      	bne.n	8003692 <_svfiprintf_r+0x6a>
 8003690:	e0ae      	b.n	80037f0 <_svfiprintf_r+0x1c8>
 8003692:	6962      	ldr	r2, [r4, #20]
 8003694:	9b05      	ldr	r3, [sp, #20]
 8003696:	4694      	mov	ip, r2
 8003698:	4463      	add	r3, ip
 800369a:	6163      	str	r3, [r4, #20]
 800369c:	782b      	ldrb	r3, [r5, #0]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d100      	bne.n	80036a4 <_svfiprintf_r+0x7c>
 80036a2:	e0a5      	b.n	80037f0 <_svfiprintf_r+0x1c8>
 80036a4:	2201      	movs	r2, #1
 80036a6:	2300      	movs	r3, #0
 80036a8:	4252      	negs	r2, r2
 80036aa:	6062      	str	r2, [r4, #4]
 80036ac:	a904      	add	r1, sp, #16
 80036ae:	3254      	adds	r2, #84	; 0x54
 80036b0:	1852      	adds	r2, r2, r1
 80036b2:	1c6e      	adds	r6, r5, #1
 80036b4:	6023      	str	r3, [r4, #0]
 80036b6:	60e3      	str	r3, [r4, #12]
 80036b8:	60a3      	str	r3, [r4, #8]
 80036ba:	7013      	strb	r3, [r2, #0]
 80036bc:	65a3      	str	r3, [r4, #88]	; 0x58
 80036be:	2205      	movs	r2, #5
 80036c0:	7831      	ldrb	r1, [r6, #0]
 80036c2:	4854      	ldr	r0, [pc, #336]	; (8003814 <_svfiprintf_r+0x1ec>)
 80036c4:	f000 fa32 	bl	8003b2c <memchr>
 80036c8:	1c75      	adds	r5, r6, #1
 80036ca:	2800      	cmp	r0, #0
 80036cc:	d11f      	bne.n	800370e <_svfiprintf_r+0xe6>
 80036ce:	6822      	ldr	r2, [r4, #0]
 80036d0:	06d3      	lsls	r3, r2, #27
 80036d2:	d504      	bpl.n	80036de <_svfiprintf_r+0xb6>
 80036d4:	2353      	movs	r3, #83	; 0x53
 80036d6:	a904      	add	r1, sp, #16
 80036d8:	185b      	adds	r3, r3, r1
 80036da:	2120      	movs	r1, #32
 80036dc:	7019      	strb	r1, [r3, #0]
 80036de:	0713      	lsls	r3, r2, #28
 80036e0:	d504      	bpl.n	80036ec <_svfiprintf_r+0xc4>
 80036e2:	2353      	movs	r3, #83	; 0x53
 80036e4:	a904      	add	r1, sp, #16
 80036e6:	185b      	adds	r3, r3, r1
 80036e8:	212b      	movs	r1, #43	; 0x2b
 80036ea:	7019      	strb	r1, [r3, #0]
 80036ec:	7833      	ldrb	r3, [r6, #0]
 80036ee:	2b2a      	cmp	r3, #42	; 0x2a
 80036f0:	d016      	beq.n	8003720 <_svfiprintf_r+0xf8>
 80036f2:	0035      	movs	r5, r6
 80036f4:	2100      	movs	r1, #0
 80036f6:	200a      	movs	r0, #10
 80036f8:	68e3      	ldr	r3, [r4, #12]
 80036fa:	782a      	ldrb	r2, [r5, #0]
 80036fc:	1c6e      	adds	r6, r5, #1
 80036fe:	3a30      	subs	r2, #48	; 0x30
 8003700:	2a09      	cmp	r2, #9
 8003702:	d94e      	bls.n	80037a2 <_svfiprintf_r+0x17a>
 8003704:	2900      	cmp	r1, #0
 8003706:	d111      	bne.n	800372c <_svfiprintf_r+0x104>
 8003708:	e017      	b.n	800373a <_svfiprintf_r+0x112>
 800370a:	3501      	adds	r5, #1
 800370c:	e7b0      	b.n	8003670 <_svfiprintf_r+0x48>
 800370e:	4b41      	ldr	r3, [pc, #260]	; (8003814 <_svfiprintf_r+0x1ec>)
 8003710:	6822      	ldr	r2, [r4, #0]
 8003712:	1ac0      	subs	r0, r0, r3
 8003714:	2301      	movs	r3, #1
 8003716:	4083      	lsls	r3, r0
 8003718:	4313      	orrs	r3, r2
 800371a:	002e      	movs	r6, r5
 800371c:	6023      	str	r3, [r4, #0]
 800371e:	e7ce      	b.n	80036be <_svfiprintf_r+0x96>
 8003720:	9b07      	ldr	r3, [sp, #28]
 8003722:	1d19      	adds	r1, r3, #4
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	9107      	str	r1, [sp, #28]
 8003728:	2b00      	cmp	r3, #0
 800372a:	db01      	blt.n	8003730 <_svfiprintf_r+0x108>
 800372c:	930b      	str	r3, [sp, #44]	; 0x2c
 800372e:	e004      	b.n	800373a <_svfiprintf_r+0x112>
 8003730:	425b      	negs	r3, r3
 8003732:	60e3      	str	r3, [r4, #12]
 8003734:	2302      	movs	r3, #2
 8003736:	4313      	orrs	r3, r2
 8003738:	6023      	str	r3, [r4, #0]
 800373a:	782b      	ldrb	r3, [r5, #0]
 800373c:	2b2e      	cmp	r3, #46	; 0x2e
 800373e:	d10a      	bne.n	8003756 <_svfiprintf_r+0x12e>
 8003740:	786b      	ldrb	r3, [r5, #1]
 8003742:	2b2a      	cmp	r3, #42	; 0x2a
 8003744:	d135      	bne.n	80037b2 <_svfiprintf_r+0x18a>
 8003746:	9b07      	ldr	r3, [sp, #28]
 8003748:	3502      	adds	r5, #2
 800374a:	1d1a      	adds	r2, r3, #4
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	9207      	str	r2, [sp, #28]
 8003750:	2b00      	cmp	r3, #0
 8003752:	db2b      	blt.n	80037ac <_svfiprintf_r+0x184>
 8003754:	9309      	str	r3, [sp, #36]	; 0x24
 8003756:	4e30      	ldr	r6, [pc, #192]	; (8003818 <_svfiprintf_r+0x1f0>)
 8003758:	2203      	movs	r2, #3
 800375a:	0030      	movs	r0, r6
 800375c:	7829      	ldrb	r1, [r5, #0]
 800375e:	f000 f9e5 	bl	8003b2c <memchr>
 8003762:	2800      	cmp	r0, #0
 8003764:	d006      	beq.n	8003774 <_svfiprintf_r+0x14c>
 8003766:	2340      	movs	r3, #64	; 0x40
 8003768:	1b80      	subs	r0, r0, r6
 800376a:	4083      	lsls	r3, r0
 800376c:	6822      	ldr	r2, [r4, #0]
 800376e:	3501      	adds	r5, #1
 8003770:	4313      	orrs	r3, r2
 8003772:	6023      	str	r3, [r4, #0]
 8003774:	7829      	ldrb	r1, [r5, #0]
 8003776:	2206      	movs	r2, #6
 8003778:	4828      	ldr	r0, [pc, #160]	; (800381c <_svfiprintf_r+0x1f4>)
 800377a:	1c6e      	adds	r6, r5, #1
 800377c:	7621      	strb	r1, [r4, #24]
 800377e:	f000 f9d5 	bl	8003b2c <memchr>
 8003782:	2800      	cmp	r0, #0
 8003784:	d03c      	beq.n	8003800 <_svfiprintf_r+0x1d8>
 8003786:	4b26      	ldr	r3, [pc, #152]	; (8003820 <_svfiprintf_r+0x1f8>)
 8003788:	2b00      	cmp	r3, #0
 800378a:	d125      	bne.n	80037d8 <_svfiprintf_r+0x1b0>
 800378c:	2207      	movs	r2, #7
 800378e:	9b07      	ldr	r3, [sp, #28]
 8003790:	3307      	adds	r3, #7
 8003792:	4393      	bics	r3, r2
 8003794:	3308      	adds	r3, #8
 8003796:	9307      	str	r3, [sp, #28]
 8003798:	6963      	ldr	r3, [r4, #20]
 800379a:	9a04      	ldr	r2, [sp, #16]
 800379c:	189b      	adds	r3, r3, r2
 800379e:	6163      	str	r3, [r4, #20]
 80037a0:	e765      	b.n	800366e <_svfiprintf_r+0x46>
 80037a2:	4343      	muls	r3, r0
 80037a4:	0035      	movs	r5, r6
 80037a6:	2101      	movs	r1, #1
 80037a8:	189b      	adds	r3, r3, r2
 80037aa:	e7a6      	b.n	80036fa <_svfiprintf_r+0xd2>
 80037ac:	2301      	movs	r3, #1
 80037ae:	425b      	negs	r3, r3
 80037b0:	e7d0      	b.n	8003754 <_svfiprintf_r+0x12c>
 80037b2:	2300      	movs	r3, #0
 80037b4:	200a      	movs	r0, #10
 80037b6:	001a      	movs	r2, r3
 80037b8:	3501      	adds	r5, #1
 80037ba:	6063      	str	r3, [r4, #4]
 80037bc:	7829      	ldrb	r1, [r5, #0]
 80037be:	1c6e      	adds	r6, r5, #1
 80037c0:	3930      	subs	r1, #48	; 0x30
 80037c2:	2909      	cmp	r1, #9
 80037c4:	d903      	bls.n	80037ce <_svfiprintf_r+0x1a6>
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d0c5      	beq.n	8003756 <_svfiprintf_r+0x12e>
 80037ca:	9209      	str	r2, [sp, #36]	; 0x24
 80037cc:	e7c3      	b.n	8003756 <_svfiprintf_r+0x12e>
 80037ce:	4342      	muls	r2, r0
 80037d0:	0035      	movs	r5, r6
 80037d2:	2301      	movs	r3, #1
 80037d4:	1852      	adds	r2, r2, r1
 80037d6:	e7f1      	b.n	80037bc <_svfiprintf_r+0x194>
 80037d8:	ab07      	add	r3, sp, #28
 80037da:	9300      	str	r3, [sp, #0]
 80037dc:	003a      	movs	r2, r7
 80037de:	0021      	movs	r1, r4
 80037e0:	4b10      	ldr	r3, [pc, #64]	; (8003824 <_svfiprintf_r+0x1fc>)
 80037e2:	9803      	ldr	r0, [sp, #12]
 80037e4:	e000      	b.n	80037e8 <_svfiprintf_r+0x1c0>
 80037e6:	bf00      	nop
 80037e8:	9004      	str	r0, [sp, #16]
 80037ea:	9b04      	ldr	r3, [sp, #16]
 80037ec:	3301      	adds	r3, #1
 80037ee:	d1d3      	bne.n	8003798 <_svfiprintf_r+0x170>
 80037f0:	89bb      	ldrh	r3, [r7, #12]
 80037f2:	980d      	ldr	r0, [sp, #52]	; 0x34
 80037f4:	065b      	lsls	r3, r3, #25
 80037f6:	d400      	bmi.n	80037fa <_svfiprintf_r+0x1d2>
 80037f8:	e72d      	b.n	8003656 <_svfiprintf_r+0x2e>
 80037fa:	2001      	movs	r0, #1
 80037fc:	4240      	negs	r0, r0
 80037fe:	e72a      	b.n	8003656 <_svfiprintf_r+0x2e>
 8003800:	ab07      	add	r3, sp, #28
 8003802:	9300      	str	r3, [sp, #0]
 8003804:	003a      	movs	r2, r7
 8003806:	0021      	movs	r1, r4
 8003808:	4b06      	ldr	r3, [pc, #24]	; (8003824 <_svfiprintf_r+0x1fc>)
 800380a:	9803      	ldr	r0, [sp, #12]
 800380c:	f000 f87c 	bl	8003908 <_printf_i>
 8003810:	e7ea      	b.n	80037e8 <_svfiprintf_r+0x1c0>
 8003812:	46c0      	nop			; (mov r8, r8)
 8003814:	08003f7c 	.word	0x08003f7c
 8003818:	08003f82 	.word	0x08003f82
 800381c:	08003f86 	.word	0x08003f86
 8003820:	00000000 	.word	0x00000000
 8003824:	08003565 	.word	0x08003565

08003828 <_printf_common>:
 8003828:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800382a:	0015      	movs	r5, r2
 800382c:	9301      	str	r3, [sp, #4]
 800382e:	688a      	ldr	r2, [r1, #8]
 8003830:	690b      	ldr	r3, [r1, #16]
 8003832:	000c      	movs	r4, r1
 8003834:	9000      	str	r0, [sp, #0]
 8003836:	4293      	cmp	r3, r2
 8003838:	da00      	bge.n	800383c <_printf_common+0x14>
 800383a:	0013      	movs	r3, r2
 800383c:	0022      	movs	r2, r4
 800383e:	602b      	str	r3, [r5, #0]
 8003840:	3243      	adds	r2, #67	; 0x43
 8003842:	7812      	ldrb	r2, [r2, #0]
 8003844:	2a00      	cmp	r2, #0
 8003846:	d001      	beq.n	800384c <_printf_common+0x24>
 8003848:	3301      	adds	r3, #1
 800384a:	602b      	str	r3, [r5, #0]
 800384c:	6823      	ldr	r3, [r4, #0]
 800384e:	069b      	lsls	r3, r3, #26
 8003850:	d502      	bpl.n	8003858 <_printf_common+0x30>
 8003852:	682b      	ldr	r3, [r5, #0]
 8003854:	3302      	adds	r3, #2
 8003856:	602b      	str	r3, [r5, #0]
 8003858:	6822      	ldr	r2, [r4, #0]
 800385a:	2306      	movs	r3, #6
 800385c:	0017      	movs	r7, r2
 800385e:	401f      	ands	r7, r3
 8003860:	421a      	tst	r2, r3
 8003862:	d027      	beq.n	80038b4 <_printf_common+0x8c>
 8003864:	0023      	movs	r3, r4
 8003866:	3343      	adds	r3, #67	; 0x43
 8003868:	781b      	ldrb	r3, [r3, #0]
 800386a:	1e5a      	subs	r2, r3, #1
 800386c:	4193      	sbcs	r3, r2
 800386e:	6822      	ldr	r2, [r4, #0]
 8003870:	0692      	lsls	r2, r2, #26
 8003872:	d430      	bmi.n	80038d6 <_printf_common+0xae>
 8003874:	0022      	movs	r2, r4
 8003876:	9901      	ldr	r1, [sp, #4]
 8003878:	9800      	ldr	r0, [sp, #0]
 800387a:	9e08      	ldr	r6, [sp, #32]
 800387c:	3243      	adds	r2, #67	; 0x43
 800387e:	47b0      	blx	r6
 8003880:	1c43      	adds	r3, r0, #1
 8003882:	d025      	beq.n	80038d0 <_printf_common+0xa8>
 8003884:	2306      	movs	r3, #6
 8003886:	6820      	ldr	r0, [r4, #0]
 8003888:	682a      	ldr	r2, [r5, #0]
 800388a:	68e1      	ldr	r1, [r4, #12]
 800388c:	2500      	movs	r5, #0
 800388e:	4003      	ands	r3, r0
 8003890:	2b04      	cmp	r3, #4
 8003892:	d103      	bne.n	800389c <_printf_common+0x74>
 8003894:	1a8d      	subs	r5, r1, r2
 8003896:	43eb      	mvns	r3, r5
 8003898:	17db      	asrs	r3, r3, #31
 800389a:	401d      	ands	r5, r3
 800389c:	68a3      	ldr	r3, [r4, #8]
 800389e:	6922      	ldr	r2, [r4, #16]
 80038a0:	4293      	cmp	r3, r2
 80038a2:	dd01      	ble.n	80038a8 <_printf_common+0x80>
 80038a4:	1a9b      	subs	r3, r3, r2
 80038a6:	18ed      	adds	r5, r5, r3
 80038a8:	2700      	movs	r7, #0
 80038aa:	42bd      	cmp	r5, r7
 80038ac:	d120      	bne.n	80038f0 <_printf_common+0xc8>
 80038ae:	2000      	movs	r0, #0
 80038b0:	e010      	b.n	80038d4 <_printf_common+0xac>
 80038b2:	3701      	adds	r7, #1
 80038b4:	68e3      	ldr	r3, [r4, #12]
 80038b6:	682a      	ldr	r2, [r5, #0]
 80038b8:	1a9b      	subs	r3, r3, r2
 80038ba:	42bb      	cmp	r3, r7
 80038bc:	ddd2      	ble.n	8003864 <_printf_common+0x3c>
 80038be:	0022      	movs	r2, r4
 80038c0:	2301      	movs	r3, #1
 80038c2:	9901      	ldr	r1, [sp, #4]
 80038c4:	9800      	ldr	r0, [sp, #0]
 80038c6:	9e08      	ldr	r6, [sp, #32]
 80038c8:	3219      	adds	r2, #25
 80038ca:	47b0      	blx	r6
 80038cc:	1c43      	adds	r3, r0, #1
 80038ce:	d1f0      	bne.n	80038b2 <_printf_common+0x8a>
 80038d0:	2001      	movs	r0, #1
 80038d2:	4240      	negs	r0, r0
 80038d4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80038d6:	2030      	movs	r0, #48	; 0x30
 80038d8:	18e1      	adds	r1, r4, r3
 80038da:	3143      	adds	r1, #67	; 0x43
 80038dc:	7008      	strb	r0, [r1, #0]
 80038de:	0021      	movs	r1, r4
 80038e0:	1c5a      	adds	r2, r3, #1
 80038e2:	3145      	adds	r1, #69	; 0x45
 80038e4:	7809      	ldrb	r1, [r1, #0]
 80038e6:	18a2      	adds	r2, r4, r2
 80038e8:	3243      	adds	r2, #67	; 0x43
 80038ea:	3302      	adds	r3, #2
 80038ec:	7011      	strb	r1, [r2, #0]
 80038ee:	e7c1      	b.n	8003874 <_printf_common+0x4c>
 80038f0:	0022      	movs	r2, r4
 80038f2:	2301      	movs	r3, #1
 80038f4:	9901      	ldr	r1, [sp, #4]
 80038f6:	9800      	ldr	r0, [sp, #0]
 80038f8:	9e08      	ldr	r6, [sp, #32]
 80038fa:	321a      	adds	r2, #26
 80038fc:	47b0      	blx	r6
 80038fe:	1c43      	adds	r3, r0, #1
 8003900:	d0e6      	beq.n	80038d0 <_printf_common+0xa8>
 8003902:	3701      	adds	r7, #1
 8003904:	e7d1      	b.n	80038aa <_printf_common+0x82>
	...

08003908 <_printf_i>:
 8003908:	b5f0      	push	{r4, r5, r6, r7, lr}
 800390a:	b08b      	sub	sp, #44	; 0x2c
 800390c:	9206      	str	r2, [sp, #24]
 800390e:	000a      	movs	r2, r1
 8003910:	3243      	adds	r2, #67	; 0x43
 8003912:	9307      	str	r3, [sp, #28]
 8003914:	9005      	str	r0, [sp, #20]
 8003916:	9204      	str	r2, [sp, #16]
 8003918:	7e0a      	ldrb	r2, [r1, #24]
 800391a:	000c      	movs	r4, r1
 800391c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800391e:	2a78      	cmp	r2, #120	; 0x78
 8003920:	d807      	bhi.n	8003932 <_printf_i+0x2a>
 8003922:	2a62      	cmp	r2, #98	; 0x62
 8003924:	d809      	bhi.n	800393a <_printf_i+0x32>
 8003926:	2a00      	cmp	r2, #0
 8003928:	d100      	bne.n	800392c <_printf_i+0x24>
 800392a:	e0c1      	b.n	8003ab0 <_printf_i+0x1a8>
 800392c:	2a58      	cmp	r2, #88	; 0x58
 800392e:	d100      	bne.n	8003932 <_printf_i+0x2a>
 8003930:	e08c      	b.n	8003a4c <_printf_i+0x144>
 8003932:	0026      	movs	r6, r4
 8003934:	3642      	adds	r6, #66	; 0x42
 8003936:	7032      	strb	r2, [r6, #0]
 8003938:	e022      	b.n	8003980 <_printf_i+0x78>
 800393a:	0010      	movs	r0, r2
 800393c:	3863      	subs	r0, #99	; 0x63
 800393e:	2815      	cmp	r0, #21
 8003940:	d8f7      	bhi.n	8003932 <_printf_i+0x2a>
 8003942:	f7fc fbe1 	bl	8000108 <__gnu_thumb1_case_shi>
 8003946:	0016      	.short	0x0016
 8003948:	fff6001f 	.word	0xfff6001f
 800394c:	fff6fff6 	.word	0xfff6fff6
 8003950:	001ffff6 	.word	0x001ffff6
 8003954:	fff6fff6 	.word	0xfff6fff6
 8003958:	fff6fff6 	.word	0xfff6fff6
 800395c:	003600a8 	.word	0x003600a8
 8003960:	fff6009a 	.word	0xfff6009a
 8003964:	00b9fff6 	.word	0x00b9fff6
 8003968:	0036fff6 	.word	0x0036fff6
 800396c:	fff6fff6 	.word	0xfff6fff6
 8003970:	009e      	.short	0x009e
 8003972:	0026      	movs	r6, r4
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	3642      	adds	r6, #66	; 0x42
 8003978:	1d11      	adds	r1, r2, #4
 800397a:	6019      	str	r1, [r3, #0]
 800397c:	6813      	ldr	r3, [r2, #0]
 800397e:	7033      	strb	r3, [r6, #0]
 8003980:	2301      	movs	r3, #1
 8003982:	e0a7      	b.n	8003ad4 <_printf_i+0x1cc>
 8003984:	6808      	ldr	r0, [r1, #0]
 8003986:	6819      	ldr	r1, [r3, #0]
 8003988:	1d0a      	adds	r2, r1, #4
 800398a:	0605      	lsls	r5, r0, #24
 800398c:	d50b      	bpl.n	80039a6 <_printf_i+0x9e>
 800398e:	680d      	ldr	r5, [r1, #0]
 8003990:	601a      	str	r2, [r3, #0]
 8003992:	2d00      	cmp	r5, #0
 8003994:	da03      	bge.n	800399e <_printf_i+0x96>
 8003996:	232d      	movs	r3, #45	; 0x2d
 8003998:	9a04      	ldr	r2, [sp, #16]
 800399a:	426d      	negs	r5, r5
 800399c:	7013      	strb	r3, [r2, #0]
 800399e:	4b61      	ldr	r3, [pc, #388]	; (8003b24 <_printf_i+0x21c>)
 80039a0:	270a      	movs	r7, #10
 80039a2:	9303      	str	r3, [sp, #12]
 80039a4:	e01b      	b.n	80039de <_printf_i+0xd6>
 80039a6:	680d      	ldr	r5, [r1, #0]
 80039a8:	601a      	str	r2, [r3, #0]
 80039aa:	0641      	lsls	r1, r0, #25
 80039ac:	d5f1      	bpl.n	8003992 <_printf_i+0x8a>
 80039ae:	b22d      	sxth	r5, r5
 80039b0:	e7ef      	b.n	8003992 <_printf_i+0x8a>
 80039b2:	680d      	ldr	r5, [r1, #0]
 80039b4:	6819      	ldr	r1, [r3, #0]
 80039b6:	1d08      	adds	r0, r1, #4
 80039b8:	6018      	str	r0, [r3, #0]
 80039ba:	062e      	lsls	r6, r5, #24
 80039bc:	d501      	bpl.n	80039c2 <_printf_i+0xba>
 80039be:	680d      	ldr	r5, [r1, #0]
 80039c0:	e003      	b.n	80039ca <_printf_i+0xc2>
 80039c2:	066d      	lsls	r5, r5, #25
 80039c4:	d5fb      	bpl.n	80039be <_printf_i+0xb6>
 80039c6:	680d      	ldr	r5, [r1, #0]
 80039c8:	b2ad      	uxth	r5, r5
 80039ca:	4b56      	ldr	r3, [pc, #344]	; (8003b24 <_printf_i+0x21c>)
 80039cc:	2708      	movs	r7, #8
 80039ce:	9303      	str	r3, [sp, #12]
 80039d0:	2a6f      	cmp	r2, #111	; 0x6f
 80039d2:	d000      	beq.n	80039d6 <_printf_i+0xce>
 80039d4:	3702      	adds	r7, #2
 80039d6:	0023      	movs	r3, r4
 80039d8:	2200      	movs	r2, #0
 80039da:	3343      	adds	r3, #67	; 0x43
 80039dc:	701a      	strb	r2, [r3, #0]
 80039de:	6863      	ldr	r3, [r4, #4]
 80039e0:	60a3      	str	r3, [r4, #8]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	db03      	blt.n	80039ee <_printf_i+0xe6>
 80039e6:	2204      	movs	r2, #4
 80039e8:	6821      	ldr	r1, [r4, #0]
 80039ea:	4391      	bics	r1, r2
 80039ec:	6021      	str	r1, [r4, #0]
 80039ee:	2d00      	cmp	r5, #0
 80039f0:	d102      	bne.n	80039f8 <_printf_i+0xf0>
 80039f2:	9e04      	ldr	r6, [sp, #16]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d00c      	beq.n	8003a12 <_printf_i+0x10a>
 80039f8:	9e04      	ldr	r6, [sp, #16]
 80039fa:	0028      	movs	r0, r5
 80039fc:	0039      	movs	r1, r7
 80039fe:	f7fc fc13 	bl	8000228 <__aeabi_uidivmod>
 8003a02:	9b03      	ldr	r3, [sp, #12]
 8003a04:	3e01      	subs	r6, #1
 8003a06:	5c5b      	ldrb	r3, [r3, r1]
 8003a08:	7033      	strb	r3, [r6, #0]
 8003a0a:	002b      	movs	r3, r5
 8003a0c:	0005      	movs	r5, r0
 8003a0e:	429f      	cmp	r7, r3
 8003a10:	d9f3      	bls.n	80039fa <_printf_i+0xf2>
 8003a12:	2f08      	cmp	r7, #8
 8003a14:	d109      	bne.n	8003a2a <_printf_i+0x122>
 8003a16:	6823      	ldr	r3, [r4, #0]
 8003a18:	07db      	lsls	r3, r3, #31
 8003a1a:	d506      	bpl.n	8003a2a <_printf_i+0x122>
 8003a1c:	6863      	ldr	r3, [r4, #4]
 8003a1e:	6922      	ldr	r2, [r4, #16]
 8003a20:	4293      	cmp	r3, r2
 8003a22:	dc02      	bgt.n	8003a2a <_printf_i+0x122>
 8003a24:	2330      	movs	r3, #48	; 0x30
 8003a26:	3e01      	subs	r6, #1
 8003a28:	7033      	strb	r3, [r6, #0]
 8003a2a:	9b04      	ldr	r3, [sp, #16]
 8003a2c:	1b9b      	subs	r3, r3, r6
 8003a2e:	6123      	str	r3, [r4, #16]
 8003a30:	9b07      	ldr	r3, [sp, #28]
 8003a32:	0021      	movs	r1, r4
 8003a34:	9300      	str	r3, [sp, #0]
 8003a36:	9805      	ldr	r0, [sp, #20]
 8003a38:	9b06      	ldr	r3, [sp, #24]
 8003a3a:	aa09      	add	r2, sp, #36	; 0x24
 8003a3c:	f7ff fef4 	bl	8003828 <_printf_common>
 8003a40:	1c43      	adds	r3, r0, #1
 8003a42:	d14c      	bne.n	8003ade <_printf_i+0x1d6>
 8003a44:	2001      	movs	r0, #1
 8003a46:	4240      	negs	r0, r0
 8003a48:	b00b      	add	sp, #44	; 0x2c
 8003a4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a4c:	3145      	adds	r1, #69	; 0x45
 8003a4e:	700a      	strb	r2, [r1, #0]
 8003a50:	4a34      	ldr	r2, [pc, #208]	; (8003b24 <_printf_i+0x21c>)
 8003a52:	9203      	str	r2, [sp, #12]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	6821      	ldr	r1, [r4, #0]
 8003a58:	ca20      	ldmia	r2!, {r5}
 8003a5a:	601a      	str	r2, [r3, #0]
 8003a5c:	0608      	lsls	r0, r1, #24
 8003a5e:	d516      	bpl.n	8003a8e <_printf_i+0x186>
 8003a60:	07cb      	lsls	r3, r1, #31
 8003a62:	d502      	bpl.n	8003a6a <_printf_i+0x162>
 8003a64:	2320      	movs	r3, #32
 8003a66:	4319      	orrs	r1, r3
 8003a68:	6021      	str	r1, [r4, #0]
 8003a6a:	2710      	movs	r7, #16
 8003a6c:	2d00      	cmp	r5, #0
 8003a6e:	d1b2      	bne.n	80039d6 <_printf_i+0xce>
 8003a70:	2320      	movs	r3, #32
 8003a72:	6822      	ldr	r2, [r4, #0]
 8003a74:	439a      	bics	r2, r3
 8003a76:	6022      	str	r2, [r4, #0]
 8003a78:	e7ad      	b.n	80039d6 <_printf_i+0xce>
 8003a7a:	2220      	movs	r2, #32
 8003a7c:	6809      	ldr	r1, [r1, #0]
 8003a7e:	430a      	orrs	r2, r1
 8003a80:	6022      	str	r2, [r4, #0]
 8003a82:	0022      	movs	r2, r4
 8003a84:	2178      	movs	r1, #120	; 0x78
 8003a86:	3245      	adds	r2, #69	; 0x45
 8003a88:	7011      	strb	r1, [r2, #0]
 8003a8a:	4a27      	ldr	r2, [pc, #156]	; (8003b28 <_printf_i+0x220>)
 8003a8c:	e7e1      	b.n	8003a52 <_printf_i+0x14a>
 8003a8e:	0648      	lsls	r0, r1, #25
 8003a90:	d5e6      	bpl.n	8003a60 <_printf_i+0x158>
 8003a92:	b2ad      	uxth	r5, r5
 8003a94:	e7e4      	b.n	8003a60 <_printf_i+0x158>
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	680d      	ldr	r5, [r1, #0]
 8003a9a:	1d10      	adds	r0, r2, #4
 8003a9c:	6949      	ldr	r1, [r1, #20]
 8003a9e:	6018      	str	r0, [r3, #0]
 8003aa0:	6813      	ldr	r3, [r2, #0]
 8003aa2:	062e      	lsls	r6, r5, #24
 8003aa4:	d501      	bpl.n	8003aaa <_printf_i+0x1a2>
 8003aa6:	6019      	str	r1, [r3, #0]
 8003aa8:	e002      	b.n	8003ab0 <_printf_i+0x1a8>
 8003aaa:	066d      	lsls	r5, r5, #25
 8003aac:	d5fb      	bpl.n	8003aa6 <_printf_i+0x19e>
 8003aae:	8019      	strh	r1, [r3, #0]
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	9e04      	ldr	r6, [sp, #16]
 8003ab4:	6123      	str	r3, [r4, #16]
 8003ab6:	e7bb      	b.n	8003a30 <_printf_i+0x128>
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	1d11      	adds	r1, r2, #4
 8003abc:	6019      	str	r1, [r3, #0]
 8003abe:	6816      	ldr	r6, [r2, #0]
 8003ac0:	2100      	movs	r1, #0
 8003ac2:	0030      	movs	r0, r6
 8003ac4:	6862      	ldr	r2, [r4, #4]
 8003ac6:	f000 f831 	bl	8003b2c <memchr>
 8003aca:	2800      	cmp	r0, #0
 8003acc:	d001      	beq.n	8003ad2 <_printf_i+0x1ca>
 8003ace:	1b80      	subs	r0, r0, r6
 8003ad0:	6060      	str	r0, [r4, #4]
 8003ad2:	6863      	ldr	r3, [r4, #4]
 8003ad4:	6123      	str	r3, [r4, #16]
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	9a04      	ldr	r2, [sp, #16]
 8003ada:	7013      	strb	r3, [r2, #0]
 8003adc:	e7a8      	b.n	8003a30 <_printf_i+0x128>
 8003ade:	6923      	ldr	r3, [r4, #16]
 8003ae0:	0032      	movs	r2, r6
 8003ae2:	9906      	ldr	r1, [sp, #24]
 8003ae4:	9805      	ldr	r0, [sp, #20]
 8003ae6:	9d07      	ldr	r5, [sp, #28]
 8003ae8:	47a8      	blx	r5
 8003aea:	1c43      	adds	r3, r0, #1
 8003aec:	d0aa      	beq.n	8003a44 <_printf_i+0x13c>
 8003aee:	6823      	ldr	r3, [r4, #0]
 8003af0:	079b      	lsls	r3, r3, #30
 8003af2:	d415      	bmi.n	8003b20 <_printf_i+0x218>
 8003af4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003af6:	68e0      	ldr	r0, [r4, #12]
 8003af8:	4298      	cmp	r0, r3
 8003afa:	daa5      	bge.n	8003a48 <_printf_i+0x140>
 8003afc:	0018      	movs	r0, r3
 8003afe:	e7a3      	b.n	8003a48 <_printf_i+0x140>
 8003b00:	0022      	movs	r2, r4
 8003b02:	2301      	movs	r3, #1
 8003b04:	9906      	ldr	r1, [sp, #24]
 8003b06:	9805      	ldr	r0, [sp, #20]
 8003b08:	9e07      	ldr	r6, [sp, #28]
 8003b0a:	3219      	adds	r2, #25
 8003b0c:	47b0      	blx	r6
 8003b0e:	1c43      	adds	r3, r0, #1
 8003b10:	d098      	beq.n	8003a44 <_printf_i+0x13c>
 8003b12:	3501      	adds	r5, #1
 8003b14:	68e3      	ldr	r3, [r4, #12]
 8003b16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003b18:	1a9b      	subs	r3, r3, r2
 8003b1a:	42ab      	cmp	r3, r5
 8003b1c:	dcf0      	bgt.n	8003b00 <_printf_i+0x1f8>
 8003b1e:	e7e9      	b.n	8003af4 <_printf_i+0x1ec>
 8003b20:	2500      	movs	r5, #0
 8003b22:	e7f7      	b.n	8003b14 <_printf_i+0x20c>
 8003b24:	08003f8d 	.word	0x08003f8d
 8003b28:	08003f9e 	.word	0x08003f9e

08003b2c <memchr>:
 8003b2c:	b2c9      	uxtb	r1, r1
 8003b2e:	1882      	adds	r2, r0, r2
 8003b30:	4290      	cmp	r0, r2
 8003b32:	d101      	bne.n	8003b38 <memchr+0xc>
 8003b34:	2000      	movs	r0, #0
 8003b36:	4770      	bx	lr
 8003b38:	7803      	ldrb	r3, [r0, #0]
 8003b3a:	428b      	cmp	r3, r1
 8003b3c:	d0fb      	beq.n	8003b36 <memchr+0xa>
 8003b3e:	3001      	adds	r0, #1
 8003b40:	e7f6      	b.n	8003b30 <memchr+0x4>

08003b42 <memcpy>:
 8003b42:	2300      	movs	r3, #0
 8003b44:	b510      	push	{r4, lr}
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d100      	bne.n	8003b4c <memcpy+0xa>
 8003b4a:	bd10      	pop	{r4, pc}
 8003b4c:	5ccc      	ldrb	r4, [r1, r3]
 8003b4e:	54c4      	strb	r4, [r0, r3]
 8003b50:	3301      	adds	r3, #1
 8003b52:	e7f8      	b.n	8003b46 <memcpy+0x4>

08003b54 <memmove>:
 8003b54:	b510      	push	{r4, lr}
 8003b56:	4288      	cmp	r0, r1
 8003b58:	d902      	bls.n	8003b60 <memmove+0xc>
 8003b5a:	188b      	adds	r3, r1, r2
 8003b5c:	4298      	cmp	r0, r3
 8003b5e:	d303      	bcc.n	8003b68 <memmove+0x14>
 8003b60:	2300      	movs	r3, #0
 8003b62:	e007      	b.n	8003b74 <memmove+0x20>
 8003b64:	5c8b      	ldrb	r3, [r1, r2]
 8003b66:	5483      	strb	r3, [r0, r2]
 8003b68:	3a01      	subs	r2, #1
 8003b6a:	d2fb      	bcs.n	8003b64 <memmove+0x10>
 8003b6c:	bd10      	pop	{r4, pc}
 8003b6e:	5ccc      	ldrb	r4, [r1, r3]
 8003b70:	54c4      	strb	r4, [r0, r3]
 8003b72:	3301      	adds	r3, #1
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d1fa      	bne.n	8003b6e <memmove+0x1a>
 8003b78:	e7f8      	b.n	8003b6c <memmove+0x18>
	...

08003b7c <_free_r>:
 8003b7c:	b570      	push	{r4, r5, r6, lr}
 8003b7e:	0005      	movs	r5, r0
 8003b80:	2900      	cmp	r1, #0
 8003b82:	d010      	beq.n	8003ba6 <_free_r+0x2a>
 8003b84:	1f0c      	subs	r4, r1, #4
 8003b86:	6823      	ldr	r3, [r4, #0]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	da00      	bge.n	8003b8e <_free_r+0x12>
 8003b8c:	18e4      	adds	r4, r4, r3
 8003b8e:	0028      	movs	r0, r5
 8003b90:	f000 f918 	bl	8003dc4 <__malloc_lock>
 8003b94:	4a1d      	ldr	r2, [pc, #116]	; (8003c0c <_free_r+0x90>)
 8003b96:	6813      	ldr	r3, [r2, #0]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d105      	bne.n	8003ba8 <_free_r+0x2c>
 8003b9c:	6063      	str	r3, [r4, #4]
 8003b9e:	6014      	str	r4, [r2, #0]
 8003ba0:	0028      	movs	r0, r5
 8003ba2:	f000 f917 	bl	8003dd4 <__malloc_unlock>
 8003ba6:	bd70      	pop	{r4, r5, r6, pc}
 8003ba8:	42a3      	cmp	r3, r4
 8003baa:	d908      	bls.n	8003bbe <_free_r+0x42>
 8003bac:	6821      	ldr	r1, [r4, #0]
 8003bae:	1860      	adds	r0, r4, r1
 8003bb0:	4283      	cmp	r3, r0
 8003bb2:	d1f3      	bne.n	8003b9c <_free_r+0x20>
 8003bb4:	6818      	ldr	r0, [r3, #0]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	1841      	adds	r1, r0, r1
 8003bba:	6021      	str	r1, [r4, #0]
 8003bbc:	e7ee      	b.n	8003b9c <_free_r+0x20>
 8003bbe:	001a      	movs	r2, r3
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d001      	beq.n	8003bca <_free_r+0x4e>
 8003bc6:	42a3      	cmp	r3, r4
 8003bc8:	d9f9      	bls.n	8003bbe <_free_r+0x42>
 8003bca:	6811      	ldr	r1, [r2, #0]
 8003bcc:	1850      	adds	r0, r2, r1
 8003bce:	42a0      	cmp	r0, r4
 8003bd0:	d10b      	bne.n	8003bea <_free_r+0x6e>
 8003bd2:	6820      	ldr	r0, [r4, #0]
 8003bd4:	1809      	adds	r1, r1, r0
 8003bd6:	1850      	adds	r0, r2, r1
 8003bd8:	6011      	str	r1, [r2, #0]
 8003bda:	4283      	cmp	r3, r0
 8003bdc:	d1e0      	bne.n	8003ba0 <_free_r+0x24>
 8003bde:	6818      	ldr	r0, [r3, #0]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	1841      	adds	r1, r0, r1
 8003be4:	6011      	str	r1, [r2, #0]
 8003be6:	6053      	str	r3, [r2, #4]
 8003be8:	e7da      	b.n	8003ba0 <_free_r+0x24>
 8003bea:	42a0      	cmp	r0, r4
 8003bec:	d902      	bls.n	8003bf4 <_free_r+0x78>
 8003bee:	230c      	movs	r3, #12
 8003bf0:	602b      	str	r3, [r5, #0]
 8003bf2:	e7d5      	b.n	8003ba0 <_free_r+0x24>
 8003bf4:	6821      	ldr	r1, [r4, #0]
 8003bf6:	1860      	adds	r0, r4, r1
 8003bf8:	4283      	cmp	r3, r0
 8003bfa:	d103      	bne.n	8003c04 <_free_r+0x88>
 8003bfc:	6818      	ldr	r0, [r3, #0]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	1841      	adds	r1, r0, r1
 8003c02:	6021      	str	r1, [r4, #0]
 8003c04:	6063      	str	r3, [r4, #4]
 8003c06:	6054      	str	r4, [r2, #4]
 8003c08:	e7ca      	b.n	8003ba0 <_free_r+0x24>
 8003c0a:	46c0      	nop			; (mov r8, r8)
 8003c0c:	200001bc 	.word	0x200001bc

08003c10 <sbrk_aligned>:
 8003c10:	b570      	push	{r4, r5, r6, lr}
 8003c12:	4e0f      	ldr	r6, [pc, #60]	; (8003c50 <sbrk_aligned+0x40>)
 8003c14:	000d      	movs	r5, r1
 8003c16:	6831      	ldr	r1, [r6, #0]
 8003c18:	0004      	movs	r4, r0
 8003c1a:	2900      	cmp	r1, #0
 8003c1c:	d102      	bne.n	8003c24 <sbrk_aligned+0x14>
 8003c1e:	f000 f8bf 	bl	8003da0 <_sbrk_r>
 8003c22:	6030      	str	r0, [r6, #0]
 8003c24:	0029      	movs	r1, r5
 8003c26:	0020      	movs	r0, r4
 8003c28:	f000 f8ba 	bl	8003da0 <_sbrk_r>
 8003c2c:	1c43      	adds	r3, r0, #1
 8003c2e:	d00a      	beq.n	8003c46 <sbrk_aligned+0x36>
 8003c30:	2303      	movs	r3, #3
 8003c32:	1cc5      	adds	r5, r0, #3
 8003c34:	439d      	bics	r5, r3
 8003c36:	42a8      	cmp	r0, r5
 8003c38:	d007      	beq.n	8003c4a <sbrk_aligned+0x3a>
 8003c3a:	1a29      	subs	r1, r5, r0
 8003c3c:	0020      	movs	r0, r4
 8003c3e:	f000 f8af 	bl	8003da0 <_sbrk_r>
 8003c42:	1c43      	adds	r3, r0, #1
 8003c44:	d101      	bne.n	8003c4a <sbrk_aligned+0x3a>
 8003c46:	2501      	movs	r5, #1
 8003c48:	426d      	negs	r5, r5
 8003c4a:	0028      	movs	r0, r5
 8003c4c:	bd70      	pop	{r4, r5, r6, pc}
 8003c4e:	46c0      	nop			; (mov r8, r8)
 8003c50:	200001c0 	.word	0x200001c0

08003c54 <_malloc_r>:
 8003c54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003c56:	2203      	movs	r2, #3
 8003c58:	1ccb      	adds	r3, r1, #3
 8003c5a:	4393      	bics	r3, r2
 8003c5c:	3308      	adds	r3, #8
 8003c5e:	0006      	movs	r6, r0
 8003c60:	001f      	movs	r7, r3
 8003c62:	2b0c      	cmp	r3, #12
 8003c64:	d232      	bcs.n	8003ccc <_malloc_r+0x78>
 8003c66:	270c      	movs	r7, #12
 8003c68:	42b9      	cmp	r1, r7
 8003c6a:	d831      	bhi.n	8003cd0 <_malloc_r+0x7c>
 8003c6c:	0030      	movs	r0, r6
 8003c6e:	f000 f8a9 	bl	8003dc4 <__malloc_lock>
 8003c72:	4d32      	ldr	r5, [pc, #200]	; (8003d3c <_malloc_r+0xe8>)
 8003c74:	682b      	ldr	r3, [r5, #0]
 8003c76:	001c      	movs	r4, r3
 8003c78:	2c00      	cmp	r4, #0
 8003c7a:	d12e      	bne.n	8003cda <_malloc_r+0x86>
 8003c7c:	0039      	movs	r1, r7
 8003c7e:	0030      	movs	r0, r6
 8003c80:	f7ff ffc6 	bl	8003c10 <sbrk_aligned>
 8003c84:	0004      	movs	r4, r0
 8003c86:	1c43      	adds	r3, r0, #1
 8003c88:	d11e      	bne.n	8003cc8 <_malloc_r+0x74>
 8003c8a:	682c      	ldr	r4, [r5, #0]
 8003c8c:	0025      	movs	r5, r4
 8003c8e:	2d00      	cmp	r5, #0
 8003c90:	d14a      	bne.n	8003d28 <_malloc_r+0xd4>
 8003c92:	6823      	ldr	r3, [r4, #0]
 8003c94:	0029      	movs	r1, r5
 8003c96:	18e3      	adds	r3, r4, r3
 8003c98:	0030      	movs	r0, r6
 8003c9a:	9301      	str	r3, [sp, #4]
 8003c9c:	f000 f880 	bl	8003da0 <_sbrk_r>
 8003ca0:	9b01      	ldr	r3, [sp, #4]
 8003ca2:	4283      	cmp	r3, r0
 8003ca4:	d143      	bne.n	8003d2e <_malloc_r+0xda>
 8003ca6:	6823      	ldr	r3, [r4, #0]
 8003ca8:	3703      	adds	r7, #3
 8003caa:	1aff      	subs	r7, r7, r3
 8003cac:	2303      	movs	r3, #3
 8003cae:	439f      	bics	r7, r3
 8003cb0:	3708      	adds	r7, #8
 8003cb2:	2f0c      	cmp	r7, #12
 8003cb4:	d200      	bcs.n	8003cb8 <_malloc_r+0x64>
 8003cb6:	270c      	movs	r7, #12
 8003cb8:	0039      	movs	r1, r7
 8003cba:	0030      	movs	r0, r6
 8003cbc:	f7ff ffa8 	bl	8003c10 <sbrk_aligned>
 8003cc0:	1c43      	adds	r3, r0, #1
 8003cc2:	d034      	beq.n	8003d2e <_malloc_r+0xda>
 8003cc4:	6823      	ldr	r3, [r4, #0]
 8003cc6:	19df      	adds	r7, r3, r7
 8003cc8:	6027      	str	r7, [r4, #0]
 8003cca:	e013      	b.n	8003cf4 <_malloc_r+0xa0>
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	dacb      	bge.n	8003c68 <_malloc_r+0x14>
 8003cd0:	230c      	movs	r3, #12
 8003cd2:	2500      	movs	r5, #0
 8003cd4:	6033      	str	r3, [r6, #0]
 8003cd6:	0028      	movs	r0, r5
 8003cd8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003cda:	6822      	ldr	r2, [r4, #0]
 8003cdc:	1bd1      	subs	r1, r2, r7
 8003cde:	d420      	bmi.n	8003d22 <_malloc_r+0xce>
 8003ce0:	290b      	cmp	r1, #11
 8003ce2:	d917      	bls.n	8003d14 <_malloc_r+0xc0>
 8003ce4:	19e2      	adds	r2, r4, r7
 8003ce6:	6027      	str	r7, [r4, #0]
 8003ce8:	42a3      	cmp	r3, r4
 8003cea:	d111      	bne.n	8003d10 <_malloc_r+0xbc>
 8003cec:	602a      	str	r2, [r5, #0]
 8003cee:	6863      	ldr	r3, [r4, #4]
 8003cf0:	6011      	str	r1, [r2, #0]
 8003cf2:	6053      	str	r3, [r2, #4]
 8003cf4:	0030      	movs	r0, r6
 8003cf6:	0025      	movs	r5, r4
 8003cf8:	f000 f86c 	bl	8003dd4 <__malloc_unlock>
 8003cfc:	2207      	movs	r2, #7
 8003cfe:	350b      	adds	r5, #11
 8003d00:	1d23      	adds	r3, r4, #4
 8003d02:	4395      	bics	r5, r2
 8003d04:	1aea      	subs	r2, r5, r3
 8003d06:	429d      	cmp	r5, r3
 8003d08:	d0e5      	beq.n	8003cd6 <_malloc_r+0x82>
 8003d0a:	1b5b      	subs	r3, r3, r5
 8003d0c:	50a3      	str	r3, [r4, r2]
 8003d0e:	e7e2      	b.n	8003cd6 <_malloc_r+0x82>
 8003d10:	605a      	str	r2, [r3, #4]
 8003d12:	e7ec      	b.n	8003cee <_malloc_r+0x9a>
 8003d14:	6862      	ldr	r2, [r4, #4]
 8003d16:	42a3      	cmp	r3, r4
 8003d18:	d101      	bne.n	8003d1e <_malloc_r+0xca>
 8003d1a:	602a      	str	r2, [r5, #0]
 8003d1c:	e7ea      	b.n	8003cf4 <_malloc_r+0xa0>
 8003d1e:	605a      	str	r2, [r3, #4]
 8003d20:	e7e8      	b.n	8003cf4 <_malloc_r+0xa0>
 8003d22:	0023      	movs	r3, r4
 8003d24:	6864      	ldr	r4, [r4, #4]
 8003d26:	e7a7      	b.n	8003c78 <_malloc_r+0x24>
 8003d28:	002c      	movs	r4, r5
 8003d2a:	686d      	ldr	r5, [r5, #4]
 8003d2c:	e7af      	b.n	8003c8e <_malloc_r+0x3a>
 8003d2e:	230c      	movs	r3, #12
 8003d30:	0030      	movs	r0, r6
 8003d32:	6033      	str	r3, [r6, #0]
 8003d34:	f000 f84e 	bl	8003dd4 <__malloc_unlock>
 8003d38:	e7cd      	b.n	8003cd6 <_malloc_r+0x82>
 8003d3a:	46c0      	nop			; (mov r8, r8)
 8003d3c:	200001bc 	.word	0x200001bc

08003d40 <_realloc_r>:
 8003d40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003d42:	0007      	movs	r7, r0
 8003d44:	000e      	movs	r6, r1
 8003d46:	0014      	movs	r4, r2
 8003d48:	2900      	cmp	r1, #0
 8003d4a:	d105      	bne.n	8003d58 <_realloc_r+0x18>
 8003d4c:	0011      	movs	r1, r2
 8003d4e:	f7ff ff81 	bl	8003c54 <_malloc_r>
 8003d52:	0005      	movs	r5, r0
 8003d54:	0028      	movs	r0, r5
 8003d56:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003d58:	2a00      	cmp	r2, #0
 8003d5a:	d103      	bne.n	8003d64 <_realloc_r+0x24>
 8003d5c:	f7ff ff0e 	bl	8003b7c <_free_r>
 8003d60:	0025      	movs	r5, r4
 8003d62:	e7f7      	b.n	8003d54 <_realloc_r+0x14>
 8003d64:	f000 f83e 	bl	8003de4 <_malloc_usable_size_r>
 8003d68:	9001      	str	r0, [sp, #4]
 8003d6a:	4284      	cmp	r4, r0
 8003d6c:	d803      	bhi.n	8003d76 <_realloc_r+0x36>
 8003d6e:	0035      	movs	r5, r6
 8003d70:	0843      	lsrs	r3, r0, #1
 8003d72:	42a3      	cmp	r3, r4
 8003d74:	d3ee      	bcc.n	8003d54 <_realloc_r+0x14>
 8003d76:	0021      	movs	r1, r4
 8003d78:	0038      	movs	r0, r7
 8003d7a:	f7ff ff6b 	bl	8003c54 <_malloc_r>
 8003d7e:	1e05      	subs	r5, r0, #0
 8003d80:	d0e8      	beq.n	8003d54 <_realloc_r+0x14>
 8003d82:	9b01      	ldr	r3, [sp, #4]
 8003d84:	0022      	movs	r2, r4
 8003d86:	429c      	cmp	r4, r3
 8003d88:	d900      	bls.n	8003d8c <_realloc_r+0x4c>
 8003d8a:	001a      	movs	r2, r3
 8003d8c:	0031      	movs	r1, r6
 8003d8e:	0028      	movs	r0, r5
 8003d90:	f7ff fed7 	bl	8003b42 <memcpy>
 8003d94:	0031      	movs	r1, r6
 8003d96:	0038      	movs	r0, r7
 8003d98:	f7ff fef0 	bl	8003b7c <_free_r>
 8003d9c:	e7da      	b.n	8003d54 <_realloc_r+0x14>
	...

08003da0 <_sbrk_r>:
 8003da0:	2300      	movs	r3, #0
 8003da2:	b570      	push	{r4, r5, r6, lr}
 8003da4:	4d06      	ldr	r5, [pc, #24]	; (8003dc0 <_sbrk_r+0x20>)
 8003da6:	0004      	movs	r4, r0
 8003da8:	0008      	movs	r0, r1
 8003daa:	602b      	str	r3, [r5, #0]
 8003dac:	f7fc ff20 	bl	8000bf0 <_sbrk>
 8003db0:	1c43      	adds	r3, r0, #1
 8003db2:	d103      	bne.n	8003dbc <_sbrk_r+0x1c>
 8003db4:	682b      	ldr	r3, [r5, #0]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d000      	beq.n	8003dbc <_sbrk_r+0x1c>
 8003dba:	6023      	str	r3, [r4, #0]
 8003dbc:	bd70      	pop	{r4, r5, r6, pc}
 8003dbe:	46c0      	nop			; (mov r8, r8)
 8003dc0:	200001c4 	.word	0x200001c4

08003dc4 <__malloc_lock>:
 8003dc4:	b510      	push	{r4, lr}
 8003dc6:	4802      	ldr	r0, [pc, #8]	; (8003dd0 <__malloc_lock+0xc>)
 8003dc8:	f000 f814 	bl	8003df4 <__retarget_lock_acquire_recursive>
 8003dcc:	bd10      	pop	{r4, pc}
 8003dce:	46c0      	nop			; (mov r8, r8)
 8003dd0:	200001c8 	.word	0x200001c8

08003dd4 <__malloc_unlock>:
 8003dd4:	b510      	push	{r4, lr}
 8003dd6:	4802      	ldr	r0, [pc, #8]	; (8003de0 <__malloc_unlock+0xc>)
 8003dd8:	f000 f80d 	bl	8003df6 <__retarget_lock_release_recursive>
 8003ddc:	bd10      	pop	{r4, pc}
 8003dde:	46c0      	nop			; (mov r8, r8)
 8003de0:	200001c8 	.word	0x200001c8

08003de4 <_malloc_usable_size_r>:
 8003de4:	1f0b      	subs	r3, r1, #4
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	1f18      	subs	r0, r3, #4
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	da01      	bge.n	8003df2 <_malloc_usable_size_r+0xe>
 8003dee:	580b      	ldr	r3, [r1, r0]
 8003df0:	18c0      	adds	r0, r0, r3
 8003df2:	4770      	bx	lr

08003df4 <__retarget_lock_acquire_recursive>:
 8003df4:	4770      	bx	lr

08003df6 <__retarget_lock_release_recursive>:
 8003df6:	4770      	bx	lr

08003df8 <_init>:
 8003df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dfa:	46c0      	nop			; (mov r8, r8)
 8003dfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dfe:	bc08      	pop	{r3}
 8003e00:	469e      	mov	lr, r3
 8003e02:	4770      	bx	lr

08003e04 <_fini>:
 8003e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e06:	46c0      	nop			; (mov r8, r8)
 8003e08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e0a:	bc08      	pop	{r3}
 8003e0c:	469e      	mov	lr, r3
 8003e0e:	4770      	bx	lr
