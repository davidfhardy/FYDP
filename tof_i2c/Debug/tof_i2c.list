
tof_i2c.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ce8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08003da8  08003da8  00013da8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e64  08003e64  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003e64  08003e64  00013e64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003e6c  08003e6c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e6c  08003e6c  00013e6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e70  08003e70  00013e70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003e74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000104  20000070  08003ee4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000174  08003ee4  00020174  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b65e  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018d7  00000000  00000000  0002b6f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009a8  00000000  00000000  0002cfd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000900  00000000  00000000  0002d978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014540  00000000  00000000  0002e278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c9d7  00000000  00000000  000427b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007d5a1  00000000  00000000  0004f18f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cc730  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002614  00000000  00000000  000cc780  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003d90 	.word	0x08003d90

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08003d90 	.word	0x08003d90

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__aeabi_uldivmod>:
 8000244:	2b00      	cmp	r3, #0
 8000246:	d111      	bne.n	800026c <__aeabi_uldivmod+0x28>
 8000248:	2a00      	cmp	r2, #0
 800024a:	d10f      	bne.n	800026c <__aeabi_uldivmod+0x28>
 800024c:	2900      	cmp	r1, #0
 800024e:	d100      	bne.n	8000252 <__aeabi_uldivmod+0xe>
 8000250:	2800      	cmp	r0, #0
 8000252:	d002      	beq.n	800025a <__aeabi_uldivmod+0x16>
 8000254:	2100      	movs	r1, #0
 8000256:	43c9      	mvns	r1, r1
 8000258:	0008      	movs	r0, r1
 800025a:	b407      	push	{r0, r1, r2}
 800025c:	4802      	ldr	r0, [pc, #8]	; (8000268 <__aeabi_uldivmod+0x24>)
 800025e:	a102      	add	r1, pc, #8	; (adr r1, 8000268 <__aeabi_uldivmod+0x24>)
 8000260:	1840      	adds	r0, r0, r1
 8000262:	9002      	str	r0, [sp, #8]
 8000264:	bd03      	pop	{r0, r1, pc}
 8000266:	46c0      	nop			; (mov r8, r8)
 8000268:	ffffffd9 	.word	0xffffffd9
 800026c:	b403      	push	{r0, r1}
 800026e:	4668      	mov	r0, sp
 8000270:	b501      	push	{r0, lr}
 8000272:	9802      	ldr	r0, [sp, #8]
 8000274:	f000 f834 	bl	80002e0 <__udivmoddi4>
 8000278:	9b01      	ldr	r3, [sp, #4]
 800027a:	469e      	mov	lr, r3
 800027c:	b002      	add	sp, #8
 800027e:	bc0c      	pop	{r2, r3}
 8000280:	4770      	bx	lr
 8000282:	46c0      	nop			; (mov r8, r8)

08000284 <__aeabi_lmul>:
 8000284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000286:	46ce      	mov	lr, r9
 8000288:	4647      	mov	r7, r8
 800028a:	b580      	push	{r7, lr}
 800028c:	0007      	movs	r7, r0
 800028e:	4699      	mov	r9, r3
 8000290:	0c3b      	lsrs	r3, r7, #16
 8000292:	469c      	mov	ip, r3
 8000294:	0413      	lsls	r3, r2, #16
 8000296:	0c1b      	lsrs	r3, r3, #16
 8000298:	001d      	movs	r5, r3
 800029a:	000e      	movs	r6, r1
 800029c:	4661      	mov	r1, ip
 800029e:	0400      	lsls	r0, r0, #16
 80002a0:	0c14      	lsrs	r4, r2, #16
 80002a2:	0c00      	lsrs	r0, r0, #16
 80002a4:	4345      	muls	r5, r0
 80002a6:	434b      	muls	r3, r1
 80002a8:	4360      	muls	r0, r4
 80002aa:	4361      	muls	r1, r4
 80002ac:	18c0      	adds	r0, r0, r3
 80002ae:	0c2c      	lsrs	r4, r5, #16
 80002b0:	1820      	adds	r0, r4, r0
 80002b2:	468c      	mov	ip, r1
 80002b4:	4283      	cmp	r3, r0
 80002b6:	d903      	bls.n	80002c0 <__aeabi_lmul+0x3c>
 80002b8:	2380      	movs	r3, #128	; 0x80
 80002ba:	025b      	lsls	r3, r3, #9
 80002bc:	4698      	mov	r8, r3
 80002be:	44c4      	add	ip, r8
 80002c0:	4649      	mov	r1, r9
 80002c2:	4379      	muls	r1, r7
 80002c4:	4372      	muls	r2, r6
 80002c6:	0c03      	lsrs	r3, r0, #16
 80002c8:	4463      	add	r3, ip
 80002ca:	042d      	lsls	r5, r5, #16
 80002cc:	0c2d      	lsrs	r5, r5, #16
 80002ce:	18c9      	adds	r1, r1, r3
 80002d0:	0400      	lsls	r0, r0, #16
 80002d2:	1940      	adds	r0, r0, r5
 80002d4:	1889      	adds	r1, r1, r2
 80002d6:	bcc0      	pop	{r6, r7}
 80002d8:	46b9      	mov	r9, r7
 80002da:	46b0      	mov	r8, r6
 80002dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002de:	46c0      	nop			; (mov r8, r8)

080002e0 <__udivmoddi4>:
 80002e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002e2:	4657      	mov	r7, sl
 80002e4:	464e      	mov	r6, r9
 80002e6:	4645      	mov	r5, r8
 80002e8:	46de      	mov	lr, fp
 80002ea:	b5e0      	push	{r5, r6, r7, lr}
 80002ec:	0004      	movs	r4, r0
 80002ee:	000d      	movs	r5, r1
 80002f0:	4692      	mov	sl, r2
 80002f2:	4699      	mov	r9, r3
 80002f4:	b083      	sub	sp, #12
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d830      	bhi.n	800035c <__udivmoddi4+0x7c>
 80002fa:	d02d      	beq.n	8000358 <__udivmoddi4+0x78>
 80002fc:	4649      	mov	r1, r9
 80002fe:	4650      	mov	r0, sl
 8000300:	f000 f8ba 	bl	8000478 <__clzdi2>
 8000304:	0029      	movs	r1, r5
 8000306:	0006      	movs	r6, r0
 8000308:	0020      	movs	r0, r4
 800030a:	f000 f8b5 	bl	8000478 <__clzdi2>
 800030e:	1a33      	subs	r3, r6, r0
 8000310:	4698      	mov	r8, r3
 8000312:	3b20      	subs	r3, #32
 8000314:	469b      	mov	fp, r3
 8000316:	d433      	bmi.n	8000380 <__udivmoddi4+0xa0>
 8000318:	465a      	mov	r2, fp
 800031a:	4653      	mov	r3, sl
 800031c:	4093      	lsls	r3, r2
 800031e:	4642      	mov	r2, r8
 8000320:	001f      	movs	r7, r3
 8000322:	4653      	mov	r3, sl
 8000324:	4093      	lsls	r3, r2
 8000326:	001e      	movs	r6, r3
 8000328:	42af      	cmp	r7, r5
 800032a:	d83a      	bhi.n	80003a2 <__udivmoddi4+0xc2>
 800032c:	42af      	cmp	r7, r5
 800032e:	d100      	bne.n	8000332 <__udivmoddi4+0x52>
 8000330:	e078      	b.n	8000424 <__udivmoddi4+0x144>
 8000332:	465b      	mov	r3, fp
 8000334:	1ba4      	subs	r4, r4, r6
 8000336:	41bd      	sbcs	r5, r7
 8000338:	2b00      	cmp	r3, #0
 800033a:	da00      	bge.n	800033e <__udivmoddi4+0x5e>
 800033c:	e075      	b.n	800042a <__udivmoddi4+0x14a>
 800033e:	2200      	movs	r2, #0
 8000340:	2300      	movs	r3, #0
 8000342:	9200      	str	r2, [sp, #0]
 8000344:	9301      	str	r3, [sp, #4]
 8000346:	2301      	movs	r3, #1
 8000348:	465a      	mov	r2, fp
 800034a:	4093      	lsls	r3, r2
 800034c:	9301      	str	r3, [sp, #4]
 800034e:	2301      	movs	r3, #1
 8000350:	4642      	mov	r2, r8
 8000352:	4093      	lsls	r3, r2
 8000354:	9300      	str	r3, [sp, #0]
 8000356:	e028      	b.n	80003aa <__udivmoddi4+0xca>
 8000358:	4282      	cmp	r2, r0
 800035a:	d9cf      	bls.n	80002fc <__udivmoddi4+0x1c>
 800035c:	2200      	movs	r2, #0
 800035e:	2300      	movs	r3, #0
 8000360:	9200      	str	r2, [sp, #0]
 8000362:	9301      	str	r3, [sp, #4]
 8000364:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000366:	2b00      	cmp	r3, #0
 8000368:	d001      	beq.n	800036e <__udivmoddi4+0x8e>
 800036a:	601c      	str	r4, [r3, #0]
 800036c:	605d      	str	r5, [r3, #4]
 800036e:	9800      	ldr	r0, [sp, #0]
 8000370:	9901      	ldr	r1, [sp, #4]
 8000372:	b003      	add	sp, #12
 8000374:	bcf0      	pop	{r4, r5, r6, r7}
 8000376:	46bb      	mov	fp, r7
 8000378:	46b2      	mov	sl, r6
 800037a:	46a9      	mov	r9, r5
 800037c:	46a0      	mov	r8, r4
 800037e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000380:	4642      	mov	r2, r8
 8000382:	2320      	movs	r3, #32
 8000384:	1a9b      	subs	r3, r3, r2
 8000386:	4652      	mov	r2, sl
 8000388:	40da      	lsrs	r2, r3
 800038a:	4641      	mov	r1, r8
 800038c:	0013      	movs	r3, r2
 800038e:	464a      	mov	r2, r9
 8000390:	408a      	lsls	r2, r1
 8000392:	0017      	movs	r7, r2
 8000394:	4642      	mov	r2, r8
 8000396:	431f      	orrs	r7, r3
 8000398:	4653      	mov	r3, sl
 800039a:	4093      	lsls	r3, r2
 800039c:	001e      	movs	r6, r3
 800039e:	42af      	cmp	r7, r5
 80003a0:	d9c4      	bls.n	800032c <__udivmoddi4+0x4c>
 80003a2:	2200      	movs	r2, #0
 80003a4:	2300      	movs	r3, #0
 80003a6:	9200      	str	r2, [sp, #0]
 80003a8:	9301      	str	r3, [sp, #4]
 80003aa:	4643      	mov	r3, r8
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d0d9      	beq.n	8000364 <__udivmoddi4+0x84>
 80003b0:	07fb      	lsls	r3, r7, #31
 80003b2:	0872      	lsrs	r2, r6, #1
 80003b4:	431a      	orrs	r2, r3
 80003b6:	4646      	mov	r6, r8
 80003b8:	087b      	lsrs	r3, r7, #1
 80003ba:	e00e      	b.n	80003da <__udivmoddi4+0xfa>
 80003bc:	42ab      	cmp	r3, r5
 80003be:	d101      	bne.n	80003c4 <__udivmoddi4+0xe4>
 80003c0:	42a2      	cmp	r2, r4
 80003c2:	d80c      	bhi.n	80003de <__udivmoddi4+0xfe>
 80003c4:	1aa4      	subs	r4, r4, r2
 80003c6:	419d      	sbcs	r5, r3
 80003c8:	2001      	movs	r0, #1
 80003ca:	1924      	adds	r4, r4, r4
 80003cc:	416d      	adcs	r5, r5
 80003ce:	2100      	movs	r1, #0
 80003d0:	3e01      	subs	r6, #1
 80003d2:	1824      	adds	r4, r4, r0
 80003d4:	414d      	adcs	r5, r1
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d006      	beq.n	80003e8 <__udivmoddi4+0x108>
 80003da:	42ab      	cmp	r3, r5
 80003dc:	d9ee      	bls.n	80003bc <__udivmoddi4+0xdc>
 80003de:	3e01      	subs	r6, #1
 80003e0:	1924      	adds	r4, r4, r4
 80003e2:	416d      	adcs	r5, r5
 80003e4:	2e00      	cmp	r6, #0
 80003e6:	d1f8      	bne.n	80003da <__udivmoddi4+0xfa>
 80003e8:	9800      	ldr	r0, [sp, #0]
 80003ea:	9901      	ldr	r1, [sp, #4]
 80003ec:	465b      	mov	r3, fp
 80003ee:	1900      	adds	r0, r0, r4
 80003f0:	4169      	adcs	r1, r5
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	db24      	blt.n	8000440 <__udivmoddi4+0x160>
 80003f6:	002b      	movs	r3, r5
 80003f8:	465a      	mov	r2, fp
 80003fa:	4644      	mov	r4, r8
 80003fc:	40d3      	lsrs	r3, r2
 80003fe:	002a      	movs	r2, r5
 8000400:	40e2      	lsrs	r2, r4
 8000402:	001c      	movs	r4, r3
 8000404:	465b      	mov	r3, fp
 8000406:	0015      	movs	r5, r2
 8000408:	2b00      	cmp	r3, #0
 800040a:	db2a      	blt.n	8000462 <__udivmoddi4+0x182>
 800040c:	0026      	movs	r6, r4
 800040e:	409e      	lsls	r6, r3
 8000410:	0033      	movs	r3, r6
 8000412:	0026      	movs	r6, r4
 8000414:	4647      	mov	r7, r8
 8000416:	40be      	lsls	r6, r7
 8000418:	0032      	movs	r2, r6
 800041a:	1a80      	subs	r0, r0, r2
 800041c:	4199      	sbcs	r1, r3
 800041e:	9000      	str	r0, [sp, #0]
 8000420:	9101      	str	r1, [sp, #4]
 8000422:	e79f      	b.n	8000364 <__udivmoddi4+0x84>
 8000424:	42a3      	cmp	r3, r4
 8000426:	d8bc      	bhi.n	80003a2 <__udivmoddi4+0xc2>
 8000428:	e783      	b.n	8000332 <__udivmoddi4+0x52>
 800042a:	4642      	mov	r2, r8
 800042c:	2320      	movs	r3, #32
 800042e:	2100      	movs	r1, #0
 8000430:	1a9b      	subs	r3, r3, r2
 8000432:	2200      	movs	r2, #0
 8000434:	9100      	str	r1, [sp, #0]
 8000436:	9201      	str	r2, [sp, #4]
 8000438:	2201      	movs	r2, #1
 800043a:	40da      	lsrs	r2, r3
 800043c:	9201      	str	r2, [sp, #4]
 800043e:	e786      	b.n	800034e <__udivmoddi4+0x6e>
 8000440:	4642      	mov	r2, r8
 8000442:	2320      	movs	r3, #32
 8000444:	1a9b      	subs	r3, r3, r2
 8000446:	002a      	movs	r2, r5
 8000448:	4646      	mov	r6, r8
 800044a:	409a      	lsls	r2, r3
 800044c:	0023      	movs	r3, r4
 800044e:	40f3      	lsrs	r3, r6
 8000450:	4644      	mov	r4, r8
 8000452:	4313      	orrs	r3, r2
 8000454:	002a      	movs	r2, r5
 8000456:	40e2      	lsrs	r2, r4
 8000458:	001c      	movs	r4, r3
 800045a:	465b      	mov	r3, fp
 800045c:	0015      	movs	r5, r2
 800045e:	2b00      	cmp	r3, #0
 8000460:	dad4      	bge.n	800040c <__udivmoddi4+0x12c>
 8000462:	4642      	mov	r2, r8
 8000464:	002f      	movs	r7, r5
 8000466:	2320      	movs	r3, #32
 8000468:	0026      	movs	r6, r4
 800046a:	4097      	lsls	r7, r2
 800046c:	1a9b      	subs	r3, r3, r2
 800046e:	40de      	lsrs	r6, r3
 8000470:	003b      	movs	r3, r7
 8000472:	4333      	orrs	r3, r6
 8000474:	e7cd      	b.n	8000412 <__udivmoddi4+0x132>
 8000476:	46c0      	nop			; (mov r8, r8)

08000478 <__clzdi2>:
 8000478:	b510      	push	{r4, lr}
 800047a:	2900      	cmp	r1, #0
 800047c:	d103      	bne.n	8000486 <__clzdi2+0xe>
 800047e:	f000 f807 	bl	8000490 <__clzsi2>
 8000482:	3020      	adds	r0, #32
 8000484:	e002      	b.n	800048c <__clzdi2+0x14>
 8000486:	0008      	movs	r0, r1
 8000488:	f000 f802 	bl	8000490 <__clzsi2>
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__clzsi2>:
 8000490:	211c      	movs	r1, #28
 8000492:	2301      	movs	r3, #1
 8000494:	041b      	lsls	r3, r3, #16
 8000496:	4298      	cmp	r0, r3
 8000498:	d301      	bcc.n	800049e <__clzsi2+0xe>
 800049a:	0c00      	lsrs	r0, r0, #16
 800049c:	3910      	subs	r1, #16
 800049e:	0a1b      	lsrs	r3, r3, #8
 80004a0:	4298      	cmp	r0, r3
 80004a2:	d301      	bcc.n	80004a8 <__clzsi2+0x18>
 80004a4:	0a00      	lsrs	r0, r0, #8
 80004a6:	3908      	subs	r1, #8
 80004a8:	091b      	lsrs	r3, r3, #4
 80004aa:	4298      	cmp	r0, r3
 80004ac:	d301      	bcc.n	80004b2 <__clzsi2+0x22>
 80004ae:	0900      	lsrs	r0, r0, #4
 80004b0:	3904      	subs	r1, #4
 80004b2:	a202      	add	r2, pc, #8	; (adr r2, 80004bc <__clzsi2+0x2c>)
 80004b4:	5c10      	ldrb	r0, [r2, r0]
 80004b6:	1840      	adds	r0, r0, r1
 80004b8:	4770      	bx	lr
 80004ba:	46c0      	nop			; (mov r8, r8)
 80004bc:	02020304 	.word	0x02020304
 80004c0:	01010101 	.word	0x01010101
	...

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ce:	b0a1      	sub	sp, #132	; 0x84
 80004d0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d2:	f000 fadf 	bl	8000a94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d6:	f000 f86d 	bl	80005b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004da:	f000 f949 	bl	8000770 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004de:	f000 f917 	bl	8000710 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80004e2:	f000 f8d5 	bl	8000690 <MX_I2C1_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //buf[0] = (uint8_t)((TOF_REF && 0xFF00) >> 8);
	  //buf[1] = (uint8_t)(TOF_REF && 0x00FF);
	  buf[0] = 0x01;
 80004e6:	2568      	movs	r5, #104	; 0x68
 80004e8:	197b      	adds	r3, r7, r5
 80004ea:	2201      	movs	r2, #1
 80004ec:	701a      	strb	r2, [r3, #0]
	  buf[1] = 0x0F;
 80004ee:	197b      	adds	r3, r7, r5
 80004f0:	220f      	movs	r2, #15
 80004f2:	705a      	strb	r2, [r3, #1]

	  ret = HAL_I2C_Master_Transmit(&hi2c1, TOF_WRITE, buf, 2, 2000);
 80004f4:	2352      	movs	r3, #82	; 0x52
 80004f6:	b299      	uxth	r1, r3
 80004f8:	2677      	movs	r6, #119	; 0x77
 80004fa:	19bc      	adds	r4, r7, r6
 80004fc:	197a      	adds	r2, r7, r5
 80004fe:	4828      	ldr	r0, [pc, #160]	; (80005a0 <main+0xd4>)
 8000500:	23fa      	movs	r3, #250	; 0xfa
 8000502:	00db      	lsls	r3, r3, #3
 8000504:	9300      	str	r3, [sp, #0]
 8000506:	2302      	movs	r3, #2
 8000508:	f000 fe3e 	bl	8001188 <HAL_I2C_Master_Transmit>
 800050c:	0003      	movs	r3, r0
 800050e:	7023      	strb	r3, [r4, #0]
	  if (ret != HAL_OK) {
 8000510:	19bb      	adds	r3, r7, r6
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	2b00      	cmp	r3, #0
 8000516:	d008      	beq.n	800052a <main+0x5e>
		  strcpy((char*)buf, "Error Tx\r\n");
 8000518:	197b      	adds	r3, r7, r5
 800051a:	4a22      	ldr	r2, [pc, #136]	; (80005a4 <main+0xd8>)
 800051c:	ca03      	ldmia	r2!, {r0, r1}
 800051e:	c303      	stmia	r3!, {r0, r1}
 8000520:	8811      	ldrh	r1, [r2, #0]
 8000522:	8019      	strh	r1, [r3, #0]
 8000524:	7892      	ldrb	r2, [r2, #2]
 8000526:	709a      	strb	r2, [r3, #2]
 8000528:	e01a      	b.n	8000560 <main+0x94>
	  }
	  else {
		  ret = HAL_I2C_Master_Receive(&hi2c1, TOF_READ, buf, 1, 2000);
 800052a:	2353      	movs	r3, #83	; 0x53
 800052c:	b299      	uxth	r1, r3
 800052e:	2577      	movs	r5, #119	; 0x77
 8000530:	197c      	adds	r4, r7, r5
 8000532:	2668      	movs	r6, #104	; 0x68
 8000534:	19ba      	adds	r2, r7, r6
 8000536:	481a      	ldr	r0, [pc, #104]	; (80005a0 <main+0xd4>)
 8000538:	23fa      	movs	r3, #250	; 0xfa
 800053a:	00db      	lsls	r3, r3, #3
 800053c:	9300      	str	r3, [sp, #0]
 800053e:	2301      	movs	r3, #1
 8000540:	f000 ff2a 	bl	8001398 <HAL_I2C_Master_Receive>
 8000544:	0003      	movs	r3, r0
 8000546:	7023      	strb	r3, [r4, #0]
		  if ( ret != HAL_OK ) {
 8000548:	197b      	adds	r3, r7, r5
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	2b00      	cmp	r3, #0
 800054e:	d007      	beq.n	8000560 <main+0x94>
			  strcpy((char*)buf, "Error Rx\r\n");
 8000550:	19bb      	adds	r3, r7, r6
 8000552:	4a15      	ldr	r2, [pc, #84]	; (80005a8 <main+0xdc>)
 8000554:	ca03      	ldmia	r2!, {r0, r1}
 8000556:	c303      	stmia	r3!, {r0, r1}
 8000558:	8811      	ldrh	r1, [r2, #0]
 800055a:	8019      	strh	r1, [r3, #0]
 800055c:	7892      	ldrb	r2, [r2, #2]
 800055e:	709a      	strb	r2, [r3, #2]
		  }
	  }
	  uint8_t data = (uint8_t)buf[0];
 8000560:	2176      	movs	r1, #118	; 0x76
 8000562:	187b      	adds	r3, r7, r1
 8000564:	2268      	movs	r2, #104	; 0x68
 8000566:	18ba      	adds	r2, r7, r2
 8000568:	7812      	ldrb	r2, [r2, #0]
 800056a:	701a      	strb	r2, [r3, #0]
	  char str[100];
	  sprintf(str, "%d", data);
 800056c:	187b      	adds	r3, r7, r1
 800056e:	781a      	ldrb	r2, [r3, #0]
 8000570:	490e      	ldr	r1, [pc, #56]	; (80005ac <main+0xe0>)
 8000572:	1d3b      	adds	r3, r7, #4
 8000574:	0018      	movs	r0, r3
 8000576:	f002 ffa1 	bl	80034bc <siprintf>

	  //strcpy((char*)buf, "Hello!\r\n");
	  HAL_UART_Transmit(&huart2, str, strlen(str), HAL_MAX_DELAY);
 800057a:	1d3b      	adds	r3, r7, #4
 800057c:	0018      	movs	r0, r3
 800057e:	f7ff fdc3 	bl	8000108 <strlen>
 8000582:	0003      	movs	r3, r0
 8000584:	b29a      	uxth	r2, r3
 8000586:	2301      	movs	r3, #1
 8000588:	425b      	negs	r3, r3
 800058a:	1d39      	adds	r1, r7, #4
 800058c:	4808      	ldr	r0, [pc, #32]	; (80005b0 <main+0xe4>)
 800058e:	f002 fa5b 	bl	8002a48 <HAL_UART_Transmit>
	  HAL_Delay(500);
 8000592:	23fa      	movs	r3, #250	; 0xfa
 8000594:	005b      	lsls	r3, r3, #1
 8000596:	0018      	movs	r0, r3
 8000598:	f000 faec 	bl	8000b74 <HAL_Delay>
  {
 800059c:	e7a3      	b.n	80004e6 <main+0x1a>
 800059e:	46c0      	nop			; (mov r8, r8)
 80005a0:	2000008c 	.word	0x2000008c
 80005a4:	08003da8 	.word	0x08003da8
 80005a8:	08003db4 	.word	0x08003db4
 80005ac:	08003dc0 	.word	0x08003dc0
 80005b0:	200000d8 	.word	0x200000d8

080005b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b4:	b590      	push	{r4, r7, lr}
 80005b6:	b09f      	sub	sp, #124	; 0x7c
 80005b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ba:	2440      	movs	r4, #64	; 0x40
 80005bc:	193b      	adds	r3, r7, r4
 80005be:	0018      	movs	r0, r3
 80005c0:	2338      	movs	r3, #56	; 0x38
 80005c2:	001a      	movs	r2, r3
 80005c4:	2100      	movs	r1, #0
 80005c6:	f002 ff71 	bl	80034ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ca:	232c      	movs	r3, #44	; 0x2c
 80005cc:	18fb      	adds	r3, r7, r3
 80005ce:	0018      	movs	r0, r3
 80005d0:	2314      	movs	r3, #20
 80005d2:	001a      	movs	r2, r3
 80005d4:	2100      	movs	r1, #0
 80005d6:	f002 ff69 	bl	80034ac <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005da:	1d3b      	adds	r3, r7, #4
 80005dc:	0018      	movs	r0, r3
 80005de:	2328      	movs	r3, #40	; 0x28
 80005e0:	001a      	movs	r2, r3
 80005e2:	2100      	movs	r1, #0
 80005e4:	f002 ff62 	bl	80034ac <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005e8:	4b27      	ldr	r3, [pc, #156]	; (8000688 <SystemClock_Config+0xd4>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	4a27      	ldr	r2, [pc, #156]	; (800068c <SystemClock_Config+0xd8>)
 80005ee:	401a      	ands	r2, r3
 80005f0:	4b25      	ldr	r3, [pc, #148]	; (8000688 <SystemClock_Config+0xd4>)
 80005f2:	2180      	movs	r1, #128	; 0x80
 80005f4:	0109      	lsls	r1, r1, #4
 80005f6:	430a      	orrs	r2, r1
 80005f8:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80005fa:	0021      	movs	r1, r4
 80005fc:	187b      	adds	r3, r7, r1
 80005fe:	2210      	movs	r2, #16
 8000600:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000602:	187b      	adds	r3, r7, r1
 8000604:	2201      	movs	r2, #1
 8000606:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000608:	187b      	adds	r3, r7, r1
 800060a:	2200      	movs	r2, #0
 800060c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 800060e:	187b      	adds	r3, r7, r1
 8000610:	22a0      	movs	r2, #160	; 0xa0
 8000612:	0212      	lsls	r2, r2, #8
 8000614:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000616:	187b      	adds	r3, r7, r1
 8000618:	2200      	movs	r2, #0
 800061a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800061c:	187b      	adds	r3, r7, r1
 800061e:	0018      	movs	r0, r3
 8000620:	f001 fa52 	bl	8001ac8 <HAL_RCC_OscConfig>
 8000624:	1e03      	subs	r3, r0, #0
 8000626:	d001      	beq.n	800062c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000628:	f000 f912 	bl	8000850 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800062c:	212c      	movs	r1, #44	; 0x2c
 800062e:	187b      	adds	r3, r7, r1
 8000630:	220f      	movs	r2, #15
 8000632:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000634:	187b      	adds	r3, r7, r1
 8000636:	2200      	movs	r2, #0
 8000638:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800063a:	187b      	adds	r3, r7, r1
 800063c:	2200      	movs	r2, #0
 800063e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000640:	187b      	adds	r3, r7, r1
 8000642:	2200      	movs	r2, #0
 8000644:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000646:	187b      	adds	r3, r7, r1
 8000648:	2200      	movs	r2, #0
 800064a:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800064c:	187b      	adds	r3, r7, r1
 800064e:	2100      	movs	r1, #0
 8000650:	0018      	movs	r0, r3
 8000652:	f001 fe0d 	bl	8002270 <HAL_RCC_ClockConfig>
 8000656:	1e03      	subs	r3, r0, #0
 8000658:	d001      	beq.n	800065e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800065a:	f000 f8f9 	bl	8000850 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 800065e:	1d3b      	adds	r3, r7, #4
 8000660:	220a      	movs	r2, #10
 8000662:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000664:	1d3b      	adds	r3, r7, #4
 8000666:	2200      	movs	r2, #0
 8000668:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800066a:	1d3b      	adds	r3, r7, #4
 800066c:	2200      	movs	r2, #0
 800066e:	619a      	str	r2, [r3, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000670:	1d3b      	adds	r3, r7, #4
 8000672:	0018      	movs	r0, r3
 8000674:	f002 f820 	bl	80026b8 <HAL_RCCEx_PeriphCLKConfig>
 8000678:	1e03      	subs	r3, r0, #0
 800067a:	d001      	beq.n	8000680 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 800067c:	f000 f8e8 	bl	8000850 <Error_Handler>
  }
}
 8000680:	46c0      	nop			; (mov r8, r8)
 8000682:	46bd      	mov	sp, r7
 8000684:	b01f      	add	sp, #124	; 0x7c
 8000686:	bd90      	pop	{r4, r7, pc}
 8000688:	40007000 	.word	0x40007000
 800068c:	ffffe7ff 	.word	0xffffe7ff

08000690 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000694:	4b1c      	ldr	r3, [pc, #112]	; (8000708 <MX_I2C1_Init+0x78>)
 8000696:	4a1d      	ldr	r2, [pc, #116]	; (800070c <MX_I2C1_Init+0x7c>)
 8000698:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000708;
 800069a:	4b1b      	ldr	r3, [pc, #108]	; (8000708 <MX_I2C1_Init+0x78>)
 800069c:	22e1      	movs	r2, #225	; 0xe1
 800069e:	00d2      	lsls	r2, r2, #3
 80006a0:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80006a2:	4b19      	ldr	r3, [pc, #100]	; (8000708 <MX_I2C1_Init+0x78>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006a8:	4b17      	ldr	r3, [pc, #92]	; (8000708 <MX_I2C1_Init+0x78>)
 80006aa:	2201      	movs	r2, #1
 80006ac:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006ae:	4b16      	ldr	r3, [pc, #88]	; (8000708 <MX_I2C1_Init+0x78>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80006b4:	4b14      	ldr	r3, [pc, #80]	; (8000708 <MX_I2C1_Init+0x78>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006ba:	4b13      	ldr	r3, [pc, #76]	; (8000708 <MX_I2C1_Init+0x78>)
 80006bc:	2200      	movs	r2, #0
 80006be:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006c0:	4b11      	ldr	r3, [pc, #68]	; (8000708 <MX_I2C1_Init+0x78>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006c6:	4b10      	ldr	r3, [pc, #64]	; (8000708 <MX_I2C1_Init+0x78>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006cc:	4b0e      	ldr	r3, [pc, #56]	; (8000708 <MX_I2C1_Init+0x78>)
 80006ce:	0018      	movs	r0, r3
 80006d0:	f000 fcc4 	bl	800105c <HAL_I2C_Init>
 80006d4:	1e03      	subs	r3, r0, #0
 80006d6:	d001      	beq.n	80006dc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006d8:	f000 f8ba 	bl	8000850 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006dc:	4b0a      	ldr	r3, [pc, #40]	; (8000708 <MX_I2C1_Init+0x78>)
 80006de:	2100      	movs	r1, #0
 80006e0:	0018      	movs	r0, r3
 80006e2:	f001 f959 	bl	8001998 <HAL_I2CEx_ConfigAnalogFilter>
 80006e6:	1e03      	subs	r3, r0, #0
 80006e8:	d001      	beq.n	80006ee <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80006ea:	f000 f8b1 	bl	8000850 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006ee:	4b06      	ldr	r3, [pc, #24]	; (8000708 <MX_I2C1_Init+0x78>)
 80006f0:	2100      	movs	r1, #0
 80006f2:	0018      	movs	r0, r3
 80006f4:	f001 f99c 	bl	8001a30 <HAL_I2CEx_ConfigDigitalFilter>
 80006f8:	1e03      	subs	r3, r0, #0
 80006fa:	d001      	beq.n	8000700 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80006fc:	f000 f8a8 	bl	8000850 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000700:	46c0      	nop			; (mov r8, r8)
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	46c0      	nop			; (mov r8, r8)
 8000708:	2000008c 	.word	0x2000008c
 800070c:	40005400 	.word	0x40005400

08000710 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000714:	4b14      	ldr	r3, [pc, #80]	; (8000768 <MX_USART2_UART_Init+0x58>)
 8000716:	4a15      	ldr	r2, [pc, #84]	; (800076c <MX_USART2_UART_Init+0x5c>)
 8000718:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800071a:	4b13      	ldr	r3, [pc, #76]	; (8000768 <MX_USART2_UART_Init+0x58>)
 800071c:	22e1      	movs	r2, #225	; 0xe1
 800071e:	0252      	lsls	r2, r2, #9
 8000720:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000722:	4b11      	ldr	r3, [pc, #68]	; (8000768 <MX_USART2_UART_Init+0x58>)
 8000724:	2200      	movs	r2, #0
 8000726:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000728:	4b0f      	ldr	r3, [pc, #60]	; (8000768 <MX_USART2_UART_Init+0x58>)
 800072a:	2200      	movs	r2, #0
 800072c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800072e:	4b0e      	ldr	r3, [pc, #56]	; (8000768 <MX_USART2_UART_Init+0x58>)
 8000730:	2200      	movs	r2, #0
 8000732:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000734:	4b0c      	ldr	r3, [pc, #48]	; (8000768 <MX_USART2_UART_Init+0x58>)
 8000736:	220c      	movs	r2, #12
 8000738:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800073a:	4b0b      	ldr	r3, [pc, #44]	; (8000768 <MX_USART2_UART_Init+0x58>)
 800073c:	2200      	movs	r2, #0
 800073e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000740:	4b09      	ldr	r3, [pc, #36]	; (8000768 <MX_USART2_UART_Init+0x58>)
 8000742:	2200      	movs	r2, #0
 8000744:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000746:	4b08      	ldr	r3, [pc, #32]	; (8000768 <MX_USART2_UART_Init+0x58>)
 8000748:	2200      	movs	r2, #0
 800074a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800074c:	4b06      	ldr	r3, [pc, #24]	; (8000768 <MX_USART2_UART_Init+0x58>)
 800074e:	2200      	movs	r2, #0
 8000750:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000752:	4b05      	ldr	r3, [pc, #20]	; (8000768 <MX_USART2_UART_Init+0x58>)
 8000754:	0018      	movs	r0, r3
 8000756:	f002 f923 	bl	80029a0 <HAL_UART_Init>
 800075a:	1e03      	subs	r3, r0, #0
 800075c:	d001      	beq.n	8000762 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800075e:	f000 f877 	bl	8000850 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000762:	46c0      	nop			; (mov r8, r8)
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	200000d8 	.word	0x200000d8
 800076c:	40004400 	.word	0x40004400

08000770 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000770:	b590      	push	{r4, r7, lr}
 8000772:	b08b      	sub	sp, #44	; 0x2c
 8000774:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000776:	2414      	movs	r4, #20
 8000778:	193b      	adds	r3, r7, r4
 800077a:	0018      	movs	r0, r3
 800077c:	2314      	movs	r3, #20
 800077e:	001a      	movs	r2, r3
 8000780:	2100      	movs	r1, #0
 8000782:	f002 fe93 	bl	80034ac <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000786:	4b30      	ldr	r3, [pc, #192]	; (8000848 <MX_GPIO_Init+0xd8>)
 8000788:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800078a:	4b2f      	ldr	r3, [pc, #188]	; (8000848 <MX_GPIO_Init+0xd8>)
 800078c:	2104      	movs	r1, #4
 800078e:	430a      	orrs	r2, r1
 8000790:	62da      	str	r2, [r3, #44]	; 0x2c
 8000792:	4b2d      	ldr	r3, [pc, #180]	; (8000848 <MX_GPIO_Init+0xd8>)
 8000794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000796:	2204      	movs	r2, #4
 8000798:	4013      	ands	r3, r2
 800079a:	613b      	str	r3, [r7, #16]
 800079c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800079e:	4b2a      	ldr	r3, [pc, #168]	; (8000848 <MX_GPIO_Init+0xd8>)
 80007a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80007a2:	4b29      	ldr	r3, [pc, #164]	; (8000848 <MX_GPIO_Init+0xd8>)
 80007a4:	2180      	movs	r1, #128	; 0x80
 80007a6:	430a      	orrs	r2, r1
 80007a8:	62da      	str	r2, [r3, #44]	; 0x2c
 80007aa:	4b27      	ldr	r3, [pc, #156]	; (8000848 <MX_GPIO_Init+0xd8>)
 80007ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007ae:	2280      	movs	r2, #128	; 0x80
 80007b0:	4013      	ands	r3, r2
 80007b2:	60fb      	str	r3, [r7, #12]
 80007b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b6:	4b24      	ldr	r3, [pc, #144]	; (8000848 <MX_GPIO_Init+0xd8>)
 80007b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80007ba:	4b23      	ldr	r3, [pc, #140]	; (8000848 <MX_GPIO_Init+0xd8>)
 80007bc:	2101      	movs	r1, #1
 80007be:	430a      	orrs	r2, r1
 80007c0:	62da      	str	r2, [r3, #44]	; 0x2c
 80007c2:	4b21      	ldr	r3, [pc, #132]	; (8000848 <MX_GPIO_Init+0xd8>)
 80007c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007c6:	2201      	movs	r2, #1
 80007c8:	4013      	ands	r3, r2
 80007ca:	60bb      	str	r3, [r7, #8]
 80007cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ce:	4b1e      	ldr	r3, [pc, #120]	; (8000848 <MX_GPIO_Init+0xd8>)
 80007d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80007d2:	4b1d      	ldr	r3, [pc, #116]	; (8000848 <MX_GPIO_Init+0xd8>)
 80007d4:	2102      	movs	r1, #2
 80007d6:	430a      	orrs	r2, r1
 80007d8:	62da      	str	r2, [r3, #44]	; 0x2c
 80007da:	4b1b      	ldr	r3, [pc, #108]	; (8000848 <MX_GPIO_Init+0xd8>)
 80007dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007de:	2202      	movs	r2, #2
 80007e0:	4013      	ands	r3, r2
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007e6:	23a0      	movs	r3, #160	; 0xa0
 80007e8:	05db      	lsls	r3, r3, #23
 80007ea:	2200      	movs	r2, #0
 80007ec:	2120      	movs	r1, #32
 80007ee:	0018      	movs	r0, r3
 80007f0:	f000 fc16 	bl	8001020 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007f4:	193b      	adds	r3, r7, r4
 80007f6:	2280      	movs	r2, #128	; 0x80
 80007f8:	0192      	lsls	r2, r2, #6
 80007fa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007fc:	193b      	adds	r3, r7, r4
 80007fe:	2284      	movs	r2, #132	; 0x84
 8000800:	0392      	lsls	r2, r2, #14
 8000802:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000804:	193b      	adds	r3, r7, r4
 8000806:	2200      	movs	r2, #0
 8000808:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800080a:	193b      	adds	r3, r7, r4
 800080c:	4a0f      	ldr	r2, [pc, #60]	; (800084c <MX_GPIO_Init+0xdc>)
 800080e:	0019      	movs	r1, r3
 8000810:	0010      	movs	r0, r2
 8000812:	f000 fa87 	bl	8000d24 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000816:	0021      	movs	r1, r4
 8000818:	187b      	adds	r3, r7, r1
 800081a:	2220      	movs	r2, #32
 800081c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800081e:	187b      	adds	r3, r7, r1
 8000820:	2201      	movs	r2, #1
 8000822:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000824:	187b      	adds	r3, r7, r1
 8000826:	2200      	movs	r2, #0
 8000828:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082a:	187b      	adds	r3, r7, r1
 800082c:	2200      	movs	r2, #0
 800082e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000830:	187a      	adds	r2, r7, r1
 8000832:	23a0      	movs	r3, #160	; 0xa0
 8000834:	05db      	lsls	r3, r3, #23
 8000836:	0011      	movs	r1, r2
 8000838:	0018      	movs	r0, r3
 800083a:	f000 fa73 	bl	8000d24 <HAL_GPIO_Init>

}
 800083e:	46c0      	nop			; (mov r8, r8)
 8000840:	46bd      	mov	sp, r7
 8000842:	b00b      	add	sp, #44	; 0x2c
 8000844:	bd90      	pop	{r4, r7, pc}
 8000846:	46c0      	nop			; (mov r8, r8)
 8000848:	40021000 	.word	0x40021000
 800084c:	50000800 	.word	0x50000800

08000850 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000854:	b672      	cpsid	i
}
 8000856:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000858:	e7fe      	b.n	8000858 <Error_Handler+0x8>
	...

0800085c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000860:	4b07      	ldr	r3, [pc, #28]	; (8000880 <HAL_MspInit+0x24>)
 8000862:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000864:	4b06      	ldr	r3, [pc, #24]	; (8000880 <HAL_MspInit+0x24>)
 8000866:	2101      	movs	r1, #1
 8000868:	430a      	orrs	r2, r1
 800086a:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800086c:	4b04      	ldr	r3, [pc, #16]	; (8000880 <HAL_MspInit+0x24>)
 800086e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000870:	4b03      	ldr	r3, [pc, #12]	; (8000880 <HAL_MspInit+0x24>)
 8000872:	2180      	movs	r1, #128	; 0x80
 8000874:	0549      	lsls	r1, r1, #21
 8000876:	430a      	orrs	r2, r1
 8000878:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800087a:	46c0      	nop			; (mov r8, r8)
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	40021000 	.word	0x40021000

08000884 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000884:	b590      	push	{r4, r7, lr}
 8000886:	b089      	sub	sp, #36	; 0x24
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800088c:	240c      	movs	r4, #12
 800088e:	193b      	adds	r3, r7, r4
 8000890:	0018      	movs	r0, r3
 8000892:	2314      	movs	r3, #20
 8000894:	001a      	movs	r2, r3
 8000896:	2100      	movs	r1, #0
 8000898:	f002 fe08 	bl	80034ac <memset>
  if(hi2c->Instance==I2C1)
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	4a18      	ldr	r2, [pc, #96]	; (8000904 <HAL_I2C_MspInit+0x80>)
 80008a2:	4293      	cmp	r3, r2
 80008a4:	d129      	bne.n	80008fa <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008a6:	4b18      	ldr	r3, [pc, #96]	; (8000908 <HAL_I2C_MspInit+0x84>)
 80008a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008aa:	4b17      	ldr	r3, [pc, #92]	; (8000908 <HAL_I2C_MspInit+0x84>)
 80008ac:	2102      	movs	r1, #2
 80008ae:	430a      	orrs	r2, r1
 80008b0:	62da      	str	r2, [r3, #44]	; 0x2c
 80008b2:	4b15      	ldr	r3, [pc, #84]	; (8000908 <HAL_I2C_MspInit+0x84>)
 80008b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008b6:	2202      	movs	r2, #2
 80008b8:	4013      	ands	r3, r2
 80008ba:	60bb      	str	r3, [r7, #8]
 80008bc:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80008be:	193b      	adds	r3, r7, r4
 80008c0:	22c0      	movs	r2, #192	; 0xc0
 80008c2:	0092      	lsls	r2, r2, #2
 80008c4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008c6:	0021      	movs	r1, r4
 80008c8:	187b      	adds	r3, r7, r1
 80008ca:	2212      	movs	r2, #18
 80008cc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	187b      	adds	r3, r7, r1
 80008d0:	2200      	movs	r2, #0
 80008d2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008d4:	187b      	adds	r3, r7, r1
 80008d6:	2203      	movs	r2, #3
 80008d8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008da:	187b      	adds	r3, r7, r1
 80008dc:	2204      	movs	r2, #4
 80008de:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008e0:	187b      	adds	r3, r7, r1
 80008e2:	4a0a      	ldr	r2, [pc, #40]	; (800090c <HAL_I2C_MspInit+0x88>)
 80008e4:	0019      	movs	r1, r3
 80008e6:	0010      	movs	r0, r2
 80008e8:	f000 fa1c 	bl	8000d24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008ec:	4b06      	ldr	r3, [pc, #24]	; (8000908 <HAL_I2C_MspInit+0x84>)
 80008ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80008f0:	4b05      	ldr	r3, [pc, #20]	; (8000908 <HAL_I2C_MspInit+0x84>)
 80008f2:	2180      	movs	r1, #128	; 0x80
 80008f4:	0389      	lsls	r1, r1, #14
 80008f6:	430a      	orrs	r2, r1
 80008f8:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80008fa:	46c0      	nop			; (mov r8, r8)
 80008fc:	46bd      	mov	sp, r7
 80008fe:	b009      	add	sp, #36	; 0x24
 8000900:	bd90      	pop	{r4, r7, pc}
 8000902:	46c0      	nop			; (mov r8, r8)
 8000904:	40005400 	.word	0x40005400
 8000908:	40021000 	.word	0x40021000
 800090c:	50000400 	.word	0x50000400

08000910 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000910:	b590      	push	{r4, r7, lr}
 8000912:	b089      	sub	sp, #36	; 0x24
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000918:	240c      	movs	r4, #12
 800091a:	193b      	adds	r3, r7, r4
 800091c:	0018      	movs	r0, r3
 800091e:	2314      	movs	r3, #20
 8000920:	001a      	movs	r2, r3
 8000922:	2100      	movs	r1, #0
 8000924:	f002 fdc2 	bl	80034ac <memset>
  if(huart->Instance==USART2)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a18      	ldr	r2, [pc, #96]	; (8000990 <HAL_UART_MspInit+0x80>)
 800092e:	4293      	cmp	r3, r2
 8000930:	d129      	bne.n	8000986 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000932:	4b18      	ldr	r3, [pc, #96]	; (8000994 <HAL_UART_MspInit+0x84>)
 8000934:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000936:	4b17      	ldr	r3, [pc, #92]	; (8000994 <HAL_UART_MspInit+0x84>)
 8000938:	2180      	movs	r1, #128	; 0x80
 800093a:	0289      	lsls	r1, r1, #10
 800093c:	430a      	orrs	r2, r1
 800093e:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000940:	4b14      	ldr	r3, [pc, #80]	; (8000994 <HAL_UART_MspInit+0x84>)
 8000942:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000944:	4b13      	ldr	r3, [pc, #76]	; (8000994 <HAL_UART_MspInit+0x84>)
 8000946:	2101      	movs	r1, #1
 8000948:	430a      	orrs	r2, r1
 800094a:	62da      	str	r2, [r3, #44]	; 0x2c
 800094c:	4b11      	ldr	r3, [pc, #68]	; (8000994 <HAL_UART_MspInit+0x84>)
 800094e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000950:	2201      	movs	r2, #1
 8000952:	4013      	ands	r3, r2
 8000954:	60bb      	str	r3, [r7, #8]
 8000956:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000958:	0021      	movs	r1, r4
 800095a:	187b      	adds	r3, r7, r1
 800095c:	220c      	movs	r2, #12
 800095e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000960:	187b      	adds	r3, r7, r1
 8000962:	2202      	movs	r2, #2
 8000964:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	187b      	adds	r3, r7, r1
 8000968:	2200      	movs	r2, #0
 800096a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800096c:	187b      	adds	r3, r7, r1
 800096e:	2203      	movs	r2, #3
 8000970:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000972:	187b      	adds	r3, r7, r1
 8000974:	2204      	movs	r2, #4
 8000976:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000978:	187a      	adds	r2, r7, r1
 800097a:	23a0      	movs	r3, #160	; 0xa0
 800097c:	05db      	lsls	r3, r3, #23
 800097e:	0011      	movs	r1, r2
 8000980:	0018      	movs	r0, r3
 8000982:	f000 f9cf 	bl	8000d24 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000986:	46c0      	nop			; (mov r8, r8)
 8000988:	46bd      	mov	sp, r7
 800098a:	b009      	add	sp, #36	; 0x24
 800098c:	bd90      	pop	{r4, r7, pc}
 800098e:	46c0      	nop			; (mov r8, r8)
 8000990:	40004400 	.word	0x40004400
 8000994:	40021000 	.word	0x40021000

08000998 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800099c:	e7fe      	b.n	800099c <NMI_Handler+0x4>

0800099e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800099e:	b580      	push	{r7, lr}
 80009a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009a2:	e7fe      	b.n	80009a2 <HardFault_Handler+0x4>

080009a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80009a8:	46c0      	nop			; (mov r8, r8)
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}

080009ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009ae:	b580      	push	{r7, lr}
 80009b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009b2:	46c0      	nop			; (mov r8, r8)
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}

080009b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009bc:	f000 f8be 	bl	8000b3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009c0:	46c0      	nop			; (mov r8, r8)
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
	...

080009c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b086      	sub	sp, #24
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009d0:	4a14      	ldr	r2, [pc, #80]	; (8000a24 <_sbrk+0x5c>)
 80009d2:	4b15      	ldr	r3, [pc, #84]	; (8000a28 <_sbrk+0x60>)
 80009d4:	1ad3      	subs	r3, r2, r3
 80009d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009d8:	697b      	ldr	r3, [r7, #20]
 80009da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009dc:	4b13      	ldr	r3, [pc, #76]	; (8000a2c <_sbrk+0x64>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d102      	bne.n	80009ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009e4:	4b11      	ldr	r3, [pc, #68]	; (8000a2c <_sbrk+0x64>)
 80009e6:	4a12      	ldr	r2, [pc, #72]	; (8000a30 <_sbrk+0x68>)
 80009e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009ea:	4b10      	ldr	r3, [pc, #64]	; (8000a2c <_sbrk+0x64>)
 80009ec:	681a      	ldr	r2, [r3, #0]
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	18d3      	adds	r3, r2, r3
 80009f2:	693a      	ldr	r2, [r7, #16]
 80009f4:	429a      	cmp	r2, r3
 80009f6:	d207      	bcs.n	8000a08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009f8:	f002 fd2e 	bl	8003458 <__errno>
 80009fc:	0003      	movs	r3, r0
 80009fe:	220c      	movs	r2, #12
 8000a00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a02:	2301      	movs	r3, #1
 8000a04:	425b      	negs	r3, r3
 8000a06:	e009      	b.n	8000a1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a08:	4b08      	ldr	r3, [pc, #32]	; (8000a2c <_sbrk+0x64>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a0e:	4b07      	ldr	r3, [pc, #28]	; (8000a2c <_sbrk+0x64>)
 8000a10:	681a      	ldr	r2, [r3, #0]
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	18d2      	adds	r2, r2, r3
 8000a16:	4b05      	ldr	r3, [pc, #20]	; (8000a2c <_sbrk+0x64>)
 8000a18:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000a1a:	68fb      	ldr	r3, [r7, #12]
}
 8000a1c:	0018      	movs	r0, r3
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	b006      	add	sp, #24
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	20005000 	.word	0x20005000
 8000a28:	00000400 	.word	0x00000400
 8000a2c:	2000015c 	.word	0x2000015c
 8000a30:	20000178 	.word	0x20000178

08000a34 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a38:	46c0      	nop			; (mov r8, r8)
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
	...

08000a40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000a40:	480d      	ldr	r0, [pc, #52]	; (8000a78 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000a42:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a44:	480d      	ldr	r0, [pc, #52]	; (8000a7c <LoopForever+0x6>)
  ldr r1, =_edata
 8000a46:	490e      	ldr	r1, [pc, #56]	; (8000a80 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a48:	4a0e      	ldr	r2, [pc, #56]	; (8000a84 <LoopForever+0xe>)
  movs r3, #0
 8000a4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a4c:	e002      	b.n	8000a54 <LoopCopyDataInit>

08000a4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a52:	3304      	adds	r3, #4

08000a54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a58:	d3f9      	bcc.n	8000a4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a5a:	4a0b      	ldr	r2, [pc, #44]	; (8000a88 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a5c:	4c0b      	ldr	r4, [pc, #44]	; (8000a8c <LoopForever+0x16>)
  movs r3, #0
 8000a5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a60:	e001      	b.n	8000a66 <LoopFillZerobss>

08000a62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a64:	3204      	adds	r2, #4

08000a66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a68:	d3fb      	bcc.n	8000a62 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000a6a:	f7ff ffe3 	bl	8000a34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a6e:	f002 fcf9 	bl	8003464 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a72:	f7ff fd2b 	bl	80004cc <main>

08000a76 <LoopForever>:

LoopForever:
    b LoopForever
 8000a76:	e7fe      	b.n	8000a76 <LoopForever>
   ldr   r0, =_estack
 8000a78:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000a7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a80:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000a84:	08003e74 	.word	0x08003e74
  ldr r2, =_sbss
 8000a88:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000a8c:	20000174 	.word	0x20000174

08000a90 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a90:	e7fe      	b.n	8000a90 <ADC1_COMP_IRQHandler>
	...

08000a94 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a9a:	1dfb      	adds	r3, r7, #7
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000aa0:	4b0b      	ldr	r3, [pc, #44]	; (8000ad0 <HAL_Init+0x3c>)
 8000aa2:	681a      	ldr	r2, [r3, #0]
 8000aa4:	4b0a      	ldr	r3, [pc, #40]	; (8000ad0 <HAL_Init+0x3c>)
 8000aa6:	2140      	movs	r1, #64	; 0x40
 8000aa8:	430a      	orrs	r2, r1
 8000aaa:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000aac:	2000      	movs	r0, #0
 8000aae:	f000 f811 	bl	8000ad4 <HAL_InitTick>
 8000ab2:	1e03      	subs	r3, r0, #0
 8000ab4:	d003      	beq.n	8000abe <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000ab6:	1dfb      	adds	r3, r7, #7
 8000ab8:	2201      	movs	r2, #1
 8000aba:	701a      	strb	r2, [r3, #0]
 8000abc:	e001      	b.n	8000ac2 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000abe:	f7ff fecd 	bl	800085c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ac2:	1dfb      	adds	r3, r7, #7
 8000ac4:	781b      	ldrb	r3, [r3, #0]
}
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	b002      	add	sp, #8
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	46c0      	nop			; (mov r8, r8)
 8000ad0:	40022000 	.word	0x40022000

08000ad4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ad4:	b590      	push	{r4, r7, lr}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000adc:	4b14      	ldr	r3, [pc, #80]	; (8000b30 <HAL_InitTick+0x5c>)
 8000ade:	681c      	ldr	r4, [r3, #0]
 8000ae0:	4b14      	ldr	r3, [pc, #80]	; (8000b34 <HAL_InitTick+0x60>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	0019      	movs	r1, r3
 8000ae6:	23fa      	movs	r3, #250	; 0xfa
 8000ae8:	0098      	lsls	r0, r3, #2
 8000aea:	f7ff fb1f 	bl	800012c <__udivsi3>
 8000aee:	0003      	movs	r3, r0
 8000af0:	0019      	movs	r1, r3
 8000af2:	0020      	movs	r0, r4
 8000af4:	f7ff fb1a 	bl	800012c <__udivsi3>
 8000af8:	0003      	movs	r3, r0
 8000afa:	0018      	movs	r0, r3
 8000afc:	f000 f905 	bl	8000d0a <HAL_SYSTICK_Config>
 8000b00:	1e03      	subs	r3, r0, #0
 8000b02:	d001      	beq.n	8000b08 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000b04:	2301      	movs	r3, #1
 8000b06:	e00f      	b.n	8000b28 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	2b03      	cmp	r3, #3
 8000b0c:	d80b      	bhi.n	8000b26 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b0e:	6879      	ldr	r1, [r7, #4]
 8000b10:	2301      	movs	r3, #1
 8000b12:	425b      	negs	r3, r3
 8000b14:	2200      	movs	r2, #0
 8000b16:	0018      	movs	r0, r3
 8000b18:	f000 f8e2 	bl	8000ce0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b1c:	4b06      	ldr	r3, [pc, #24]	; (8000b38 <HAL_InitTick+0x64>)
 8000b1e:	687a      	ldr	r2, [r7, #4]
 8000b20:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b22:	2300      	movs	r3, #0
 8000b24:	e000      	b.n	8000b28 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000b26:	2301      	movs	r3, #1
}
 8000b28:	0018      	movs	r0, r3
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	b003      	add	sp, #12
 8000b2e:	bd90      	pop	{r4, r7, pc}
 8000b30:	20000000 	.word	0x20000000
 8000b34:	20000008 	.word	0x20000008
 8000b38:	20000004 	.word	0x20000004

08000b3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b40:	4b05      	ldr	r3, [pc, #20]	; (8000b58 <HAL_IncTick+0x1c>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	001a      	movs	r2, r3
 8000b46:	4b05      	ldr	r3, [pc, #20]	; (8000b5c <HAL_IncTick+0x20>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	18d2      	adds	r2, r2, r3
 8000b4c:	4b03      	ldr	r3, [pc, #12]	; (8000b5c <HAL_IncTick+0x20>)
 8000b4e:	601a      	str	r2, [r3, #0]
}
 8000b50:	46c0      	nop			; (mov r8, r8)
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	46c0      	nop			; (mov r8, r8)
 8000b58:	20000008 	.word	0x20000008
 8000b5c:	20000160 	.word	0x20000160

08000b60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  return uwTick;
 8000b64:	4b02      	ldr	r3, [pc, #8]	; (8000b70 <HAL_GetTick+0x10>)
 8000b66:	681b      	ldr	r3, [r3, #0]
}
 8000b68:	0018      	movs	r0, r3
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	46c0      	nop			; (mov r8, r8)
 8000b70:	20000160 	.word	0x20000160

08000b74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b084      	sub	sp, #16
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b7c:	f7ff fff0 	bl	8000b60 <HAL_GetTick>
 8000b80:	0003      	movs	r3, r0
 8000b82:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	3301      	adds	r3, #1
 8000b8c:	d005      	beq.n	8000b9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b8e:	4b0a      	ldr	r3, [pc, #40]	; (8000bb8 <HAL_Delay+0x44>)
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	001a      	movs	r2, r3
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	189b      	adds	r3, r3, r2
 8000b98:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b9a:	46c0      	nop			; (mov r8, r8)
 8000b9c:	f7ff ffe0 	bl	8000b60 <HAL_GetTick>
 8000ba0:	0002      	movs	r2, r0
 8000ba2:	68bb      	ldr	r3, [r7, #8]
 8000ba4:	1ad3      	subs	r3, r2, r3
 8000ba6:	68fa      	ldr	r2, [r7, #12]
 8000ba8:	429a      	cmp	r2, r3
 8000baa:	d8f7      	bhi.n	8000b9c <HAL_Delay+0x28>
  {
  }
}
 8000bac:	46c0      	nop			; (mov r8, r8)
 8000bae:	46c0      	nop			; (mov r8, r8)
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	b004      	add	sp, #16
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	46c0      	nop			; (mov r8, r8)
 8000bb8:	20000008 	.word	0x20000008

08000bbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bbc:	b590      	push	{r4, r7, lr}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	0002      	movs	r2, r0
 8000bc4:	6039      	str	r1, [r7, #0]
 8000bc6:	1dfb      	adds	r3, r7, #7
 8000bc8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000bca:	1dfb      	adds	r3, r7, #7
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	2b7f      	cmp	r3, #127	; 0x7f
 8000bd0:	d828      	bhi.n	8000c24 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bd2:	4a2f      	ldr	r2, [pc, #188]	; (8000c90 <__NVIC_SetPriority+0xd4>)
 8000bd4:	1dfb      	adds	r3, r7, #7
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	b25b      	sxtb	r3, r3
 8000bda:	089b      	lsrs	r3, r3, #2
 8000bdc:	33c0      	adds	r3, #192	; 0xc0
 8000bde:	009b      	lsls	r3, r3, #2
 8000be0:	589b      	ldr	r3, [r3, r2]
 8000be2:	1dfa      	adds	r2, r7, #7
 8000be4:	7812      	ldrb	r2, [r2, #0]
 8000be6:	0011      	movs	r1, r2
 8000be8:	2203      	movs	r2, #3
 8000bea:	400a      	ands	r2, r1
 8000bec:	00d2      	lsls	r2, r2, #3
 8000bee:	21ff      	movs	r1, #255	; 0xff
 8000bf0:	4091      	lsls	r1, r2
 8000bf2:	000a      	movs	r2, r1
 8000bf4:	43d2      	mvns	r2, r2
 8000bf6:	401a      	ands	r2, r3
 8000bf8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	019b      	lsls	r3, r3, #6
 8000bfe:	22ff      	movs	r2, #255	; 0xff
 8000c00:	401a      	ands	r2, r3
 8000c02:	1dfb      	adds	r3, r7, #7
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	0018      	movs	r0, r3
 8000c08:	2303      	movs	r3, #3
 8000c0a:	4003      	ands	r3, r0
 8000c0c:	00db      	lsls	r3, r3, #3
 8000c0e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c10:	481f      	ldr	r0, [pc, #124]	; (8000c90 <__NVIC_SetPriority+0xd4>)
 8000c12:	1dfb      	adds	r3, r7, #7
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	b25b      	sxtb	r3, r3
 8000c18:	089b      	lsrs	r3, r3, #2
 8000c1a:	430a      	orrs	r2, r1
 8000c1c:	33c0      	adds	r3, #192	; 0xc0
 8000c1e:	009b      	lsls	r3, r3, #2
 8000c20:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000c22:	e031      	b.n	8000c88 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c24:	4a1b      	ldr	r2, [pc, #108]	; (8000c94 <__NVIC_SetPriority+0xd8>)
 8000c26:	1dfb      	adds	r3, r7, #7
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	0019      	movs	r1, r3
 8000c2c:	230f      	movs	r3, #15
 8000c2e:	400b      	ands	r3, r1
 8000c30:	3b08      	subs	r3, #8
 8000c32:	089b      	lsrs	r3, r3, #2
 8000c34:	3306      	adds	r3, #6
 8000c36:	009b      	lsls	r3, r3, #2
 8000c38:	18d3      	adds	r3, r2, r3
 8000c3a:	3304      	adds	r3, #4
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	1dfa      	adds	r2, r7, #7
 8000c40:	7812      	ldrb	r2, [r2, #0]
 8000c42:	0011      	movs	r1, r2
 8000c44:	2203      	movs	r2, #3
 8000c46:	400a      	ands	r2, r1
 8000c48:	00d2      	lsls	r2, r2, #3
 8000c4a:	21ff      	movs	r1, #255	; 0xff
 8000c4c:	4091      	lsls	r1, r2
 8000c4e:	000a      	movs	r2, r1
 8000c50:	43d2      	mvns	r2, r2
 8000c52:	401a      	ands	r2, r3
 8000c54:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	019b      	lsls	r3, r3, #6
 8000c5a:	22ff      	movs	r2, #255	; 0xff
 8000c5c:	401a      	ands	r2, r3
 8000c5e:	1dfb      	adds	r3, r7, #7
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	0018      	movs	r0, r3
 8000c64:	2303      	movs	r3, #3
 8000c66:	4003      	ands	r3, r0
 8000c68:	00db      	lsls	r3, r3, #3
 8000c6a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c6c:	4809      	ldr	r0, [pc, #36]	; (8000c94 <__NVIC_SetPriority+0xd8>)
 8000c6e:	1dfb      	adds	r3, r7, #7
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	001c      	movs	r4, r3
 8000c74:	230f      	movs	r3, #15
 8000c76:	4023      	ands	r3, r4
 8000c78:	3b08      	subs	r3, #8
 8000c7a:	089b      	lsrs	r3, r3, #2
 8000c7c:	430a      	orrs	r2, r1
 8000c7e:	3306      	adds	r3, #6
 8000c80:	009b      	lsls	r3, r3, #2
 8000c82:	18c3      	adds	r3, r0, r3
 8000c84:	3304      	adds	r3, #4
 8000c86:	601a      	str	r2, [r3, #0]
}
 8000c88:	46c0      	nop			; (mov r8, r8)
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	b003      	add	sp, #12
 8000c8e:	bd90      	pop	{r4, r7, pc}
 8000c90:	e000e100 	.word	0xe000e100
 8000c94:	e000ed00 	.word	0xe000ed00

08000c98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	1e5a      	subs	r2, r3, #1
 8000ca4:	2380      	movs	r3, #128	; 0x80
 8000ca6:	045b      	lsls	r3, r3, #17
 8000ca8:	429a      	cmp	r2, r3
 8000caa:	d301      	bcc.n	8000cb0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cac:	2301      	movs	r3, #1
 8000cae:	e010      	b.n	8000cd2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cb0:	4b0a      	ldr	r3, [pc, #40]	; (8000cdc <SysTick_Config+0x44>)
 8000cb2:	687a      	ldr	r2, [r7, #4]
 8000cb4:	3a01      	subs	r2, #1
 8000cb6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cb8:	2301      	movs	r3, #1
 8000cba:	425b      	negs	r3, r3
 8000cbc:	2103      	movs	r1, #3
 8000cbe:	0018      	movs	r0, r3
 8000cc0:	f7ff ff7c 	bl	8000bbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cc4:	4b05      	ldr	r3, [pc, #20]	; (8000cdc <SysTick_Config+0x44>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cca:	4b04      	ldr	r3, [pc, #16]	; (8000cdc <SysTick_Config+0x44>)
 8000ccc:	2207      	movs	r2, #7
 8000cce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cd0:	2300      	movs	r3, #0
}
 8000cd2:	0018      	movs	r0, r3
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	b002      	add	sp, #8
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	46c0      	nop			; (mov r8, r8)
 8000cdc:	e000e010 	.word	0xe000e010

08000ce0 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b084      	sub	sp, #16
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	60b9      	str	r1, [r7, #8]
 8000ce8:	607a      	str	r2, [r7, #4]
 8000cea:	210f      	movs	r1, #15
 8000cec:	187b      	adds	r3, r7, r1
 8000cee:	1c02      	adds	r2, r0, #0
 8000cf0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000cf2:	68ba      	ldr	r2, [r7, #8]
 8000cf4:	187b      	adds	r3, r7, r1
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	b25b      	sxtb	r3, r3
 8000cfa:	0011      	movs	r1, r2
 8000cfc:	0018      	movs	r0, r3
 8000cfe:	f7ff ff5d 	bl	8000bbc <__NVIC_SetPriority>
}
 8000d02:	46c0      	nop			; (mov r8, r8)
 8000d04:	46bd      	mov	sp, r7
 8000d06:	b004      	add	sp, #16
 8000d08:	bd80      	pop	{r7, pc}

08000d0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d0a:	b580      	push	{r7, lr}
 8000d0c:	b082      	sub	sp, #8
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	0018      	movs	r0, r3
 8000d16:	f7ff ffbf 	bl	8000c98 <SysTick_Config>
 8000d1a:	0003      	movs	r3, r0
}
 8000d1c:	0018      	movs	r0, r3
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	b002      	add	sp, #8
 8000d22:	bd80      	pop	{r7, pc}

08000d24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b086      	sub	sp, #24
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
 8000d2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d32:	2300      	movs	r3, #0
 8000d34:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000d36:	2300      	movs	r3, #0
 8000d38:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000d3a:	e155      	b.n	8000fe8 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	2101      	movs	r1, #1
 8000d42:	697a      	ldr	r2, [r7, #20]
 8000d44:	4091      	lsls	r1, r2
 8000d46:	000a      	movs	r2, r1
 8000d48:	4013      	ands	r3, r2
 8000d4a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d100      	bne.n	8000d54 <HAL_GPIO_Init+0x30>
 8000d52:	e146      	b.n	8000fe2 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	2203      	movs	r2, #3
 8000d5a:	4013      	ands	r3, r2
 8000d5c:	2b01      	cmp	r3, #1
 8000d5e:	d005      	beq.n	8000d6c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	2203      	movs	r2, #3
 8000d66:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d68:	2b02      	cmp	r3, #2
 8000d6a:	d130      	bne.n	8000dce <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	689b      	ldr	r3, [r3, #8]
 8000d70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	005b      	lsls	r3, r3, #1
 8000d76:	2203      	movs	r2, #3
 8000d78:	409a      	lsls	r2, r3
 8000d7a:	0013      	movs	r3, r2
 8000d7c:	43da      	mvns	r2, r3
 8000d7e:	693b      	ldr	r3, [r7, #16]
 8000d80:	4013      	ands	r3, r2
 8000d82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	68da      	ldr	r2, [r3, #12]
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	005b      	lsls	r3, r3, #1
 8000d8c:	409a      	lsls	r2, r3
 8000d8e:	0013      	movs	r3, r2
 8000d90:	693a      	ldr	r2, [r7, #16]
 8000d92:	4313      	orrs	r3, r2
 8000d94:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	693a      	ldr	r2, [r7, #16]
 8000d9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000da2:	2201      	movs	r2, #1
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	409a      	lsls	r2, r3
 8000da8:	0013      	movs	r3, r2
 8000daa:	43da      	mvns	r2, r3
 8000dac:	693b      	ldr	r3, [r7, #16]
 8000dae:	4013      	ands	r3, r2
 8000db0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	091b      	lsrs	r3, r3, #4
 8000db8:	2201      	movs	r2, #1
 8000dba:	401a      	ands	r2, r3
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	409a      	lsls	r2, r3
 8000dc0:	0013      	movs	r3, r2
 8000dc2:	693a      	ldr	r2, [r7, #16]
 8000dc4:	4313      	orrs	r3, r2
 8000dc6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	693a      	ldr	r2, [r7, #16]
 8000dcc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	2203      	movs	r2, #3
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	2b03      	cmp	r3, #3
 8000dd8:	d017      	beq.n	8000e0a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	68db      	ldr	r3, [r3, #12]
 8000dde:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	005b      	lsls	r3, r3, #1
 8000de4:	2203      	movs	r2, #3
 8000de6:	409a      	lsls	r2, r3
 8000de8:	0013      	movs	r3, r2
 8000dea:	43da      	mvns	r2, r3
 8000dec:	693b      	ldr	r3, [r7, #16]
 8000dee:	4013      	ands	r3, r2
 8000df0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	689a      	ldr	r2, [r3, #8]
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	005b      	lsls	r3, r3, #1
 8000dfa:	409a      	lsls	r2, r3
 8000dfc:	0013      	movs	r3, r2
 8000dfe:	693a      	ldr	r2, [r7, #16]
 8000e00:	4313      	orrs	r3, r2
 8000e02:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	693a      	ldr	r2, [r7, #16]
 8000e08:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	2203      	movs	r2, #3
 8000e10:	4013      	ands	r3, r2
 8000e12:	2b02      	cmp	r3, #2
 8000e14:	d123      	bne.n	8000e5e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	08da      	lsrs	r2, r3, #3
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	3208      	adds	r2, #8
 8000e1e:	0092      	lsls	r2, r2, #2
 8000e20:	58d3      	ldr	r3, [r2, r3]
 8000e22:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	2207      	movs	r2, #7
 8000e28:	4013      	ands	r3, r2
 8000e2a:	009b      	lsls	r3, r3, #2
 8000e2c:	220f      	movs	r2, #15
 8000e2e:	409a      	lsls	r2, r3
 8000e30:	0013      	movs	r3, r2
 8000e32:	43da      	mvns	r2, r3
 8000e34:	693b      	ldr	r3, [r7, #16]
 8000e36:	4013      	ands	r3, r2
 8000e38:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	691a      	ldr	r2, [r3, #16]
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	2107      	movs	r1, #7
 8000e42:	400b      	ands	r3, r1
 8000e44:	009b      	lsls	r3, r3, #2
 8000e46:	409a      	lsls	r2, r3
 8000e48:	0013      	movs	r3, r2
 8000e4a:	693a      	ldr	r2, [r7, #16]
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	08da      	lsrs	r2, r3, #3
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	3208      	adds	r2, #8
 8000e58:	0092      	lsls	r2, r2, #2
 8000e5a:	6939      	ldr	r1, [r7, #16]
 8000e5c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	005b      	lsls	r3, r3, #1
 8000e68:	2203      	movs	r2, #3
 8000e6a:	409a      	lsls	r2, r3
 8000e6c:	0013      	movs	r3, r2
 8000e6e:	43da      	mvns	r2, r3
 8000e70:	693b      	ldr	r3, [r7, #16]
 8000e72:	4013      	ands	r3, r2
 8000e74:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	2203      	movs	r2, #3
 8000e7c:	401a      	ands	r2, r3
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	005b      	lsls	r3, r3, #1
 8000e82:	409a      	lsls	r2, r3
 8000e84:	0013      	movs	r3, r2
 8000e86:	693a      	ldr	r2, [r7, #16]
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	693a      	ldr	r2, [r7, #16]
 8000e90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	685a      	ldr	r2, [r3, #4]
 8000e96:	23c0      	movs	r3, #192	; 0xc0
 8000e98:	029b      	lsls	r3, r3, #10
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	d100      	bne.n	8000ea0 <HAL_GPIO_Init+0x17c>
 8000e9e:	e0a0      	b.n	8000fe2 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ea0:	4b57      	ldr	r3, [pc, #348]	; (8001000 <HAL_GPIO_Init+0x2dc>)
 8000ea2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ea4:	4b56      	ldr	r3, [pc, #344]	; (8001000 <HAL_GPIO_Init+0x2dc>)
 8000ea6:	2101      	movs	r1, #1
 8000ea8:	430a      	orrs	r2, r1
 8000eaa:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000eac:	4a55      	ldr	r2, [pc, #340]	; (8001004 <HAL_GPIO_Init+0x2e0>)
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	089b      	lsrs	r3, r3, #2
 8000eb2:	3302      	adds	r3, #2
 8000eb4:	009b      	lsls	r3, r3, #2
 8000eb6:	589b      	ldr	r3, [r3, r2]
 8000eb8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	2203      	movs	r2, #3
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	009b      	lsls	r3, r3, #2
 8000ec2:	220f      	movs	r2, #15
 8000ec4:	409a      	lsls	r2, r3
 8000ec6:	0013      	movs	r3, r2
 8000ec8:	43da      	mvns	r2, r3
 8000eca:	693b      	ldr	r3, [r7, #16]
 8000ecc:	4013      	ands	r3, r2
 8000ece:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000ed0:	687a      	ldr	r2, [r7, #4]
 8000ed2:	23a0      	movs	r3, #160	; 0xa0
 8000ed4:	05db      	lsls	r3, r3, #23
 8000ed6:	429a      	cmp	r2, r3
 8000ed8:	d01f      	beq.n	8000f1a <HAL_GPIO_Init+0x1f6>
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4a4a      	ldr	r2, [pc, #296]	; (8001008 <HAL_GPIO_Init+0x2e4>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d019      	beq.n	8000f16 <HAL_GPIO_Init+0x1f2>
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4a49      	ldr	r2, [pc, #292]	; (800100c <HAL_GPIO_Init+0x2e8>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d013      	beq.n	8000f12 <HAL_GPIO_Init+0x1ee>
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4a48      	ldr	r2, [pc, #288]	; (8001010 <HAL_GPIO_Init+0x2ec>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d00d      	beq.n	8000f0e <HAL_GPIO_Init+0x1ea>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4a47      	ldr	r2, [pc, #284]	; (8001014 <HAL_GPIO_Init+0x2f0>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d007      	beq.n	8000f0a <HAL_GPIO_Init+0x1e6>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4a46      	ldr	r2, [pc, #280]	; (8001018 <HAL_GPIO_Init+0x2f4>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d101      	bne.n	8000f06 <HAL_GPIO_Init+0x1e2>
 8000f02:	2305      	movs	r3, #5
 8000f04:	e00a      	b.n	8000f1c <HAL_GPIO_Init+0x1f8>
 8000f06:	2306      	movs	r3, #6
 8000f08:	e008      	b.n	8000f1c <HAL_GPIO_Init+0x1f8>
 8000f0a:	2304      	movs	r3, #4
 8000f0c:	e006      	b.n	8000f1c <HAL_GPIO_Init+0x1f8>
 8000f0e:	2303      	movs	r3, #3
 8000f10:	e004      	b.n	8000f1c <HAL_GPIO_Init+0x1f8>
 8000f12:	2302      	movs	r3, #2
 8000f14:	e002      	b.n	8000f1c <HAL_GPIO_Init+0x1f8>
 8000f16:	2301      	movs	r3, #1
 8000f18:	e000      	b.n	8000f1c <HAL_GPIO_Init+0x1f8>
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	697a      	ldr	r2, [r7, #20]
 8000f1e:	2103      	movs	r1, #3
 8000f20:	400a      	ands	r2, r1
 8000f22:	0092      	lsls	r2, r2, #2
 8000f24:	4093      	lsls	r3, r2
 8000f26:	693a      	ldr	r2, [r7, #16]
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f2c:	4935      	ldr	r1, [pc, #212]	; (8001004 <HAL_GPIO_Init+0x2e0>)
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	089b      	lsrs	r3, r3, #2
 8000f32:	3302      	adds	r3, #2
 8000f34:	009b      	lsls	r3, r3, #2
 8000f36:	693a      	ldr	r2, [r7, #16]
 8000f38:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f3a:	4b38      	ldr	r3, [pc, #224]	; (800101c <HAL_GPIO_Init+0x2f8>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	43da      	mvns	r2, r3
 8000f44:	693b      	ldr	r3, [r7, #16]
 8000f46:	4013      	ands	r3, r2
 8000f48:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	685a      	ldr	r2, [r3, #4]
 8000f4e:	2380      	movs	r3, #128	; 0x80
 8000f50:	025b      	lsls	r3, r3, #9
 8000f52:	4013      	ands	r3, r2
 8000f54:	d003      	beq.n	8000f5e <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8000f56:	693a      	ldr	r2, [r7, #16]
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000f5e:	4b2f      	ldr	r3, [pc, #188]	; (800101c <HAL_GPIO_Init+0x2f8>)
 8000f60:	693a      	ldr	r2, [r7, #16]
 8000f62:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000f64:	4b2d      	ldr	r3, [pc, #180]	; (800101c <HAL_GPIO_Init+0x2f8>)
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	43da      	mvns	r2, r3
 8000f6e:	693b      	ldr	r3, [r7, #16]
 8000f70:	4013      	ands	r3, r2
 8000f72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	685a      	ldr	r2, [r3, #4]
 8000f78:	2380      	movs	r3, #128	; 0x80
 8000f7a:	029b      	lsls	r3, r3, #10
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	d003      	beq.n	8000f88 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000f80:	693a      	ldr	r2, [r7, #16]
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	4313      	orrs	r3, r2
 8000f86:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000f88:	4b24      	ldr	r3, [pc, #144]	; (800101c <HAL_GPIO_Init+0x2f8>)
 8000f8a:	693a      	ldr	r2, [r7, #16]
 8000f8c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f8e:	4b23      	ldr	r3, [pc, #140]	; (800101c <HAL_GPIO_Init+0x2f8>)
 8000f90:	689b      	ldr	r3, [r3, #8]
 8000f92:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	43da      	mvns	r2, r3
 8000f98:	693b      	ldr	r3, [r7, #16]
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	685a      	ldr	r2, [r3, #4]
 8000fa2:	2380      	movs	r3, #128	; 0x80
 8000fa4:	035b      	lsls	r3, r3, #13
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	d003      	beq.n	8000fb2 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8000faa:	693a      	ldr	r2, [r7, #16]
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000fb2:	4b1a      	ldr	r3, [pc, #104]	; (800101c <HAL_GPIO_Init+0x2f8>)
 8000fb4:	693a      	ldr	r2, [r7, #16]
 8000fb6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000fb8:	4b18      	ldr	r3, [pc, #96]	; (800101c <HAL_GPIO_Init+0x2f8>)
 8000fba:	68db      	ldr	r3, [r3, #12]
 8000fbc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	43da      	mvns	r2, r3
 8000fc2:	693b      	ldr	r3, [r7, #16]
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	685a      	ldr	r2, [r3, #4]
 8000fcc:	2380      	movs	r3, #128	; 0x80
 8000fce:	039b      	lsls	r3, r3, #14
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	d003      	beq.n	8000fdc <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8000fd4:	693a      	ldr	r2, [r7, #16]
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000fdc:	4b0f      	ldr	r3, [pc, #60]	; (800101c <HAL_GPIO_Init+0x2f8>)
 8000fde:	693a      	ldr	r2, [r7, #16]
 8000fe0:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	40da      	lsrs	r2, r3
 8000ff0:	1e13      	subs	r3, r2, #0
 8000ff2:	d000      	beq.n	8000ff6 <HAL_GPIO_Init+0x2d2>
 8000ff4:	e6a2      	b.n	8000d3c <HAL_GPIO_Init+0x18>
  }
}
 8000ff6:	46c0      	nop			; (mov r8, r8)
 8000ff8:	46c0      	nop			; (mov r8, r8)
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	b006      	add	sp, #24
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	40021000 	.word	0x40021000
 8001004:	40010000 	.word	0x40010000
 8001008:	50000400 	.word	0x50000400
 800100c:	50000800 	.word	0x50000800
 8001010:	50000c00 	.word	0x50000c00
 8001014:	50001000 	.word	0x50001000
 8001018:	50001c00 	.word	0x50001c00
 800101c:	40010400 	.word	0x40010400

08001020 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	0008      	movs	r0, r1
 800102a:	0011      	movs	r1, r2
 800102c:	1cbb      	adds	r3, r7, #2
 800102e:	1c02      	adds	r2, r0, #0
 8001030:	801a      	strh	r2, [r3, #0]
 8001032:	1c7b      	adds	r3, r7, #1
 8001034:	1c0a      	adds	r2, r1, #0
 8001036:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001038:	1c7b      	adds	r3, r7, #1
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d004      	beq.n	800104a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001040:	1cbb      	adds	r3, r7, #2
 8001042:	881a      	ldrh	r2, [r3, #0]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001048:	e003      	b.n	8001052 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800104a:	1cbb      	adds	r3, r7, #2
 800104c:	881a      	ldrh	r2, [r3, #0]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001052:	46c0      	nop			; (mov r8, r8)
 8001054:	46bd      	mov	sp, r7
 8001056:	b002      	add	sp, #8
 8001058:	bd80      	pop	{r7, pc}
	...

0800105c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d101      	bne.n	800106e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800106a:	2301      	movs	r3, #1
 800106c:	e082      	b.n	8001174 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2241      	movs	r2, #65	; 0x41
 8001072:	5c9b      	ldrb	r3, [r3, r2]
 8001074:	b2db      	uxtb	r3, r3
 8001076:	2b00      	cmp	r3, #0
 8001078:	d107      	bne.n	800108a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2240      	movs	r2, #64	; 0x40
 800107e:	2100      	movs	r1, #0
 8001080:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	0018      	movs	r0, r3
 8001086:	f7ff fbfd 	bl	8000884 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2241      	movs	r2, #65	; 0x41
 800108e:	2124      	movs	r1, #36	; 0x24
 8001090:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	2101      	movs	r1, #1
 800109e:	438a      	bics	r2, r1
 80010a0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	685a      	ldr	r2, [r3, #4]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4934      	ldr	r1, [pc, #208]	; (800117c <HAL_I2C_Init+0x120>)
 80010ac:	400a      	ands	r2, r1
 80010ae:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	689a      	ldr	r2, [r3, #8]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4931      	ldr	r1, [pc, #196]	; (8001180 <HAL_I2C_Init+0x124>)
 80010bc:	400a      	ands	r2, r1
 80010be:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	68db      	ldr	r3, [r3, #12]
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d108      	bne.n	80010da <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	689a      	ldr	r2, [r3, #8]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	2180      	movs	r1, #128	; 0x80
 80010d2:	0209      	lsls	r1, r1, #8
 80010d4:	430a      	orrs	r2, r1
 80010d6:	609a      	str	r2, [r3, #8]
 80010d8:	e007      	b.n	80010ea <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	689a      	ldr	r2, [r3, #8]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	2184      	movs	r1, #132	; 0x84
 80010e4:	0209      	lsls	r1, r1, #8
 80010e6:	430a      	orrs	r2, r1
 80010e8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	68db      	ldr	r3, [r3, #12]
 80010ee:	2b02      	cmp	r3, #2
 80010f0:	d104      	bne.n	80010fc <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	2280      	movs	r2, #128	; 0x80
 80010f8:	0112      	lsls	r2, r2, #4
 80010fa:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	685a      	ldr	r2, [r3, #4]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	491f      	ldr	r1, [pc, #124]	; (8001184 <HAL_I2C_Init+0x128>)
 8001108:	430a      	orrs	r2, r1
 800110a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	68da      	ldr	r2, [r3, #12]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	491a      	ldr	r1, [pc, #104]	; (8001180 <HAL_I2C_Init+0x124>)
 8001118:	400a      	ands	r2, r1
 800111a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	691a      	ldr	r2, [r3, #16]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	695b      	ldr	r3, [r3, #20]
 8001124:	431a      	orrs	r2, r3
 8001126:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	699b      	ldr	r3, [r3, #24]
 800112c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	430a      	orrs	r2, r1
 8001134:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	69d9      	ldr	r1, [r3, #28]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6a1a      	ldr	r2, [r3, #32]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	430a      	orrs	r2, r1
 8001144:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	2101      	movs	r1, #1
 8001152:	430a      	orrs	r2, r1
 8001154:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2200      	movs	r2, #0
 800115a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2241      	movs	r2, #65	; 0x41
 8001160:	2120      	movs	r1, #32
 8001162:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2200      	movs	r2, #0
 8001168:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2242      	movs	r2, #66	; 0x42
 800116e:	2100      	movs	r1, #0
 8001170:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001172:	2300      	movs	r3, #0
}
 8001174:	0018      	movs	r0, r3
 8001176:	46bd      	mov	sp, r7
 8001178:	b002      	add	sp, #8
 800117a:	bd80      	pop	{r7, pc}
 800117c:	f0ffffff 	.word	0xf0ffffff
 8001180:	ffff7fff 	.word	0xffff7fff
 8001184:	02008000 	.word	0x02008000

08001188 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001188:	b590      	push	{r4, r7, lr}
 800118a:	b089      	sub	sp, #36	; 0x24
 800118c:	af02      	add	r7, sp, #8
 800118e:	60f8      	str	r0, [r7, #12]
 8001190:	0008      	movs	r0, r1
 8001192:	607a      	str	r2, [r7, #4]
 8001194:	0019      	movs	r1, r3
 8001196:	230a      	movs	r3, #10
 8001198:	18fb      	adds	r3, r7, r3
 800119a:	1c02      	adds	r2, r0, #0
 800119c:	801a      	strh	r2, [r3, #0]
 800119e:	2308      	movs	r3, #8
 80011a0:	18fb      	adds	r3, r7, r3
 80011a2:	1c0a      	adds	r2, r1, #0
 80011a4:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	2241      	movs	r2, #65	; 0x41
 80011aa:	5c9b      	ldrb	r3, [r3, r2]
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	2b20      	cmp	r3, #32
 80011b0:	d000      	beq.n	80011b4 <HAL_I2C_Master_Transmit+0x2c>
 80011b2:	e0e7      	b.n	8001384 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	2240      	movs	r2, #64	; 0x40
 80011b8:	5c9b      	ldrb	r3, [r3, r2]
 80011ba:	2b01      	cmp	r3, #1
 80011bc:	d101      	bne.n	80011c2 <HAL_I2C_Master_Transmit+0x3a>
 80011be:	2302      	movs	r3, #2
 80011c0:	e0e1      	b.n	8001386 <HAL_I2C_Master_Transmit+0x1fe>
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	2240      	movs	r2, #64	; 0x40
 80011c6:	2101      	movs	r1, #1
 80011c8:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80011ca:	f7ff fcc9 	bl	8000b60 <HAL_GetTick>
 80011ce:	0003      	movs	r3, r0
 80011d0:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80011d2:	2380      	movs	r3, #128	; 0x80
 80011d4:	0219      	lsls	r1, r3, #8
 80011d6:	68f8      	ldr	r0, [r7, #12]
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	9300      	str	r3, [sp, #0]
 80011dc:	2319      	movs	r3, #25
 80011de:	2201      	movs	r2, #1
 80011e0:	f000 fa04 	bl	80015ec <I2C_WaitOnFlagUntilTimeout>
 80011e4:	1e03      	subs	r3, r0, #0
 80011e6:	d001      	beq.n	80011ec <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80011e8:	2301      	movs	r3, #1
 80011ea:	e0cc      	b.n	8001386 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	2241      	movs	r2, #65	; 0x41
 80011f0:	2121      	movs	r1, #33	; 0x21
 80011f2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	2242      	movs	r2, #66	; 0x42
 80011f8:	2110      	movs	r1, #16
 80011fa:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	2200      	movs	r2, #0
 8001200:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	687a      	ldr	r2, [r7, #4]
 8001206:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	2208      	movs	r2, #8
 800120c:	18ba      	adds	r2, r7, r2
 800120e:	8812      	ldrh	r2, [r2, #0]
 8001210:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	2200      	movs	r2, #0
 8001216:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800121c:	b29b      	uxth	r3, r3
 800121e:	2bff      	cmp	r3, #255	; 0xff
 8001220:	d911      	bls.n	8001246 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	22ff      	movs	r2, #255	; 0xff
 8001226:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800122c:	b2da      	uxtb	r2, r3
 800122e:	2380      	movs	r3, #128	; 0x80
 8001230:	045c      	lsls	r4, r3, #17
 8001232:	230a      	movs	r3, #10
 8001234:	18fb      	adds	r3, r7, r3
 8001236:	8819      	ldrh	r1, [r3, #0]
 8001238:	68f8      	ldr	r0, [r7, #12]
 800123a:	4b55      	ldr	r3, [pc, #340]	; (8001390 <HAL_I2C_Master_Transmit+0x208>)
 800123c:	9300      	str	r3, [sp, #0]
 800123e:	0023      	movs	r3, r4
 8001240:	f000 fb74 	bl	800192c <I2C_TransferConfig>
 8001244:	e075      	b.n	8001332 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800124a:	b29a      	uxth	r2, r3
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001254:	b2da      	uxtb	r2, r3
 8001256:	2380      	movs	r3, #128	; 0x80
 8001258:	049c      	lsls	r4, r3, #18
 800125a:	230a      	movs	r3, #10
 800125c:	18fb      	adds	r3, r7, r3
 800125e:	8819      	ldrh	r1, [r3, #0]
 8001260:	68f8      	ldr	r0, [r7, #12]
 8001262:	4b4b      	ldr	r3, [pc, #300]	; (8001390 <HAL_I2C_Master_Transmit+0x208>)
 8001264:	9300      	str	r3, [sp, #0]
 8001266:	0023      	movs	r3, r4
 8001268:	f000 fb60 	bl	800192c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800126c:	e061      	b.n	8001332 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800126e:	697a      	ldr	r2, [r7, #20]
 8001270:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	0018      	movs	r0, r3
 8001276:	f000 f9f8 	bl	800166a <I2C_WaitOnTXISFlagUntilTimeout>
 800127a:	1e03      	subs	r3, r0, #0
 800127c:	d001      	beq.n	8001282 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 800127e:	2301      	movs	r3, #1
 8001280:	e081      	b.n	8001386 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001286:	781a      	ldrb	r2, [r3, #0]
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001292:	1c5a      	adds	r2, r3, #1
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800129c:	b29b      	uxth	r3, r3
 800129e:	3b01      	subs	r3, #1
 80012a0:	b29a      	uxth	r2, r3
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012aa:	3b01      	subs	r3, #1
 80012ac:	b29a      	uxth	r2, r3
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012b6:	b29b      	uxth	r3, r3
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d03a      	beq.n	8001332 <HAL_I2C_Master_Transmit+0x1aa>
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d136      	bne.n	8001332 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80012c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80012c6:	68f8      	ldr	r0, [r7, #12]
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	9300      	str	r3, [sp, #0]
 80012cc:	0013      	movs	r3, r2
 80012ce:	2200      	movs	r2, #0
 80012d0:	2180      	movs	r1, #128	; 0x80
 80012d2:	f000 f98b 	bl	80015ec <I2C_WaitOnFlagUntilTimeout>
 80012d6:	1e03      	subs	r3, r0, #0
 80012d8:	d001      	beq.n	80012de <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	e053      	b.n	8001386 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012e2:	b29b      	uxth	r3, r3
 80012e4:	2bff      	cmp	r3, #255	; 0xff
 80012e6:	d911      	bls.n	800130c <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	22ff      	movs	r2, #255	; 0xff
 80012ec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012f2:	b2da      	uxtb	r2, r3
 80012f4:	2380      	movs	r3, #128	; 0x80
 80012f6:	045c      	lsls	r4, r3, #17
 80012f8:	230a      	movs	r3, #10
 80012fa:	18fb      	adds	r3, r7, r3
 80012fc:	8819      	ldrh	r1, [r3, #0]
 80012fe:	68f8      	ldr	r0, [r7, #12]
 8001300:	2300      	movs	r3, #0
 8001302:	9300      	str	r3, [sp, #0]
 8001304:	0023      	movs	r3, r4
 8001306:	f000 fb11 	bl	800192c <I2C_TransferConfig>
 800130a:	e012      	b.n	8001332 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001310:	b29a      	uxth	r2, r3
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800131a:	b2da      	uxtb	r2, r3
 800131c:	2380      	movs	r3, #128	; 0x80
 800131e:	049c      	lsls	r4, r3, #18
 8001320:	230a      	movs	r3, #10
 8001322:	18fb      	adds	r3, r7, r3
 8001324:	8819      	ldrh	r1, [r3, #0]
 8001326:	68f8      	ldr	r0, [r7, #12]
 8001328:	2300      	movs	r3, #0
 800132a:	9300      	str	r3, [sp, #0]
 800132c:	0023      	movs	r3, r4
 800132e:	f000 fafd 	bl	800192c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001336:	b29b      	uxth	r3, r3
 8001338:	2b00      	cmp	r3, #0
 800133a:	d198      	bne.n	800126e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800133c:	697a      	ldr	r2, [r7, #20]
 800133e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	0018      	movs	r0, r3
 8001344:	f000 f9d0 	bl	80016e8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001348:	1e03      	subs	r3, r0, #0
 800134a:	d001      	beq.n	8001350 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 800134c:	2301      	movs	r3, #1
 800134e:	e01a      	b.n	8001386 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	2220      	movs	r2, #32
 8001356:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	685a      	ldr	r2, [r3, #4]
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	490c      	ldr	r1, [pc, #48]	; (8001394 <HAL_I2C_Master_Transmit+0x20c>)
 8001364:	400a      	ands	r2, r1
 8001366:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	2241      	movs	r2, #65	; 0x41
 800136c:	2120      	movs	r1, #32
 800136e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	2242      	movs	r2, #66	; 0x42
 8001374:	2100      	movs	r1, #0
 8001376:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	2240      	movs	r2, #64	; 0x40
 800137c:	2100      	movs	r1, #0
 800137e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001380:	2300      	movs	r3, #0
 8001382:	e000      	b.n	8001386 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8001384:	2302      	movs	r3, #2
  }
}
 8001386:	0018      	movs	r0, r3
 8001388:	46bd      	mov	sp, r7
 800138a:	b007      	add	sp, #28
 800138c:	bd90      	pop	{r4, r7, pc}
 800138e:	46c0      	nop			; (mov r8, r8)
 8001390:	80002000 	.word	0x80002000
 8001394:	fe00e800 	.word	0xfe00e800

08001398 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001398:	b590      	push	{r4, r7, lr}
 800139a:	b089      	sub	sp, #36	; 0x24
 800139c:	af02      	add	r7, sp, #8
 800139e:	60f8      	str	r0, [r7, #12]
 80013a0:	0008      	movs	r0, r1
 80013a2:	607a      	str	r2, [r7, #4]
 80013a4:	0019      	movs	r1, r3
 80013a6:	230a      	movs	r3, #10
 80013a8:	18fb      	adds	r3, r7, r3
 80013aa:	1c02      	adds	r2, r0, #0
 80013ac:	801a      	strh	r2, [r3, #0]
 80013ae:	2308      	movs	r3, #8
 80013b0:	18fb      	adds	r3, r7, r3
 80013b2:	1c0a      	adds	r2, r1, #0
 80013b4:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	2241      	movs	r2, #65	; 0x41
 80013ba:	5c9b      	ldrb	r3, [r3, r2]
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	2b20      	cmp	r3, #32
 80013c0:	d000      	beq.n	80013c4 <HAL_I2C_Master_Receive+0x2c>
 80013c2:	e0e8      	b.n	8001596 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	2240      	movs	r2, #64	; 0x40
 80013c8:	5c9b      	ldrb	r3, [r3, r2]
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	d101      	bne.n	80013d2 <HAL_I2C_Master_Receive+0x3a>
 80013ce:	2302      	movs	r3, #2
 80013d0:	e0e2      	b.n	8001598 <HAL_I2C_Master_Receive+0x200>
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	2240      	movs	r2, #64	; 0x40
 80013d6:	2101      	movs	r1, #1
 80013d8:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80013da:	f7ff fbc1 	bl	8000b60 <HAL_GetTick>
 80013de:	0003      	movs	r3, r0
 80013e0:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80013e2:	2380      	movs	r3, #128	; 0x80
 80013e4:	0219      	lsls	r1, r3, #8
 80013e6:	68f8      	ldr	r0, [r7, #12]
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	9300      	str	r3, [sp, #0]
 80013ec:	2319      	movs	r3, #25
 80013ee:	2201      	movs	r2, #1
 80013f0:	f000 f8fc 	bl	80015ec <I2C_WaitOnFlagUntilTimeout>
 80013f4:	1e03      	subs	r3, r0, #0
 80013f6:	d001      	beq.n	80013fc <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 80013f8:	2301      	movs	r3, #1
 80013fa:	e0cd      	b.n	8001598 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	2241      	movs	r2, #65	; 0x41
 8001400:	2122      	movs	r1, #34	; 0x22
 8001402:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	2242      	movs	r2, #66	; 0x42
 8001408:	2110      	movs	r1, #16
 800140a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	2200      	movs	r2, #0
 8001410:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	687a      	ldr	r2, [r7, #4]
 8001416:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	2208      	movs	r2, #8
 800141c:	18ba      	adds	r2, r7, r2
 800141e:	8812      	ldrh	r2, [r2, #0]
 8001420:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	2200      	movs	r2, #0
 8001426:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800142c:	b29b      	uxth	r3, r3
 800142e:	2bff      	cmp	r3, #255	; 0xff
 8001430:	d911      	bls.n	8001456 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	22ff      	movs	r2, #255	; 0xff
 8001436:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800143c:	b2da      	uxtb	r2, r3
 800143e:	2380      	movs	r3, #128	; 0x80
 8001440:	045c      	lsls	r4, r3, #17
 8001442:	230a      	movs	r3, #10
 8001444:	18fb      	adds	r3, r7, r3
 8001446:	8819      	ldrh	r1, [r3, #0]
 8001448:	68f8      	ldr	r0, [r7, #12]
 800144a:	4b55      	ldr	r3, [pc, #340]	; (80015a0 <HAL_I2C_Master_Receive+0x208>)
 800144c:	9300      	str	r3, [sp, #0]
 800144e:	0023      	movs	r3, r4
 8001450:	f000 fa6c 	bl	800192c <I2C_TransferConfig>
 8001454:	e076      	b.n	8001544 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800145a:	b29a      	uxth	r2, r3
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001464:	b2da      	uxtb	r2, r3
 8001466:	2380      	movs	r3, #128	; 0x80
 8001468:	049c      	lsls	r4, r3, #18
 800146a:	230a      	movs	r3, #10
 800146c:	18fb      	adds	r3, r7, r3
 800146e:	8819      	ldrh	r1, [r3, #0]
 8001470:	68f8      	ldr	r0, [r7, #12]
 8001472:	4b4b      	ldr	r3, [pc, #300]	; (80015a0 <HAL_I2C_Master_Receive+0x208>)
 8001474:	9300      	str	r3, [sp, #0]
 8001476:	0023      	movs	r3, r4
 8001478:	f000 fa58 	bl	800192c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800147c:	e062      	b.n	8001544 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800147e:	697a      	ldr	r2, [r7, #20]
 8001480:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	0018      	movs	r0, r3
 8001486:	f000 f96b 	bl	8001760 <I2C_WaitOnRXNEFlagUntilTimeout>
 800148a:	1e03      	subs	r3, r0, #0
 800148c:	d001      	beq.n	8001492 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	e082      	b.n	8001598 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800149c:	b2d2      	uxtb	r2, r2
 800149e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014a4:	1c5a      	adds	r2, r3, #1
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014ae:	3b01      	subs	r3, #1
 80014b0:	b29a      	uxth	r2, r3
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014ba:	b29b      	uxth	r3, r3
 80014bc:	3b01      	subs	r3, #1
 80014be:	b29a      	uxth	r2, r3
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014c8:	b29b      	uxth	r3, r3
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d03a      	beq.n	8001544 <HAL_I2C_Master_Receive+0x1ac>
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d136      	bne.n	8001544 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80014d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80014d8:	68f8      	ldr	r0, [r7, #12]
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	9300      	str	r3, [sp, #0]
 80014de:	0013      	movs	r3, r2
 80014e0:	2200      	movs	r2, #0
 80014e2:	2180      	movs	r1, #128	; 0x80
 80014e4:	f000 f882 	bl	80015ec <I2C_WaitOnFlagUntilTimeout>
 80014e8:	1e03      	subs	r3, r0, #0
 80014ea:	d001      	beq.n	80014f0 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 80014ec:	2301      	movs	r3, #1
 80014ee:	e053      	b.n	8001598 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014f4:	b29b      	uxth	r3, r3
 80014f6:	2bff      	cmp	r3, #255	; 0xff
 80014f8:	d911      	bls.n	800151e <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	22ff      	movs	r2, #255	; 0xff
 80014fe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001504:	b2da      	uxtb	r2, r3
 8001506:	2380      	movs	r3, #128	; 0x80
 8001508:	045c      	lsls	r4, r3, #17
 800150a:	230a      	movs	r3, #10
 800150c:	18fb      	adds	r3, r7, r3
 800150e:	8819      	ldrh	r1, [r3, #0]
 8001510:	68f8      	ldr	r0, [r7, #12]
 8001512:	2300      	movs	r3, #0
 8001514:	9300      	str	r3, [sp, #0]
 8001516:	0023      	movs	r3, r4
 8001518:	f000 fa08 	bl	800192c <I2C_TransferConfig>
 800151c:	e012      	b.n	8001544 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001522:	b29a      	uxth	r2, r3
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800152c:	b2da      	uxtb	r2, r3
 800152e:	2380      	movs	r3, #128	; 0x80
 8001530:	049c      	lsls	r4, r3, #18
 8001532:	230a      	movs	r3, #10
 8001534:	18fb      	adds	r3, r7, r3
 8001536:	8819      	ldrh	r1, [r3, #0]
 8001538:	68f8      	ldr	r0, [r7, #12]
 800153a:	2300      	movs	r3, #0
 800153c:	9300      	str	r3, [sp, #0]
 800153e:	0023      	movs	r3, r4
 8001540:	f000 f9f4 	bl	800192c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001548:	b29b      	uxth	r3, r3
 800154a:	2b00      	cmp	r3, #0
 800154c:	d197      	bne.n	800147e <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800154e:	697a      	ldr	r2, [r7, #20]
 8001550:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	0018      	movs	r0, r3
 8001556:	f000 f8c7 	bl	80016e8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800155a:	1e03      	subs	r3, r0, #0
 800155c:	d001      	beq.n	8001562 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	e01a      	b.n	8001598 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	2220      	movs	r2, #32
 8001568:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	685a      	ldr	r2, [r3, #4]
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	490b      	ldr	r1, [pc, #44]	; (80015a4 <HAL_I2C_Master_Receive+0x20c>)
 8001576:	400a      	ands	r2, r1
 8001578:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	2241      	movs	r2, #65	; 0x41
 800157e:	2120      	movs	r1, #32
 8001580:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	2242      	movs	r2, #66	; 0x42
 8001586:	2100      	movs	r1, #0
 8001588:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	2240      	movs	r2, #64	; 0x40
 800158e:	2100      	movs	r1, #0
 8001590:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001592:	2300      	movs	r3, #0
 8001594:	e000      	b.n	8001598 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8001596:	2302      	movs	r3, #2
  }
}
 8001598:	0018      	movs	r0, r3
 800159a:	46bd      	mov	sp, r7
 800159c:	b007      	add	sp, #28
 800159e:	bd90      	pop	{r4, r7, pc}
 80015a0:	80002400 	.word	0x80002400
 80015a4:	fe00e800 	.word	0xfe00e800

080015a8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	699b      	ldr	r3, [r3, #24]
 80015b6:	2202      	movs	r2, #2
 80015b8:	4013      	ands	r3, r2
 80015ba:	2b02      	cmp	r3, #2
 80015bc:	d103      	bne.n	80015c6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	2200      	movs	r2, #0
 80015c4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	699b      	ldr	r3, [r3, #24]
 80015cc:	2201      	movs	r2, #1
 80015ce:	4013      	ands	r3, r2
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d007      	beq.n	80015e4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	699a      	ldr	r2, [r3, #24]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	2101      	movs	r1, #1
 80015e0:	430a      	orrs	r2, r1
 80015e2:	619a      	str	r2, [r3, #24]
  }
}
 80015e4:	46c0      	nop			; (mov r8, r8)
 80015e6:	46bd      	mov	sp, r7
 80015e8:	b002      	add	sp, #8
 80015ea:	bd80      	pop	{r7, pc}

080015ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	60f8      	str	r0, [r7, #12]
 80015f4:	60b9      	str	r1, [r7, #8]
 80015f6:	603b      	str	r3, [r7, #0]
 80015f8:	1dfb      	adds	r3, r7, #7
 80015fa:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80015fc:	e021      	b.n	8001642 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	3301      	adds	r3, #1
 8001602:	d01e      	beq.n	8001642 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001604:	f7ff faac 	bl	8000b60 <HAL_GetTick>
 8001608:	0002      	movs	r2, r0
 800160a:	69bb      	ldr	r3, [r7, #24]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	683a      	ldr	r2, [r7, #0]
 8001610:	429a      	cmp	r2, r3
 8001612:	d302      	bcc.n	800161a <I2C_WaitOnFlagUntilTimeout+0x2e>
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d113      	bne.n	8001642 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800161e:	2220      	movs	r2, #32
 8001620:	431a      	orrs	r2, r3
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	2241      	movs	r2, #65	; 0x41
 800162a:	2120      	movs	r1, #32
 800162c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	2242      	movs	r2, #66	; 0x42
 8001632:	2100      	movs	r1, #0
 8001634:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	2240      	movs	r2, #64	; 0x40
 800163a:	2100      	movs	r1, #0
 800163c:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	e00f      	b.n	8001662 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	699b      	ldr	r3, [r3, #24]
 8001648:	68ba      	ldr	r2, [r7, #8]
 800164a:	4013      	ands	r3, r2
 800164c:	68ba      	ldr	r2, [r7, #8]
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	425a      	negs	r2, r3
 8001652:	4153      	adcs	r3, r2
 8001654:	b2db      	uxtb	r3, r3
 8001656:	001a      	movs	r2, r3
 8001658:	1dfb      	adds	r3, r7, #7
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	429a      	cmp	r2, r3
 800165e:	d0ce      	beq.n	80015fe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001660:	2300      	movs	r3, #0
}
 8001662:	0018      	movs	r0, r3
 8001664:	46bd      	mov	sp, r7
 8001666:	b004      	add	sp, #16
 8001668:	bd80      	pop	{r7, pc}

0800166a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800166a:	b580      	push	{r7, lr}
 800166c:	b084      	sub	sp, #16
 800166e:	af00      	add	r7, sp, #0
 8001670:	60f8      	str	r0, [r7, #12]
 8001672:	60b9      	str	r1, [r7, #8]
 8001674:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001676:	e02b      	b.n	80016d0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	68b9      	ldr	r1, [r7, #8]
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	0018      	movs	r0, r3
 8001680:	f000 f8da 	bl	8001838 <I2C_IsAcknowledgeFailed>
 8001684:	1e03      	subs	r3, r0, #0
 8001686:	d001      	beq.n	800168c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001688:	2301      	movs	r3, #1
 800168a:	e029      	b.n	80016e0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	3301      	adds	r3, #1
 8001690:	d01e      	beq.n	80016d0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001692:	f7ff fa65 	bl	8000b60 <HAL_GetTick>
 8001696:	0002      	movs	r2, r0
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	1ad3      	subs	r3, r2, r3
 800169c:	68ba      	ldr	r2, [r7, #8]
 800169e:	429a      	cmp	r2, r3
 80016a0:	d302      	bcc.n	80016a8 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80016a2:	68bb      	ldr	r3, [r7, #8]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d113      	bne.n	80016d0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ac:	2220      	movs	r2, #32
 80016ae:	431a      	orrs	r2, r3
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	2241      	movs	r2, #65	; 0x41
 80016b8:	2120      	movs	r1, #32
 80016ba:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	2242      	movs	r2, #66	; 0x42
 80016c0:	2100      	movs	r1, #0
 80016c2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	2240      	movs	r2, #64	; 0x40
 80016c8:	2100      	movs	r1, #0
 80016ca:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	e007      	b.n	80016e0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	699b      	ldr	r3, [r3, #24]
 80016d6:	2202      	movs	r2, #2
 80016d8:	4013      	ands	r3, r2
 80016da:	2b02      	cmp	r3, #2
 80016dc:	d1cc      	bne.n	8001678 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80016de:	2300      	movs	r3, #0
}
 80016e0:	0018      	movs	r0, r3
 80016e2:	46bd      	mov	sp, r7
 80016e4:	b004      	add	sp, #16
 80016e6:	bd80      	pop	{r7, pc}

080016e8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	60f8      	str	r0, [r7, #12]
 80016f0:	60b9      	str	r1, [r7, #8]
 80016f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80016f4:	e028      	b.n	8001748 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80016f6:	687a      	ldr	r2, [r7, #4]
 80016f8:	68b9      	ldr	r1, [r7, #8]
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	0018      	movs	r0, r3
 80016fe:	f000 f89b 	bl	8001838 <I2C_IsAcknowledgeFailed>
 8001702:	1e03      	subs	r3, r0, #0
 8001704:	d001      	beq.n	800170a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	e026      	b.n	8001758 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800170a:	f7ff fa29 	bl	8000b60 <HAL_GetTick>
 800170e:	0002      	movs	r2, r0
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	68ba      	ldr	r2, [r7, #8]
 8001716:	429a      	cmp	r2, r3
 8001718:	d302      	bcc.n	8001720 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800171a:	68bb      	ldr	r3, [r7, #8]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d113      	bne.n	8001748 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001724:	2220      	movs	r2, #32
 8001726:	431a      	orrs	r2, r3
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	2241      	movs	r2, #65	; 0x41
 8001730:	2120      	movs	r1, #32
 8001732:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	2242      	movs	r2, #66	; 0x42
 8001738:	2100      	movs	r1, #0
 800173a:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	2240      	movs	r2, #64	; 0x40
 8001740:	2100      	movs	r1, #0
 8001742:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001744:	2301      	movs	r3, #1
 8001746:	e007      	b.n	8001758 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	699b      	ldr	r3, [r3, #24]
 800174e:	2220      	movs	r2, #32
 8001750:	4013      	ands	r3, r2
 8001752:	2b20      	cmp	r3, #32
 8001754:	d1cf      	bne.n	80016f6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001756:	2300      	movs	r3, #0
}
 8001758:	0018      	movs	r0, r3
 800175a:	46bd      	mov	sp, r7
 800175c:	b004      	add	sp, #16
 800175e:	bd80      	pop	{r7, pc}

08001760 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af00      	add	r7, sp, #0
 8001766:	60f8      	str	r0, [r7, #12]
 8001768:	60b9      	str	r1, [r7, #8]
 800176a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800176c:	e055      	b.n	800181a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800176e:	687a      	ldr	r2, [r7, #4]
 8001770:	68b9      	ldr	r1, [r7, #8]
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	0018      	movs	r0, r3
 8001776:	f000 f85f 	bl	8001838 <I2C_IsAcknowledgeFailed>
 800177a:	1e03      	subs	r3, r0, #0
 800177c:	d001      	beq.n	8001782 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	e053      	b.n	800182a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	699b      	ldr	r3, [r3, #24]
 8001788:	2220      	movs	r2, #32
 800178a:	4013      	ands	r3, r2
 800178c:	2b20      	cmp	r3, #32
 800178e:	d129      	bne.n	80017e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	699b      	ldr	r3, [r3, #24]
 8001796:	2204      	movs	r2, #4
 8001798:	4013      	ands	r3, r2
 800179a:	2b04      	cmp	r3, #4
 800179c:	d105      	bne.n	80017aa <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80017a6:	2300      	movs	r3, #0
 80017a8:	e03f      	b.n	800182a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	2220      	movs	r2, #32
 80017b0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	685a      	ldr	r2, [r3, #4]
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	491d      	ldr	r1, [pc, #116]	; (8001834 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 80017be:	400a      	ands	r2, r1
 80017c0:	605a      	str	r2, [r3, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	2200      	movs	r2, #0
 80017c6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	2241      	movs	r2, #65	; 0x41
 80017cc:	2120      	movs	r1, #32
 80017ce:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	2242      	movs	r2, #66	; 0x42
 80017d4:	2100      	movs	r1, #0
 80017d6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	2240      	movs	r2, #64	; 0x40
 80017dc:	2100      	movs	r1, #0
 80017de:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	e022      	b.n	800182a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80017e4:	f7ff f9bc 	bl	8000b60 <HAL_GetTick>
 80017e8:	0002      	movs	r2, r0
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	68ba      	ldr	r2, [r7, #8]
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d302      	bcc.n	80017fa <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d10f      	bne.n	800181a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017fe:	2220      	movs	r2, #32
 8001800:	431a      	orrs	r2, r3
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	2241      	movs	r2, #65	; 0x41
 800180a:	2120      	movs	r1, #32
 800180c:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	2240      	movs	r2, #64	; 0x40
 8001812:	2100      	movs	r1, #0
 8001814:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e007      	b.n	800182a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	699b      	ldr	r3, [r3, #24]
 8001820:	2204      	movs	r2, #4
 8001822:	4013      	ands	r3, r2
 8001824:	2b04      	cmp	r3, #4
 8001826:	d1a2      	bne.n	800176e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001828:	2300      	movs	r3, #0
}
 800182a:	0018      	movs	r0, r3
 800182c:	46bd      	mov	sp, r7
 800182e:	b004      	add	sp, #16
 8001830:	bd80      	pop	{r7, pc}
 8001832:	46c0      	nop			; (mov r8, r8)
 8001834:	fe00e800 	.word	0xfe00e800

08001838 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af00      	add	r7, sp, #0
 800183e:	60f8      	str	r0, [r7, #12]
 8001840:	60b9      	str	r1, [r7, #8]
 8001842:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	699b      	ldr	r3, [r3, #24]
 800184a:	2210      	movs	r2, #16
 800184c:	4013      	ands	r3, r2
 800184e:	2b10      	cmp	r3, #16
 8001850:	d164      	bne.n	800191c <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	685a      	ldr	r2, [r3, #4]
 8001858:	2380      	movs	r3, #128	; 0x80
 800185a:	049b      	lsls	r3, r3, #18
 800185c:	401a      	ands	r2, r3
 800185e:	2380      	movs	r3, #128	; 0x80
 8001860:	049b      	lsls	r3, r3, #18
 8001862:	429a      	cmp	r2, r3
 8001864:	d02b      	beq.n	80018be <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	685a      	ldr	r2, [r3, #4]
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	2180      	movs	r1, #128	; 0x80
 8001872:	01c9      	lsls	r1, r1, #7
 8001874:	430a      	orrs	r2, r1
 8001876:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001878:	e021      	b.n	80018be <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	3301      	adds	r3, #1
 800187e:	d01e      	beq.n	80018be <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001880:	f7ff f96e 	bl	8000b60 <HAL_GetTick>
 8001884:	0002      	movs	r2, r0
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	68ba      	ldr	r2, [r7, #8]
 800188c:	429a      	cmp	r2, r3
 800188e:	d302      	bcc.n	8001896 <I2C_IsAcknowledgeFailed+0x5e>
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d113      	bne.n	80018be <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800189a:	2220      	movs	r2, #32
 800189c:	431a      	orrs	r2, r3
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	2241      	movs	r2, #65	; 0x41
 80018a6:	2120      	movs	r1, #32
 80018a8:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	2242      	movs	r2, #66	; 0x42
 80018ae:	2100      	movs	r1, #0
 80018b0:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	2240      	movs	r2, #64	; 0x40
 80018b6:	2100      	movs	r1, #0
 80018b8:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e02f      	b.n	800191e <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	699b      	ldr	r3, [r3, #24]
 80018c4:	2220      	movs	r2, #32
 80018c6:	4013      	ands	r3, r2
 80018c8:	2b20      	cmp	r3, #32
 80018ca:	d1d6      	bne.n	800187a <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	2210      	movs	r2, #16
 80018d2:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	2220      	movs	r2, #32
 80018da:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	0018      	movs	r0, r3
 80018e0:	f7ff fe62 	bl	80015a8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	685a      	ldr	r2, [r3, #4]
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	490e      	ldr	r1, [pc, #56]	; (8001928 <I2C_IsAcknowledgeFailed+0xf0>)
 80018f0:	400a      	ands	r2, r1
 80018f2:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018f8:	2204      	movs	r2, #4
 80018fa:	431a      	orrs	r2, r3
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	2241      	movs	r2, #65	; 0x41
 8001904:	2120      	movs	r1, #32
 8001906:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	2242      	movs	r2, #66	; 0x42
 800190c:	2100      	movs	r1, #0
 800190e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	2240      	movs	r2, #64	; 0x40
 8001914:	2100      	movs	r1, #0
 8001916:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001918:	2301      	movs	r3, #1
 800191a:	e000      	b.n	800191e <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 800191c:	2300      	movs	r3, #0
}
 800191e:	0018      	movs	r0, r3
 8001920:	46bd      	mov	sp, r7
 8001922:	b004      	add	sp, #16
 8001924:	bd80      	pop	{r7, pc}
 8001926:	46c0      	nop			; (mov r8, r8)
 8001928:	fe00e800 	.word	0xfe00e800

0800192c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800192c:	b590      	push	{r4, r7, lr}
 800192e:	b085      	sub	sp, #20
 8001930:	af00      	add	r7, sp, #0
 8001932:	60f8      	str	r0, [r7, #12]
 8001934:	0008      	movs	r0, r1
 8001936:	0011      	movs	r1, r2
 8001938:	607b      	str	r3, [r7, #4]
 800193a:	240a      	movs	r4, #10
 800193c:	193b      	adds	r3, r7, r4
 800193e:	1c02      	adds	r2, r0, #0
 8001940:	801a      	strh	r2, [r3, #0]
 8001942:	2009      	movs	r0, #9
 8001944:	183b      	adds	r3, r7, r0
 8001946:	1c0a      	adds	r2, r1, #0
 8001948:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	6a3a      	ldr	r2, [r7, #32]
 8001952:	0d51      	lsrs	r1, r2, #21
 8001954:	2280      	movs	r2, #128	; 0x80
 8001956:	00d2      	lsls	r2, r2, #3
 8001958:	400a      	ands	r2, r1
 800195a:	490e      	ldr	r1, [pc, #56]	; (8001994 <I2C_TransferConfig+0x68>)
 800195c:	430a      	orrs	r2, r1
 800195e:	43d2      	mvns	r2, r2
 8001960:	401a      	ands	r2, r3
 8001962:	0011      	movs	r1, r2
 8001964:	193b      	adds	r3, r7, r4
 8001966:	881b      	ldrh	r3, [r3, #0]
 8001968:	059b      	lsls	r3, r3, #22
 800196a:	0d9a      	lsrs	r2, r3, #22
 800196c:	183b      	adds	r3, r7, r0
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	0418      	lsls	r0, r3, #16
 8001972:	23ff      	movs	r3, #255	; 0xff
 8001974:	041b      	lsls	r3, r3, #16
 8001976:	4003      	ands	r3, r0
 8001978:	431a      	orrs	r2, r3
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	431a      	orrs	r2, r3
 800197e:	6a3b      	ldr	r3, [r7, #32]
 8001980:	431a      	orrs	r2, r3
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	430a      	orrs	r2, r1
 8001988:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 800198a:	46c0      	nop			; (mov r8, r8)
 800198c:	46bd      	mov	sp, r7
 800198e:	b005      	add	sp, #20
 8001990:	bd90      	pop	{r4, r7, pc}
 8001992:	46c0      	nop			; (mov r8, r8)
 8001994:	03ff63ff 	.word	0x03ff63ff

08001998 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2241      	movs	r2, #65	; 0x41
 80019a6:	5c9b      	ldrb	r3, [r3, r2]
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	2b20      	cmp	r3, #32
 80019ac:	d138      	bne.n	8001a20 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2240      	movs	r2, #64	; 0x40
 80019b2:	5c9b      	ldrb	r3, [r3, r2]
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d101      	bne.n	80019bc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80019b8:	2302      	movs	r3, #2
 80019ba:	e032      	b.n	8001a22 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2240      	movs	r2, #64	; 0x40
 80019c0:	2101      	movs	r1, #1
 80019c2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2241      	movs	r2, #65	; 0x41
 80019c8:	2124      	movs	r1, #36	; 0x24
 80019ca:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	2101      	movs	r1, #1
 80019d8:	438a      	bics	r2, r1
 80019da:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4911      	ldr	r1, [pc, #68]	; (8001a2c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80019e8:	400a      	ands	r2, r1
 80019ea:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	6819      	ldr	r1, [r3, #0]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	683a      	ldr	r2, [r7, #0]
 80019f8:	430a      	orrs	r2, r1
 80019fa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	2101      	movs	r1, #1
 8001a08:	430a      	orrs	r2, r1
 8001a0a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2241      	movs	r2, #65	; 0x41
 8001a10:	2120      	movs	r1, #32
 8001a12:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2240      	movs	r2, #64	; 0x40
 8001a18:	2100      	movs	r1, #0
 8001a1a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	e000      	b.n	8001a22 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001a20:	2302      	movs	r3, #2
  }
}
 8001a22:	0018      	movs	r0, r3
 8001a24:	46bd      	mov	sp, r7
 8001a26:	b002      	add	sp, #8
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	46c0      	nop			; (mov r8, r8)
 8001a2c:	ffffefff 	.word	0xffffefff

08001a30 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b084      	sub	sp, #16
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
 8001a38:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2241      	movs	r2, #65	; 0x41
 8001a3e:	5c9b      	ldrb	r3, [r3, r2]
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	2b20      	cmp	r3, #32
 8001a44:	d139      	bne.n	8001aba <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2240      	movs	r2, #64	; 0x40
 8001a4a:	5c9b      	ldrb	r3, [r3, r2]
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d101      	bne.n	8001a54 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001a50:	2302      	movs	r3, #2
 8001a52:	e033      	b.n	8001abc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2240      	movs	r2, #64	; 0x40
 8001a58:	2101      	movs	r1, #1
 8001a5a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2241      	movs	r2, #65	; 0x41
 8001a60:	2124      	movs	r1, #36	; 0x24
 8001a62:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	2101      	movs	r1, #1
 8001a70:	438a      	bics	r2, r1
 8001a72:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	4a11      	ldr	r2, [pc, #68]	; (8001ac4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001a80:	4013      	ands	r3, r2
 8001a82:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	021b      	lsls	r3, r3, #8
 8001a88:	68fa      	ldr	r2, [r7, #12]
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	68fa      	ldr	r2, [r7, #12]
 8001a94:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	2101      	movs	r1, #1
 8001aa2:	430a      	orrs	r2, r1
 8001aa4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2241      	movs	r2, #65	; 0x41
 8001aaa:	2120      	movs	r1, #32
 8001aac:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2240      	movs	r2, #64	; 0x40
 8001ab2:	2100      	movs	r1, #0
 8001ab4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	e000      	b.n	8001abc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001aba:	2302      	movs	r3, #2
  }
}
 8001abc:	0018      	movs	r0, r3
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	b004      	add	sp, #16
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	fffff0ff 	.word	0xfffff0ff

08001ac8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ac8:	b5b0      	push	{r4, r5, r7, lr}
 8001aca:	b08a      	sub	sp, #40	; 0x28
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d102      	bne.n	8001adc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	f000 fbbf 	bl	800225a <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001adc:	4bc9      	ldr	r3, [pc, #804]	; (8001e04 <HAL_RCC_OscConfig+0x33c>)
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	220c      	movs	r2, #12
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ae6:	4bc7      	ldr	r3, [pc, #796]	; (8001e04 <HAL_RCC_OscConfig+0x33c>)
 8001ae8:	68da      	ldr	r2, [r3, #12]
 8001aea:	2380      	movs	r3, #128	; 0x80
 8001aec:	025b      	lsls	r3, r3, #9
 8001aee:	4013      	ands	r3, r2
 8001af0:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	2201      	movs	r2, #1
 8001af8:	4013      	ands	r3, r2
 8001afa:	d100      	bne.n	8001afe <HAL_RCC_OscConfig+0x36>
 8001afc:	e07e      	b.n	8001bfc <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	2b08      	cmp	r3, #8
 8001b02:	d007      	beq.n	8001b14 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	2b0c      	cmp	r3, #12
 8001b08:	d112      	bne.n	8001b30 <HAL_RCC_OscConfig+0x68>
 8001b0a:	69ba      	ldr	r2, [r7, #24]
 8001b0c:	2380      	movs	r3, #128	; 0x80
 8001b0e:	025b      	lsls	r3, r3, #9
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d10d      	bne.n	8001b30 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b14:	4bbb      	ldr	r3, [pc, #748]	; (8001e04 <HAL_RCC_OscConfig+0x33c>)
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	2380      	movs	r3, #128	; 0x80
 8001b1a:	029b      	lsls	r3, r3, #10
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	d100      	bne.n	8001b22 <HAL_RCC_OscConfig+0x5a>
 8001b20:	e06b      	b.n	8001bfa <HAL_RCC_OscConfig+0x132>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d167      	bne.n	8001bfa <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	f000 fb95 	bl	800225a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	685a      	ldr	r2, [r3, #4]
 8001b34:	2380      	movs	r3, #128	; 0x80
 8001b36:	025b      	lsls	r3, r3, #9
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d107      	bne.n	8001b4c <HAL_RCC_OscConfig+0x84>
 8001b3c:	4bb1      	ldr	r3, [pc, #708]	; (8001e04 <HAL_RCC_OscConfig+0x33c>)
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	4bb0      	ldr	r3, [pc, #704]	; (8001e04 <HAL_RCC_OscConfig+0x33c>)
 8001b42:	2180      	movs	r1, #128	; 0x80
 8001b44:	0249      	lsls	r1, r1, #9
 8001b46:	430a      	orrs	r2, r1
 8001b48:	601a      	str	r2, [r3, #0]
 8001b4a:	e027      	b.n	8001b9c <HAL_RCC_OscConfig+0xd4>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	685a      	ldr	r2, [r3, #4]
 8001b50:	23a0      	movs	r3, #160	; 0xa0
 8001b52:	02db      	lsls	r3, r3, #11
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d10e      	bne.n	8001b76 <HAL_RCC_OscConfig+0xae>
 8001b58:	4baa      	ldr	r3, [pc, #680]	; (8001e04 <HAL_RCC_OscConfig+0x33c>)
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	4ba9      	ldr	r3, [pc, #676]	; (8001e04 <HAL_RCC_OscConfig+0x33c>)
 8001b5e:	2180      	movs	r1, #128	; 0x80
 8001b60:	02c9      	lsls	r1, r1, #11
 8001b62:	430a      	orrs	r2, r1
 8001b64:	601a      	str	r2, [r3, #0]
 8001b66:	4ba7      	ldr	r3, [pc, #668]	; (8001e04 <HAL_RCC_OscConfig+0x33c>)
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	4ba6      	ldr	r3, [pc, #664]	; (8001e04 <HAL_RCC_OscConfig+0x33c>)
 8001b6c:	2180      	movs	r1, #128	; 0x80
 8001b6e:	0249      	lsls	r1, r1, #9
 8001b70:	430a      	orrs	r2, r1
 8001b72:	601a      	str	r2, [r3, #0]
 8001b74:	e012      	b.n	8001b9c <HAL_RCC_OscConfig+0xd4>
 8001b76:	4ba3      	ldr	r3, [pc, #652]	; (8001e04 <HAL_RCC_OscConfig+0x33c>)
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	4ba2      	ldr	r3, [pc, #648]	; (8001e04 <HAL_RCC_OscConfig+0x33c>)
 8001b7c:	49a2      	ldr	r1, [pc, #648]	; (8001e08 <HAL_RCC_OscConfig+0x340>)
 8001b7e:	400a      	ands	r2, r1
 8001b80:	601a      	str	r2, [r3, #0]
 8001b82:	4ba0      	ldr	r3, [pc, #640]	; (8001e04 <HAL_RCC_OscConfig+0x33c>)
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	2380      	movs	r3, #128	; 0x80
 8001b88:	025b      	lsls	r3, r3, #9
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	60fb      	str	r3, [r7, #12]
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	4b9c      	ldr	r3, [pc, #624]	; (8001e04 <HAL_RCC_OscConfig+0x33c>)
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	4b9b      	ldr	r3, [pc, #620]	; (8001e04 <HAL_RCC_OscConfig+0x33c>)
 8001b96:	499d      	ldr	r1, [pc, #628]	; (8001e0c <HAL_RCC_OscConfig+0x344>)
 8001b98:	400a      	ands	r2, r1
 8001b9a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d015      	beq.n	8001bd0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba4:	f7fe ffdc 	bl	8000b60 <HAL_GetTick>
 8001ba8:	0003      	movs	r3, r0
 8001baa:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001bac:	e009      	b.n	8001bc2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bae:	f7fe ffd7 	bl	8000b60 <HAL_GetTick>
 8001bb2:	0002      	movs	r2, r0
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	1ad3      	subs	r3, r2, r3
 8001bb8:	2b64      	cmp	r3, #100	; 0x64
 8001bba:	d902      	bls.n	8001bc2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	f000 fb4c 	bl	800225a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001bc2:	4b90      	ldr	r3, [pc, #576]	; (8001e04 <HAL_RCC_OscConfig+0x33c>)
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	2380      	movs	r3, #128	; 0x80
 8001bc8:	029b      	lsls	r3, r3, #10
 8001bca:	4013      	ands	r3, r2
 8001bcc:	d0ef      	beq.n	8001bae <HAL_RCC_OscConfig+0xe6>
 8001bce:	e015      	b.n	8001bfc <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bd0:	f7fe ffc6 	bl	8000b60 <HAL_GetTick>
 8001bd4:	0003      	movs	r3, r0
 8001bd6:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001bd8:	e008      	b.n	8001bec <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bda:	f7fe ffc1 	bl	8000b60 <HAL_GetTick>
 8001bde:	0002      	movs	r2, r0
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	2b64      	cmp	r3, #100	; 0x64
 8001be6:	d901      	bls.n	8001bec <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001be8:	2303      	movs	r3, #3
 8001bea:	e336      	b.n	800225a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001bec:	4b85      	ldr	r3, [pc, #532]	; (8001e04 <HAL_RCC_OscConfig+0x33c>)
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	2380      	movs	r3, #128	; 0x80
 8001bf2:	029b      	lsls	r3, r3, #10
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	d1f0      	bne.n	8001bda <HAL_RCC_OscConfig+0x112>
 8001bf8:	e000      	b.n	8001bfc <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bfa:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	2202      	movs	r2, #2
 8001c02:	4013      	ands	r3, r2
 8001c04:	d100      	bne.n	8001c08 <HAL_RCC_OscConfig+0x140>
 8001c06:	e099      	b.n	8001d3c <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c10:	2220      	movs	r2, #32
 8001c12:	4013      	ands	r3, r2
 8001c14:	d009      	beq.n	8001c2a <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001c16:	4b7b      	ldr	r3, [pc, #492]	; (8001e04 <HAL_RCC_OscConfig+0x33c>)
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	4b7a      	ldr	r3, [pc, #488]	; (8001e04 <HAL_RCC_OscConfig+0x33c>)
 8001c1c:	2120      	movs	r1, #32
 8001c1e:	430a      	orrs	r2, r1
 8001c20:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c24:	2220      	movs	r2, #32
 8001c26:	4393      	bics	r3, r2
 8001c28:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	2b04      	cmp	r3, #4
 8001c2e:	d005      	beq.n	8001c3c <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	2b0c      	cmp	r3, #12
 8001c34:	d13e      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x1ec>
 8001c36:	69bb      	ldr	r3, [r7, #24]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d13b      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001c3c:	4b71      	ldr	r3, [pc, #452]	; (8001e04 <HAL_RCC_OscConfig+0x33c>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	2204      	movs	r2, #4
 8001c42:	4013      	ands	r3, r2
 8001c44:	d004      	beq.n	8001c50 <HAL_RCC_OscConfig+0x188>
 8001c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d101      	bne.n	8001c50 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e304      	b.n	800225a <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c50:	4b6c      	ldr	r3, [pc, #432]	; (8001e04 <HAL_RCC_OscConfig+0x33c>)
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	4a6e      	ldr	r2, [pc, #440]	; (8001e10 <HAL_RCC_OscConfig+0x348>)
 8001c56:	4013      	ands	r3, r2
 8001c58:	0019      	movs	r1, r3
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	691b      	ldr	r3, [r3, #16]
 8001c5e:	021a      	lsls	r2, r3, #8
 8001c60:	4b68      	ldr	r3, [pc, #416]	; (8001e04 <HAL_RCC_OscConfig+0x33c>)
 8001c62:	430a      	orrs	r2, r1
 8001c64:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001c66:	4b67      	ldr	r3, [pc, #412]	; (8001e04 <HAL_RCC_OscConfig+0x33c>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	2209      	movs	r2, #9
 8001c6c:	4393      	bics	r3, r2
 8001c6e:	0019      	movs	r1, r3
 8001c70:	4b64      	ldr	r3, [pc, #400]	; (8001e04 <HAL_RCC_OscConfig+0x33c>)
 8001c72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c74:	430a      	orrs	r2, r1
 8001c76:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c78:	f000 fc42 	bl	8002500 <HAL_RCC_GetSysClockFreq>
 8001c7c:	0001      	movs	r1, r0
 8001c7e:	4b61      	ldr	r3, [pc, #388]	; (8001e04 <HAL_RCC_OscConfig+0x33c>)
 8001c80:	68db      	ldr	r3, [r3, #12]
 8001c82:	091b      	lsrs	r3, r3, #4
 8001c84:	220f      	movs	r2, #15
 8001c86:	4013      	ands	r3, r2
 8001c88:	4a62      	ldr	r2, [pc, #392]	; (8001e14 <HAL_RCC_OscConfig+0x34c>)
 8001c8a:	5cd3      	ldrb	r3, [r2, r3]
 8001c8c:	000a      	movs	r2, r1
 8001c8e:	40da      	lsrs	r2, r3
 8001c90:	4b61      	ldr	r3, [pc, #388]	; (8001e18 <HAL_RCC_OscConfig+0x350>)
 8001c92:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001c94:	4b61      	ldr	r3, [pc, #388]	; (8001e1c <HAL_RCC_OscConfig+0x354>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	2513      	movs	r5, #19
 8001c9a:	197c      	adds	r4, r7, r5
 8001c9c:	0018      	movs	r0, r3
 8001c9e:	f7fe ff19 	bl	8000ad4 <HAL_InitTick>
 8001ca2:	0003      	movs	r3, r0
 8001ca4:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001ca6:	197b      	adds	r3, r7, r5
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d046      	beq.n	8001d3c <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8001cae:	197b      	adds	r3, r7, r5
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	e2d2      	b.n	800225a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d027      	beq.n	8001d0a <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001cba:	4b52      	ldr	r3, [pc, #328]	; (8001e04 <HAL_RCC_OscConfig+0x33c>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	2209      	movs	r2, #9
 8001cc0:	4393      	bics	r3, r2
 8001cc2:	0019      	movs	r1, r3
 8001cc4:	4b4f      	ldr	r3, [pc, #316]	; (8001e04 <HAL_RCC_OscConfig+0x33c>)
 8001cc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cc8:	430a      	orrs	r2, r1
 8001cca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ccc:	f7fe ff48 	bl	8000b60 <HAL_GetTick>
 8001cd0:	0003      	movs	r3, r0
 8001cd2:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001cd4:	e008      	b.n	8001ce8 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cd6:	f7fe ff43 	bl	8000b60 <HAL_GetTick>
 8001cda:	0002      	movs	r2, r0
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	1ad3      	subs	r3, r2, r3
 8001ce0:	2b02      	cmp	r3, #2
 8001ce2:	d901      	bls.n	8001ce8 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	e2b8      	b.n	800225a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ce8:	4b46      	ldr	r3, [pc, #280]	; (8001e04 <HAL_RCC_OscConfig+0x33c>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2204      	movs	r2, #4
 8001cee:	4013      	ands	r3, r2
 8001cf0:	d0f1      	beq.n	8001cd6 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cf2:	4b44      	ldr	r3, [pc, #272]	; (8001e04 <HAL_RCC_OscConfig+0x33c>)
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	4a46      	ldr	r2, [pc, #280]	; (8001e10 <HAL_RCC_OscConfig+0x348>)
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	0019      	movs	r1, r3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	691b      	ldr	r3, [r3, #16]
 8001d00:	021a      	lsls	r2, r3, #8
 8001d02:	4b40      	ldr	r3, [pc, #256]	; (8001e04 <HAL_RCC_OscConfig+0x33c>)
 8001d04:	430a      	orrs	r2, r1
 8001d06:	605a      	str	r2, [r3, #4]
 8001d08:	e018      	b.n	8001d3c <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d0a:	4b3e      	ldr	r3, [pc, #248]	; (8001e04 <HAL_RCC_OscConfig+0x33c>)
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	4b3d      	ldr	r3, [pc, #244]	; (8001e04 <HAL_RCC_OscConfig+0x33c>)
 8001d10:	2101      	movs	r1, #1
 8001d12:	438a      	bics	r2, r1
 8001d14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d16:	f7fe ff23 	bl	8000b60 <HAL_GetTick>
 8001d1a:	0003      	movs	r3, r0
 8001d1c:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001d1e:	e008      	b.n	8001d32 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d20:	f7fe ff1e 	bl	8000b60 <HAL_GetTick>
 8001d24:	0002      	movs	r2, r0
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	d901      	bls.n	8001d32 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e293      	b.n	800225a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001d32:	4b34      	ldr	r3, [pc, #208]	; (8001e04 <HAL_RCC_OscConfig+0x33c>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	2204      	movs	r2, #4
 8001d38:	4013      	ands	r3, r2
 8001d3a:	d1f1      	bne.n	8001d20 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	2210      	movs	r2, #16
 8001d42:	4013      	ands	r3, r2
 8001d44:	d100      	bne.n	8001d48 <HAL_RCC_OscConfig+0x280>
 8001d46:	e0a2      	b.n	8001e8e <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d140      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d4e:	4b2d      	ldr	r3, [pc, #180]	; (8001e04 <HAL_RCC_OscConfig+0x33c>)
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	2380      	movs	r3, #128	; 0x80
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	4013      	ands	r3, r2
 8001d58:	d005      	beq.n	8001d66 <HAL_RCC_OscConfig+0x29e>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	69db      	ldr	r3, [r3, #28]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d101      	bne.n	8001d66 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e279      	b.n	800225a <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d66:	4b27      	ldr	r3, [pc, #156]	; (8001e04 <HAL_RCC_OscConfig+0x33c>)
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	4a2d      	ldr	r2, [pc, #180]	; (8001e20 <HAL_RCC_OscConfig+0x358>)
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	0019      	movs	r1, r3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d74:	4b23      	ldr	r3, [pc, #140]	; (8001e04 <HAL_RCC_OscConfig+0x33c>)
 8001d76:	430a      	orrs	r2, r1
 8001d78:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d7a:	4b22      	ldr	r3, [pc, #136]	; (8001e04 <HAL_RCC_OscConfig+0x33c>)
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	021b      	lsls	r3, r3, #8
 8001d80:	0a19      	lsrs	r1, r3, #8
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6a1b      	ldr	r3, [r3, #32]
 8001d86:	061a      	lsls	r2, r3, #24
 8001d88:	4b1e      	ldr	r3, [pc, #120]	; (8001e04 <HAL_RCC_OscConfig+0x33c>)
 8001d8a:	430a      	orrs	r2, r1
 8001d8c:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d92:	0b5b      	lsrs	r3, r3, #13
 8001d94:	3301      	adds	r3, #1
 8001d96:	2280      	movs	r2, #128	; 0x80
 8001d98:	0212      	lsls	r2, r2, #8
 8001d9a:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001d9c:	4b19      	ldr	r3, [pc, #100]	; (8001e04 <HAL_RCC_OscConfig+0x33c>)
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	091b      	lsrs	r3, r3, #4
 8001da2:	210f      	movs	r1, #15
 8001da4:	400b      	ands	r3, r1
 8001da6:	491b      	ldr	r1, [pc, #108]	; (8001e14 <HAL_RCC_OscConfig+0x34c>)
 8001da8:	5ccb      	ldrb	r3, [r1, r3]
 8001daa:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001dac:	4b1a      	ldr	r3, [pc, #104]	; (8001e18 <HAL_RCC_OscConfig+0x350>)
 8001dae:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001db0:	4b1a      	ldr	r3, [pc, #104]	; (8001e1c <HAL_RCC_OscConfig+0x354>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	2513      	movs	r5, #19
 8001db6:	197c      	adds	r4, r7, r5
 8001db8:	0018      	movs	r0, r3
 8001dba:	f7fe fe8b 	bl	8000ad4 <HAL_InitTick>
 8001dbe:	0003      	movs	r3, r0
 8001dc0:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001dc2:	197b      	adds	r3, r7, r5
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d061      	beq.n	8001e8e <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8001dca:	197b      	adds	r3, r7, r5
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	e244      	b.n	800225a <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	69db      	ldr	r3, [r3, #28]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d040      	beq.n	8001e5a <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001dd8:	4b0a      	ldr	r3, [pc, #40]	; (8001e04 <HAL_RCC_OscConfig+0x33c>)
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	4b09      	ldr	r3, [pc, #36]	; (8001e04 <HAL_RCC_OscConfig+0x33c>)
 8001dde:	2180      	movs	r1, #128	; 0x80
 8001de0:	0049      	lsls	r1, r1, #1
 8001de2:	430a      	orrs	r2, r1
 8001de4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001de6:	f7fe febb 	bl	8000b60 <HAL_GetTick>
 8001dea:	0003      	movs	r3, r0
 8001dec:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001dee:	e019      	b.n	8001e24 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001df0:	f7fe feb6 	bl	8000b60 <HAL_GetTick>
 8001df4:	0002      	movs	r2, r0
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	d912      	bls.n	8001e24 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e22b      	b.n	800225a <HAL_RCC_OscConfig+0x792>
 8001e02:	46c0      	nop			; (mov r8, r8)
 8001e04:	40021000 	.word	0x40021000
 8001e08:	fffeffff 	.word	0xfffeffff
 8001e0c:	fffbffff 	.word	0xfffbffff
 8001e10:	ffffe0ff 	.word	0xffffe0ff
 8001e14:	08003dc4 	.word	0x08003dc4
 8001e18:	20000000 	.word	0x20000000
 8001e1c:	20000004 	.word	0x20000004
 8001e20:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001e24:	4bca      	ldr	r3, [pc, #808]	; (8002150 <HAL_RCC_OscConfig+0x688>)
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	2380      	movs	r3, #128	; 0x80
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	d0df      	beq.n	8001df0 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e30:	4bc7      	ldr	r3, [pc, #796]	; (8002150 <HAL_RCC_OscConfig+0x688>)
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	4ac7      	ldr	r2, [pc, #796]	; (8002154 <HAL_RCC_OscConfig+0x68c>)
 8001e36:	4013      	ands	r3, r2
 8001e38:	0019      	movs	r1, r3
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e3e:	4bc4      	ldr	r3, [pc, #784]	; (8002150 <HAL_RCC_OscConfig+0x688>)
 8001e40:	430a      	orrs	r2, r1
 8001e42:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e44:	4bc2      	ldr	r3, [pc, #776]	; (8002150 <HAL_RCC_OscConfig+0x688>)
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	021b      	lsls	r3, r3, #8
 8001e4a:	0a19      	lsrs	r1, r3, #8
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6a1b      	ldr	r3, [r3, #32]
 8001e50:	061a      	lsls	r2, r3, #24
 8001e52:	4bbf      	ldr	r3, [pc, #764]	; (8002150 <HAL_RCC_OscConfig+0x688>)
 8001e54:	430a      	orrs	r2, r1
 8001e56:	605a      	str	r2, [r3, #4]
 8001e58:	e019      	b.n	8001e8e <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001e5a:	4bbd      	ldr	r3, [pc, #756]	; (8002150 <HAL_RCC_OscConfig+0x688>)
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	4bbc      	ldr	r3, [pc, #752]	; (8002150 <HAL_RCC_OscConfig+0x688>)
 8001e60:	49bd      	ldr	r1, [pc, #756]	; (8002158 <HAL_RCC_OscConfig+0x690>)
 8001e62:	400a      	ands	r2, r1
 8001e64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e66:	f7fe fe7b 	bl	8000b60 <HAL_GetTick>
 8001e6a:	0003      	movs	r3, r0
 8001e6c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001e6e:	e008      	b.n	8001e82 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e70:	f7fe fe76 	bl	8000b60 <HAL_GetTick>
 8001e74:	0002      	movs	r2, r0
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	2b02      	cmp	r3, #2
 8001e7c:	d901      	bls.n	8001e82 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8001e7e:	2303      	movs	r3, #3
 8001e80:	e1eb      	b.n	800225a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001e82:	4bb3      	ldr	r3, [pc, #716]	; (8002150 <HAL_RCC_OscConfig+0x688>)
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	2380      	movs	r3, #128	; 0x80
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	d1f0      	bne.n	8001e70 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	2208      	movs	r2, #8
 8001e94:	4013      	ands	r3, r2
 8001e96:	d036      	beq.n	8001f06 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	695b      	ldr	r3, [r3, #20]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d019      	beq.n	8001ed4 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ea0:	4bab      	ldr	r3, [pc, #684]	; (8002150 <HAL_RCC_OscConfig+0x688>)
 8001ea2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ea4:	4baa      	ldr	r3, [pc, #680]	; (8002150 <HAL_RCC_OscConfig+0x688>)
 8001ea6:	2101      	movs	r1, #1
 8001ea8:	430a      	orrs	r2, r1
 8001eaa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eac:	f7fe fe58 	bl	8000b60 <HAL_GetTick>
 8001eb0:	0003      	movs	r3, r0
 8001eb2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001eb4:	e008      	b.n	8001ec8 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001eb6:	f7fe fe53 	bl	8000b60 <HAL_GetTick>
 8001eba:	0002      	movs	r2, r0
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	1ad3      	subs	r3, r2, r3
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	d901      	bls.n	8001ec8 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	e1c8      	b.n	800225a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001ec8:	4ba1      	ldr	r3, [pc, #644]	; (8002150 <HAL_RCC_OscConfig+0x688>)
 8001eca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ecc:	2202      	movs	r2, #2
 8001ece:	4013      	ands	r3, r2
 8001ed0:	d0f1      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x3ee>
 8001ed2:	e018      	b.n	8001f06 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ed4:	4b9e      	ldr	r3, [pc, #632]	; (8002150 <HAL_RCC_OscConfig+0x688>)
 8001ed6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ed8:	4b9d      	ldr	r3, [pc, #628]	; (8002150 <HAL_RCC_OscConfig+0x688>)
 8001eda:	2101      	movs	r1, #1
 8001edc:	438a      	bics	r2, r1
 8001ede:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ee0:	f7fe fe3e 	bl	8000b60 <HAL_GetTick>
 8001ee4:	0003      	movs	r3, r0
 8001ee6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001ee8:	e008      	b.n	8001efc <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001eea:	f7fe fe39 	bl	8000b60 <HAL_GetTick>
 8001eee:	0002      	movs	r2, r0
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	1ad3      	subs	r3, r2, r3
 8001ef4:	2b02      	cmp	r3, #2
 8001ef6:	d901      	bls.n	8001efc <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8001ef8:	2303      	movs	r3, #3
 8001efa:	e1ae      	b.n	800225a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001efc:	4b94      	ldr	r3, [pc, #592]	; (8002150 <HAL_RCC_OscConfig+0x688>)
 8001efe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f00:	2202      	movs	r2, #2
 8001f02:	4013      	ands	r3, r2
 8001f04:	d1f1      	bne.n	8001eea <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	2204      	movs	r2, #4
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	d100      	bne.n	8001f12 <HAL_RCC_OscConfig+0x44a>
 8001f10:	e0ae      	b.n	8002070 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f12:	2023      	movs	r0, #35	; 0x23
 8001f14:	183b      	adds	r3, r7, r0
 8001f16:	2200      	movs	r2, #0
 8001f18:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f1a:	4b8d      	ldr	r3, [pc, #564]	; (8002150 <HAL_RCC_OscConfig+0x688>)
 8001f1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f1e:	2380      	movs	r3, #128	; 0x80
 8001f20:	055b      	lsls	r3, r3, #21
 8001f22:	4013      	ands	r3, r2
 8001f24:	d109      	bne.n	8001f3a <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f26:	4b8a      	ldr	r3, [pc, #552]	; (8002150 <HAL_RCC_OscConfig+0x688>)
 8001f28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f2a:	4b89      	ldr	r3, [pc, #548]	; (8002150 <HAL_RCC_OscConfig+0x688>)
 8001f2c:	2180      	movs	r1, #128	; 0x80
 8001f2e:	0549      	lsls	r1, r1, #21
 8001f30:	430a      	orrs	r2, r1
 8001f32:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001f34:	183b      	adds	r3, r7, r0
 8001f36:	2201      	movs	r2, #1
 8001f38:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f3a:	4b88      	ldr	r3, [pc, #544]	; (800215c <HAL_RCC_OscConfig+0x694>)
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	2380      	movs	r3, #128	; 0x80
 8001f40:	005b      	lsls	r3, r3, #1
 8001f42:	4013      	ands	r3, r2
 8001f44:	d11a      	bne.n	8001f7c <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f46:	4b85      	ldr	r3, [pc, #532]	; (800215c <HAL_RCC_OscConfig+0x694>)
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	4b84      	ldr	r3, [pc, #528]	; (800215c <HAL_RCC_OscConfig+0x694>)
 8001f4c:	2180      	movs	r1, #128	; 0x80
 8001f4e:	0049      	lsls	r1, r1, #1
 8001f50:	430a      	orrs	r2, r1
 8001f52:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f54:	f7fe fe04 	bl	8000b60 <HAL_GetTick>
 8001f58:	0003      	movs	r3, r0
 8001f5a:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f5c:	e008      	b.n	8001f70 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f5e:	f7fe fdff 	bl	8000b60 <HAL_GetTick>
 8001f62:	0002      	movs	r2, r0
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	1ad3      	subs	r3, r2, r3
 8001f68:	2b64      	cmp	r3, #100	; 0x64
 8001f6a:	d901      	bls.n	8001f70 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	e174      	b.n	800225a <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f70:	4b7a      	ldr	r3, [pc, #488]	; (800215c <HAL_RCC_OscConfig+0x694>)
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	2380      	movs	r3, #128	; 0x80
 8001f76:	005b      	lsls	r3, r3, #1
 8001f78:	4013      	ands	r3, r2
 8001f7a:	d0f0      	beq.n	8001f5e <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	689a      	ldr	r2, [r3, #8]
 8001f80:	2380      	movs	r3, #128	; 0x80
 8001f82:	005b      	lsls	r3, r3, #1
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d107      	bne.n	8001f98 <HAL_RCC_OscConfig+0x4d0>
 8001f88:	4b71      	ldr	r3, [pc, #452]	; (8002150 <HAL_RCC_OscConfig+0x688>)
 8001f8a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f8c:	4b70      	ldr	r3, [pc, #448]	; (8002150 <HAL_RCC_OscConfig+0x688>)
 8001f8e:	2180      	movs	r1, #128	; 0x80
 8001f90:	0049      	lsls	r1, r1, #1
 8001f92:	430a      	orrs	r2, r1
 8001f94:	651a      	str	r2, [r3, #80]	; 0x50
 8001f96:	e031      	b.n	8001ffc <HAL_RCC_OscConfig+0x534>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d10c      	bne.n	8001fba <HAL_RCC_OscConfig+0x4f2>
 8001fa0:	4b6b      	ldr	r3, [pc, #428]	; (8002150 <HAL_RCC_OscConfig+0x688>)
 8001fa2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001fa4:	4b6a      	ldr	r3, [pc, #424]	; (8002150 <HAL_RCC_OscConfig+0x688>)
 8001fa6:	496c      	ldr	r1, [pc, #432]	; (8002158 <HAL_RCC_OscConfig+0x690>)
 8001fa8:	400a      	ands	r2, r1
 8001faa:	651a      	str	r2, [r3, #80]	; 0x50
 8001fac:	4b68      	ldr	r3, [pc, #416]	; (8002150 <HAL_RCC_OscConfig+0x688>)
 8001fae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001fb0:	4b67      	ldr	r3, [pc, #412]	; (8002150 <HAL_RCC_OscConfig+0x688>)
 8001fb2:	496b      	ldr	r1, [pc, #428]	; (8002160 <HAL_RCC_OscConfig+0x698>)
 8001fb4:	400a      	ands	r2, r1
 8001fb6:	651a      	str	r2, [r3, #80]	; 0x50
 8001fb8:	e020      	b.n	8001ffc <HAL_RCC_OscConfig+0x534>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	689a      	ldr	r2, [r3, #8]
 8001fbe:	23a0      	movs	r3, #160	; 0xa0
 8001fc0:	00db      	lsls	r3, r3, #3
 8001fc2:	429a      	cmp	r2, r3
 8001fc4:	d10e      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x51c>
 8001fc6:	4b62      	ldr	r3, [pc, #392]	; (8002150 <HAL_RCC_OscConfig+0x688>)
 8001fc8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001fca:	4b61      	ldr	r3, [pc, #388]	; (8002150 <HAL_RCC_OscConfig+0x688>)
 8001fcc:	2180      	movs	r1, #128	; 0x80
 8001fce:	00c9      	lsls	r1, r1, #3
 8001fd0:	430a      	orrs	r2, r1
 8001fd2:	651a      	str	r2, [r3, #80]	; 0x50
 8001fd4:	4b5e      	ldr	r3, [pc, #376]	; (8002150 <HAL_RCC_OscConfig+0x688>)
 8001fd6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001fd8:	4b5d      	ldr	r3, [pc, #372]	; (8002150 <HAL_RCC_OscConfig+0x688>)
 8001fda:	2180      	movs	r1, #128	; 0x80
 8001fdc:	0049      	lsls	r1, r1, #1
 8001fde:	430a      	orrs	r2, r1
 8001fe0:	651a      	str	r2, [r3, #80]	; 0x50
 8001fe2:	e00b      	b.n	8001ffc <HAL_RCC_OscConfig+0x534>
 8001fe4:	4b5a      	ldr	r3, [pc, #360]	; (8002150 <HAL_RCC_OscConfig+0x688>)
 8001fe6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001fe8:	4b59      	ldr	r3, [pc, #356]	; (8002150 <HAL_RCC_OscConfig+0x688>)
 8001fea:	495b      	ldr	r1, [pc, #364]	; (8002158 <HAL_RCC_OscConfig+0x690>)
 8001fec:	400a      	ands	r2, r1
 8001fee:	651a      	str	r2, [r3, #80]	; 0x50
 8001ff0:	4b57      	ldr	r3, [pc, #348]	; (8002150 <HAL_RCC_OscConfig+0x688>)
 8001ff2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ff4:	4b56      	ldr	r3, [pc, #344]	; (8002150 <HAL_RCC_OscConfig+0x688>)
 8001ff6:	495a      	ldr	r1, [pc, #360]	; (8002160 <HAL_RCC_OscConfig+0x698>)
 8001ff8:	400a      	ands	r2, r1
 8001ffa:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d015      	beq.n	8002030 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002004:	f7fe fdac 	bl	8000b60 <HAL_GetTick>
 8002008:	0003      	movs	r3, r0
 800200a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800200c:	e009      	b.n	8002022 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800200e:	f7fe fda7 	bl	8000b60 <HAL_GetTick>
 8002012:	0002      	movs	r2, r0
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	4a52      	ldr	r2, [pc, #328]	; (8002164 <HAL_RCC_OscConfig+0x69c>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d901      	bls.n	8002022 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 800201e:	2303      	movs	r3, #3
 8002020:	e11b      	b.n	800225a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002022:	4b4b      	ldr	r3, [pc, #300]	; (8002150 <HAL_RCC_OscConfig+0x688>)
 8002024:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002026:	2380      	movs	r3, #128	; 0x80
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	4013      	ands	r3, r2
 800202c:	d0ef      	beq.n	800200e <HAL_RCC_OscConfig+0x546>
 800202e:	e014      	b.n	800205a <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002030:	f7fe fd96 	bl	8000b60 <HAL_GetTick>
 8002034:	0003      	movs	r3, r0
 8002036:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002038:	e009      	b.n	800204e <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800203a:	f7fe fd91 	bl	8000b60 <HAL_GetTick>
 800203e:	0002      	movs	r2, r0
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	1ad3      	subs	r3, r2, r3
 8002044:	4a47      	ldr	r2, [pc, #284]	; (8002164 <HAL_RCC_OscConfig+0x69c>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d901      	bls.n	800204e <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	e105      	b.n	800225a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800204e:	4b40      	ldr	r3, [pc, #256]	; (8002150 <HAL_RCC_OscConfig+0x688>)
 8002050:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002052:	2380      	movs	r3, #128	; 0x80
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	4013      	ands	r3, r2
 8002058:	d1ef      	bne.n	800203a <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800205a:	2323      	movs	r3, #35	; 0x23
 800205c:	18fb      	adds	r3, r7, r3
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	2b01      	cmp	r3, #1
 8002062:	d105      	bne.n	8002070 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002064:	4b3a      	ldr	r3, [pc, #232]	; (8002150 <HAL_RCC_OscConfig+0x688>)
 8002066:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002068:	4b39      	ldr	r3, [pc, #228]	; (8002150 <HAL_RCC_OscConfig+0x688>)
 800206a:	493f      	ldr	r1, [pc, #252]	; (8002168 <HAL_RCC_OscConfig+0x6a0>)
 800206c:	400a      	ands	r2, r1
 800206e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	2220      	movs	r2, #32
 8002076:	4013      	ands	r3, r2
 8002078:	d049      	beq.n	800210e <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	699b      	ldr	r3, [r3, #24]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d026      	beq.n	80020d0 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002082:	4b33      	ldr	r3, [pc, #204]	; (8002150 <HAL_RCC_OscConfig+0x688>)
 8002084:	689a      	ldr	r2, [r3, #8]
 8002086:	4b32      	ldr	r3, [pc, #200]	; (8002150 <HAL_RCC_OscConfig+0x688>)
 8002088:	2101      	movs	r1, #1
 800208a:	430a      	orrs	r2, r1
 800208c:	609a      	str	r2, [r3, #8]
 800208e:	4b30      	ldr	r3, [pc, #192]	; (8002150 <HAL_RCC_OscConfig+0x688>)
 8002090:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002092:	4b2f      	ldr	r3, [pc, #188]	; (8002150 <HAL_RCC_OscConfig+0x688>)
 8002094:	2101      	movs	r1, #1
 8002096:	430a      	orrs	r2, r1
 8002098:	635a      	str	r2, [r3, #52]	; 0x34
 800209a:	4b34      	ldr	r3, [pc, #208]	; (800216c <HAL_RCC_OscConfig+0x6a4>)
 800209c:	6a1a      	ldr	r2, [r3, #32]
 800209e:	4b33      	ldr	r3, [pc, #204]	; (800216c <HAL_RCC_OscConfig+0x6a4>)
 80020a0:	2180      	movs	r1, #128	; 0x80
 80020a2:	0189      	lsls	r1, r1, #6
 80020a4:	430a      	orrs	r2, r1
 80020a6:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020a8:	f7fe fd5a 	bl	8000b60 <HAL_GetTick>
 80020ac:	0003      	movs	r3, r0
 80020ae:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80020b0:	e008      	b.n	80020c4 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020b2:	f7fe fd55 	bl	8000b60 <HAL_GetTick>
 80020b6:	0002      	movs	r2, r0
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	2b02      	cmp	r3, #2
 80020be:	d901      	bls.n	80020c4 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 80020c0:	2303      	movs	r3, #3
 80020c2:	e0ca      	b.n	800225a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80020c4:	4b22      	ldr	r3, [pc, #136]	; (8002150 <HAL_RCC_OscConfig+0x688>)
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	2202      	movs	r2, #2
 80020ca:	4013      	ands	r3, r2
 80020cc:	d0f1      	beq.n	80020b2 <HAL_RCC_OscConfig+0x5ea>
 80020ce:	e01e      	b.n	800210e <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80020d0:	4b1f      	ldr	r3, [pc, #124]	; (8002150 <HAL_RCC_OscConfig+0x688>)
 80020d2:	689a      	ldr	r2, [r3, #8]
 80020d4:	4b1e      	ldr	r3, [pc, #120]	; (8002150 <HAL_RCC_OscConfig+0x688>)
 80020d6:	2101      	movs	r1, #1
 80020d8:	438a      	bics	r2, r1
 80020da:	609a      	str	r2, [r3, #8]
 80020dc:	4b23      	ldr	r3, [pc, #140]	; (800216c <HAL_RCC_OscConfig+0x6a4>)
 80020de:	6a1a      	ldr	r2, [r3, #32]
 80020e0:	4b22      	ldr	r3, [pc, #136]	; (800216c <HAL_RCC_OscConfig+0x6a4>)
 80020e2:	4923      	ldr	r1, [pc, #140]	; (8002170 <HAL_RCC_OscConfig+0x6a8>)
 80020e4:	400a      	ands	r2, r1
 80020e6:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e8:	f7fe fd3a 	bl	8000b60 <HAL_GetTick>
 80020ec:	0003      	movs	r3, r0
 80020ee:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80020f0:	e008      	b.n	8002104 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020f2:	f7fe fd35 	bl	8000b60 <HAL_GetTick>
 80020f6:	0002      	movs	r2, r0
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	2b02      	cmp	r3, #2
 80020fe:	d901      	bls.n	8002104 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8002100:	2303      	movs	r3, #3
 8002102:	e0aa      	b.n	800225a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002104:	4b12      	ldr	r3, [pc, #72]	; (8002150 <HAL_RCC_OscConfig+0x688>)
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	2202      	movs	r2, #2
 800210a:	4013      	ands	r3, r2
 800210c:	d1f1      	bne.n	80020f2 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002112:	2b00      	cmp	r3, #0
 8002114:	d100      	bne.n	8002118 <HAL_RCC_OscConfig+0x650>
 8002116:	e09f      	b.n	8002258 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	2b0c      	cmp	r3, #12
 800211c:	d100      	bne.n	8002120 <HAL_RCC_OscConfig+0x658>
 800211e:	e078      	b.n	8002212 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002124:	2b02      	cmp	r3, #2
 8002126:	d159      	bne.n	80021dc <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002128:	4b09      	ldr	r3, [pc, #36]	; (8002150 <HAL_RCC_OscConfig+0x688>)
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	4b08      	ldr	r3, [pc, #32]	; (8002150 <HAL_RCC_OscConfig+0x688>)
 800212e:	4911      	ldr	r1, [pc, #68]	; (8002174 <HAL_RCC_OscConfig+0x6ac>)
 8002130:	400a      	ands	r2, r1
 8002132:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002134:	f7fe fd14 	bl	8000b60 <HAL_GetTick>
 8002138:	0003      	movs	r3, r0
 800213a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800213c:	e01c      	b.n	8002178 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800213e:	f7fe fd0f 	bl	8000b60 <HAL_GetTick>
 8002142:	0002      	movs	r2, r0
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	1ad3      	subs	r3, r2, r3
 8002148:	2b02      	cmp	r3, #2
 800214a:	d915      	bls.n	8002178 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 800214c:	2303      	movs	r3, #3
 800214e:	e084      	b.n	800225a <HAL_RCC_OscConfig+0x792>
 8002150:	40021000 	.word	0x40021000
 8002154:	ffff1fff 	.word	0xffff1fff
 8002158:	fffffeff 	.word	0xfffffeff
 800215c:	40007000 	.word	0x40007000
 8002160:	fffffbff 	.word	0xfffffbff
 8002164:	00001388 	.word	0x00001388
 8002168:	efffffff 	.word	0xefffffff
 800216c:	40010000 	.word	0x40010000
 8002170:	ffffdfff 	.word	0xffffdfff
 8002174:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002178:	4b3a      	ldr	r3, [pc, #232]	; (8002264 <HAL_RCC_OscConfig+0x79c>)
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	2380      	movs	r3, #128	; 0x80
 800217e:	049b      	lsls	r3, r3, #18
 8002180:	4013      	ands	r3, r2
 8002182:	d1dc      	bne.n	800213e <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002184:	4b37      	ldr	r3, [pc, #220]	; (8002264 <HAL_RCC_OscConfig+0x79c>)
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	4a37      	ldr	r2, [pc, #220]	; (8002268 <HAL_RCC_OscConfig+0x7a0>)
 800218a:	4013      	ands	r3, r2
 800218c:	0019      	movs	r1, r3
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002196:	431a      	orrs	r2, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800219c:	431a      	orrs	r2, r3
 800219e:	4b31      	ldr	r3, [pc, #196]	; (8002264 <HAL_RCC_OscConfig+0x79c>)
 80021a0:	430a      	orrs	r2, r1
 80021a2:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021a4:	4b2f      	ldr	r3, [pc, #188]	; (8002264 <HAL_RCC_OscConfig+0x79c>)
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	4b2e      	ldr	r3, [pc, #184]	; (8002264 <HAL_RCC_OscConfig+0x79c>)
 80021aa:	2180      	movs	r1, #128	; 0x80
 80021ac:	0449      	lsls	r1, r1, #17
 80021ae:	430a      	orrs	r2, r1
 80021b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021b2:	f7fe fcd5 	bl	8000b60 <HAL_GetTick>
 80021b6:	0003      	movs	r3, r0
 80021b8:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80021ba:	e008      	b.n	80021ce <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021bc:	f7fe fcd0 	bl	8000b60 <HAL_GetTick>
 80021c0:	0002      	movs	r2, r0
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d901      	bls.n	80021ce <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e045      	b.n	800225a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80021ce:	4b25      	ldr	r3, [pc, #148]	; (8002264 <HAL_RCC_OscConfig+0x79c>)
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	2380      	movs	r3, #128	; 0x80
 80021d4:	049b      	lsls	r3, r3, #18
 80021d6:	4013      	ands	r3, r2
 80021d8:	d0f0      	beq.n	80021bc <HAL_RCC_OscConfig+0x6f4>
 80021da:	e03d      	b.n	8002258 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021dc:	4b21      	ldr	r3, [pc, #132]	; (8002264 <HAL_RCC_OscConfig+0x79c>)
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	4b20      	ldr	r3, [pc, #128]	; (8002264 <HAL_RCC_OscConfig+0x79c>)
 80021e2:	4922      	ldr	r1, [pc, #136]	; (800226c <HAL_RCC_OscConfig+0x7a4>)
 80021e4:	400a      	ands	r2, r1
 80021e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e8:	f7fe fcba 	bl	8000b60 <HAL_GetTick>
 80021ec:	0003      	movs	r3, r0
 80021ee:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80021f0:	e008      	b.n	8002204 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021f2:	f7fe fcb5 	bl	8000b60 <HAL_GetTick>
 80021f6:	0002      	movs	r2, r0
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	1ad3      	subs	r3, r2, r3
 80021fc:	2b02      	cmp	r3, #2
 80021fe:	d901      	bls.n	8002204 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8002200:	2303      	movs	r3, #3
 8002202:	e02a      	b.n	800225a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002204:	4b17      	ldr	r3, [pc, #92]	; (8002264 <HAL_RCC_OscConfig+0x79c>)
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	2380      	movs	r3, #128	; 0x80
 800220a:	049b      	lsls	r3, r3, #18
 800220c:	4013      	ands	r3, r2
 800220e:	d1f0      	bne.n	80021f2 <HAL_RCC_OscConfig+0x72a>
 8002210:	e022      	b.n	8002258 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002216:	2b01      	cmp	r3, #1
 8002218:	d101      	bne.n	800221e <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e01d      	b.n	800225a <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800221e:	4b11      	ldr	r3, [pc, #68]	; (8002264 <HAL_RCC_OscConfig+0x79c>)
 8002220:	68db      	ldr	r3, [r3, #12]
 8002222:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002224:	69ba      	ldr	r2, [r7, #24]
 8002226:	2380      	movs	r3, #128	; 0x80
 8002228:	025b      	lsls	r3, r3, #9
 800222a:	401a      	ands	r2, r3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002230:	429a      	cmp	r2, r3
 8002232:	d10f      	bne.n	8002254 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002234:	69ba      	ldr	r2, [r7, #24]
 8002236:	23f0      	movs	r3, #240	; 0xf0
 8002238:	039b      	lsls	r3, r3, #14
 800223a:	401a      	ands	r2, r3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002240:	429a      	cmp	r2, r3
 8002242:	d107      	bne.n	8002254 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	23c0      	movs	r3, #192	; 0xc0
 8002248:	041b      	lsls	r3, r3, #16
 800224a:	401a      	ands	r2, r3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002250:	429a      	cmp	r2, r3
 8002252:	d001      	beq.n	8002258 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	e000      	b.n	800225a <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8002258:	2300      	movs	r3, #0
}
 800225a:	0018      	movs	r0, r3
 800225c:	46bd      	mov	sp, r7
 800225e:	b00a      	add	sp, #40	; 0x28
 8002260:	bdb0      	pop	{r4, r5, r7, pc}
 8002262:	46c0      	nop			; (mov r8, r8)
 8002264:	40021000 	.word	0x40021000
 8002268:	ff02ffff 	.word	0xff02ffff
 800226c:	feffffff 	.word	0xfeffffff

08002270 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002270:	b5b0      	push	{r4, r5, r7, lr}
 8002272:	b084      	sub	sp, #16
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d101      	bne.n	8002284 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e128      	b.n	80024d6 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002284:	4b96      	ldr	r3, [pc, #600]	; (80024e0 <HAL_RCC_ClockConfig+0x270>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	2201      	movs	r2, #1
 800228a:	4013      	ands	r3, r2
 800228c:	683a      	ldr	r2, [r7, #0]
 800228e:	429a      	cmp	r2, r3
 8002290:	d91e      	bls.n	80022d0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002292:	4b93      	ldr	r3, [pc, #588]	; (80024e0 <HAL_RCC_ClockConfig+0x270>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	2201      	movs	r2, #1
 8002298:	4393      	bics	r3, r2
 800229a:	0019      	movs	r1, r3
 800229c:	4b90      	ldr	r3, [pc, #576]	; (80024e0 <HAL_RCC_ClockConfig+0x270>)
 800229e:	683a      	ldr	r2, [r7, #0]
 80022a0:	430a      	orrs	r2, r1
 80022a2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80022a4:	f7fe fc5c 	bl	8000b60 <HAL_GetTick>
 80022a8:	0003      	movs	r3, r0
 80022aa:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ac:	e009      	b.n	80022c2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022ae:	f7fe fc57 	bl	8000b60 <HAL_GetTick>
 80022b2:	0002      	movs	r2, r0
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	4a8a      	ldr	r2, [pc, #552]	; (80024e4 <HAL_RCC_ClockConfig+0x274>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d901      	bls.n	80022c2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	e109      	b.n	80024d6 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022c2:	4b87      	ldr	r3, [pc, #540]	; (80024e0 <HAL_RCC_ClockConfig+0x270>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	2201      	movs	r2, #1
 80022c8:	4013      	ands	r3, r2
 80022ca:	683a      	ldr	r2, [r7, #0]
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d1ee      	bne.n	80022ae <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	2202      	movs	r2, #2
 80022d6:	4013      	ands	r3, r2
 80022d8:	d009      	beq.n	80022ee <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022da:	4b83      	ldr	r3, [pc, #524]	; (80024e8 <HAL_RCC_ClockConfig+0x278>)
 80022dc:	68db      	ldr	r3, [r3, #12]
 80022de:	22f0      	movs	r2, #240	; 0xf0
 80022e0:	4393      	bics	r3, r2
 80022e2:	0019      	movs	r1, r3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	689a      	ldr	r2, [r3, #8]
 80022e8:	4b7f      	ldr	r3, [pc, #508]	; (80024e8 <HAL_RCC_ClockConfig+0x278>)
 80022ea:	430a      	orrs	r2, r1
 80022ec:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	2201      	movs	r2, #1
 80022f4:	4013      	ands	r3, r2
 80022f6:	d100      	bne.n	80022fa <HAL_RCC_ClockConfig+0x8a>
 80022f8:	e089      	b.n	800240e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d107      	bne.n	8002312 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002302:	4b79      	ldr	r3, [pc, #484]	; (80024e8 <HAL_RCC_ClockConfig+0x278>)
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	2380      	movs	r3, #128	; 0x80
 8002308:	029b      	lsls	r3, r3, #10
 800230a:	4013      	ands	r3, r2
 800230c:	d120      	bne.n	8002350 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e0e1      	b.n	80024d6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	2b03      	cmp	r3, #3
 8002318:	d107      	bne.n	800232a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800231a:	4b73      	ldr	r3, [pc, #460]	; (80024e8 <HAL_RCC_ClockConfig+0x278>)
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	2380      	movs	r3, #128	; 0x80
 8002320:	049b      	lsls	r3, r3, #18
 8002322:	4013      	ands	r3, r2
 8002324:	d114      	bne.n	8002350 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e0d5      	b.n	80024d6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	2b01      	cmp	r3, #1
 8002330:	d106      	bne.n	8002340 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002332:	4b6d      	ldr	r3, [pc, #436]	; (80024e8 <HAL_RCC_ClockConfig+0x278>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	2204      	movs	r2, #4
 8002338:	4013      	ands	r3, r2
 800233a:	d109      	bne.n	8002350 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e0ca      	b.n	80024d6 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002340:	4b69      	ldr	r3, [pc, #420]	; (80024e8 <HAL_RCC_ClockConfig+0x278>)
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	2380      	movs	r3, #128	; 0x80
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	4013      	ands	r3, r2
 800234a:	d101      	bne.n	8002350 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e0c2      	b.n	80024d6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002350:	4b65      	ldr	r3, [pc, #404]	; (80024e8 <HAL_RCC_ClockConfig+0x278>)
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	2203      	movs	r2, #3
 8002356:	4393      	bics	r3, r2
 8002358:	0019      	movs	r1, r3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	685a      	ldr	r2, [r3, #4]
 800235e:	4b62      	ldr	r3, [pc, #392]	; (80024e8 <HAL_RCC_ClockConfig+0x278>)
 8002360:	430a      	orrs	r2, r1
 8002362:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002364:	f7fe fbfc 	bl	8000b60 <HAL_GetTick>
 8002368:	0003      	movs	r3, r0
 800236a:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	2b02      	cmp	r3, #2
 8002372:	d111      	bne.n	8002398 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002374:	e009      	b.n	800238a <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002376:	f7fe fbf3 	bl	8000b60 <HAL_GetTick>
 800237a:	0002      	movs	r2, r0
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	1ad3      	subs	r3, r2, r3
 8002380:	4a58      	ldr	r2, [pc, #352]	; (80024e4 <HAL_RCC_ClockConfig+0x274>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d901      	bls.n	800238a <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8002386:	2303      	movs	r3, #3
 8002388:	e0a5      	b.n	80024d6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800238a:	4b57      	ldr	r3, [pc, #348]	; (80024e8 <HAL_RCC_ClockConfig+0x278>)
 800238c:	68db      	ldr	r3, [r3, #12]
 800238e:	220c      	movs	r2, #12
 8002390:	4013      	ands	r3, r2
 8002392:	2b08      	cmp	r3, #8
 8002394:	d1ef      	bne.n	8002376 <HAL_RCC_ClockConfig+0x106>
 8002396:	e03a      	b.n	800240e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	2b03      	cmp	r3, #3
 800239e:	d111      	bne.n	80023c4 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023a0:	e009      	b.n	80023b6 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023a2:	f7fe fbdd 	bl	8000b60 <HAL_GetTick>
 80023a6:	0002      	movs	r2, r0
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	1ad3      	subs	r3, r2, r3
 80023ac:	4a4d      	ldr	r2, [pc, #308]	; (80024e4 <HAL_RCC_ClockConfig+0x274>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d901      	bls.n	80023b6 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80023b2:	2303      	movs	r3, #3
 80023b4:	e08f      	b.n	80024d6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023b6:	4b4c      	ldr	r3, [pc, #304]	; (80024e8 <HAL_RCC_ClockConfig+0x278>)
 80023b8:	68db      	ldr	r3, [r3, #12]
 80023ba:	220c      	movs	r2, #12
 80023bc:	4013      	ands	r3, r2
 80023be:	2b0c      	cmp	r3, #12
 80023c0:	d1ef      	bne.n	80023a2 <HAL_RCC_ClockConfig+0x132>
 80023c2:	e024      	b.n	800240e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d11b      	bne.n	8002404 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80023cc:	e009      	b.n	80023e2 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023ce:	f7fe fbc7 	bl	8000b60 <HAL_GetTick>
 80023d2:	0002      	movs	r2, r0
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	4a42      	ldr	r2, [pc, #264]	; (80024e4 <HAL_RCC_ClockConfig+0x274>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d901      	bls.n	80023e2 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e079      	b.n	80024d6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80023e2:	4b41      	ldr	r3, [pc, #260]	; (80024e8 <HAL_RCC_ClockConfig+0x278>)
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	220c      	movs	r2, #12
 80023e8:	4013      	ands	r3, r2
 80023ea:	2b04      	cmp	r3, #4
 80023ec:	d1ef      	bne.n	80023ce <HAL_RCC_ClockConfig+0x15e>
 80023ee:	e00e      	b.n	800240e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023f0:	f7fe fbb6 	bl	8000b60 <HAL_GetTick>
 80023f4:	0002      	movs	r2, r0
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	4a3a      	ldr	r2, [pc, #232]	; (80024e4 <HAL_RCC_ClockConfig+0x274>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d901      	bls.n	8002404 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002400:	2303      	movs	r3, #3
 8002402:	e068      	b.n	80024d6 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002404:	4b38      	ldr	r3, [pc, #224]	; (80024e8 <HAL_RCC_ClockConfig+0x278>)
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	220c      	movs	r2, #12
 800240a:	4013      	ands	r3, r2
 800240c:	d1f0      	bne.n	80023f0 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800240e:	4b34      	ldr	r3, [pc, #208]	; (80024e0 <HAL_RCC_ClockConfig+0x270>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	2201      	movs	r2, #1
 8002414:	4013      	ands	r3, r2
 8002416:	683a      	ldr	r2, [r7, #0]
 8002418:	429a      	cmp	r2, r3
 800241a:	d21e      	bcs.n	800245a <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800241c:	4b30      	ldr	r3, [pc, #192]	; (80024e0 <HAL_RCC_ClockConfig+0x270>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2201      	movs	r2, #1
 8002422:	4393      	bics	r3, r2
 8002424:	0019      	movs	r1, r3
 8002426:	4b2e      	ldr	r3, [pc, #184]	; (80024e0 <HAL_RCC_ClockConfig+0x270>)
 8002428:	683a      	ldr	r2, [r7, #0]
 800242a:	430a      	orrs	r2, r1
 800242c:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800242e:	f7fe fb97 	bl	8000b60 <HAL_GetTick>
 8002432:	0003      	movs	r3, r0
 8002434:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002436:	e009      	b.n	800244c <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002438:	f7fe fb92 	bl	8000b60 <HAL_GetTick>
 800243c:	0002      	movs	r2, r0
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	4a28      	ldr	r2, [pc, #160]	; (80024e4 <HAL_RCC_ClockConfig+0x274>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d901      	bls.n	800244c <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002448:	2303      	movs	r3, #3
 800244a:	e044      	b.n	80024d6 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800244c:	4b24      	ldr	r3, [pc, #144]	; (80024e0 <HAL_RCC_ClockConfig+0x270>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	2201      	movs	r2, #1
 8002452:	4013      	ands	r3, r2
 8002454:	683a      	ldr	r2, [r7, #0]
 8002456:	429a      	cmp	r2, r3
 8002458:	d1ee      	bne.n	8002438 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	2204      	movs	r2, #4
 8002460:	4013      	ands	r3, r2
 8002462:	d009      	beq.n	8002478 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002464:	4b20      	ldr	r3, [pc, #128]	; (80024e8 <HAL_RCC_ClockConfig+0x278>)
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	4a20      	ldr	r2, [pc, #128]	; (80024ec <HAL_RCC_ClockConfig+0x27c>)
 800246a:	4013      	ands	r3, r2
 800246c:	0019      	movs	r1, r3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	68da      	ldr	r2, [r3, #12]
 8002472:	4b1d      	ldr	r3, [pc, #116]	; (80024e8 <HAL_RCC_ClockConfig+0x278>)
 8002474:	430a      	orrs	r2, r1
 8002476:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	2208      	movs	r2, #8
 800247e:	4013      	ands	r3, r2
 8002480:	d00a      	beq.n	8002498 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002482:	4b19      	ldr	r3, [pc, #100]	; (80024e8 <HAL_RCC_ClockConfig+0x278>)
 8002484:	68db      	ldr	r3, [r3, #12]
 8002486:	4a1a      	ldr	r2, [pc, #104]	; (80024f0 <HAL_RCC_ClockConfig+0x280>)
 8002488:	4013      	ands	r3, r2
 800248a:	0019      	movs	r1, r3
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	691b      	ldr	r3, [r3, #16]
 8002490:	00da      	lsls	r2, r3, #3
 8002492:	4b15      	ldr	r3, [pc, #84]	; (80024e8 <HAL_RCC_ClockConfig+0x278>)
 8002494:	430a      	orrs	r2, r1
 8002496:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002498:	f000 f832 	bl	8002500 <HAL_RCC_GetSysClockFreq>
 800249c:	0001      	movs	r1, r0
 800249e:	4b12      	ldr	r3, [pc, #72]	; (80024e8 <HAL_RCC_ClockConfig+0x278>)
 80024a0:	68db      	ldr	r3, [r3, #12]
 80024a2:	091b      	lsrs	r3, r3, #4
 80024a4:	220f      	movs	r2, #15
 80024a6:	4013      	ands	r3, r2
 80024a8:	4a12      	ldr	r2, [pc, #72]	; (80024f4 <HAL_RCC_ClockConfig+0x284>)
 80024aa:	5cd3      	ldrb	r3, [r2, r3]
 80024ac:	000a      	movs	r2, r1
 80024ae:	40da      	lsrs	r2, r3
 80024b0:	4b11      	ldr	r3, [pc, #68]	; (80024f8 <HAL_RCC_ClockConfig+0x288>)
 80024b2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80024b4:	4b11      	ldr	r3, [pc, #68]	; (80024fc <HAL_RCC_ClockConfig+0x28c>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	250b      	movs	r5, #11
 80024ba:	197c      	adds	r4, r7, r5
 80024bc:	0018      	movs	r0, r3
 80024be:	f7fe fb09 	bl	8000ad4 <HAL_InitTick>
 80024c2:	0003      	movs	r3, r0
 80024c4:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80024c6:	197b      	adds	r3, r7, r5
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d002      	beq.n	80024d4 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80024ce:	197b      	adds	r3, r7, r5
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	e000      	b.n	80024d6 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80024d4:	2300      	movs	r3, #0
}
 80024d6:	0018      	movs	r0, r3
 80024d8:	46bd      	mov	sp, r7
 80024da:	b004      	add	sp, #16
 80024dc:	bdb0      	pop	{r4, r5, r7, pc}
 80024de:	46c0      	nop			; (mov r8, r8)
 80024e0:	40022000 	.word	0x40022000
 80024e4:	00001388 	.word	0x00001388
 80024e8:	40021000 	.word	0x40021000
 80024ec:	fffff8ff 	.word	0xfffff8ff
 80024f0:	ffffc7ff 	.word	0xffffc7ff
 80024f4:	08003dc4 	.word	0x08003dc4
 80024f8:	20000000 	.word	0x20000000
 80024fc:	20000004 	.word	0x20000004

08002500 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002500:	b5b0      	push	{r4, r5, r7, lr}
 8002502:	b08e      	sub	sp, #56	; 0x38
 8002504:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002506:	4b4c      	ldr	r3, [pc, #304]	; (8002638 <HAL_RCC_GetSysClockFreq+0x138>)
 8002508:	68db      	ldr	r3, [r3, #12]
 800250a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800250c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800250e:	230c      	movs	r3, #12
 8002510:	4013      	ands	r3, r2
 8002512:	2b0c      	cmp	r3, #12
 8002514:	d014      	beq.n	8002540 <HAL_RCC_GetSysClockFreq+0x40>
 8002516:	d900      	bls.n	800251a <HAL_RCC_GetSysClockFreq+0x1a>
 8002518:	e07b      	b.n	8002612 <HAL_RCC_GetSysClockFreq+0x112>
 800251a:	2b04      	cmp	r3, #4
 800251c:	d002      	beq.n	8002524 <HAL_RCC_GetSysClockFreq+0x24>
 800251e:	2b08      	cmp	r3, #8
 8002520:	d00b      	beq.n	800253a <HAL_RCC_GetSysClockFreq+0x3a>
 8002522:	e076      	b.n	8002612 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002524:	4b44      	ldr	r3, [pc, #272]	; (8002638 <HAL_RCC_GetSysClockFreq+0x138>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	2210      	movs	r2, #16
 800252a:	4013      	ands	r3, r2
 800252c:	d002      	beq.n	8002534 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800252e:	4b43      	ldr	r3, [pc, #268]	; (800263c <HAL_RCC_GetSysClockFreq+0x13c>)
 8002530:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002532:	e07c      	b.n	800262e <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8002534:	4b42      	ldr	r3, [pc, #264]	; (8002640 <HAL_RCC_GetSysClockFreq+0x140>)
 8002536:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002538:	e079      	b.n	800262e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800253a:	4b42      	ldr	r3, [pc, #264]	; (8002644 <HAL_RCC_GetSysClockFreq+0x144>)
 800253c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800253e:	e076      	b.n	800262e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002542:	0c9a      	lsrs	r2, r3, #18
 8002544:	230f      	movs	r3, #15
 8002546:	401a      	ands	r2, r3
 8002548:	4b3f      	ldr	r3, [pc, #252]	; (8002648 <HAL_RCC_GetSysClockFreq+0x148>)
 800254a:	5c9b      	ldrb	r3, [r3, r2]
 800254c:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800254e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002550:	0d9a      	lsrs	r2, r3, #22
 8002552:	2303      	movs	r3, #3
 8002554:	4013      	ands	r3, r2
 8002556:	3301      	adds	r3, #1
 8002558:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800255a:	4b37      	ldr	r3, [pc, #220]	; (8002638 <HAL_RCC_GetSysClockFreq+0x138>)
 800255c:	68da      	ldr	r2, [r3, #12]
 800255e:	2380      	movs	r3, #128	; 0x80
 8002560:	025b      	lsls	r3, r3, #9
 8002562:	4013      	ands	r3, r2
 8002564:	d01a      	beq.n	800259c <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002568:	61bb      	str	r3, [r7, #24]
 800256a:	2300      	movs	r3, #0
 800256c:	61fb      	str	r3, [r7, #28]
 800256e:	4a35      	ldr	r2, [pc, #212]	; (8002644 <HAL_RCC_GetSysClockFreq+0x144>)
 8002570:	2300      	movs	r3, #0
 8002572:	69b8      	ldr	r0, [r7, #24]
 8002574:	69f9      	ldr	r1, [r7, #28]
 8002576:	f7fd fe85 	bl	8000284 <__aeabi_lmul>
 800257a:	0002      	movs	r2, r0
 800257c:	000b      	movs	r3, r1
 800257e:	0010      	movs	r0, r2
 8002580:	0019      	movs	r1, r3
 8002582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002584:	613b      	str	r3, [r7, #16]
 8002586:	2300      	movs	r3, #0
 8002588:	617b      	str	r3, [r7, #20]
 800258a:	693a      	ldr	r2, [r7, #16]
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	f7fd fe59 	bl	8000244 <__aeabi_uldivmod>
 8002592:	0002      	movs	r2, r0
 8002594:	000b      	movs	r3, r1
 8002596:	0013      	movs	r3, r2
 8002598:	637b      	str	r3, [r7, #52]	; 0x34
 800259a:	e037      	b.n	800260c <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800259c:	4b26      	ldr	r3, [pc, #152]	; (8002638 <HAL_RCC_GetSysClockFreq+0x138>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	2210      	movs	r2, #16
 80025a2:	4013      	ands	r3, r2
 80025a4:	d01a      	beq.n	80025dc <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80025a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025a8:	60bb      	str	r3, [r7, #8]
 80025aa:	2300      	movs	r3, #0
 80025ac:	60fb      	str	r3, [r7, #12]
 80025ae:	4a23      	ldr	r2, [pc, #140]	; (800263c <HAL_RCC_GetSysClockFreq+0x13c>)
 80025b0:	2300      	movs	r3, #0
 80025b2:	68b8      	ldr	r0, [r7, #8]
 80025b4:	68f9      	ldr	r1, [r7, #12]
 80025b6:	f7fd fe65 	bl	8000284 <__aeabi_lmul>
 80025ba:	0002      	movs	r2, r0
 80025bc:	000b      	movs	r3, r1
 80025be:	0010      	movs	r0, r2
 80025c0:	0019      	movs	r1, r3
 80025c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c4:	603b      	str	r3, [r7, #0]
 80025c6:	2300      	movs	r3, #0
 80025c8:	607b      	str	r3, [r7, #4]
 80025ca:	683a      	ldr	r2, [r7, #0]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	f7fd fe39 	bl	8000244 <__aeabi_uldivmod>
 80025d2:	0002      	movs	r2, r0
 80025d4:	000b      	movs	r3, r1
 80025d6:	0013      	movs	r3, r2
 80025d8:	637b      	str	r3, [r7, #52]	; 0x34
 80025da:	e017      	b.n	800260c <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80025dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025de:	0018      	movs	r0, r3
 80025e0:	2300      	movs	r3, #0
 80025e2:	0019      	movs	r1, r3
 80025e4:	4a16      	ldr	r2, [pc, #88]	; (8002640 <HAL_RCC_GetSysClockFreq+0x140>)
 80025e6:	2300      	movs	r3, #0
 80025e8:	f7fd fe4c 	bl	8000284 <__aeabi_lmul>
 80025ec:	0002      	movs	r2, r0
 80025ee:	000b      	movs	r3, r1
 80025f0:	0010      	movs	r0, r2
 80025f2:	0019      	movs	r1, r3
 80025f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f6:	001c      	movs	r4, r3
 80025f8:	2300      	movs	r3, #0
 80025fa:	001d      	movs	r5, r3
 80025fc:	0022      	movs	r2, r4
 80025fe:	002b      	movs	r3, r5
 8002600:	f7fd fe20 	bl	8000244 <__aeabi_uldivmod>
 8002604:	0002      	movs	r2, r0
 8002606:	000b      	movs	r3, r1
 8002608:	0013      	movs	r3, r2
 800260a:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 800260c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800260e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002610:	e00d      	b.n	800262e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002612:	4b09      	ldr	r3, [pc, #36]	; (8002638 <HAL_RCC_GetSysClockFreq+0x138>)
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	0b5b      	lsrs	r3, r3, #13
 8002618:	2207      	movs	r2, #7
 800261a:	4013      	ands	r3, r2
 800261c:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800261e:	6a3b      	ldr	r3, [r7, #32]
 8002620:	3301      	adds	r3, #1
 8002622:	2280      	movs	r2, #128	; 0x80
 8002624:	0212      	lsls	r2, r2, #8
 8002626:	409a      	lsls	r2, r3
 8002628:	0013      	movs	r3, r2
 800262a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800262c:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800262e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002630:	0018      	movs	r0, r3
 8002632:	46bd      	mov	sp, r7
 8002634:	b00e      	add	sp, #56	; 0x38
 8002636:	bdb0      	pop	{r4, r5, r7, pc}
 8002638:	40021000 	.word	0x40021000
 800263c:	003d0900 	.word	0x003d0900
 8002640:	00f42400 	.word	0x00f42400
 8002644:	007a1200 	.word	0x007a1200
 8002648:	08003ddc 	.word	0x08003ddc

0800264c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002650:	4b02      	ldr	r3, [pc, #8]	; (800265c <HAL_RCC_GetHCLKFreq+0x10>)
 8002652:	681b      	ldr	r3, [r3, #0]
}
 8002654:	0018      	movs	r0, r3
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
 800265a:	46c0      	nop			; (mov r8, r8)
 800265c:	20000000 	.word	0x20000000

08002660 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002664:	f7ff fff2 	bl	800264c <HAL_RCC_GetHCLKFreq>
 8002668:	0001      	movs	r1, r0
 800266a:	4b06      	ldr	r3, [pc, #24]	; (8002684 <HAL_RCC_GetPCLK1Freq+0x24>)
 800266c:	68db      	ldr	r3, [r3, #12]
 800266e:	0a1b      	lsrs	r3, r3, #8
 8002670:	2207      	movs	r2, #7
 8002672:	4013      	ands	r3, r2
 8002674:	4a04      	ldr	r2, [pc, #16]	; (8002688 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002676:	5cd3      	ldrb	r3, [r2, r3]
 8002678:	40d9      	lsrs	r1, r3
 800267a:	000b      	movs	r3, r1
}
 800267c:	0018      	movs	r0, r3
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	46c0      	nop			; (mov r8, r8)
 8002684:	40021000 	.word	0x40021000
 8002688:	08003dd4 	.word	0x08003dd4

0800268c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002690:	f7ff ffdc 	bl	800264c <HAL_RCC_GetHCLKFreq>
 8002694:	0001      	movs	r1, r0
 8002696:	4b06      	ldr	r3, [pc, #24]	; (80026b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002698:	68db      	ldr	r3, [r3, #12]
 800269a:	0adb      	lsrs	r3, r3, #11
 800269c:	2207      	movs	r2, #7
 800269e:	4013      	ands	r3, r2
 80026a0:	4a04      	ldr	r2, [pc, #16]	; (80026b4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80026a2:	5cd3      	ldrb	r3, [r2, r3]
 80026a4:	40d9      	lsrs	r1, r3
 80026a6:	000b      	movs	r3, r1
}
 80026a8:	0018      	movs	r0, r3
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	46c0      	nop			; (mov r8, r8)
 80026b0:	40021000 	.word	0x40021000
 80026b4:	08003dd4 	.word	0x08003dd4

080026b8 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b086      	sub	sp, #24
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80026c0:	2317      	movs	r3, #23
 80026c2:	18fb      	adds	r3, r7, r3
 80026c4:	2200      	movs	r2, #0
 80026c6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	2220      	movs	r2, #32
 80026ce:	4013      	ands	r3, r2
 80026d0:	d106      	bne.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	2380      	movs	r3, #128	; 0x80
 80026d8:	011b      	lsls	r3, r3, #4
 80026da:	4013      	ands	r3, r2
 80026dc:	d100      	bne.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x28>
 80026de:	e0d9      	b.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026e0:	4ba4      	ldr	r3, [pc, #656]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80026e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026e4:	2380      	movs	r3, #128	; 0x80
 80026e6:	055b      	lsls	r3, r3, #21
 80026e8:	4013      	ands	r3, r2
 80026ea:	d10a      	bne.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026ec:	4ba1      	ldr	r3, [pc, #644]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80026ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026f0:	4ba0      	ldr	r3, [pc, #640]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80026f2:	2180      	movs	r1, #128	; 0x80
 80026f4:	0549      	lsls	r1, r1, #21
 80026f6:	430a      	orrs	r2, r1
 80026f8:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80026fa:	2317      	movs	r3, #23
 80026fc:	18fb      	adds	r3, r7, r3
 80026fe:	2201      	movs	r2, #1
 8002700:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002702:	4b9d      	ldr	r3, [pc, #628]	; (8002978 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	2380      	movs	r3, #128	; 0x80
 8002708:	005b      	lsls	r3, r3, #1
 800270a:	4013      	ands	r3, r2
 800270c:	d11a      	bne.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800270e:	4b9a      	ldr	r3, [pc, #616]	; (8002978 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	4b99      	ldr	r3, [pc, #612]	; (8002978 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8002714:	2180      	movs	r1, #128	; 0x80
 8002716:	0049      	lsls	r1, r1, #1
 8002718:	430a      	orrs	r2, r1
 800271a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800271c:	f7fe fa20 	bl	8000b60 <HAL_GetTick>
 8002720:	0003      	movs	r3, r0
 8002722:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002724:	e008      	b.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002726:	f7fe fa1b 	bl	8000b60 <HAL_GetTick>
 800272a:	0002      	movs	r2, r0
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	1ad3      	subs	r3, r2, r3
 8002730:	2b64      	cmp	r3, #100	; 0x64
 8002732:	d901      	bls.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002734:	2303      	movs	r3, #3
 8002736:	e118      	b.n	800296a <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002738:	4b8f      	ldr	r3, [pc, #572]	; (8002978 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	2380      	movs	r3, #128	; 0x80
 800273e:	005b      	lsls	r3, r3, #1
 8002740:	4013      	ands	r3, r2
 8002742:	d0f0      	beq.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002744:	4b8b      	ldr	r3, [pc, #556]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	23c0      	movs	r3, #192	; 0xc0
 800274a:	039b      	lsls	r3, r3, #14
 800274c:	4013      	ands	r3, r2
 800274e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	685a      	ldr	r2, [r3, #4]
 8002754:	23c0      	movs	r3, #192	; 0xc0
 8002756:	039b      	lsls	r3, r3, #14
 8002758:	4013      	ands	r3, r2
 800275a:	68fa      	ldr	r2, [r7, #12]
 800275c:	429a      	cmp	r2, r3
 800275e:	d107      	bne.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	689a      	ldr	r2, [r3, #8]
 8002764:	23c0      	movs	r3, #192	; 0xc0
 8002766:	039b      	lsls	r3, r3, #14
 8002768:	4013      	ands	r3, r2
 800276a:	68fa      	ldr	r2, [r7, #12]
 800276c:	429a      	cmp	r2, r3
 800276e:	d013      	beq.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	685a      	ldr	r2, [r3, #4]
 8002774:	23c0      	movs	r3, #192	; 0xc0
 8002776:	029b      	lsls	r3, r3, #10
 8002778:	401a      	ands	r2, r3
 800277a:	23c0      	movs	r3, #192	; 0xc0
 800277c:	029b      	lsls	r3, r3, #10
 800277e:	429a      	cmp	r2, r3
 8002780:	d10a      	bne.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002782:	4b7c      	ldr	r3, [pc, #496]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	2380      	movs	r3, #128	; 0x80
 8002788:	029b      	lsls	r3, r3, #10
 800278a:	401a      	ands	r2, r3
 800278c:	2380      	movs	r3, #128	; 0x80
 800278e:	029b      	lsls	r3, r3, #10
 8002790:	429a      	cmp	r2, r3
 8002792:	d101      	bne.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e0e8      	b.n	800296a <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002798:	4b76      	ldr	r3, [pc, #472]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800279a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800279c:	23c0      	movs	r3, #192	; 0xc0
 800279e:	029b      	lsls	r3, r3, #10
 80027a0:	4013      	ands	r3, r2
 80027a2:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d049      	beq.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x186>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	685a      	ldr	r2, [r3, #4]
 80027ae:	23c0      	movs	r3, #192	; 0xc0
 80027b0:	029b      	lsls	r3, r3, #10
 80027b2:	4013      	ands	r3, r2
 80027b4:	68fa      	ldr	r2, [r7, #12]
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d004      	beq.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	2220      	movs	r2, #32
 80027c0:	4013      	ands	r3, r2
 80027c2:	d10d      	bne.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	689a      	ldr	r2, [r3, #8]
 80027c8:	23c0      	movs	r3, #192	; 0xc0
 80027ca:	029b      	lsls	r3, r3, #10
 80027cc:	4013      	ands	r3, r2
 80027ce:	68fa      	ldr	r2, [r7, #12]
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d034      	beq.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	2380      	movs	r3, #128	; 0x80
 80027da:	011b      	lsls	r3, r3, #4
 80027dc:	4013      	ands	r3, r2
 80027de:	d02e      	beq.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80027e0:	4b64      	ldr	r3, [pc, #400]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80027e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027e4:	4a65      	ldr	r2, [pc, #404]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80027e6:	4013      	ands	r3, r2
 80027e8:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80027ea:	4b62      	ldr	r3, [pc, #392]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80027ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80027ee:	4b61      	ldr	r3, [pc, #388]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80027f0:	2180      	movs	r1, #128	; 0x80
 80027f2:	0309      	lsls	r1, r1, #12
 80027f4:	430a      	orrs	r2, r1
 80027f6:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80027f8:	4b5e      	ldr	r3, [pc, #376]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80027fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80027fc:	4b5d      	ldr	r3, [pc, #372]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80027fe:	4960      	ldr	r1, [pc, #384]	; (8002980 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8002800:	400a      	ands	r2, r1
 8002802:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002804:	4b5b      	ldr	r3, [pc, #364]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002806:	68fa      	ldr	r2, [r7, #12]
 8002808:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800280a:	68fa      	ldr	r2, [r7, #12]
 800280c:	2380      	movs	r3, #128	; 0x80
 800280e:	005b      	lsls	r3, r3, #1
 8002810:	4013      	ands	r3, r2
 8002812:	d014      	beq.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002814:	f7fe f9a4 	bl	8000b60 <HAL_GetTick>
 8002818:	0003      	movs	r3, r0
 800281a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800281c:	e009      	b.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800281e:	f7fe f99f 	bl	8000b60 <HAL_GetTick>
 8002822:	0002      	movs	r2, r0
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	4a56      	ldr	r2, [pc, #344]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d901      	bls.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 800282e:	2303      	movs	r3, #3
 8002830:	e09b      	b.n	800296a <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002832:	4b50      	ldr	r3, [pc, #320]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002834:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002836:	2380      	movs	r3, #128	; 0x80
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	4013      	ands	r3, r2
 800283c:	d0ef      	beq.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685a      	ldr	r2, [r3, #4]
 8002842:	23c0      	movs	r3, #192	; 0xc0
 8002844:	029b      	lsls	r3, r3, #10
 8002846:	401a      	ands	r2, r3
 8002848:	23c0      	movs	r3, #192	; 0xc0
 800284a:	029b      	lsls	r3, r3, #10
 800284c:	429a      	cmp	r2, r3
 800284e:	d10c      	bne.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8002850:	4b48      	ldr	r3, [pc, #288]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a4c      	ldr	r2, [pc, #304]	; (8002988 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8002856:	4013      	ands	r3, r2
 8002858:	0019      	movs	r1, r3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	685a      	ldr	r2, [r3, #4]
 800285e:	23c0      	movs	r3, #192	; 0xc0
 8002860:	039b      	lsls	r3, r3, #14
 8002862:	401a      	ands	r2, r3
 8002864:	4b43      	ldr	r3, [pc, #268]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002866:	430a      	orrs	r2, r1
 8002868:	601a      	str	r2, [r3, #0]
 800286a:	4b42      	ldr	r3, [pc, #264]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800286c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685a      	ldr	r2, [r3, #4]
 8002872:	23c0      	movs	r3, #192	; 0xc0
 8002874:	029b      	lsls	r3, r3, #10
 8002876:	401a      	ands	r2, r3
 8002878:	4b3e      	ldr	r3, [pc, #248]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800287a:	430a      	orrs	r2, r1
 800287c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800287e:	2317      	movs	r3, #23
 8002880:	18fb      	adds	r3, r7, r3
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	2b01      	cmp	r3, #1
 8002886:	d105      	bne.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002888:	4b3a      	ldr	r3, [pc, #232]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800288a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800288c:	4b39      	ldr	r3, [pc, #228]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800288e:	493f      	ldr	r1, [pc, #252]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002890:	400a      	ands	r2, r1
 8002892:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	2201      	movs	r2, #1
 800289a:	4013      	ands	r3, r2
 800289c:	d009      	beq.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800289e:	4b35      	ldr	r3, [pc, #212]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80028a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028a2:	2203      	movs	r2, #3
 80028a4:	4393      	bics	r3, r2
 80028a6:	0019      	movs	r1, r3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	68da      	ldr	r2, [r3, #12]
 80028ac:	4b31      	ldr	r3, [pc, #196]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80028ae:	430a      	orrs	r2, r1
 80028b0:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	2202      	movs	r2, #2
 80028b8:	4013      	ands	r3, r2
 80028ba:	d009      	beq.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80028bc:	4b2d      	ldr	r3, [pc, #180]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80028be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028c0:	220c      	movs	r2, #12
 80028c2:	4393      	bics	r3, r2
 80028c4:	0019      	movs	r1, r3
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	691a      	ldr	r2, [r3, #16]
 80028ca:	4b2a      	ldr	r3, [pc, #168]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80028cc:	430a      	orrs	r2, r1
 80028ce:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	2204      	movs	r2, #4
 80028d6:	4013      	ands	r3, r2
 80028d8:	d009      	beq.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80028da:	4b26      	ldr	r3, [pc, #152]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80028dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028de:	4a2c      	ldr	r2, [pc, #176]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80028e0:	4013      	ands	r3, r2
 80028e2:	0019      	movs	r1, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	695a      	ldr	r2, [r3, #20]
 80028e8:	4b22      	ldr	r3, [pc, #136]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80028ea:	430a      	orrs	r2, r1
 80028ec:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	2208      	movs	r2, #8
 80028f4:	4013      	ands	r3, r2
 80028f6:	d009      	beq.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80028f8:	4b1e      	ldr	r3, [pc, #120]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80028fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028fc:	4a25      	ldr	r2, [pc, #148]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80028fe:	4013      	ands	r3, r2
 8002900:	0019      	movs	r1, r3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	699a      	ldr	r2, [r3, #24]
 8002906:	4b1b      	ldr	r3, [pc, #108]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002908:	430a      	orrs	r2, r1
 800290a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	2380      	movs	r3, #128	; 0x80
 8002912:	005b      	lsls	r3, r3, #1
 8002914:	4013      	ands	r3, r2
 8002916:	d009      	beq.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002918:	4b16      	ldr	r3, [pc, #88]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800291a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800291c:	4a17      	ldr	r2, [pc, #92]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800291e:	4013      	ands	r3, r2
 8002920:	0019      	movs	r1, r3
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	69da      	ldr	r2, [r3, #28]
 8002926:	4b13      	ldr	r3, [pc, #76]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002928:	430a      	orrs	r2, r1
 800292a:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	2240      	movs	r2, #64	; 0x40
 8002932:	4013      	ands	r3, r2
 8002934:	d009      	beq.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002936:	4b0f      	ldr	r3, [pc, #60]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800293a:	4a17      	ldr	r2, [pc, #92]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800293c:	4013      	ands	r3, r2
 800293e:	0019      	movs	r1, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002944:	4b0b      	ldr	r3, [pc, #44]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002946:	430a      	orrs	r2, r1
 8002948:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	2280      	movs	r2, #128	; 0x80
 8002950:	4013      	ands	r3, r2
 8002952:	d009      	beq.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002954:	4b07      	ldr	r3, [pc, #28]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002956:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002958:	4a10      	ldr	r2, [pc, #64]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800295a:	4013      	ands	r3, r2
 800295c:	0019      	movs	r1, r3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6a1a      	ldr	r2, [r3, #32]
 8002962:	4b04      	ldr	r3, [pc, #16]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002964:	430a      	orrs	r2, r1
 8002966:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8002968:	2300      	movs	r3, #0
}
 800296a:	0018      	movs	r0, r3
 800296c:	46bd      	mov	sp, r7
 800296e:	b006      	add	sp, #24
 8002970:	bd80      	pop	{r7, pc}
 8002972:	46c0      	nop			; (mov r8, r8)
 8002974:	40021000 	.word	0x40021000
 8002978:	40007000 	.word	0x40007000
 800297c:	fffcffff 	.word	0xfffcffff
 8002980:	fff7ffff 	.word	0xfff7ffff
 8002984:	00001388 	.word	0x00001388
 8002988:	ffcfffff 	.word	0xffcfffff
 800298c:	efffffff 	.word	0xefffffff
 8002990:	fffff3ff 	.word	0xfffff3ff
 8002994:	ffffcfff 	.word	0xffffcfff
 8002998:	fbffffff 	.word	0xfbffffff
 800299c:	fff3ffff 	.word	0xfff3ffff

080029a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d101      	bne.n	80029b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e044      	b.n	8002a3c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d107      	bne.n	80029ca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2274      	movs	r2, #116	; 0x74
 80029be:	2100      	movs	r1, #0
 80029c0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	0018      	movs	r0, r3
 80029c6:	f7fd ffa3 	bl	8000910 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2224      	movs	r2, #36	; 0x24
 80029ce:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	2101      	movs	r1, #1
 80029dc:	438a      	bics	r2, r1
 80029de:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	0018      	movs	r0, r3
 80029e4:	f000 f8d8 	bl	8002b98 <UART_SetConfig>
 80029e8:	0003      	movs	r3, r0
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d101      	bne.n	80029f2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e024      	b.n	8002a3c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d003      	beq.n	8002a02 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	0018      	movs	r0, r3
 80029fe:	f000 fb6b 	bl	80030d8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	685a      	ldr	r2, [r3, #4]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	490d      	ldr	r1, [pc, #52]	; (8002a44 <HAL_UART_Init+0xa4>)
 8002a0e:	400a      	ands	r2, r1
 8002a10:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	689a      	ldr	r2, [r3, #8]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	212a      	movs	r1, #42	; 0x2a
 8002a1e:	438a      	bics	r2, r1
 8002a20:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	2101      	movs	r1, #1
 8002a2e:	430a      	orrs	r2, r1
 8002a30:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	0018      	movs	r0, r3
 8002a36:	f000 fc03 	bl	8003240 <UART_CheckIdleState>
 8002a3a:	0003      	movs	r3, r0
}
 8002a3c:	0018      	movs	r0, r3
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	b002      	add	sp, #8
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	ffffb7ff 	.word	0xffffb7ff

08002a48 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b08a      	sub	sp, #40	; 0x28
 8002a4c:	af02      	add	r7, sp, #8
 8002a4e:	60f8      	str	r0, [r7, #12]
 8002a50:	60b9      	str	r1, [r7, #8]
 8002a52:	603b      	str	r3, [r7, #0]
 8002a54:	1dbb      	adds	r3, r7, #6
 8002a56:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a5c:	2b20      	cmp	r3, #32
 8002a5e:	d000      	beq.n	8002a62 <HAL_UART_Transmit+0x1a>
 8002a60:	e095      	b.n	8002b8e <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d003      	beq.n	8002a70 <HAL_UART_Transmit+0x28>
 8002a68:	1dbb      	adds	r3, r7, #6
 8002a6a:	881b      	ldrh	r3, [r3, #0]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d101      	bne.n	8002a74 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e08d      	b.n	8002b90 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	689a      	ldr	r2, [r3, #8]
 8002a78:	2380      	movs	r3, #128	; 0x80
 8002a7a:	015b      	lsls	r3, r3, #5
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d109      	bne.n	8002a94 <HAL_UART_Transmit+0x4c>
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	691b      	ldr	r3, [r3, #16]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d105      	bne.n	8002a94 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	d001      	beq.n	8002a94 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e07d      	b.n	8002b90 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2274      	movs	r2, #116	; 0x74
 8002a98:	5c9b      	ldrb	r3, [r3, r2]
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d101      	bne.n	8002aa2 <HAL_UART_Transmit+0x5a>
 8002a9e:	2302      	movs	r3, #2
 8002aa0:	e076      	b.n	8002b90 <HAL_UART_Transmit+0x148>
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2274      	movs	r2, #116	; 0x74
 8002aa6:	2101      	movs	r1, #1
 8002aa8:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2280      	movs	r2, #128	; 0x80
 8002aae:	2100      	movs	r1, #0
 8002ab0:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2221      	movs	r2, #33	; 0x21
 8002ab6:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ab8:	f7fe f852 	bl	8000b60 <HAL_GetTick>
 8002abc:	0003      	movs	r3, r0
 8002abe:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	1dba      	adds	r2, r7, #6
 8002ac4:	2150      	movs	r1, #80	; 0x50
 8002ac6:	8812      	ldrh	r2, [r2, #0]
 8002ac8:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	1dba      	adds	r2, r7, #6
 8002ace:	2152      	movs	r1, #82	; 0x52
 8002ad0:	8812      	ldrh	r2, [r2, #0]
 8002ad2:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	689a      	ldr	r2, [r3, #8]
 8002ad8:	2380      	movs	r3, #128	; 0x80
 8002ada:	015b      	lsls	r3, r3, #5
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d108      	bne.n	8002af2 <HAL_UART_Transmit+0xaa>
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	691b      	ldr	r3, [r3, #16]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d104      	bne.n	8002af2 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	61bb      	str	r3, [r7, #24]
 8002af0:	e003      	b.n	8002afa <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002af6:	2300      	movs	r3, #0
 8002af8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2274      	movs	r2, #116	; 0x74
 8002afe:	2100      	movs	r1, #0
 8002b00:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8002b02:	e02c      	b.n	8002b5e <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b04:	697a      	ldr	r2, [r7, #20]
 8002b06:	68f8      	ldr	r0, [r7, #12]
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	9300      	str	r3, [sp, #0]
 8002b0c:	0013      	movs	r3, r2
 8002b0e:	2200      	movs	r2, #0
 8002b10:	2180      	movs	r1, #128	; 0x80
 8002b12:	f000 fbdd 	bl	80032d0 <UART_WaitOnFlagUntilTimeout>
 8002b16:	1e03      	subs	r3, r0, #0
 8002b18:	d001      	beq.n	8002b1e <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e038      	b.n	8002b90 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d10b      	bne.n	8002b3c <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b24:	69bb      	ldr	r3, [r7, #24]
 8002b26:	881b      	ldrh	r3, [r3, #0]
 8002b28:	001a      	movs	r2, r3
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	05d2      	lsls	r2, r2, #23
 8002b30:	0dd2      	lsrs	r2, r2, #23
 8002b32:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002b34:	69bb      	ldr	r3, [r7, #24]
 8002b36:	3302      	adds	r3, #2
 8002b38:	61bb      	str	r3, [r7, #24]
 8002b3a:	e007      	b.n	8002b4c <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	781a      	ldrb	r2, [r3, #0]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	3301      	adds	r3, #1
 8002b4a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2252      	movs	r2, #82	; 0x52
 8002b50:	5a9b      	ldrh	r3, [r3, r2]
 8002b52:	b29b      	uxth	r3, r3
 8002b54:	3b01      	subs	r3, #1
 8002b56:	b299      	uxth	r1, r3
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2252      	movs	r2, #82	; 0x52
 8002b5c:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2252      	movs	r2, #82	; 0x52
 8002b62:	5a9b      	ldrh	r3, [r3, r2]
 8002b64:	b29b      	uxth	r3, r3
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d1cc      	bne.n	8002b04 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b6a:	697a      	ldr	r2, [r7, #20]
 8002b6c:	68f8      	ldr	r0, [r7, #12]
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	9300      	str	r3, [sp, #0]
 8002b72:	0013      	movs	r3, r2
 8002b74:	2200      	movs	r2, #0
 8002b76:	2140      	movs	r1, #64	; 0x40
 8002b78:	f000 fbaa 	bl	80032d0 <UART_WaitOnFlagUntilTimeout>
 8002b7c:	1e03      	subs	r3, r0, #0
 8002b7e:	d001      	beq.n	8002b84 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 8002b80:	2303      	movs	r3, #3
 8002b82:	e005      	b.n	8002b90 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2220      	movs	r2, #32
 8002b88:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	e000      	b.n	8002b90 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8002b8e:	2302      	movs	r3, #2
  }
}
 8002b90:	0018      	movs	r0, r3
 8002b92:	46bd      	mov	sp, r7
 8002b94:	b008      	add	sp, #32
 8002b96:	bd80      	pop	{r7, pc}

08002b98 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b98:	b5b0      	push	{r4, r5, r7, lr}
 8002b9a:	b08e      	sub	sp, #56	; 0x38
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002ba0:	231a      	movs	r3, #26
 8002ba2:	2218      	movs	r2, #24
 8002ba4:	189b      	adds	r3, r3, r2
 8002ba6:	19db      	adds	r3, r3, r7
 8002ba8:	2200      	movs	r2, #0
 8002baa:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	689a      	ldr	r2, [r3, #8]
 8002bb0:	69fb      	ldr	r3, [r7, #28]
 8002bb2:	691b      	ldr	r3, [r3, #16]
 8002bb4:	431a      	orrs	r2, r3
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	695b      	ldr	r3, [r3, #20]
 8002bba:	431a      	orrs	r2, r3
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	69db      	ldr	r3, [r3, #28]
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002bc4:	69fb      	ldr	r3, [r7, #28]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4ac3      	ldr	r2, [pc, #780]	; (8002ed8 <UART_SetConfig+0x340>)
 8002bcc:	4013      	ands	r3, r2
 8002bce:	0019      	movs	r1, r3
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002bd6:	430a      	orrs	r2, r1
 8002bd8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	4abe      	ldr	r2, [pc, #760]	; (8002edc <UART_SetConfig+0x344>)
 8002be2:	4013      	ands	r3, r2
 8002be4:	0019      	movs	r1, r3
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	68da      	ldr	r2, [r3, #12]
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	430a      	orrs	r2, r1
 8002bf0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	699b      	ldr	r3, [r3, #24]
 8002bf6:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4ab8      	ldr	r2, [pc, #736]	; (8002ee0 <UART_SetConfig+0x348>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d004      	beq.n	8002c0c <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	6a1b      	ldr	r3, [r3, #32]
 8002c06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	4ab4      	ldr	r2, [pc, #720]	; (8002ee4 <UART_SetConfig+0x34c>)
 8002c14:	4013      	ands	r3, r2
 8002c16:	0019      	movs	r1, r3
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c1e:	430a      	orrs	r2, r1
 8002c20:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4ab0      	ldr	r2, [pc, #704]	; (8002ee8 <UART_SetConfig+0x350>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d131      	bne.n	8002c90 <UART_SetConfig+0xf8>
 8002c2c:	4baf      	ldr	r3, [pc, #700]	; (8002eec <UART_SetConfig+0x354>)
 8002c2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c30:	2203      	movs	r2, #3
 8002c32:	4013      	ands	r3, r2
 8002c34:	2b03      	cmp	r3, #3
 8002c36:	d01d      	beq.n	8002c74 <UART_SetConfig+0xdc>
 8002c38:	d823      	bhi.n	8002c82 <UART_SetConfig+0xea>
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d00c      	beq.n	8002c58 <UART_SetConfig+0xc0>
 8002c3e:	d820      	bhi.n	8002c82 <UART_SetConfig+0xea>
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d002      	beq.n	8002c4a <UART_SetConfig+0xb2>
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d00e      	beq.n	8002c66 <UART_SetConfig+0xce>
 8002c48:	e01b      	b.n	8002c82 <UART_SetConfig+0xea>
 8002c4a:	231b      	movs	r3, #27
 8002c4c:	2218      	movs	r2, #24
 8002c4e:	189b      	adds	r3, r3, r2
 8002c50:	19db      	adds	r3, r3, r7
 8002c52:	2201      	movs	r2, #1
 8002c54:	701a      	strb	r2, [r3, #0]
 8002c56:	e0b4      	b.n	8002dc2 <UART_SetConfig+0x22a>
 8002c58:	231b      	movs	r3, #27
 8002c5a:	2218      	movs	r2, #24
 8002c5c:	189b      	adds	r3, r3, r2
 8002c5e:	19db      	adds	r3, r3, r7
 8002c60:	2202      	movs	r2, #2
 8002c62:	701a      	strb	r2, [r3, #0]
 8002c64:	e0ad      	b.n	8002dc2 <UART_SetConfig+0x22a>
 8002c66:	231b      	movs	r3, #27
 8002c68:	2218      	movs	r2, #24
 8002c6a:	189b      	adds	r3, r3, r2
 8002c6c:	19db      	adds	r3, r3, r7
 8002c6e:	2204      	movs	r2, #4
 8002c70:	701a      	strb	r2, [r3, #0]
 8002c72:	e0a6      	b.n	8002dc2 <UART_SetConfig+0x22a>
 8002c74:	231b      	movs	r3, #27
 8002c76:	2218      	movs	r2, #24
 8002c78:	189b      	adds	r3, r3, r2
 8002c7a:	19db      	adds	r3, r3, r7
 8002c7c:	2208      	movs	r2, #8
 8002c7e:	701a      	strb	r2, [r3, #0]
 8002c80:	e09f      	b.n	8002dc2 <UART_SetConfig+0x22a>
 8002c82:	231b      	movs	r3, #27
 8002c84:	2218      	movs	r2, #24
 8002c86:	189b      	adds	r3, r3, r2
 8002c88:	19db      	adds	r3, r3, r7
 8002c8a:	2210      	movs	r2, #16
 8002c8c:	701a      	strb	r2, [r3, #0]
 8002c8e:	e098      	b.n	8002dc2 <UART_SetConfig+0x22a>
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a96      	ldr	r2, [pc, #600]	; (8002ef0 <UART_SetConfig+0x358>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d131      	bne.n	8002cfe <UART_SetConfig+0x166>
 8002c9a:	4b94      	ldr	r3, [pc, #592]	; (8002eec <UART_SetConfig+0x354>)
 8002c9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c9e:	220c      	movs	r2, #12
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	2b0c      	cmp	r3, #12
 8002ca4:	d01d      	beq.n	8002ce2 <UART_SetConfig+0x14a>
 8002ca6:	d823      	bhi.n	8002cf0 <UART_SetConfig+0x158>
 8002ca8:	2b08      	cmp	r3, #8
 8002caa:	d00c      	beq.n	8002cc6 <UART_SetConfig+0x12e>
 8002cac:	d820      	bhi.n	8002cf0 <UART_SetConfig+0x158>
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d002      	beq.n	8002cb8 <UART_SetConfig+0x120>
 8002cb2:	2b04      	cmp	r3, #4
 8002cb4:	d00e      	beq.n	8002cd4 <UART_SetConfig+0x13c>
 8002cb6:	e01b      	b.n	8002cf0 <UART_SetConfig+0x158>
 8002cb8:	231b      	movs	r3, #27
 8002cba:	2218      	movs	r2, #24
 8002cbc:	189b      	adds	r3, r3, r2
 8002cbe:	19db      	adds	r3, r3, r7
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	701a      	strb	r2, [r3, #0]
 8002cc4:	e07d      	b.n	8002dc2 <UART_SetConfig+0x22a>
 8002cc6:	231b      	movs	r3, #27
 8002cc8:	2218      	movs	r2, #24
 8002cca:	189b      	adds	r3, r3, r2
 8002ccc:	19db      	adds	r3, r3, r7
 8002cce:	2202      	movs	r2, #2
 8002cd0:	701a      	strb	r2, [r3, #0]
 8002cd2:	e076      	b.n	8002dc2 <UART_SetConfig+0x22a>
 8002cd4:	231b      	movs	r3, #27
 8002cd6:	2218      	movs	r2, #24
 8002cd8:	189b      	adds	r3, r3, r2
 8002cda:	19db      	adds	r3, r3, r7
 8002cdc:	2204      	movs	r2, #4
 8002cde:	701a      	strb	r2, [r3, #0]
 8002ce0:	e06f      	b.n	8002dc2 <UART_SetConfig+0x22a>
 8002ce2:	231b      	movs	r3, #27
 8002ce4:	2218      	movs	r2, #24
 8002ce6:	189b      	adds	r3, r3, r2
 8002ce8:	19db      	adds	r3, r3, r7
 8002cea:	2208      	movs	r2, #8
 8002cec:	701a      	strb	r2, [r3, #0]
 8002cee:	e068      	b.n	8002dc2 <UART_SetConfig+0x22a>
 8002cf0:	231b      	movs	r3, #27
 8002cf2:	2218      	movs	r2, #24
 8002cf4:	189b      	adds	r3, r3, r2
 8002cf6:	19db      	adds	r3, r3, r7
 8002cf8:	2210      	movs	r2, #16
 8002cfa:	701a      	strb	r2, [r3, #0]
 8002cfc:	e061      	b.n	8002dc2 <UART_SetConfig+0x22a>
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a7c      	ldr	r2, [pc, #496]	; (8002ef4 <UART_SetConfig+0x35c>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d106      	bne.n	8002d16 <UART_SetConfig+0x17e>
 8002d08:	231b      	movs	r3, #27
 8002d0a:	2218      	movs	r2, #24
 8002d0c:	189b      	adds	r3, r3, r2
 8002d0e:	19db      	adds	r3, r3, r7
 8002d10:	2200      	movs	r2, #0
 8002d12:	701a      	strb	r2, [r3, #0]
 8002d14:	e055      	b.n	8002dc2 <UART_SetConfig+0x22a>
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a77      	ldr	r2, [pc, #476]	; (8002ef8 <UART_SetConfig+0x360>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d106      	bne.n	8002d2e <UART_SetConfig+0x196>
 8002d20:	231b      	movs	r3, #27
 8002d22:	2218      	movs	r2, #24
 8002d24:	189b      	adds	r3, r3, r2
 8002d26:	19db      	adds	r3, r3, r7
 8002d28:	2200      	movs	r2, #0
 8002d2a:	701a      	strb	r2, [r3, #0]
 8002d2c:	e049      	b.n	8002dc2 <UART_SetConfig+0x22a>
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a6b      	ldr	r2, [pc, #428]	; (8002ee0 <UART_SetConfig+0x348>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d13e      	bne.n	8002db6 <UART_SetConfig+0x21e>
 8002d38:	4b6c      	ldr	r3, [pc, #432]	; (8002eec <UART_SetConfig+0x354>)
 8002d3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002d3c:	23c0      	movs	r3, #192	; 0xc0
 8002d3e:	011b      	lsls	r3, r3, #4
 8002d40:	4013      	ands	r3, r2
 8002d42:	22c0      	movs	r2, #192	; 0xc0
 8002d44:	0112      	lsls	r2, r2, #4
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d027      	beq.n	8002d9a <UART_SetConfig+0x202>
 8002d4a:	22c0      	movs	r2, #192	; 0xc0
 8002d4c:	0112      	lsls	r2, r2, #4
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d82a      	bhi.n	8002da8 <UART_SetConfig+0x210>
 8002d52:	2280      	movs	r2, #128	; 0x80
 8002d54:	0112      	lsls	r2, r2, #4
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d011      	beq.n	8002d7e <UART_SetConfig+0x1e6>
 8002d5a:	2280      	movs	r2, #128	; 0x80
 8002d5c:	0112      	lsls	r2, r2, #4
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d822      	bhi.n	8002da8 <UART_SetConfig+0x210>
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d004      	beq.n	8002d70 <UART_SetConfig+0x1d8>
 8002d66:	2280      	movs	r2, #128	; 0x80
 8002d68:	00d2      	lsls	r2, r2, #3
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d00e      	beq.n	8002d8c <UART_SetConfig+0x1f4>
 8002d6e:	e01b      	b.n	8002da8 <UART_SetConfig+0x210>
 8002d70:	231b      	movs	r3, #27
 8002d72:	2218      	movs	r2, #24
 8002d74:	189b      	adds	r3, r3, r2
 8002d76:	19db      	adds	r3, r3, r7
 8002d78:	2200      	movs	r2, #0
 8002d7a:	701a      	strb	r2, [r3, #0]
 8002d7c:	e021      	b.n	8002dc2 <UART_SetConfig+0x22a>
 8002d7e:	231b      	movs	r3, #27
 8002d80:	2218      	movs	r2, #24
 8002d82:	189b      	adds	r3, r3, r2
 8002d84:	19db      	adds	r3, r3, r7
 8002d86:	2202      	movs	r2, #2
 8002d88:	701a      	strb	r2, [r3, #0]
 8002d8a:	e01a      	b.n	8002dc2 <UART_SetConfig+0x22a>
 8002d8c:	231b      	movs	r3, #27
 8002d8e:	2218      	movs	r2, #24
 8002d90:	189b      	adds	r3, r3, r2
 8002d92:	19db      	adds	r3, r3, r7
 8002d94:	2204      	movs	r2, #4
 8002d96:	701a      	strb	r2, [r3, #0]
 8002d98:	e013      	b.n	8002dc2 <UART_SetConfig+0x22a>
 8002d9a:	231b      	movs	r3, #27
 8002d9c:	2218      	movs	r2, #24
 8002d9e:	189b      	adds	r3, r3, r2
 8002da0:	19db      	adds	r3, r3, r7
 8002da2:	2208      	movs	r2, #8
 8002da4:	701a      	strb	r2, [r3, #0]
 8002da6:	e00c      	b.n	8002dc2 <UART_SetConfig+0x22a>
 8002da8:	231b      	movs	r3, #27
 8002daa:	2218      	movs	r2, #24
 8002dac:	189b      	adds	r3, r3, r2
 8002dae:	19db      	adds	r3, r3, r7
 8002db0:	2210      	movs	r2, #16
 8002db2:	701a      	strb	r2, [r3, #0]
 8002db4:	e005      	b.n	8002dc2 <UART_SetConfig+0x22a>
 8002db6:	231b      	movs	r3, #27
 8002db8:	2218      	movs	r2, #24
 8002dba:	189b      	adds	r3, r3, r2
 8002dbc:	19db      	adds	r3, r3, r7
 8002dbe:	2210      	movs	r2, #16
 8002dc0:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a46      	ldr	r2, [pc, #280]	; (8002ee0 <UART_SetConfig+0x348>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d000      	beq.n	8002dce <UART_SetConfig+0x236>
 8002dcc:	e09a      	b.n	8002f04 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002dce:	231b      	movs	r3, #27
 8002dd0:	2218      	movs	r2, #24
 8002dd2:	189b      	adds	r3, r3, r2
 8002dd4:	19db      	adds	r3, r3, r7
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	2b08      	cmp	r3, #8
 8002dda:	d01d      	beq.n	8002e18 <UART_SetConfig+0x280>
 8002ddc:	dc20      	bgt.n	8002e20 <UART_SetConfig+0x288>
 8002dde:	2b04      	cmp	r3, #4
 8002de0:	d015      	beq.n	8002e0e <UART_SetConfig+0x276>
 8002de2:	dc1d      	bgt.n	8002e20 <UART_SetConfig+0x288>
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d002      	beq.n	8002dee <UART_SetConfig+0x256>
 8002de8:	2b02      	cmp	r3, #2
 8002dea:	d005      	beq.n	8002df8 <UART_SetConfig+0x260>
 8002dec:	e018      	b.n	8002e20 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002dee:	f7ff fc37 	bl	8002660 <HAL_RCC_GetPCLK1Freq>
 8002df2:	0003      	movs	r3, r0
 8002df4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002df6:	e01c      	b.n	8002e32 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002df8:	4b3c      	ldr	r3, [pc, #240]	; (8002eec <UART_SetConfig+0x354>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	2210      	movs	r2, #16
 8002dfe:	4013      	ands	r3, r2
 8002e00:	d002      	beq.n	8002e08 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002e02:	4b3e      	ldr	r3, [pc, #248]	; (8002efc <UART_SetConfig+0x364>)
 8002e04:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002e06:	e014      	b.n	8002e32 <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8002e08:	4b3d      	ldr	r3, [pc, #244]	; (8002f00 <UART_SetConfig+0x368>)
 8002e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002e0c:	e011      	b.n	8002e32 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e0e:	f7ff fb77 	bl	8002500 <HAL_RCC_GetSysClockFreq>
 8002e12:	0003      	movs	r3, r0
 8002e14:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002e16:	e00c      	b.n	8002e32 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e18:	2380      	movs	r3, #128	; 0x80
 8002e1a:	021b      	lsls	r3, r3, #8
 8002e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002e1e:	e008      	b.n	8002e32 <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8002e20:	2300      	movs	r3, #0
 8002e22:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002e24:	231a      	movs	r3, #26
 8002e26:	2218      	movs	r2, #24
 8002e28:	189b      	adds	r3, r3, r2
 8002e2a:	19db      	adds	r3, r3, r7
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	701a      	strb	r2, [r3, #0]
        break;
 8002e30:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d100      	bne.n	8002e3a <UART_SetConfig+0x2a2>
 8002e38:	e134      	b.n	80030a4 <UART_SetConfig+0x50c>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	685a      	ldr	r2, [r3, #4]
 8002e3e:	0013      	movs	r3, r2
 8002e40:	005b      	lsls	r3, r3, #1
 8002e42:	189b      	adds	r3, r3, r2
 8002e44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d305      	bcc.n	8002e56 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002e50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d906      	bls.n	8002e64 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 8002e56:	231a      	movs	r3, #26
 8002e58:	2218      	movs	r2, #24
 8002e5a:	189b      	adds	r3, r3, r2
 8002e5c:	19db      	adds	r3, r3, r7
 8002e5e:	2201      	movs	r2, #1
 8002e60:	701a      	strb	r2, [r3, #0]
 8002e62:	e11f      	b.n	80030a4 <UART_SetConfig+0x50c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e66:	613b      	str	r3, [r7, #16]
 8002e68:	2300      	movs	r3, #0
 8002e6a:	617b      	str	r3, [r7, #20]
 8002e6c:	6939      	ldr	r1, [r7, #16]
 8002e6e:	697a      	ldr	r2, [r7, #20]
 8002e70:	000b      	movs	r3, r1
 8002e72:	0e1b      	lsrs	r3, r3, #24
 8002e74:	0010      	movs	r0, r2
 8002e76:	0205      	lsls	r5, r0, #8
 8002e78:	431d      	orrs	r5, r3
 8002e7a:	000b      	movs	r3, r1
 8002e7c:	021c      	lsls	r4, r3, #8
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	085b      	lsrs	r3, r3, #1
 8002e84:	60bb      	str	r3, [r7, #8]
 8002e86:	2300      	movs	r3, #0
 8002e88:	60fb      	str	r3, [r7, #12]
 8002e8a:	68b8      	ldr	r0, [r7, #8]
 8002e8c:	68f9      	ldr	r1, [r7, #12]
 8002e8e:	1900      	adds	r0, r0, r4
 8002e90:	4169      	adcs	r1, r5
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	603b      	str	r3, [r7, #0]
 8002e98:	2300      	movs	r3, #0
 8002e9a:	607b      	str	r3, [r7, #4]
 8002e9c:	683a      	ldr	r2, [r7, #0]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	f7fd f9d0 	bl	8000244 <__aeabi_uldivmod>
 8002ea4:	0002      	movs	r2, r0
 8002ea6:	000b      	movs	r3, r1
 8002ea8:	0013      	movs	r3, r2
 8002eaa:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002eac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002eae:	23c0      	movs	r3, #192	; 0xc0
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d309      	bcc.n	8002eca <UART_SetConfig+0x332>
 8002eb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002eb8:	2380      	movs	r3, #128	; 0x80
 8002eba:	035b      	lsls	r3, r3, #13
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d204      	bcs.n	8002eca <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ec6:	60da      	str	r2, [r3, #12]
 8002ec8:	e0ec      	b.n	80030a4 <UART_SetConfig+0x50c>
        }
        else
        {
          ret = HAL_ERROR;
 8002eca:	231a      	movs	r3, #26
 8002ecc:	2218      	movs	r2, #24
 8002ece:	189b      	adds	r3, r3, r2
 8002ed0:	19db      	adds	r3, r3, r7
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	701a      	strb	r2, [r3, #0]
 8002ed6:	e0e5      	b.n	80030a4 <UART_SetConfig+0x50c>
 8002ed8:	efff69f3 	.word	0xefff69f3
 8002edc:	ffffcfff 	.word	0xffffcfff
 8002ee0:	40004800 	.word	0x40004800
 8002ee4:	fffff4ff 	.word	0xfffff4ff
 8002ee8:	40013800 	.word	0x40013800
 8002eec:	40021000 	.word	0x40021000
 8002ef0:	40004400 	.word	0x40004400
 8002ef4:	40004c00 	.word	0x40004c00
 8002ef8:	40005000 	.word	0x40005000
 8002efc:	003d0900 	.word	0x003d0900
 8002f00:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f04:	69fb      	ldr	r3, [r7, #28]
 8002f06:	69da      	ldr	r2, [r3, #28]
 8002f08:	2380      	movs	r3, #128	; 0x80
 8002f0a:	021b      	lsls	r3, r3, #8
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d000      	beq.n	8002f12 <UART_SetConfig+0x37a>
 8002f10:	e071      	b.n	8002ff6 <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 8002f12:	231b      	movs	r3, #27
 8002f14:	2218      	movs	r2, #24
 8002f16:	189b      	adds	r3, r3, r2
 8002f18:	19db      	adds	r3, r3, r7
 8002f1a:	781b      	ldrb	r3, [r3, #0]
 8002f1c:	2b08      	cmp	r3, #8
 8002f1e:	d822      	bhi.n	8002f66 <UART_SetConfig+0x3ce>
 8002f20:	009a      	lsls	r2, r3, #2
 8002f22:	4b68      	ldr	r3, [pc, #416]	; (80030c4 <UART_SetConfig+0x52c>)
 8002f24:	18d3      	adds	r3, r2, r3
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f2a:	f7ff fb99 	bl	8002660 <HAL_RCC_GetPCLK1Freq>
 8002f2e:	0003      	movs	r3, r0
 8002f30:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002f32:	e021      	b.n	8002f78 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002f34:	f7ff fbaa 	bl	800268c <HAL_RCC_GetPCLK2Freq>
 8002f38:	0003      	movs	r3, r0
 8002f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002f3c:	e01c      	b.n	8002f78 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002f3e:	4b62      	ldr	r3, [pc, #392]	; (80030c8 <UART_SetConfig+0x530>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	2210      	movs	r2, #16
 8002f44:	4013      	ands	r3, r2
 8002f46:	d002      	beq.n	8002f4e <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002f48:	4b60      	ldr	r3, [pc, #384]	; (80030cc <UART_SetConfig+0x534>)
 8002f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002f4c:	e014      	b.n	8002f78 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 8002f4e:	4b60      	ldr	r3, [pc, #384]	; (80030d0 <UART_SetConfig+0x538>)
 8002f50:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002f52:	e011      	b.n	8002f78 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f54:	f7ff fad4 	bl	8002500 <HAL_RCC_GetSysClockFreq>
 8002f58:	0003      	movs	r3, r0
 8002f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002f5c:	e00c      	b.n	8002f78 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f5e:	2380      	movs	r3, #128	; 0x80
 8002f60:	021b      	lsls	r3, r3, #8
 8002f62:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002f64:	e008      	b.n	8002f78 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 8002f66:	2300      	movs	r3, #0
 8002f68:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002f6a:	231a      	movs	r3, #26
 8002f6c:	2218      	movs	r2, #24
 8002f6e:	189b      	adds	r3, r3, r2
 8002f70:	19db      	adds	r3, r3, r7
 8002f72:	2201      	movs	r2, #1
 8002f74:	701a      	strb	r2, [r3, #0]
        break;
 8002f76:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d100      	bne.n	8002f80 <UART_SetConfig+0x3e8>
 8002f7e:	e091      	b.n	80030a4 <UART_SetConfig+0x50c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f82:	005a      	lsls	r2, r3, #1
 8002f84:	69fb      	ldr	r3, [r7, #28]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	085b      	lsrs	r3, r3, #1
 8002f8a:	18d2      	adds	r2, r2, r3
 8002f8c:	69fb      	ldr	r3, [r7, #28]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	0019      	movs	r1, r3
 8002f92:	0010      	movs	r0, r2
 8002f94:	f7fd f8ca 	bl	800012c <__udivsi3>
 8002f98:	0003      	movs	r3, r0
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fa0:	2b0f      	cmp	r3, #15
 8002fa2:	d921      	bls.n	8002fe8 <UART_SetConfig+0x450>
 8002fa4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002fa6:	2380      	movs	r3, #128	; 0x80
 8002fa8:	025b      	lsls	r3, r3, #9
 8002faa:	429a      	cmp	r2, r3
 8002fac:	d21c      	bcs.n	8002fe8 <UART_SetConfig+0x450>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fb0:	b29a      	uxth	r2, r3
 8002fb2:	200e      	movs	r0, #14
 8002fb4:	2418      	movs	r4, #24
 8002fb6:	1903      	adds	r3, r0, r4
 8002fb8:	19db      	adds	r3, r3, r7
 8002fba:	210f      	movs	r1, #15
 8002fbc:	438a      	bics	r2, r1
 8002fbe:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fc2:	085b      	lsrs	r3, r3, #1
 8002fc4:	b29b      	uxth	r3, r3
 8002fc6:	2207      	movs	r2, #7
 8002fc8:	4013      	ands	r3, r2
 8002fca:	b299      	uxth	r1, r3
 8002fcc:	1903      	adds	r3, r0, r4
 8002fce:	19db      	adds	r3, r3, r7
 8002fd0:	1902      	adds	r2, r0, r4
 8002fd2:	19d2      	adds	r2, r2, r7
 8002fd4:	8812      	ldrh	r2, [r2, #0]
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	1902      	adds	r2, r0, r4
 8002fe0:	19d2      	adds	r2, r2, r7
 8002fe2:	8812      	ldrh	r2, [r2, #0]
 8002fe4:	60da      	str	r2, [r3, #12]
 8002fe6:	e05d      	b.n	80030a4 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8002fe8:	231a      	movs	r3, #26
 8002fea:	2218      	movs	r2, #24
 8002fec:	189b      	adds	r3, r3, r2
 8002fee:	19db      	adds	r3, r3, r7
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	701a      	strb	r2, [r3, #0]
 8002ff4:	e056      	b.n	80030a4 <UART_SetConfig+0x50c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002ff6:	231b      	movs	r3, #27
 8002ff8:	2218      	movs	r2, #24
 8002ffa:	189b      	adds	r3, r3, r2
 8002ffc:	19db      	adds	r3, r3, r7
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	2b08      	cmp	r3, #8
 8003002:	d822      	bhi.n	800304a <UART_SetConfig+0x4b2>
 8003004:	009a      	lsls	r2, r3, #2
 8003006:	4b33      	ldr	r3, [pc, #204]	; (80030d4 <UART_SetConfig+0x53c>)
 8003008:	18d3      	adds	r3, r2, r3
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800300e:	f7ff fb27 	bl	8002660 <HAL_RCC_GetPCLK1Freq>
 8003012:	0003      	movs	r3, r0
 8003014:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003016:	e021      	b.n	800305c <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003018:	f7ff fb38 	bl	800268c <HAL_RCC_GetPCLK2Freq>
 800301c:	0003      	movs	r3, r0
 800301e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003020:	e01c      	b.n	800305c <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003022:	4b29      	ldr	r3, [pc, #164]	; (80030c8 <UART_SetConfig+0x530>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	2210      	movs	r2, #16
 8003028:	4013      	ands	r3, r2
 800302a:	d002      	beq.n	8003032 <UART_SetConfig+0x49a>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800302c:	4b27      	ldr	r3, [pc, #156]	; (80030cc <UART_SetConfig+0x534>)
 800302e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003030:	e014      	b.n	800305c <UART_SetConfig+0x4c4>
          pclk = (uint32_t) HSI_VALUE;
 8003032:	4b27      	ldr	r3, [pc, #156]	; (80030d0 <UART_SetConfig+0x538>)
 8003034:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003036:	e011      	b.n	800305c <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003038:	f7ff fa62 	bl	8002500 <HAL_RCC_GetSysClockFreq>
 800303c:	0003      	movs	r3, r0
 800303e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003040:	e00c      	b.n	800305c <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003042:	2380      	movs	r3, #128	; 0x80
 8003044:	021b      	lsls	r3, r3, #8
 8003046:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003048:	e008      	b.n	800305c <UART_SetConfig+0x4c4>
      default:
        pclk = 0U;
 800304a:	2300      	movs	r3, #0
 800304c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800304e:	231a      	movs	r3, #26
 8003050:	2218      	movs	r2, #24
 8003052:	189b      	adds	r3, r3, r2
 8003054:	19db      	adds	r3, r3, r7
 8003056:	2201      	movs	r2, #1
 8003058:	701a      	strb	r2, [r3, #0]
        break;
 800305a:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800305c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800305e:	2b00      	cmp	r3, #0
 8003060:	d020      	beq.n	80030a4 <UART_SetConfig+0x50c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	085a      	lsrs	r2, r3, #1
 8003068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800306a:	18d2      	adds	r2, r2, r3
 800306c:	69fb      	ldr	r3, [r7, #28]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	0019      	movs	r1, r3
 8003072:	0010      	movs	r0, r2
 8003074:	f7fd f85a 	bl	800012c <__udivsi3>
 8003078:	0003      	movs	r3, r0
 800307a:	b29b      	uxth	r3, r3
 800307c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800307e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003080:	2b0f      	cmp	r3, #15
 8003082:	d909      	bls.n	8003098 <UART_SetConfig+0x500>
 8003084:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003086:	2380      	movs	r3, #128	; 0x80
 8003088:	025b      	lsls	r3, r3, #9
 800308a:	429a      	cmp	r2, r3
 800308c:	d204      	bcs.n	8003098 <UART_SetConfig+0x500>
      {
        huart->Instance->BRR = usartdiv;
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003094:	60da      	str	r2, [r3, #12]
 8003096:	e005      	b.n	80030a4 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8003098:	231a      	movs	r3, #26
 800309a:	2218      	movs	r2, #24
 800309c:	189b      	adds	r3, r3, r2
 800309e:	19db      	adds	r3, r3, r7
 80030a0:	2201      	movs	r2, #1
 80030a2:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80030a4:	69fb      	ldr	r3, [r7, #28]
 80030a6:	2200      	movs	r2, #0
 80030a8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	2200      	movs	r2, #0
 80030ae:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80030b0:	231a      	movs	r3, #26
 80030b2:	2218      	movs	r2, #24
 80030b4:	189b      	adds	r3, r3, r2
 80030b6:	19db      	adds	r3, r3, r7
 80030b8:	781b      	ldrb	r3, [r3, #0]
}
 80030ba:	0018      	movs	r0, r3
 80030bc:	46bd      	mov	sp, r7
 80030be:	b00e      	add	sp, #56	; 0x38
 80030c0:	bdb0      	pop	{r4, r5, r7, pc}
 80030c2:	46c0      	nop			; (mov r8, r8)
 80030c4:	08003de8 	.word	0x08003de8
 80030c8:	40021000 	.word	0x40021000
 80030cc:	003d0900 	.word	0x003d0900
 80030d0:	00f42400 	.word	0x00f42400
 80030d4:	08003e0c 	.word	0x08003e0c

080030d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b082      	sub	sp, #8
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e4:	2201      	movs	r2, #1
 80030e6:	4013      	ands	r3, r2
 80030e8:	d00b      	beq.n	8003102 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	4a4a      	ldr	r2, [pc, #296]	; (800321c <UART_AdvFeatureConfig+0x144>)
 80030f2:	4013      	ands	r3, r2
 80030f4:	0019      	movs	r1, r3
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	430a      	orrs	r2, r1
 8003100:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003106:	2202      	movs	r2, #2
 8003108:	4013      	ands	r3, r2
 800310a:	d00b      	beq.n	8003124 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	4a43      	ldr	r2, [pc, #268]	; (8003220 <UART_AdvFeatureConfig+0x148>)
 8003114:	4013      	ands	r3, r2
 8003116:	0019      	movs	r1, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	430a      	orrs	r2, r1
 8003122:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003128:	2204      	movs	r2, #4
 800312a:	4013      	ands	r3, r2
 800312c:	d00b      	beq.n	8003146 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	4a3b      	ldr	r2, [pc, #236]	; (8003224 <UART_AdvFeatureConfig+0x14c>)
 8003136:	4013      	ands	r3, r2
 8003138:	0019      	movs	r1, r3
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	430a      	orrs	r2, r1
 8003144:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314a:	2208      	movs	r2, #8
 800314c:	4013      	ands	r3, r2
 800314e:	d00b      	beq.n	8003168 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	4a34      	ldr	r2, [pc, #208]	; (8003228 <UART_AdvFeatureConfig+0x150>)
 8003158:	4013      	ands	r3, r2
 800315a:	0019      	movs	r1, r3
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	430a      	orrs	r2, r1
 8003166:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316c:	2210      	movs	r2, #16
 800316e:	4013      	ands	r3, r2
 8003170:	d00b      	beq.n	800318a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	4a2c      	ldr	r2, [pc, #176]	; (800322c <UART_AdvFeatureConfig+0x154>)
 800317a:	4013      	ands	r3, r2
 800317c:	0019      	movs	r1, r3
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	430a      	orrs	r2, r1
 8003188:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318e:	2220      	movs	r2, #32
 8003190:	4013      	ands	r3, r2
 8003192:	d00b      	beq.n	80031ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	4a25      	ldr	r2, [pc, #148]	; (8003230 <UART_AdvFeatureConfig+0x158>)
 800319c:	4013      	ands	r3, r2
 800319e:	0019      	movs	r1, r3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	430a      	orrs	r2, r1
 80031aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b0:	2240      	movs	r2, #64	; 0x40
 80031b2:	4013      	ands	r3, r2
 80031b4:	d01d      	beq.n	80031f2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	4a1d      	ldr	r2, [pc, #116]	; (8003234 <UART_AdvFeatureConfig+0x15c>)
 80031be:	4013      	ands	r3, r2
 80031c0:	0019      	movs	r1, r3
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	430a      	orrs	r2, r1
 80031cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031d2:	2380      	movs	r3, #128	; 0x80
 80031d4:	035b      	lsls	r3, r3, #13
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d10b      	bne.n	80031f2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	4a15      	ldr	r2, [pc, #84]	; (8003238 <UART_AdvFeatureConfig+0x160>)
 80031e2:	4013      	ands	r3, r2
 80031e4:	0019      	movs	r1, r3
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	430a      	orrs	r2, r1
 80031f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f6:	2280      	movs	r2, #128	; 0x80
 80031f8:	4013      	ands	r3, r2
 80031fa:	d00b      	beq.n	8003214 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	4a0e      	ldr	r2, [pc, #56]	; (800323c <UART_AdvFeatureConfig+0x164>)
 8003204:	4013      	ands	r3, r2
 8003206:	0019      	movs	r1, r3
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	430a      	orrs	r2, r1
 8003212:	605a      	str	r2, [r3, #4]
  }
}
 8003214:	46c0      	nop			; (mov r8, r8)
 8003216:	46bd      	mov	sp, r7
 8003218:	b002      	add	sp, #8
 800321a:	bd80      	pop	{r7, pc}
 800321c:	fffdffff 	.word	0xfffdffff
 8003220:	fffeffff 	.word	0xfffeffff
 8003224:	fffbffff 	.word	0xfffbffff
 8003228:	ffff7fff 	.word	0xffff7fff
 800322c:	ffffefff 	.word	0xffffefff
 8003230:	ffffdfff 	.word	0xffffdfff
 8003234:	ffefffff 	.word	0xffefffff
 8003238:	ff9fffff 	.word	0xff9fffff
 800323c:	fff7ffff 	.word	0xfff7ffff

08003240 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b086      	sub	sp, #24
 8003244:	af02      	add	r7, sp, #8
 8003246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2280      	movs	r2, #128	; 0x80
 800324c:	2100      	movs	r1, #0
 800324e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003250:	f7fd fc86 	bl	8000b60 <HAL_GetTick>
 8003254:	0003      	movs	r3, r0
 8003256:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	2208      	movs	r2, #8
 8003260:	4013      	ands	r3, r2
 8003262:	2b08      	cmp	r3, #8
 8003264:	d10c      	bne.n	8003280 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2280      	movs	r2, #128	; 0x80
 800326a:	0391      	lsls	r1, r2, #14
 800326c:	6878      	ldr	r0, [r7, #4]
 800326e:	4a17      	ldr	r2, [pc, #92]	; (80032cc <UART_CheckIdleState+0x8c>)
 8003270:	9200      	str	r2, [sp, #0]
 8003272:	2200      	movs	r2, #0
 8003274:	f000 f82c 	bl	80032d0 <UART_WaitOnFlagUntilTimeout>
 8003278:	1e03      	subs	r3, r0, #0
 800327a:	d001      	beq.n	8003280 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800327c:	2303      	movs	r3, #3
 800327e:	e021      	b.n	80032c4 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	2204      	movs	r2, #4
 8003288:	4013      	ands	r3, r2
 800328a:	2b04      	cmp	r3, #4
 800328c:	d10c      	bne.n	80032a8 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2280      	movs	r2, #128	; 0x80
 8003292:	03d1      	lsls	r1, r2, #15
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	4a0d      	ldr	r2, [pc, #52]	; (80032cc <UART_CheckIdleState+0x8c>)
 8003298:	9200      	str	r2, [sp, #0]
 800329a:	2200      	movs	r2, #0
 800329c:	f000 f818 	bl	80032d0 <UART_WaitOnFlagUntilTimeout>
 80032a0:	1e03      	subs	r3, r0, #0
 80032a2:	d001      	beq.n	80032a8 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80032a4:	2303      	movs	r3, #3
 80032a6:	e00d      	b.n	80032c4 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2220      	movs	r2, #32
 80032ac:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2220      	movs	r2, #32
 80032b2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2200      	movs	r2, #0
 80032b8:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2274      	movs	r2, #116	; 0x74
 80032be:	2100      	movs	r1, #0
 80032c0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80032c2:	2300      	movs	r3, #0
}
 80032c4:	0018      	movs	r0, r3
 80032c6:	46bd      	mov	sp, r7
 80032c8:	b004      	add	sp, #16
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	01ffffff 	.word	0x01ffffff

080032d0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b094      	sub	sp, #80	; 0x50
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	60f8      	str	r0, [r7, #12]
 80032d8:	60b9      	str	r1, [r7, #8]
 80032da:	603b      	str	r3, [r7, #0]
 80032dc:	1dfb      	adds	r3, r7, #7
 80032de:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032e0:	e0a3      	b.n	800342a <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032e4:	3301      	adds	r3, #1
 80032e6:	d100      	bne.n	80032ea <UART_WaitOnFlagUntilTimeout+0x1a>
 80032e8:	e09f      	b.n	800342a <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032ea:	f7fd fc39 	bl	8000b60 <HAL_GetTick>
 80032ee:	0002      	movs	r2, r0
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	1ad3      	subs	r3, r2, r3
 80032f4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d302      	bcc.n	8003300 <UART_WaitOnFlagUntilTimeout+0x30>
 80032fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d13d      	bne.n	800337c <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003300:	f3ef 8310 	mrs	r3, PRIMASK
 8003304:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003306:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003308:	647b      	str	r3, [r7, #68]	; 0x44
 800330a:	2301      	movs	r3, #1
 800330c:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800330e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003310:	f383 8810 	msr	PRIMASK, r3
}
 8003314:	46c0      	nop			; (mov r8, r8)
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	494c      	ldr	r1, [pc, #304]	; (8003454 <UART_WaitOnFlagUntilTimeout+0x184>)
 8003322:	400a      	ands	r2, r1
 8003324:	601a      	str	r2, [r3, #0]
 8003326:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003328:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800332a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800332c:	f383 8810 	msr	PRIMASK, r3
}
 8003330:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003332:	f3ef 8310 	mrs	r3, PRIMASK
 8003336:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003338:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800333a:	643b      	str	r3, [r7, #64]	; 0x40
 800333c:	2301      	movs	r3, #1
 800333e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003342:	f383 8810 	msr	PRIMASK, r3
}
 8003346:	46c0      	nop			; (mov r8, r8)
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	689a      	ldr	r2, [r3, #8]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	2101      	movs	r1, #1
 8003354:	438a      	bics	r2, r1
 8003356:	609a      	str	r2, [r3, #8]
 8003358:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800335a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800335c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800335e:	f383 8810 	msr	PRIMASK, r3
}
 8003362:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2220      	movs	r2, #32
 8003368:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2220      	movs	r2, #32
 800336e:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2274      	movs	r2, #116	; 0x74
 8003374:	2100      	movs	r1, #0
 8003376:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003378:	2303      	movs	r3, #3
 800337a:	e067      	b.n	800344c <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	2204      	movs	r2, #4
 8003384:	4013      	ands	r3, r2
 8003386:	d050      	beq.n	800342a <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	69da      	ldr	r2, [r3, #28]
 800338e:	2380      	movs	r3, #128	; 0x80
 8003390:	011b      	lsls	r3, r3, #4
 8003392:	401a      	ands	r2, r3
 8003394:	2380      	movs	r3, #128	; 0x80
 8003396:	011b      	lsls	r3, r3, #4
 8003398:	429a      	cmp	r2, r3
 800339a:	d146      	bne.n	800342a <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	2280      	movs	r2, #128	; 0x80
 80033a2:	0112      	lsls	r2, r2, #4
 80033a4:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033a6:	f3ef 8310 	mrs	r3, PRIMASK
 80033aa:	613b      	str	r3, [r7, #16]
  return(result);
 80033ac:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80033ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033b0:	2301      	movs	r3, #1
 80033b2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	f383 8810 	msr	PRIMASK, r3
}
 80033ba:	46c0      	nop			; (mov r8, r8)
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4923      	ldr	r1, [pc, #140]	; (8003454 <UART_WaitOnFlagUntilTimeout+0x184>)
 80033c8:	400a      	ands	r2, r1
 80033ca:	601a      	str	r2, [r3, #0]
 80033cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033ce:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033d0:	69bb      	ldr	r3, [r7, #24]
 80033d2:	f383 8810 	msr	PRIMASK, r3
}
 80033d6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033d8:	f3ef 8310 	mrs	r3, PRIMASK
 80033dc:	61fb      	str	r3, [r7, #28]
  return(result);
 80033de:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80033e2:	2301      	movs	r3, #1
 80033e4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033e6:	6a3b      	ldr	r3, [r7, #32]
 80033e8:	f383 8810 	msr	PRIMASK, r3
}
 80033ec:	46c0      	nop			; (mov r8, r8)
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	689a      	ldr	r2, [r3, #8]
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	2101      	movs	r1, #1
 80033fa:	438a      	bics	r2, r1
 80033fc:	609a      	str	r2, [r3, #8]
 80033fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003400:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003404:	f383 8810 	msr	PRIMASK, r3
}
 8003408:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2220      	movs	r2, #32
 800340e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2220      	movs	r2, #32
 8003414:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2280      	movs	r2, #128	; 0x80
 800341a:	2120      	movs	r1, #32
 800341c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2274      	movs	r2, #116	; 0x74
 8003422:	2100      	movs	r1, #0
 8003424:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003426:	2303      	movs	r3, #3
 8003428:	e010      	b.n	800344c <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	69db      	ldr	r3, [r3, #28]
 8003430:	68ba      	ldr	r2, [r7, #8]
 8003432:	4013      	ands	r3, r2
 8003434:	68ba      	ldr	r2, [r7, #8]
 8003436:	1ad3      	subs	r3, r2, r3
 8003438:	425a      	negs	r2, r3
 800343a:	4153      	adcs	r3, r2
 800343c:	b2db      	uxtb	r3, r3
 800343e:	001a      	movs	r2, r3
 8003440:	1dfb      	adds	r3, r7, #7
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	429a      	cmp	r2, r3
 8003446:	d100      	bne.n	800344a <UART_WaitOnFlagUntilTimeout+0x17a>
 8003448:	e74b      	b.n	80032e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800344a:	2300      	movs	r3, #0
}
 800344c:	0018      	movs	r0, r3
 800344e:	46bd      	mov	sp, r7
 8003450:	b014      	add	sp, #80	; 0x50
 8003452:	bd80      	pop	{r7, pc}
 8003454:	fffffe5f 	.word	0xfffffe5f

08003458 <__errno>:
 8003458:	4b01      	ldr	r3, [pc, #4]	; (8003460 <__errno+0x8>)
 800345a:	6818      	ldr	r0, [r3, #0]
 800345c:	4770      	bx	lr
 800345e:	46c0      	nop			; (mov r8, r8)
 8003460:	2000000c 	.word	0x2000000c

08003464 <__libc_init_array>:
 8003464:	b570      	push	{r4, r5, r6, lr}
 8003466:	2600      	movs	r6, #0
 8003468:	4d0c      	ldr	r5, [pc, #48]	; (800349c <__libc_init_array+0x38>)
 800346a:	4c0d      	ldr	r4, [pc, #52]	; (80034a0 <__libc_init_array+0x3c>)
 800346c:	1b64      	subs	r4, r4, r5
 800346e:	10a4      	asrs	r4, r4, #2
 8003470:	42a6      	cmp	r6, r4
 8003472:	d109      	bne.n	8003488 <__libc_init_array+0x24>
 8003474:	2600      	movs	r6, #0
 8003476:	f000 fc8b 	bl	8003d90 <_init>
 800347a:	4d0a      	ldr	r5, [pc, #40]	; (80034a4 <__libc_init_array+0x40>)
 800347c:	4c0a      	ldr	r4, [pc, #40]	; (80034a8 <__libc_init_array+0x44>)
 800347e:	1b64      	subs	r4, r4, r5
 8003480:	10a4      	asrs	r4, r4, #2
 8003482:	42a6      	cmp	r6, r4
 8003484:	d105      	bne.n	8003492 <__libc_init_array+0x2e>
 8003486:	bd70      	pop	{r4, r5, r6, pc}
 8003488:	00b3      	lsls	r3, r6, #2
 800348a:	58eb      	ldr	r3, [r5, r3]
 800348c:	4798      	blx	r3
 800348e:	3601      	adds	r6, #1
 8003490:	e7ee      	b.n	8003470 <__libc_init_array+0xc>
 8003492:	00b3      	lsls	r3, r6, #2
 8003494:	58eb      	ldr	r3, [r5, r3]
 8003496:	4798      	blx	r3
 8003498:	3601      	adds	r6, #1
 800349a:	e7f2      	b.n	8003482 <__libc_init_array+0x1e>
 800349c:	08003e6c 	.word	0x08003e6c
 80034a0:	08003e6c 	.word	0x08003e6c
 80034a4:	08003e6c 	.word	0x08003e6c
 80034a8:	08003e70 	.word	0x08003e70

080034ac <memset>:
 80034ac:	0003      	movs	r3, r0
 80034ae:	1882      	adds	r2, r0, r2
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d100      	bne.n	80034b6 <memset+0xa>
 80034b4:	4770      	bx	lr
 80034b6:	7019      	strb	r1, [r3, #0]
 80034b8:	3301      	adds	r3, #1
 80034ba:	e7f9      	b.n	80034b0 <memset+0x4>

080034bc <siprintf>:
 80034bc:	b40e      	push	{r1, r2, r3}
 80034be:	b500      	push	{lr}
 80034c0:	490b      	ldr	r1, [pc, #44]	; (80034f0 <siprintf+0x34>)
 80034c2:	b09c      	sub	sp, #112	; 0x70
 80034c4:	ab1d      	add	r3, sp, #116	; 0x74
 80034c6:	9002      	str	r0, [sp, #8]
 80034c8:	9006      	str	r0, [sp, #24]
 80034ca:	9107      	str	r1, [sp, #28]
 80034cc:	9104      	str	r1, [sp, #16]
 80034ce:	4809      	ldr	r0, [pc, #36]	; (80034f4 <siprintf+0x38>)
 80034d0:	4909      	ldr	r1, [pc, #36]	; (80034f8 <siprintf+0x3c>)
 80034d2:	cb04      	ldmia	r3!, {r2}
 80034d4:	9105      	str	r1, [sp, #20]
 80034d6:	6800      	ldr	r0, [r0, #0]
 80034d8:	a902      	add	r1, sp, #8
 80034da:	9301      	str	r3, [sp, #4]
 80034dc:	f000 f870 	bl	80035c0 <_svfiprintf_r>
 80034e0:	2300      	movs	r3, #0
 80034e2:	9a02      	ldr	r2, [sp, #8]
 80034e4:	7013      	strb	r3, [r2, #0]
 80034e6:	b01c      	add	sp, #112	; 0x70
 80034e8:	bc08      	pop	{r3}
 80034ea:	b003      	add	sp, #12
 80034ec:	4718      	bx	r3
 80034ee:	46c0      	nop			; (mov r8, r8)
 80034f0:	7fffffff 	.word	0x7fffffff
 80034f4:	2000000c 	.word	0x2000000c
 80034f8:	ffff0208 	.word	0xffff0208

080034fc <__ssputs_r>:
 80034fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034fe:	688e      	ldr	r6, [r1, #8]
 8003500:	b085      	sub	sp, #20
 8003502:	0007      	movs	r7, r0
 8003504:	000c      	movs	r4, r1
 8003506:	9203      	str	r2, [sp, #12]
 8003508:	9301      	str	r3, [sp, #4]
 800350a:	429e      	cmp	r6, r3
 800350c:	d83c      	bhi.n	8003588 <__ssputs_r+0x8c>
 800350e:	2390      	movs	r3, #144	; 0x90
 8003510:	898a      	ldrh	r2, [r1, #12]
 8003512:	00db      	lsls	r3, r3, #3
 8003514:	421a      	tst	r2, r3
 8003516:	d034      	beq.n	8003582 <__ssputs_r+0x86>
 8003518:	6909      	ldr	r1, [r1, #16]
 800351a:	6823      	ldr	r3, [r4, #0]
 800351c:	6960      	ldr	r0, [r4, #20]
 800351e:	1a5b      	subs	r3, r3, r1
 8003520:	9302      	str	r3, [sp, #8]
 8003522:	2303      	movs	r3, #3
 8003524:	4343      	muls	r3, r0
 8003526:	0fdd      	lsrs	r5, r3, #31
 8003528:	18ed      	adds	r5, r5, r3
 800352a:	9b01      	ldr	r3, [sp, #4]
 800352c:	9802      	ldr	r0, [sp, #8]
 800352e:	3301      	adds	r3, #1
 8003530:	181b      	adds	r3, r3, r0
 8003532:	106d      	asrs	r5, r5, #1
 8003534:	42ab      	cmp	r3, r5
 8003536:	d900      	bls.n	800353a <__ssputs_r+0x3e>
 8003538:	001d      	movs	r5, r3
 800353a:	0553      	lsls	r3, r2, #21
 800353c:	d532      	bpl.n	80035a4 <__ssputs_r+0xa8>
 800353e:	0029      	movs	r1, r5
 8003540:	0038      	movs	r0, r7
 8003542:	f000 fb53 	bl	8003bec <_malloc_r>
 8003546:	1e06      	subs	r6, r0, #0
 8003548:	d109      	bne.n	800355e <__ssputs_r+0x62>
 800354a:	230c      	movs	r3, #12
 800354c:	603b      	str	r3, [r7, #0]
 800354e:	2340      	movs	r3, #64	; 0x40
 8003550:	2001      	movs	r0, #1
 8003552:	89a2      	ldrh	r2, [r4, #12]
 8003554:	4240      	negs	r0, r0
 8003556:	4313      	orrs	r3, r2
 8003558:	81a3      	strh	r3, [r4, #12]
 800355a:	b005      	add	sp, #20
 800355c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800355e:	9a02      	ldr	r2, [sp, #8]
 8003560:	6921      	ldr	r1, [r4, #16]
 8003562:	f000 faba 	bl	8003ada <memcpy>
 8003566:	89a3      	ldrh	r3, [r4, #12]
 8003568:	4a14      	ldr	r2, [pc, #80]	; (80035bc <__ssputs_r+0xc0>)
 800356a:	401a      	ands	r2, r3
 800356c:	2380      	movs	r3, #128	; 0x80
 800356e:	4313      	orrs	r3, r2
 8003570:	81a3      	strh	r3, [r4, #12]
 8003572:	9b02      	ldr	r3, [sp, #8]
 8003574:	6126      	str	r6, [r4, #16]
 8003576:	18f6      	adds	r6, r6, r3
 8003578:	6026      	str	r6, [r4, #0]
 800357a:	6165      	str	r5, [r4, #20]
 800357c:	9e01      	ldr	r6, [sp, #4]
 800357e:	1aed      	subs	r5, r5, r3
 8003580:	60a5      	str	r5, [r4, #8]
 8003582:	9b01      	ldr	r3, [sp, #4]
 8003584:	429e      	cmp	r6, r3
 8003586:	d900      	bls.n	800358a <__ssputs_r+0x8e>
 8003588:	9e01      	ldr	r6, [sp, #4]
 800358a:	0032      	movs	r2, r6
 800358c:	9903      	ldr	r1, [sp, #12]
 800358e:	6820      	ldr	r0, [r4, #0]
 8003590:	f000 faac 	bl	8003aec <memmove>
 8003594:	68a3      	ldr	r3, [r4, #8]
 8003596:	2000      	movs	r0, #0
 8003598:	1b9b      	subs	r3, r3, r6
 800359a:	60a3      	str	r3, [r4, #8]
 800359c:	6823      	ldr	r3, [r4, #0]
 800359e:	199e      	adds	r6, r3, r6
 80035a0:	6026      	str	r6, [r4, #0]
 80035a2:	e7da      	b.n	800355a <__ssputs_r+0x5e>
 80035a4:	002a      	movs	r2, r5
 80035a6:	0038      	movs	r0, r7
 80035a8:	f000 fb96 	bl	8003cd8 <_realloc_r>
 80035ac:	1e06      	subs	r6, r0, #0
 80035ae:	d1e0      	bne.n	8003572 <__ssputs_r+0x76>
 80035b0:	0038      	movs	r0, r7
 80035b2:	6921      	ldr	r1, [r4, #16]
 80035b4:	f000 faae 	bl	8003b14 <_free_r>
 80035b8:	e7c7      	b.n	800354a <__ssputs_r+0x4e>
 80035ba:	46c0      	nop			; (mov r8, r8)
 80035bc:	fffffb7f 	.word	0xfffffb7f

080035c0 <_svfiprintf_r>:
 80035c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035c2:	b0a1      	sub	sp, #132	; 0x84
 80035c4:	9003      	str	r0, [sp, #12]
 80035c6:	001d      	movs	r5, r3
 80035c8:	898b      	ldrh	r3, [r1, #12]
 80035ca:	000f      	movs	r7, r1
 80035cc:	0016      	movs	r6, r2
 80035ce:	061b      	lsls	r3, r3, #24
 80035d0:	d511      	bpl.n	80035f6 <_svfiprintf_r+0x36>
 80035d2:	690b      	ldr	r3, [r1, #16]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d10e      	bne.n	80035f6 <_svfiprintf_r+0x36>
 80035d8:	2140      	movs	r1, #64	; 0x40
 80035da:	f000 fb07 	bl	8003bec <_malloc_r>
 80035de:	6038      	str	r0, [r7, #0]
 80035e0:	6138      	str	r0, [r7, #16]
 80035e2:	2800      	cmp	r0, #0
 80035e4:	d105      	bne.n	80035f2 <_svfiprintf_r+0x32>
 80035e6:	230c      	movs	r3, #12
 80035e8:	9a03      	ldr	r2, [sp, #12]
 80035ea:	3801      	subs	r0, #1
 80035ec:	6013      	str	r3, [r2, #0]
 80035ee:	b021      	add	sp, #132	; 0x84
 80035f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80035f2:	2340      	movs	r3, #64	; 0x40
 80035f4:	617b      	str	r3, [r7, #20]
 80035f6:	2300      	movs	r3, #0
 80035f8:	ac08      	add	r4, sp, #32
 80035fa:	6163      	str	r3, [r4, #20]
 80035fc:	3320      	adds	r3, #32
 80035fe:	7663      	strb	r3, [r4, #25]
 8003600:	3310      	adds	r3, #16
 8003602:	76a3      	strb	r3, [r4, #26]
 8003604:	9507      	str	r5, [sp, #28]
 8003606:	0035      	movs	r5, r6
 8003608:	782b      	ldrb	r3, [r5, #0]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d001      	beq.n	8003612 <_svfiprintf_r+0x52>
 800360e:	2b25      	cmp	r3, #37	; 0x25
 8003610:	d147      	bne.n	80036a2 <_svfiprintf_r+0xe2>
 8003612:	1bab      	subs	r3, r5, r6
 8003614:	9305      	str	r3, [sp, #20]
 8003616:	42b5      	cmp	r5, r6
 8003618:	d00c      	beq.n	8003634 <_svfiprintf_r+0x74>
 800361a:	0032      	movs	r2, r6
 800361c:	0039      	movs	r1, r7
 800361e:	9803      	ldr	r0, [sp, #12]
 8003620:	f7ff ff6c 	bl	80034fc <__ssputs_r>
 8003624:	1c43      	adds	r3, r0, #1
 8003626:	d100      	bne.n	800362a <_svfiprintf_r+0x6a>
 8003628:	e0ae      	b.n	8003788 <_svfiprintf_r+0x1c8>
 800362a:	6962      	ldr	r2, [r4, #20]
 800362c:	9b05      	ldr	r3, [sp, #20]
 800362e:	4694      	mov	ip, r2
 8003630:	4463      	add	r3, ip
 8003632:	6163      	str	r3, [r4, #20]
 8003634:	782b      	ldrb	r3, [r5, #0]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d100      	bne.n	800363c <_svfiprintf_r+0x7c>
 800363a:	e0a5      	b.n	8003788 <_svfiprintf_r+0x1c8>
 800363c:	2201      	movs	r2, #1
 800363e:	2300      	movs	r3, #0
 8003640:	4252      	negs	r2, r2
 8003642:	6062      	str	r2, [r4, #4]
 8003644:	a904      	add	r1, sp, #16
 8003646:	3254      	adds	r2, #84	; 0x54
 8003648:	1852      	adds	r2, r2, r1
 800364a:	1c6e      	adds	r6, r5, #1
 800364c:	6023      	str	r3, [r4, #0]
 800364e:	60e3      	str	r3, [r4, #12]
 8003650:	60a3      	str	r3, [r4, #8]
 8003652:	7013      	strb	r3, [r2, #0]
 8003654:	65a3      	str	r3, [r4, #88]	; 0x58
 8003656:	2205      	movs	r2, #5
 8003658:	7831      	ldrb	r1, [r6, #0]
 800365a:	4854      	ldr	r0, [pc, #336]	; (80037ac <_svfiprintf_r+0x1ec>)
 800365c:	f000 fa32 	bl	8003ac4 <memchr>
 8003660:	1c75      	adds	r5, r6, #1
 8003662:	2800      	cmp	r0, #0
 8003664:	d11f      	bne.n	80036a6 <_svfiprintf_r+0xe6>
 8003666:	6822      	ldr	r2, [r4, #0]
 8003668:	06d3      	lsls	r3, r2, #27
 800366a:	d504      	bpl.n	8003676 <_svfiprintf_r+0xb6>
 800366c:	2353      	movs	r3, #83	; 0x53
 800366e:	a904      	add	r1, sp, #16
 8003670:	185b      	adds	r3, r3, r1
 8003672:	2120      	movs	r1, #32
 8003674:	7019      	strb	r1, [r3, #0]
 8003676:	0713      	lsls	r3, r2, #28
 8003678:	d504      	bpl.n	8003684 <_svfiprintf_r+0xc4>
 800367a:	2353      	movs	r3, #83	; 0x53
 800367c:	a904      	add	r1, sp, #16
 800367e:	185b      	adds	r3, r3, r1
 8003680:	212b      	movs	r1, #43	; 0x2b
 8003682:	7019      	strb	r1, [r3, #0]
 8003684:	7833      	ldrb	r3, [r6, #0]
 8003686:	2b2a      	cmp	r3, #42	; 0x2a
 8003688:	d016      	beq.n	80036b8 <_svfiprintf_r+0xf8>
 800368a:	0035      	movs	r5, r6
 800368c:	2100      	movs	r1, #0
 800368e:	200a      	movs	r0, #10
 8003690:	68e3      	ldr	r3, [r4, #12]
 8003692:	782a      	ldrb	r2, [r5, #0]
 8003694:	1c6e      	adds	r6, r5, #1
 8003696:	3a30      	subs	r2, #48	; 0x30
 8003698:	2a09      	cmp	r2, #9
 800369a:	d94e      	bls.n	800373a <_svfiprintf_r+0x17a>
 800369c:	2900      	cmp	r1, #0
 800369e:	d111      	bne.n	80036c4 <_svfiprintf_r+0x104>
 80036a0:	e017      	b.n	80036d2 <_svfiprintf_r+0x112>
 80036a2:	3501      	adds	r5, #1
 80036a4:	e7b0      	b.n	8003608 <_svfiprintf_r+0x48>
 80036a6:	4b41      	ldr	r3, [pc, #260]	; (80037ac <_svfiprintf_r+0x1ec>)
 80036a8:	6822      	ldr	r2, [r4, #0]
 80036aa:	1ac0      	subs	r0, r0, r3
 80036ac:	2301      	movs	r3, #1
 80036ae:	4083      	lsls	r3, r0
 80036b0:	4313      	orrs	r3, r2
 80036b2:	002e      	movs	r6, r5
 80036b4:	6023      	str	r3, [r4, #0]
 80036b6:	e7ce      	b.n	8003656 <_svfiprintf_r+0x96>
 80036b8:	9b07      	ldr	r3, [sp, #28]
 80036ba:	1d19      	adds	r1, r3, #4
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	9107      	str	r1, [sp, #28]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	db01      	blt.n	80036c8 <_svfiprintf_r+0x108>
 80036c4:	930b      	str	r3, [sp, #44]	; 0x2c
 80036c6:	e004      	b.n	80036d2 <_svfiprintf_r+0x112>
 80036c8:	425b      	negs	r3, r3
 80036ca:	60e3      	str	r3, [r4, #12]
 80036cc:	2302      	movs	r3, #2
 80036ce:	4313      	orrs	r3, r2
 80036d0:	6023      	str	r3, [r4, #0]
 80036d2:	782b      	ldrb	r3, [r5, #0]
 80036d4:	2b2e      	cmp	r3, #46	; 0x2e
 80036d6:	d10a      	bne.n	80036ee <_svfiprintf_r+0x12e>
 80036d8:	786b      	ldrb	r3, [r5, #1]
 80036da:	2b2a      	cmp	r3, #42	; 0x2a
 80036dc:	d135      	bne.n	800374a <_svfiprintf_r+0x18a>
 80036de:	9b07      	ldr	r3, [sp, #28]
 80036e0:	3502      	adds	r5, #2
 80036e2:	1d1a      	adds	r2, r3, #4
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	9207      	str	r2, [sp, #28]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	db2b      	blt.n	8003744 <_svfiprintf_r+0x184>
 80036ec:	9309      	str	r3, [sp, #36]	; 0x24
 80036ee:	4e30      	ldr	r6, [pc, #192]	; (80037b0 <_svfiprintf_r+0x1f0>)
 80036f0:	2203      	movs	r2, #3
 80036f2:	0030      	movs	r0, r6
 80036f4:	7829      	ldrb	r1, [r5, #0]
 80036f6:	f000 f9e5 	bl	8003ac4 <memchr>
 80036fa:	2800      	cmp	r0, #0
 80036fc:	d006      	beq.n	800370c <_svfiprintf_r+0x14c>
 80036fe:	2340      	movs	r3, #64	; 0x40
 8003700:	1b80      	subs	r0, r0, r6
 8003702:	4083      	lsls	r3, r0
 8003704:	6822      	ldr	r2, [r4, #0]
 8003706:	3501      	adds	r5, #1
 8003708:	4313      	orrs	r3, r2
 800370a:	6023      	str	r3, [r4, #0]
 800370c:	7829      	ldrb	r1, [r5, #0]
 800370e:	2206      	movs	r2, #6
 8003710:	4828      	ldr	r0, [pc, #160]	; (80037b4 <_svfiprintf_r+0x1f4>)
 8003712:	1c6e      	adds	r6, r5, #1
 8003714:	7621      	strb	r1, [r4, #24]
 8003716:	f000 f9d5 	bl	8003ac4 <memchr>
 800371a:	2800      	cmp	r0, #0
 800371c:	d03c      	beq.n	8003798 <_svfiprintf_r+0x1d8>
 800371e:	4b26      	ldr	r3, [pc, #152]	; (80037b8 <_svfiprintf_r+0x1f8>)
 8003720:	2b00      	cmp	r3, #0
 8003722:	d125      	bne.n	8003770 <_svfiprintf_r+0x1b0>
 8003724:	2207      	movs	r2, #7
 8003726:	9b07      	ldr	r3, [sp, #28]
 8003728:	3307      	adds	r3, #7
 800372a:	4393      	bics	r3, r2
 800372c:	3308      	adds	r3, #8
 800372e:	9307      	str	r3, [sp, #28]
 8003730:	6963      	ldr	r3, [r4, #20]
 8003732:	9a04      	ldr	r2, [sp, #16]
 8003734:	189b      	adds	r3, r3, r2
 8003736:	6163      	str	r3, [r4, #20]
 8003738:	e765      	b.n	8003606 <_svfiprintf_r+0x46>
 800373a:	4343      	muls	r3, r0
 800373c:	0035      	movs	r5, r6
 800373e:	2101      	movs	r1, #1
 8003740:	189b      	adds	r3, r3, r2
 8003742:	e7a6      	b.n	8003692 <_svfiprintf_r+0xd2>
 8003744:	2301      	movs	r3, #1
 8003746:	425b      	negs	r3, r3
 8003748:	e7d0      	b.n	80036ec <_svfiprintf_r+0x12c>
 800374a:	2300      	movs	r3, #0
 800374c:	200a      	movs	r0, #10
 800374e:	001a      	movs	r2, r3
 8003750:	3501      	adds	r5, #1
 8003752:	6063      	str	r3, [r4, #4]
 8003754:	7829      	ldrb	r1, [r5, #0]
 8003756:	1c6e      	adds	r6, r5, #1
 8003758:	3930      	subs	r1, #48	; 0x30
 800375a:	2909      	cmp	r1, #9
 800375c:	d903      	bls.n	8003766 <_svfiprintf_r+0x1a6>
 800375e:	2b00      	cmp	r3, #0
 8003760:	d0c5      	beq.n	80036ee <_svfiprintf_r+0x12e>
 8003762:	9209      	str	r2, [sp, #36]	; 0x24
 8003764:	e7c3      	b.n	80036ee <_svfiprintf_r+0x12e>
 8003766:	4342      	muls	r2, r0
 8003768:	0035      	movs	r5, r6
 800376a:	2301      	movs	r3, #1
 800376c:	1852      	adds	r2, r2, r1
 800376e:	e7f1      	b.n	8003754 <_svfiprintf_r+0x194>
 8003770:	ab07      	add	r3, sp, #28
 8003772:	9300      	str	r3, [sp, #0]
 8003774:	003a      	movs	r2, r7
 8003776:	0021      	movs	r1, r4
 8003778:	4b10      	ldr	r3, [pc, #64]	; (80037bc <_svfiprintf_r+0x1fc>)
 800377a:	9803      	ldr	r0, [sp, #12]
 800377c:	e000      	b.n	8003780 <_svfiprintf_r+0x1c0>
 800377e:	bf00      	nop
 8003780:	9004      	str	r0, [sp, #16]
 8003782:	9b04      	ldr	r3, [sp, #16]
 8003784:	3301      	adds	r3, #1
 8003786:	d1d3      	bne.n	8003730 <_svfiprintf_r+0x170>
 8003788:	89bb      	ldrh	r3, [r7, #12]
 800378a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800378c:	065b      	lsls	r3, r3, #25
 800378e:	d400      	bmi.n	8003792 <_svfiprintf_r+0x1d2>
 8003790:	e72d      	b.n	80035ee <_svfiprintf_r+0x2e>
 8003792:	2001      	movs	r0, #1
 8003794:	4240      	negs	r0, r0
 8003796:	e72a      	b.n	80035ee <_svfiprintf_r+0x2e>
 8003798:	ab07      	add	r3, sp, #28
 800379a:	9300      	str	r3, [sp, #0]
 800379c:	003a      	movs	r2, r7
 800379e:	0021      	movs	r1, r4
 80037a0:	4b06      	ldr	r3, [pc, #24]	; (80037bc <_svfiprintf_r+0x1fc>)
 80037a2:	9803      	ldr	r0, [sp, #12]
 80037a4:	f000 f87c 	bl	80038a0 <_printf_i>
 80037a8:	e7ea      	b.n	8003780 <_svfiprintf_r+0x1c0>
 80037aa:	46c0      	nop			; (mov r8, r8)
 80037ac:	08003e30 	.word	0x08003e30
 80037b0:	08003e36 	.word	0x08003e36
 80037b4:	08003e3a 	.word	0x08003e3a
 80037b8:	00000000 	.word	0x00000000
 80037bc:	080034fd 	.word	0x080034fd

080037c0 <_printf_common>:
 80037c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80037c2:	0015      	movs	r5, r2
 80037c4:	9301      	str	r3, [sp, #4]
 80037c6:	688a      	ldr	r2, [r1, #8]
 80037c8:	690b      	ldr	r3, [r1, #16]
 80037ca:	000c      	movs	r4, r1
 80037cc:	9000      	str	r0, [sp, #0]
 80037ce:	4293      	cmp	r3, r2
 80037d0:	da00      	bge.n	80037d4 <_printf_common+0x14>
 80037d2:	0013      	movs	r3, r2
 80037d4:	0022      	movs	r2, r4
 80037d6:	602b      	str	r3, [r5, #0]
 80037d8:	3243      	adds	r2, #67	; 0x43
 80037da:	7812      	ldrb	r2, [r2, #0]
 80037dc:	2a00      	cmp	r2, #0
 80037de:	d001      	beq.n	80037e4 <_printf_common+0x24>
 80037e0:	3301      	adds	r3, #1
 80037e2:	602b      	str	r3, [r5, #0]
 80037e4:	6823      	ldr	r3, [r4, #0]
 80037e6:	069b      	lsls	r3, r3, #26
 80037e8:	d502      	bpl.n	80037f0 <_printf_common+0x30>
 80037ea:	682b      	ldr	r3, [r5, #0]
 80037ec:	3302      	adds	r3, #2
 80037ee:	602b      	str	r3, [r5, #0]
 80037f0:	6822      	ldr	r2, [r4, #0]
 80037f2:	2306      	movs	r3, #6
 80037f4:	0017      	movs	r7, r2
 80037f6:	401f      	ands	r7, r3
 80037f8:	421a      	tst	r2, r3
 80037fa:	d027      	beq.n	800384c <_printf_common+0x8c>
 80037fc:	0023      	movs	r3, r4
 80037fe:	3343      	adds	r3, #67	; 0x43
 8003800:	781b      	ldrb	r3, [r3, #0]
 8003802:	1e5a      	subs	r2, r3, #1
 8003804:	4193      	sbcs	r3, r2
 8003806:	6822      	ldr	r2, [r4, #0]
 8003808:	0692      	lsls	r2, r2, #26
 800380a:	d430      	bmi.n	800386e <_printf_common+0xae>
 800380c:	0022      	movs	r2, r4
 800380e:	9901      	ldr	r1, [sp, #4]
 8003810:	9800      	ldr	r0, [sp, #0]
 8003812:	9e08      	ldr	r6, [sp, #32]
 8003814:	3243      	adds	r2, #67	; 0x43
 8003816:	47b0      	blx	r6
 8003818:	1c43      	adds	r3, r0, #1
 800381a:	d025      	beq.n	8003868 <_printf_common+0xa8>
 800381c:	2306      	movs	r3, #6
 800381e:	6820      	ldr	r0, [r4, #0]
 8003820:	682a      	ldr	r2, [r5, #0]
 8003822:	68e1      	ldr	r1, [r4, #12]
 8003824:	2500      	movs	r5, #0
 8003826:	4003      	ands	r3, r0
 8003828:	2b04      	cmp	r3, #4
 800382a:	d103      	bne.n	8003834 <_printf_common+0x74>
 800382c:	1a8d      	subs	r5, r1, r2
 800382e:	43eb      	mvns	r3, r5
 8003830:	17db      	asrs	r3, r3, #31
 8003832:	401d      	ands	r5, r3
 8003834:	68a3      	ldr	r3, [r4, #8]
 8003836:	6922      	ldr	r2, [r4, #16]
 8003838:	4293      	cmp	r3, r2
 800383a:	dd01      	ble.n	8003840 <_printf_common+0x80>
 800383c:	1a9b      	subs	r3, r3, r2
 800383e:	18ed      	adds	r5, r5, r3
 8003840:	2700      	movs	r7, #0
 8003842:	42bd      	cmp	r5, r7
 8003844:	d120      	bne.n	8003888 <_printf_common+0xc8>
 8003846:	2000      	movs	r0, #0
 8003848:	e010      	b.n	800386c <_printf_common+0xac>
 800384a:	3701      	adds	r7, #1
 800384c:	68e3      	ldr	r3, [r4, #12]
 800384e:	682a      	ldr	r2, [r5, #0]
 8003850:	1a9b      	subs	r3, r3, r2
 8003852:	42bb      	cmp	r3, r7
 8003854:	ddd2      	ble.n	80037fc <_printf_common+0x3c>
 8003856:	0022      	movs	r2, r4
 8003858:	2301      	movs	r3, #1
 800385a:	9901      	ldr	r1, [sp, #4]
 800385c:	9800      	ldr	r0, [sp, #0]
 800385e:	9e08      	ldr	r6, [sp, #32]
 8003860:	3219      	adds	r2, #25
 8003862:	47b0      	blx	r6
 8003864:	1c43      	adds	r3, r0, #1
 8003866:	d1f0      	bne.n	800384a <_printf_common+0x8a>
 8003868:	2001      	movs	r0, #1
 800386a:	4240      	negs	r0, r0
 800386c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800386e:	2030      	movs	r0, #48	; 0x30
 8003870:	18e1      	adds	r1, r4, r3
 8003872:	3143      	adds	r1, #67	; 0x43
 8003874:	7008      	strb	r0, [r1, #0]
 8003876:	0021      	movs	r1, r4
 8003878:	1c5a      	adds	r2, r3, #1
 800387a:	3145      	adds	r1, #69	; 0x45
 800387c:	7809      	ldrb	r1, [r1, #0]
 800387e:	18a2      	adds	r2, r4, r2
 8003880:	3243      	adds	r2, #67	; 0x43
 8003882:	3302      	adds	r3, #2
 8003884:	7011      	strb	r1, [r2, #0]
 8003886:	e7c1      	b.n	800380c <_printf_common+0x4c>
 8003888:	0022      	movs	r2, r4
 800388a:	2301      	movs	r3, #1
 800388c:	9901      	ldr	r1, [sp, #4]
 800388e:	9800      	ldr	r0, [sp, #0]
 8003890:	9e08      	ldr	r6, [sp, #32]
 8003892:	321a      	adds	r2, #26
 8003894:	47b0      	blx	r6
 8003896:	1c43      	adds	r3, r0, #1
 8003898:	d0e6      	beq.n	8003868 <_printf_common+0xa8>
 800389a:	3701      	adds	r7, #1
 800389c:	e7d1      	b.n	8003842 <_printf_common+0x82>
	...

080038a0 <_printf_i>:
 80038a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038a2:	b08b      	sub	sp, #44	; 0x2c
 80038a4:	9206      	str	r2, [sp, #24]
 80038a6:	000a      	movs	r2, r1
 80038a8:	3243      	adds	r2, #67	; 0x43
 80038aa:	9307      	str	r3, [sp, #28]
 80038ac:	9005      	str	r0, [sp, #20]
 80038ae:	9204      	str	r2, [sp, #16]
 80038b0:	7e0a      	ldrb	r2, [r1, #24]
 80038b2:	000c      	movs	r4, r1
 80038b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80038b6:	2a78      	cmp	r2, #120	; 0x78
 80038b8:	d807      	bhi.n	80038ca <_printf_i+0x2a>
 80038ba:	2a62      	cmp	r2, #98	; 0x62
 80038bc:	d809      	bhi.n	80038d2 <_printf_i+0x32>
 80038be:	2a00      	cmp	r2, #0
 80038c0:	d100      	bne.n	80038c4 <_printf_i+0x24>
 80038c2:	e0c1      	b.n	8003a48 <_printf_i+0x1a8>
 80038c4:	2a58      	cmp	r2, #88	; 0x58
 80038c6:	d100      	bne.n	80038ca <_printf_i+0x2a>
 80038c8:	e08c      	b.n	80039e4 <_printf_i+0x144>
 80038ca:	0026      	movs	r6, r4
 80038cc:	3642      	adds	r6, #66	; 0x42
 80038ce:	7032      	strb	r2, [r6, #0]
 80038d0:	e022      	b.n	8003918 <_printf_i+0x78>
 80038d2:	0010      	movs	r0, r2
 80038d4:	3863      	subs	r0, #99	; 0x63
 80038d6:	2815      	cmp	r0, #21
 80038d8:	d8f7      	bhi.n	80038ca <_printf_i+0x2a>
 80038da:	f7fc fc1d 	bl	8000118 <__gnu_thumb1_case_shi>
 80038de:	0016      	.short	0x0016
 80038e0:	fff6001f 	.word	0xfff6001f
 80038e4:	fff6fff6 	.word	0xfff6fff6
 80038e8:	001ffff6 	.word	0x001ffff6
 80038ec:	fff6fff6 	.word	0xfff6fff6
 80038f0:	fff6fff6 	.word	0xfff6fff6
 80038f4:	003600a8 	.word	0x003600a8
 80038f8:	fff6009a 	.word	0xfff6009a
 80038fc:	00b9fff6 	.word	0x00b9fff6
 8003900:	0036fff6 	.word	0x0036fff6
 8003904:	fff6fff6 	.word	0xfff6fff6
 8003908:	009e      	.short	0x009e
 800390a:	0026      	movs	r6, r4
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	3642      	adds	r6, #66	; 0x42
 8003910:	1d11      	adds	r1, r2, #4
 8003912:	6019      	str	r1, [r3, #0]
 8003914:	6813      	ldr	r3, [r2, #0]
 8003916:	7033      	strb	r3, [r6, #0]
 8003918:	2301      	movs	r3, #1
 800391a:	e0a7      	b.n	8003a6c <_printf_i+0x1cc>
 800391c:	6808      	ldr	r0, [r1, #0]
 800391e:	6819      	ldr	r1, [r3, #0]
 8003920:	1d0a      	adds	r2, r1, #4
 8003922:	0605      	lsls	r5, r0, #24
 8003924:	d50b      	bpl.n	800393e <_printf_i+0x9e>
 8003926:	680d      	ldr	r5, [r1, #0]
 8003928:	601a      	str	r2, [r3, #0]
 800392a:	2d00      	cmp	r5, #0
 800392c:	da03      	bge.n	8003936 <_printf_i+0x96>
 800392e:	232d      	movs	r3, #45	; 0x2d
 8003930:	9a04      	ldr	r2, [sp, #16]
 8003932:	426d      	negs	r5, r5
 8003934:	7013      	strb	r3, [r2, #0]
 8003936:	4b61      	ldr	r3, [pc, #388]	; (8003abc <_printf_i+0x21c>)
 8003938:	270a      	movs	r7, #10
 800393a:	9303      	str	r3, [sp, #12]
 800393c:	e01b      	b.n	8003976 <_printf_i+0xd6>
 800393e:	680d      	ldr	r5, [r1, #0]
 8003940:	601a      	str	r2, [r3, #0]
 8003942:	0641      	lsls	r1, r0, #25
 8003944:	d5f1      	bpl.n	800392a <_printf_i+0x8a>
 8003946:	b22d      	sxth	r5, r5
 8003948:	e7ef      	b.n	800392a <_printf_i+0x8a>
 800394a:	680d      	ldr	r5, [r1, #0]
 800394c:	6819      	ldr	r1, [r3, #0]
 800394e:	1d08      	adds	r0, r1, #4
 8003950:	6018      	str	r0, [r3, #0]
 8003952:	062e      	lsls	r6, r5, #24
 8003954:	d501      	bpl.n	800395a <_printf_i+0xba>
 8003956:	680d      	ldr	r5, [r1, #0]
 8003958:	e003      	b.n	8003962 <_printf_i+0xc2>
 800395a:	066d      	lsls	r5, r5, #25
 800395c:	d5fb      	bpl.n	8003956 <_printf_i+0xb6>
 800395e:	680d      	ldr	r5, [r1, #0]
 8003960:	b2ad      	uxth	r5, r5
 8003962:	4b56      	ldr	r3, [pc, #344]	; (8003abc <_printf_i+0x21c>)
 8003964:	2708      	movs	r7, #8
 8003966:	9303      	str	r3, [sp, #12]
 8003968:	2a6f      	cmp	r2, #111	; 0x6f
 800396a:	d000      	beq.n	800396e <_printf_i+0xce>
 800396c:	3702      	adds	r7, #2
 800396e:	0023      	movs	r3, r4
 8003970:	2200      	movs	r2, #0
 8003972:	3343      	adds	r3, #67	; 0x43
 8003974:	701a      	strb	r2, [r3, #0]
 8003976:	6863      	ldr	r3, [r4, #4]
 8003978:	60a3      	str	r3, [r4, #8]
 800397a:	2b00      	cmp	r3, #0
 800397c:	db03      	blt.n	8003986 <_printf_i+0xe6>
 800397e:	2204      	movs	r2, #4
 8003980:	6821      	ldr	r1, [r4, #0]
 8003982:	4391      	bics	r1, r2
 8003984:	6021      	str	r1, [r4, #0]
 8003986:	2d00      	cmp	r5, #0
 8003988:	d102      	bne.n	8003990 <_printf_i+0xf0>
 800398a:	9e04      	ldr	r6, [sp, #16]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d00c      	beq.n	80039aa <_printf_i+0x10a>
 8003990:	9e04      	ldr	r6, [sp, #16]
 8003992:	0028      	movs	r0, r5
 8003994:	0039      	movs	r1, r7
 8003996:	f7fc fc4f 	bl	8000238 <__aeabi_uidivmod>
 800399a:	9b03      	ldr	r3, [sp, #12]
 800399c:	3e01      	subs	r6, #1
 800399e:	5c5b      	ldrb	r3, [r3, r1]
 80039a0:	7033      	strb	r3, [r6, #0]
 80039a2:	002b      	movs	r3, r5
 80039a4:	0005      	movs	r5, r0
 80039a6:	429f      	cmp	r7, r3
 80039a8:	d9f3      	bls.n	8003992 <_printf_i+0xf2>
 80039aa:	2f08      	cmp	r7, #8
 80039ac:	d109      	bne.n	80039c2 <_printf_i+0x122>
 80039ae:	6823      	ldr	r3, [r4, #0]
 80039b0:	07db      	lsls	r3, r3, #31
 80039b2:	d506      	bpl.n	80039c2 <_printf_i+0x122>
 80039b4:	6863      	ldr	r3, [r4, #4]
 80039b6:	6922      	ldr	r2, [r4, #16]
 80039b8:	4293      	cmp	r3, r2
 80039ba:	dc02      	bgt.n	80039c2 <_printf_i+0x122>
 80039bc:	2330      	movs	r3, #48	; 0x30
 80039be:	3e01      	subs	r6, #1
 80039c0:	7033      	strb	r3, [r6, #0]
 80039c2:	9b04      	ldr	r3, [sp, #16]
 80039c4:	1b9b      	subs	r3, r3, r6
 80039c6:	6123      	str	r3, [r4, #16]
 80039c8:	9b07      	ldr	r3, [sp, #28]
 80039ca:	0021      	movs	r1, r4
 80039cc:	9300      	str	r3, [sp, #0]
 80039ce:	9805      	ldr	r0, [sp, #20]
 80039d0:	9b06      	ldr	r3, [sp, #24]
 80039d2:	aa09      	add	r2, sp, #36	; 0x24
 80039d4:	f7ff fef4 	bl	80037c0 <_printf_common>
 80039d8:	1c43      	adds	r3, r0, #1
 80039da:	d14c      	bne.n	8003a76 <_printf_i+0x1d6>
 80039dc:	2001      	movs	r0, #1
 80039de:	4240      	negs	r0, r0
 80039e0:	b00b      	add	sp, #44	; 0x2c
 80039e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039e4:	3145      	adds	r1, #69	; 0x45
 80039e6:	700a      	strb	r2, [r1, #0]
 80039e8:	4a34      	ldr	r2, [pc, #208]	; (8003abc <_printf_i+0x21c>)
 80039ea:	9203      	str	r2, [sp, #12]
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	6821      	ldr	r1, [r4, #0]
 80039f0:	ca20      	ldmia	r2!, {r5}
 80039f2:	601a      	str	r2, [r3, #0]
 80039f4:	0608      	lsls	r0, r1, #24
 80039f6:	d516      	bpl.n	8003a26 <_printf_i+0x186>
 80039f8:	07cb      	lsls	r3, r1, #31
 80039fa:	d502      	bpl.n	8003a02 <_printf_i+0x162>
 80039fc:	2320      	movs	r3, #32
 80039fe:	4319      	orrs	r1, r3
 8003a00:	6021      	str	r1, [r4, #0]
 8003a02:	2710      	movs	r7, #16
 8003a04:	2d00      	cmp	r5, #0
 8003a06:	d1b2      	bne.n	800396e <_printf_i+0xce>
 8003a08:	2320      	movs	r3, #32
 8003a0a:	6822      	ldr	r2, [r4, #0]
 8003a0c:	439a      	bics	r2, r3
 8003a0e:	6022      	str	r2, [r4, #0]
 8003a10:	e7ad      	b.n	800396e <_printf_i+0xce>
 8003a12:	2220      	movs	r2, #32
 8003a14:	6809      	ldr	r1, [r1, #0]
 8003a16:	430a      	orrs	r2, r1
 8003a18:	6022      	str	r2, [r4, #0]
 8003a1a:	0022      	movs	r2, r4
 8003a1c:	2178      	movs	r1, #120	; 0x78
 8003a1e:	3245      	adds	r2, #69	; 0x45
 8003a20:	7011      	strb	r1, [r2, #0]
 8003a22:	4a27      	ldr	r2, [pc, #156]	; (8003ac0 <_printf_i+0x220>)
 8003a24:	e7e1      	b.n	80039ea <_printf_i+0x14a>
 8003a26:	0648      	lsls	r0, r1, #25
 8003a28:	d5e6      	bpl.n	80039f8 <_printf_i+0x158>
 8003a2a:	b2ad      	uxth	r5, r5
 8003a2c:	e7e4      	b.n	80039f8 <_printf_i+0x158>
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	680d      	ldr	r5, [r1, #0]
 8003a32:	1d10      	adds	r0, r2, #4
 8003a34:	6949      	ldr	r1, [r1, #20]
 8003a36:	6018      	str	r0, [r3, #0]
 8003a38:	6813      	ldr	r3, [r2, #0]
 8003a3a:	062e      	lsls	r6, r5, #24
 8003a3c:	d501      	bpl.n	8003a42 <_printf_i+0x1a2>
 8003a3e:	6019      	str	r1, [r3, #0]
 8003a40:	e002      	b.n	8003a48 <_printf_i+0x1a8>
 8003a42:	066d      	lsls	r5, r5, #25
 8003a44:	d5fb      	bpl.n	8003a3e <_printf_i+0x19e>
 8003a46:	8019      	strh	r1, [r3, #0]
 8003a48:	2300      	movs	r3, #0
 8003a4a:	9e04      	ldr	r6, [sp, #16]
 8003a4c:	6123      	str	r3, [r4, #16]
 8003a4e:	e7bb      	b.n	80039c8 <_printf_i+0x128>
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	1d11      	adds	r1, r2, #4
 8003a54:	6019      	str	r1, [r3, #0]
 8003a56:	6816      	ldr	r6, [r2, #0]
 8003a58:	2100      	movs	r1, #0
 8003a5a:	0030      	movs	r0, r6
 8003a5c:	6862      	ldr	r2, [r4, #4]
 8003a5e:	f000 f831 	bl	8003ac4 <memchr>
 8003a62:	2800      	cmp	r0, #0
 8003a64:	d001      	beq.n	8003a6a <_printf_i+0x1ca>
 8003a66:	1b80      	subs	r0, r0, r6
 8003a68:	6060      	str	r0, [r4, #4]
 8003a6a:	6863      	ldr	r3, [r4, #4]
 8003a6c:	6123      	str	r3, [r4, #16]
 8003a6e:	2300      	movs	r3, #0
 8003a70:	9a04      	ldr	r2, [sp, #16]
 8003a72:	7013      	strb	r3, [r2, #0]
 8003a74:	e7a8      	b.n	80039c8 <_printf_i+0x128>
 8003a76:	6923      	ldr	r3, [r4, #16]
 8003a78:	0032      	movs	r2, r6
 8003a7a:	9906      	ldr	r1, [sp, #24]
 8003a7c:	9805      	ldr	r0, [sp, #20]
 8003a7e:	9d07      	ldr	r5, [sp, #28]
 8003a80:	47a8      	blx	r5
 8003a82:	1c43      	adds	r3, r0, #1
 8003a84:	d0aa      	beq.n	80039dc <_printf_i+0x13c>
 8003a86:	6823      	ldr	r3, [r4, #0]
 8003a88:	079b      	lsls	r3, r3, #30
 8003a8a:	d415      	bmi.n	8003ab8 <_printf_i+0x218>
 8003a8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a8e:	68e0      	ldr	r0, [r4, #12]
 8003a90:	4298      	cmp	r0, r3
 8003a92:	daa5      	bge.n	80039e0 <_printf_i+0x140>
 8003a94:	0018      	movs	r0, r3
 8003a96:	e7a3      	b.n	80039e0 <_printf_i+0x140>
 8003a98:	0022      	movs	r2, r4
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	9906      	ldr	r1, [sp, #24]
 8003a9e:	9805      	ldr	r0, [sp, #20]
 8003aa0:	9e07      	ldr	r6, [sp, #28]
 8003aa2:	3219      	adds	r2, #25
 8003aa4:	47b0      	blx	r6
 8003aa6:	1c43      	adds	r3, r0, #1
 8003aa8:	d098      	beq.n	80039dc <_printf_i+0x13c>
 8003aaa:	3501      	adds	r5, #1
 8003aac:	68e3      	ldr	r3, [r4, #12]
 8003aae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003ab0:	1a9b      	subs	r3, r3, r2
 8003ab2:	42ab      	cmp	r3, r5
 8003ab4:	dcf0      	bgt.n	8003a98 <_printf_i+0x1f8>
 8003ab6:	e7e9      	b.n	8003a8c <_printf_i+0x1ec>
 8003ab8:	2500      	movs	r5, #0
 8003aba:	e7f7      	b.n	8003aac <_printf_i+0x20c>
 8003abc:	08003e41 	.word	0x08003e41
 8003ac0:	08003e52 	.word	0x08003e52

08003ac4 <memchr>:
 8003ac4:	b2c9      	uxtb	r1, r1
 8003ac6:	1882      	adds	r2, r0, r2
 8003ac8:	4290      	cmp	r0, r2
 8003aca:	d101      	bne.n	8003ad0 <memchr+0xc>
 8003acc:	2000      	movs	r0, #0
 8003ace:	4770      	bx	lr
 8003ad0:	7803      	ldrb	r3, [r0, #0]
 8003ad2:	428b      	cmp	r3, r1
 8003ad4:	d0fb      	beq.n	8003ace <memchr+0xa>
 8003ad6:	3001      	adds	r0, #1
 8003ad8:	e7f6      	b.n	8003ac8 <memchr+0x4>

08003ada <memcpy>:
 8003ada:	2300      	movs	r3, #0
 8003adc:	b510      	push	{r4, lr}
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	d100      	bne.n	8003ae4 <memcpy+0xa>
 8003ae2:	bd10      	pop	{r4, pc}
 8003ae4:	5ccc      	ldrb	r4, [r1, r3]
 8003ae6:	54c4      	strb	r4, [r0, r3]
 8003ae8:	3301      	adds	r3, #1
 8003aea:	e7f8      	b.n	8003ade <memcpy+0x4>

08003aec <memmove>:
 8003aec:	b510      	push	{r4, lr}
 8003aee:	4288      	cmp	r0, r1
 8003af0:	d902      	bls.n	8003af8 <memmove+0xc>
 8003af2:	188b      	adds	r3, r1, r2
 8003af4:	4298      	cmp	r0, r3
 8003af6:	d303      	bcc.n	8003b00 <memmove+0x14>
 8003af8:	2300      	movs	r3, #0
 8003afa:	e007      	b.n	8003b0c <memmove+0x20>
 8003afc:	5c8b      	ldrb	r3, [r1, r2]
 8003afe:	5483      	strb	r3, [r0, r2]
 8003b00:	3a01      	subs	r2, #1
 8003b02:	d2fb      	bcs.n	8003afc <memmove+0x10>
 8003b04:	bd10      	pop	{r4, pc}
 8003b06:	5ccc      	ldrb	r4, [r1, r3]
 8003b08:	54c4      	strb	r4, [r0, r3]
 8003b0a:	3301      	adds	r3, #1
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d1fa      	bne.n	8003b06 <memmove+0x1a>
 8003b10:	e7f8      	b.n	8003b04 <memmove+0x18>
	...

08003b14 <_free_r>:
 8003b14:	b570      	push	{r4, r5, r6, lr}
 8003b16:	0005      	movs	r5, r0
 8003b18:	2900      	cmp	r1, #0
 8003b1a:	d010      	beq.n	8003b3e <_free_r+0x2a>
 8003b1c:	1f0c      	subs	r4, r1, #4
 8003b1e:	6823      	ldr	r3, [r4, #0]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	da00      	bge.n	8003b26 <_free_r+0x12>
 8003b24:	18e4      	adds	r4, r4, r3
 8003b26:	0028      	movs	r0, r5
 8003b28:	f000 f918 	bl	8003d5c <__malloc_lock>
 8003b2c:	4a1d      	ldr	r2, [pc, #116]	; (8003ba4 <_free_r+0x90>)
 8003b2e:	6813      	ldr	r3, [r2, #0]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d105      	bne.n	8003b40 <_free_r+0x2c>
 8003b34:	6063      	str	r3, [r4, #4]
 8003b36:	6014      	str	r4, [r2, #0]
 8003b38:	0028      	movs	r0, r5
 8003b3a:	f000 f917 	bl	8003d6c <__malloc_unlock>
 8003b3e:	bd70      	pop	{r4, r5, r6, pc}
 8003b40:	42a3      	cmp	r3, r4
 8003b42:	d908      	bls.n	8003b56 <_free_r+0x42>
 8003b44:	6821      	ldr	r1, [r4, #0]
 8003b46:	1860      	adds	r0, r4, r1
 8003b48:	4283      	cmp	r3, r0
 8003b4a:	d1f3      	bne.n	8003b34 <_free_r+0x20>
 8003b4c:	6818      	ldr	r0, [r3, #0]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	1841      	adds	r1, r0, r1
 8003b52:	6021      	str	r1, [r4, #0]
 8003b54:	e7ee      	b.n	8003b34 <_free_r+0x20>
 8003b56:	001a      	movs	r2, r3
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d001      	beq.n	8003b62 <_free_r+0x4e>
 8003b5e:	42a3      	cmp	r3, r4
 8003b60:	d9f9      	bls.n	8003b56 <_free_r+0x42>
 8003b62:	6811      	ldr	r1, [r2, #0]
 8003b64:	1850      	adds	r0, r2, r1
 8003b66:	42a0      	cmp	r0, r4
 8003b68:	d10b      	bne.n	8003b82 <_free_r+0x6e>
 8003b6a:	6820      	ldr	r0, [r4, #0]
 8003b6c:	1809      	adds	r1, r1, r0
 8003b6e:	1850      	adds	r0, r2, r1
 8003b70:	6011      	str	r1, [r2, #0]
 8003b72:	4283      	cmp	r3, r0
 8003b74:	d1e0      	bne.n	8003b38 <_free_r+0x24>
 8003b76:	6818      	ldr	r0, [r3, #0]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	1841      	adds	r1, r0, r1
 8003b7c:	6011      	str	r1, [r2, #0]
 8003b7e:	6053      	str	r3, [r2, #4]
 8003b80:	e7da      	b.n	8003b38 <_free_r+0x24>
 8003b82:	42a0      	cmp	r0, r4
 8003b84:	d902      	bls.n	8003b8c <_free_r+0x78>
 8003b86:	230c      	movs	r3, #12
 8003b88:	602b      	str	r3, [r5, #0]
 8003b8a:	e7d5      	b.n	8003b38 <_free_r+0x24>
 8003b8c:	6821      	ldr	r1, [r4, #0]
 8003b8e:	1860      	adds	r0, r4, r1
 8003b90:	4283      	cmp	r3, r0
 8003b92:	d103      	bne.n	8003b9c <_free_r+0x88>
 8003b94:	6818      	ldr	r0, [r3, #0]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	1841      	adds	r1, r0, r1
 8003b9a:	6021      	str	r1, [r4, #0]
 8003b9c:	6063      	str	r3, [r4, #4]
 8003b9e:	6054      	str	r4, [r2, #4]
 8003ba0:	e7ca      	b.n	8003b38 <_free_r+0x24>
 8003ba2:	46c0      	nop			; (mov r8, r8)
 8003ba4:	20000164 	.word	0x20000164

08003ba8 <sbrk_aligned>:
 8003ba8:	b570      	push	{r4, r5, r6, lr}
 8003baa:	4e0f      	ldr	r6, [pc, #60]	; (8003be8 <sbrk_aligned+0x40>)
 8003bac:	000d      	movs	r5, r1
 8003bae:	6831      	ldr	r1, [r6, #0]
 8003bb0:	0004      	movs	r4, r0
 8003bb2:	2900      	cmp	r1, #0
 8003bb4:	d102      	bne.n	8003bbc <sbrk_aligned+0x14>
 8003bb6:	f000 f8bf 	bl	8003d38 <_sbrk_r>
 8003bba:	6030      	str	r0, [r6, #0]
 8003bbc:	0029      	movs	r1, r5
 8003bbe:	0020      	movs	r0, r4
 8003bc0:	f000 f8ba 	bl	8003d38 <_sbrk_r>
 8003bc4:	1c43      	adds	r3, r0, #1
 8003bc6:	d00a      	beq.n	8003bde <sbrk_aligned+0x36>
 8003bc8:	2303      	movs	r3, #3
 8003bca:	1cc5      	adds	r5, r0, #3
 8003bcc:	439d      	bics	r5, r3
 8003bce:	42a8      	cmp	r0, r5
 8003bd0:	d007      	beq.n	8003be2 <sbrk_aligned+0x3a>
 8003bd2:	1a29      	subs	r1, r5, r0
 8003bd4:	0020      	movs	r0, r4
 8003bd6:	f000 f8af 	bl	8003d38 <_sbrk_r>
 8003bda:	1c43      	adds	r3, r0, #1
 8003bdc:	d101      	bne.n	8003be2 <sbrk_aligned+0x3a>
 8003bde:	2501      	movs	r5, #1
 8003be0:	426d      	negs	r5, r5
 8003be2:	0028      	movs	r0, r5
 8003be4:	bd70      	pop	{r4, r5, r6, pc}
 8003be6:	46c0      	nop			; (mov r8, r8)
 8003be8:	20000168 	.word	0x20000168

08003bec <_malloc_r>:
 8003bec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003bee:	2203      	movs	r2, #3
 8003bf0:	1ccb      	adds	r3, r1, #3
 8003bf2:	4393      	bics	r3, r2
 8003bf4:	3308      	adds	r3, #8
 8003bf6:	0006      	movs	r6, r0
 8003bf8:	001f      	movs	r7, r3
 8003bfa:	2b0c      	cmp	r3, #12
 8003bfc:	d232      	bcs.n	8003c64 <_malloc_r+0x78>
 8003bfe:	270c      	movs	r7, #12
 8003c00:	42b9      	cmp	r1, r7
 8003c02:	d831      	bhi.n	8003c68 <_malloc_r+0x7c>
 8003c04:	0030      	movs	r0, r6
 8003c06:	f000 f8a9 	bl	8003d5c <__malloc_lock>
 8003c0a:	4d32      	ldr	r5, [pc, #200]	; (8003cd4 <_malloc_r+0xe8>)
 8003c0c:	682b      	ldr	r3, [r5, #0]
 8003c0e:	001c      	movs	r4, r3
 8003c10:	2c00      	cmp	r4, #0
 8003c12:	d12e      	bne.n	8003c72 <_malloc_r+0x86>
 8003c14:	0039      	movs	r1, r7
 8003c16:	0030      	movs	r0, r6
 8003c18:	f7ff ffc6 	bl	8003ba8 <sbrk_aligned>
 8003c1c:	0004      	movs	r4, r0
 8003c1e:	1c43      	adds	r3, r0, #1
 8003c20:	d11e      	bne.n	8003c60 <_malloc_r+0x74>
 8003c22:	682c      	ldr	r4, [r5, #0]
 8003c24:	0025      	movs	r5, r4
 8003c26:	2d00      	cmp	r5, #0
 8003c28:	d14a      	bne.n	8003cc0 <_malloc_r+0xd4>
 8003c2a:	6823      	ldr	r3, [r4, #0]
 8003c2c:	0029      	movs	r1, r5
 8003c2e:	18e3      	adds	r3, r4, r3
 8003c30:	0030      	movs	r0, r6
 8003c32:	9301      	str	r3, [sp, #4]
 8003c34:	f000 f880 	bl	8003d38 <_sbrk_r>
 8003c38:	9b01      	ldr	r3, [sp, #4]
 8003c3a:	4283      	cmp	r3, r0
 8003c3c:	d143      	bne.n	8003cc6 <_malloc_r+0xda>
 8003c3e:	6823      	ldr	r3, [r4, #0]
 8003c40:	3703      	adds	r7, #3
 8003c42:	1aff      	subs	r7, r7, r3
 8003c44:	2303      	movs	r3, #3
 8003c46:	439f      	bics	r7, r3
 8003c48:	3708      	adds	r7, #8
 8003c4a:	2f0c      	cmp	r7, #12
 8003c4c:	d200      	bcs.n	8003c50 <_malloc_r+0x64>
 8003c4e:	270c      	movs	r7, #12
 8003c50:	0039      	movs	r1, r7
 8003c52:	0030      	movs	r0, r6
 8003c54:	f7ff ffa8 	bl	8003ba8 <sbrk_aligned>
 8003c58:	1c43      	adds	r3, r0, #1
 8003c5a:	d034      	beq.n	8003cc6 <_malloc_r+0xda>
 8003c5c:	6823      	ldr	r3, [r4, #0]
 8003c5e:	19df      	adds	r7, r3, r7
 8003c60:	6027      	str	r7, [r4, #0]
 8003c62:	e013      	b.n	8003c8c <_malloc_r+0xa0>
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	dacb      	bge.n	8003c00 <_malloc_r+0x14>
 8003c68:	230c      	movs	r3, #12
 8003c6a:	2500      	movs	r5, #0
 8003c6c:	6033      	str	r3, [r6, #0]
 8003c6e:	0028      	movs	r0, r5
 8003c70:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003c72:	6822      	ldr	r2, [r4, #0]
 8003c74:	1bd1      	subs	r1, r2, r7
 8003c76:	d420      	bmi.n	8003cba <_malloc_r+0xce>
 8003c78:	290b      	cmp	r1, #11
 8003c7a:	d917      	bls.n	8003cac <_malloc_r+0xc0>
 8003c7c:	19e2      	adds	r2, r4, r7
 8003c7e:	6027      	str	r7, [r4, #0]
 8003c80:	42a3      	cmp	r3, r4
 8003c82:	d111      	bne.n	8003ca8 <_malloc_r+0xbc>
 8003c84:	602a      	str	r2, [r5, #0]
 8003c86:	6863      	ldr	r3, [r4, #4]
 8003c88:	6011      	str	r1, [r2, #0]
 8003c8a:	6053      	str	r3, [r2, #4]
 8003c8c:	0030      	movs	r0, r6
 8003c8e:	0025      	movs	r5, r4
 8003c90:	f000 f86c 	bl	8003d6c <__malloc_unlock>
 8003c94:	2207      	movs	r2, #7
 8003c96:	350b      	adds	r5, #11
 8003c98:	1d23      	adds	r3, r4, #4
 8003c9a:	4395      	bics	r5, r2
 8003c9c:	1aea      	subs	r2, r5, r3
 8003c9e:	429d      	cmp	r5, r3
 8003ca0:	d0e5      	beq.n	8003c6e <_malloc_r+0x82>
 8003ca2:	1b5b      	subs	r3, r3, r5
 8003ca4:	50a3      	str	r3, [r4, r2]
 8003ca6:	e7e2      	b.n	8003c6e <_malloc_r+0x82>
 8003ca8:	605a      	str	r2, [r3, #4]
 8003caa:	e7ec      	b.n	8003c86 <_malloc_r+0x9a>
 8003cac:	6862      	ldr	r2, [r4, #4]
 8003cae:	42a3      	cmp	r3, r4
 8003cb0:	d101      	bne.n	8003cb6 <_malloc_r+0xca>
 8003cb2:	602a      	str	r2, [r5, #0]
 8003cb4:	e7ea      	b.n	8003c8c <_malloc_r+0xa0>
 8003cb6:	605a      	str	r2, [r3, #4]
 8003cb8:	e7e8      	b.n	8003c8c <_malloc_r+0xa0>
 8003cba:	0023      	movs	r3, r4
 8003cbc:	6864      	ldr	r4, [r4, #4]
 8003cbe:	e7a7      	b.n	8003c10 <_malloc_r+0x24>
 8003cc0:	002c      	movs	r4, r5
 8003cc2:	686d      	ldr	r5, [r5, #4]
 8003cc4:	e7af      	b.n	8003c26 <_malloc_r+0x3a>
 8003cc6:	230c      	movs	r3, #12
 8003cc8:	0030      	movs	r0, r6
 8003cca:	6033      	str	r3, [r6, #0]
 8003ccc:	f000 f84e 	bl	8003d6c <__malloc_unlock>
 8003cd0:	e7cd      	b.n	8003c6e <_malloc_r+0x82>
 8003cd2:	46c0      	nop			; (mov r8, r8)
 8003cd4:	20000164 	.word	0x20000164

08003cd8 <_realloc_r>:
 8003cd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003cda:	0007      	movs	r7, r0
 8003cdc:	000e      	movs	r6, r1
 8003cde:	0014      	movs	r4, r2
 8003ce0:	2900      	cmp	r1, #0
 8003ce2:	d105      	bne.n	8003cf0 <_realloc_r+0x18>
 8003ce4:	0011      	movs	r1, r2
 8003ce6:	f7ff ff81 	bl	8003bec <_malloc_r>
 8003cea:	0005      	movs	r5, r0
 8003cec:	0028      	movs	r0, r5
 8003cee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003cf0:	2a00      	cmp	r2, #0
 8003cf2:	d103      	bne.n	8003cfc <_realloc_r+0x24>
 8003cf4:	f7ff ff0e 	bl	8003b14 <_free_r>
 8003cf8:	0025      	movs	r5, r4
 8003cfa:	e7f7      	b.n	8003cec <_realloc_r+0x14>
 8003cfc:	f000 f83e 	bl	8003d7c <_malloc_usable_size_r>
 8003d00:	9001      	str	r0, [sp, #4]
 8003d02:	4284      	cmp	r4, r0
 8003d04:	d803      	bhi.n	8003d0e <_realloc_r+0x36>
 8003d06:	0035      	movs	r5, r6
 8003d08:	0843      	lsrs	r3, r0, #1
 8003d0a:	42a3      	cmp	r3, r4
 8003d0c:	d3ee      	bcc.n	8003cec <_realloc_r+0x14>
 8003d0e:	0021      	movs	r1, r4
 8003d10:	0038      	movs	r0, r7
 8003d12:	f7ff ff6b 	bl	8003bec <_malloc_r>
 8003d16:	1e05      	subs	r5, r0, #0
 8003d18:	d0e8      	beq.n	8003cec <_realloc_r+0x14>
 8003d1a:	9b01      	ldr	r3, [sp, #4]
 8003d1c:	0022      	movs	r2, r4
 8003d1e:	429c      	cmp	r4, r3
 8003d20:	d900      	bls.n	8003d24 <_realloc_r+0x4c>
 8003d22:	001a      	movs	r2, r3
 8003d24:	0031      	movs	r1, r6
 8003d26:	0028      	movs	r0, r5
 8003d28:	f7ff fed7 	bl	8003ada <memcpy>
 8003d2c:	0031      	movs	r1, r6
 8003d2e:	0038      	movs	r0, r7
 8003d30:	f7ff fef0 	bl	8003b14 <_free_r>
 8003d34:	e7da      	b.n	8003cec <_realloc_r+0x14>
	...

08003d38 <_sbrk_r>:
 8003d38:	2300      	movs	r3, #0
 8003d3a:	b570      	push	{r4, r5, r6, lr}
 8003d3c:	4d06      	ldr	r5, [pc, #24]	; (8003d58 <_sbrk_r+0x20>)
 8003d3e:	0004      	movs	r4, r0
 8003d40:	0008      	movs	r0, r1
 8003d42:	602b      	str	r3, [r5, #0]
 8003d44:	f7fc fe40 	bl	80009c8 <_sbrk>
 8003d48:	1c43      	adds	r3, r0, #1
 8003d4a:	d103      	bne.n	8003d54 <_sbrk_r+0x1c>
 8003d4c:	682b      	ldr	r3, [r5, #0]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d000      	beq.n	8003d54 <_sbrk_r+0x1c>
 8003d52:	6023      	str	r3, [r4, #0]
 8003d54:	bd70      	pop	{r4, r5, r6, pc}
 8003d56:	46c0      	nop			; (mov r8, r8)
 8003d58:	2000016c 	.word	0x2000016c

08003d5c <__malloc_lock>:
 8003d5c:	b510      	push	{r4, lr}
 8003d5e:	4802      	ldr	r0, [pc, #8]	; (8003d68 <__malloc_lock+0xc>)
 8003d60:	f000 f814 	bl	8003d8c <__retarget_lock_acquire_recursive>
 8003d64:	bd10      	pop	{r4, pc}
 8003d66:	46c0      	nop			; (mov r8, r8)
 8003d68:	20000170 	.word	0x20000170

08003d6c <__malloc_unlock>:
 8003d6c:	b510      	push	{r4, lr}
 8003d6e:	4802      	ldr	r0, [pc, #8]	; (8003d78 <__malloc_unlock+0xc>)
 8003d70:	f000 f80d 	bl	8003d8e <__retarget_lock_release_recursive>
 8003d74:	bd10      	pop	{r4, pc}
 8003d76:	46c0      	nop			; (mov r8, r8)
 8003d78:	20000170 	.word	0x20000170

08003d7c <_malloc_usable_size_r>:
 8003d7c:	1f0b      	subs	r3, r1, #4
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	1f18      	subs	r0, r3, #4
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	da01      	bge.n	8003d8a <_malloc_usable_size_r+0xe>
 8003d86:	580b      	ldr	r3, [r1, r0]
 8003d88:	18c0      	adds	r0, r0, r3
 8003d8a:	4770      	bx	lr

08003d8c <__retarget_lock_acquire_recursive>:
 8003d8c:	4770      	bx	lr

08003d8e <__retarget_lock_release_recursive>:
 8003d8e:	4770      	bx	lr

08003d90 <_init>:
 8003d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d92:	46c0      	nop			; (mov r8, r8)
 8003d94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d96:	bc08      	pop	{r3}
 8003d98:	469e      	mov	lr, r3
 8003d9a:	4770      	bx	lr

08003d9c <_fini>:
 8003d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d9e:	46c0      	nop			; (mov r8, r8)
 8003da0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003da2:	bc08      	pop	{r3}
 8003da4:	469e      	mov	lr, r3
 8003da6:	4770      	bx	lr
